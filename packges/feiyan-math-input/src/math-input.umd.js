(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["math-input"] = factory();
	else
		root["math-input"] = factory();
})((typeof self !== 'undefined' ? self : this), function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "fb15");
/******/ })
/************************************************************************/
/******/ ({

/***/ "00ee":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ "0261":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var expm1 = __webpack_require__("8eb5");

var abs = Math.abs;
var exp = Math.exp;
var E = Math.E;

var FORCED = fails(function () {
  return Math.sinh(-2e-17) != -2e-17;
});

// `Math.sinh` method
// https://tc39.github.io/ecma262/#sec-math.sinh
// V8 near Chromium 38 has a problem with very small numbers
$({ target: 'Math', stat: true, forced: FORCED }, {
  sinh: function sinh(x) {
    return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
  }
});


/***/ }),

/***/ "0481":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var flattenIntoArray = __webpack_require__("a2bf");
var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var toInteger = __webpack_require__("a691");
var arraySpeciesCreate = __webpack_require__("65f0");

// `Array.prototype.flat` method
// https://github.com/tc39/proposal-flatMap
$({ target: 'Array', proto: true }, {
  flat: function flat(/* depthArg = 1 */) {
    var depthArg = arguments.length ? arguments[0] : undefined;
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});


/***/ }),

/***/ "04d3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.blink` method
// https://tc39.github.io/ecma262/#sec-string.prototype.blink
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('blink') }, {
  blink: function blink() {
    return createHTML(this, 'blink', '', '');
  }
});


/***/ }),

/***/ "0538":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__("1c0b");
var isObject = __webpack_require__("861d");

var slice = [].slice;
var factories = {};

var construct = function (C, argsLength, args) {
  if (!(argsLength in factories)) {
    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
  } return factories[argsLength](C, args);
};

// `Function.prototype.bind` method implementation
// https://tc39.github.io/ecma262/#sec-function.prototype.bind
module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = slice.call(arguments, 1);
  var boundFunction = function bound(/* args... */) {
    var args = partArgs.concat(slice.call(arguments));
    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
  };
  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
  return boundFunction;
};


/***/ }),

/***/ "057f":
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__("fc6a");
var nativeGetOwnPropertyNames = __webpack_require__("241c").f;

var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return nativeGetOwnPropertyNames(it);
  } catch (error) {
    return windowNames.slice();
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]'
    ? getWindowNames(it)
    : nativeGetOwnPropertyNames(toIndexedObject(it));
};


/***/ }),

/***/ "06cf":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var propertyIsEnumerableModule = __webpack_require__("d1e7");
var createPropertyDescriptor = __webpack_require__("5c6c");
var toIndexedObject = __webpack_require__("fc6a");
var toPrimitive = __webpack_require__("c04e");
var has = __webpack_require__("5135");
var IE8_DOM_DEFINE = __webpack_require__("0cfb");

var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};


/***/ }),

/***/ "07ac":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var $values = __webpack_require__("6f53").values;

// `Object.values` method
// https://tc39.github.io/ecma262/#sec-object.values
$({ target: 'Object', stat: true }, {
  values: function values(O) {
    return $values(O);
  }
});


/***/ }),

/***/ "0ac8":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var expm1 = __webpack_require__("8eb5");

// `Math.expm1` method
// https://tc39.github.io/ecma262/#sec-math.expm1
$({ target: 'Math', stat: true, forced: expm1 != Math.expm1 }, { expm1: expm1 });


/***/ }),

/***/ "0b25":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");
var toLength = __webpack_require__("50c4");

// `ToIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-toindex
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length or index');
  return length;
};


/***/ }),

/***/ "0c47":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var setToStringTag = __webpack_require__("d44e");

// JSON[@@toStringTag] property
// https://tc39.github.io/ecma262/#sec-json-@@tostringtag
setToStringTag(global.JSON, 'JSON', true);


/***/ }),

/***/ "0ccb":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__("50c4");
var repeat = __webpack_require__("1148");
var requireObjectCoercible = __webpack_require__("1d80");

var ceil = Math.ceil;

// `String.prototype.{ padStart, padEnd }` methods implementation
var createMethod = function (IS_END) {
  return function ($this, maxLength, fillString) {
    var S = String(requireObjectCoercible($this));
    var stringLength = S.length;
    var fillStr = fillString === undefined ? ' ' : String(fillString);
    var intMaxLength = toLength(maxLength);
    var fillLen, stringFiller;
    if (intMaxLength <= stringLength || fillStr == '') return S;
    fillLen = intMaxLength - stringLength;
    stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
    return IS_END ? S + stringFiller : stringFiller + S;
  };
};

module.exports = {
  // `String.prototype.padStart` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
  start: createMethod(false),
  // `String.prototype.padEnd` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.padend
  end: createMethod(true)
};


/***/ }),

/***/ "0cfb":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var fails = __webpack_require__("d039");
var createElement = __webpack_require__("cc12");

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "0d03":
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__("6eeb");

var DatePrototype = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var nativeDateToString = DatePrototype[TO_STRING];
var getTime = DatePrototype.getTime;

// `Date.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-date.prototype.tostring
if (new Date(NaN) + '' != INVALID_DATE) {
  redefine(DatePrototype, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? nativeDateToString.call(this) : INVALID_DATE;
  });
}


/***/ }),

/***/ "0d3b":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var wellKnownSymbol = __webpack_require__("b622");
var IS_PURE = __webpack_require__("c430");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = !fails(function () {
  var url = new URL('b?a=1&b=2&c=3', 'http://a');
  var searchParams = url.searchParams;
  var result = '';
  url.pathname = 'c%20d';
  searchParams.forEach(function (value, key) {
    searchParams['delete']('b');
    result += key + value;
  });
  return (IS_PURE && !url.toJSON)
    || !searchParams.sort
    || url.href !== 'http://a/c%20d?a=1&c=3'
    || searchParams.get('c') !== '3'
    || String(new URLSearchParams('?a=1')) !== 'a=1'
    || !searchParams[ITERATOR]
    // throws in Edge
    || new URL('https://a@b').username !== 'a'
    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
    // not punycoded in Edge
    || new URL('http://тест').host !== 'xn--e1aybc'
    // not escaped in Chrome 62-
    || new URL('http://a#б').hash !== '#%D0%B1'
    // fails in Chrome 66-
    || result !== 'a1c3'
    // throws in Safari
    || new URL('http://x', undefined).host !== 'x';
});


/***/ }),

/***/ "0feb":
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "10d1":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("da84");
var redefineAll = __webpack_require__("e2cc");
var InternalMetadataModule = __webpack_require__("f183");
var collection = __webpack_require__("6d61");
var collectionWeak = __webpack_require__("acac");
var isObject = __webpack_require__("861d");
var enforceIternalState = __webpack_require__("69f3").enforce;
var NATIVE_WEAK_MAP = __webpack_require__("7f9a");

var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var isExtensible = Object.isExtensible;
var InternalWeakMap;

var wrapper = function (init) {
  return function WeakMap() {
    return init(this, arguments.length ? arguments[0] : undefined);
  };
};

// `WeakMap` constructor
// https://tc39.github.io/ecma262/#sec-weakmap-constructor
var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak);

// IE11 WeakMap frozen keys fix
// We can't use feature detection because it crash some old IE builds
// https://github.com/zloirock/core-js/issues/485
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
  InternalMetadataModule.REQUIRED = true;
  var WeakMapPrototype = $WeakMap.prototype;
  var nativeDelete = WeakMapPrototype['delete'];
  var nativeHas = WeakMapPrototype.has;
  var nativeGet = WeakMapPrototype.get;
  var nativeSet = WeakMapPrototype.set;
  redefineAll(WeakMapPrototype, {
    'delete': function (key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeDelete.call(this, key) || state.frozen['delete'](key);
      } return nativeDelete.call(this, key);
    },
    has: function has(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas.call(this, key) || state.frozen.has(key);
      } return nativeHas.call(this, key);
    },
    get: function get(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
      } return nativeGet.call(this, key);
    },
    set: function set(key, value) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceIternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
      } else nativeSet.call(this, key, value);
      return this;
    }
  });
}


/***/ }),

/***/ "1148":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__("a691");
var requireObjectCoercible = __webpack_require__("1d80");

// `String.prototype.repeat` method implementation
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
module.exports = ''.repeat || function repeat(count) {
  var str = String(requireObjectCoercible(this));
  var result = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
  return result;
};


/***/ }),

/***/ "1276":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
var isRegExp = __webpack_require__("44e7");
var anObject = __webpack_require__("825a");
var requireObjectCoercible = __webpack_require__("1d80");
var speciesConstructor = __webpack_require__("4840");
var advanceStringIndex = __webpack_require__("8aa5");
var toLength = __webpack_require__("50c4");
var callRegExpExec = __webpack_require__("14c3");
var regexpExec = __webpack_require__("9263");
var fails = __webpack_require__("d039");

var arrayPush = [].push;
var min = Math.min;
var MAX_UINT32 = 0xFFFFFFFF;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

// @@split logic
fixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return nativeSplit.call(string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output.length > lim ? output.slice(0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
}, !SUPPORTS_Y);


/***/ }),

/***/ "129f":
/***/ (function(module, exports) {

// `SameValue` abstract operation
// https://tc39.github.io/ecma262/#sec-samevalue
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),

/***/ "12a8":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var FORCED = __webpack_require__("30a0");
var toObject = __webpack_require__("7b0b");
var aFunction = __webpack_require__("1c0b");
var definePropertyModule = __webpack_require__("9bf2");

// `Object.prototype.__defineGetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__defineGetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __defineGetter__: function __defineGetter__(P, getter) {
      definePropertyModule.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
    }
  });
}


/***/ }),

/***/ "130f":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var global = __webpack_require__("da84");
var task = __webpack_require__("2cf4");

var FORCED = !global.setImmediate || !global.clearImmediate;

// http://w3c.github.io/setImmediate/
$({ global: true, bind: true, enumerable: true, forced: FORCED }, {
  // `setImmediate` method
  // http://w3c.github.io/setImmediate/#si-setImmediate
  setImmediate: task.set,
  // `clearImmediate` method
  // http://w3c.github.io/setImmediate/#si-clearImmediate
  clearImmediate: task.clear
});


/***/ }),

/***/ "131a":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var setPrototypeOf = __webpack_require__("d2bb");

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
$({ target: 'Object', stat: true }, {
  setPrototypeOf: setPrototypeOf
});


/***/ }),

/***/ "1393":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.big` method
// https://tc39.github.io/ecma262/#sec-string.prototype.big
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('big') }, {
  big: function big() {
    return createHTML(this, 'big', '', '');
  }
});


/***/ }),

/***/ "13d5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $reduce = __webpack_require__("d58f").left;
var sloppyArrayMethod = __webpack_require__("b301");

// `Array.prototype.reduce` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
$({ target: 'Array', proto: true, forced: sloppyArrayMethod('reduce') }, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "143c":
/***/ (function(module, exports, __webpack_require__) {

var createTypedArrayConstructor = __webpack_require__("74e8");

// `Int32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int32', function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "145e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toObject = __webpack_require__("7b0b");
var toAbsoluteIndex = __webpack_require__("23cb");
var toLength = __webpack_require__("50c4");

var min = Math.min;

// `Array.prototype.copyWithin` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),

/***/ "14c3":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("c6b6");
var regexpExec = __webpack_require__("9263");

// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }

  if (classof(R) !== 'RegExp') {
    throw TypeError('RegExp#exec called on incompatible receiver');
  }

  return regexpExec.call(R, S);
};



/***/ }),

/***/ "159b":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var DOMIterables = __webpack_require__("fdbc");
var forEach = __webpack_require__("17c2");
var createNonEnumerableProperty = __webpack_require__("9112");

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
}


/***/ }),

/***/ "166a":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable no-new */
var global = __webpack_require__("da84");
var fails = __webpack_require__("d039");
var checkCorrectnessOfIteration = __webpack_require__("1c7e");
var NATIVE_ARRAY_BUFFER_VIEWS = __webpack_require__("ebb5").NATIVE_ARRAY_BUFFER_VIEWS;

var ArrayBuffer = global.ArrayBuffer;
var Int8Array = global.Int8Array;

module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
  Int8Array(1);
}) || !fails(function () {
  new Int8Array(-1);
}) || !checkCorrectnessOfIteration(function (iterable) {
  new Int8Array();
  new Int8Array(null);
  new Int8Array(1.5);
  new Int8Array(iterable);
}, true) || fails(function () {
  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
  return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;
});


/***/ }),

/***/ "170b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var toLength = __webpack_require__("50c4");
var toAbsoluteIndex = __webpack_require__("23cb");
var speciesConstructor = __webpack_require__("4840");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.subarray` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
exportTypedArrayMethod('subarray', function subarray(begin, end) {
  var O = aTypedArray(this);
  var length = O.length;
  var beginIndex = toAbsoluteIndex(begin, length);
  return new (speciesConstructor(O, O.constructor))(
    O.buffer,
    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
    toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex)
  );
});


/***/ }),

/***/ "17c2":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $forEach = __webpack_require__("b727").forEach;
var sloppyArrayMethod = __webpack_require__("b301");

// `Array.prototype.forEach` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
module.exports = sloppyArrayMethod('forEach') ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
} : [].forEach;


/***/ }),

/***/ "182d":
/***/ (function(module, exports, __webpack_require__) {

var toPositiveInteger = __webpack_require__("f8cd");

module.exports = function (it, BYTES) {
  var offset = toPositiveInteger(it);
  if (offset % BYTES) throw RangeError('Wrong offset');
  return offset;
};


/***/ }),

/***/ "18a5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.anchor` method
// https://tc39.github.io/ecma262/#sec-string.prototype.anchor
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('anchor') }, {
  anchor: function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  }
});


/***/ }),

/***/ "1913":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.fontsize` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fontsize
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fontsize') }, {
  fontsize: function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  }
});


/***/ }),

/***/ "197b":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.species` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.species
defineWellKnownSymbol('species');


/***/ }),

/***/ "19aa":
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name) {
  if (!(it instanceof Constructor)) {
    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
  } return it;
};


/***/ }),

/***/ "1be4":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("d066");

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ "1bf2":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var ownKeys = __webpack_require__("56ef");

// `Reflect.ownKeys` method
// https://tc39.github.io/ecma262/#sec-reflect.ownkeys
$({ target: 'Reflect', stat: true }, {
  ownKeys: ownKeys
});


/***/ }),

/***/ "1c0b":
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};


/***/ }),

/***/ "1c7e":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};


/***/ }),

/***/ "1d1c":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var defineProperties = __webpack_require__("37e8");

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {
  defineProperties: defineProperties
});


/***/ }),

/***/ "1d80":
/***/ (function(module, exports) {

// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "1dde":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var wellKnownSymbol = __webpack_require__("b622");
var V8_VERSION = __webpack_require__("60ae");

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};


/***/ }),

/***/ "1e25":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $trimEnd = __webpack_require__("58a8").end;
var forcedStringTrimMethod = __webpack_require__("e070");

var FORCED = forcedStringTrimMethod('trimEnd');

var trimEnd = FORCED ? function trimEnd() {
  return $trimEnd(this);
} : ''.trimEnd;

// `String.prototype.{ trimEnd, trimRight }` methods
// https://github.com/tc39/ecmascript-string-left-right-trim
$({ target: 'String', proto: true, forced: FORCED }, {
  trimEnd: trimEnd,
  trimRight: trimEnd
});


/***/ }),

/***/ "1ec1":
/***/ (function(module, exports) {

var log = Math.log;

// `Math.log1p` method implementation
// https://tc39.github.io/ecma262/#sec-math.log1p
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
};


/***/ }),

/***/ "1fe2":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var collection = __webpack_require__("6d61");
var collectionWeak = __webpack_require__("acac");

// `WeakSet` constructor
// https://tc39.github.io/ecma262/#sec-weakset-constructor
collection('WeakSet', function (init) {
  return function WeakSet() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionWeak);


/***/ }),

/***/ "20bf":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__("166a");
var exportTypedArrayStaticMethod = __webpack_require__("ebb5").exportTypedArrayStaticMethod;
var typedArrayFrom = __webpack_require__("a078");

// `%TypedArray%.from` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.from
exportTypedArrayStaticMethod('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);


/***/ }),

/***/ "219c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $sort = [].sort;

// `%TypedArray%.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
exportTypedArrayMethod('sort', function sort(comparefn) {
  return $sort.call(aTypedArray(this), comparefn);
});


/***/ }),

/***/ "2266":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var isArrayIteratorMethod = __webpack_require__("e95a");
var toLength = __webpack_require__("50c4");
var bind = __webpack_require__("f8c2");
var getIteratorMethod = __webpack_require__("35a1");
var callWithSafeIterationClosing = __webpack_require__("9bdd");

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
  var boundFunction = bind(fn, that, AS_ENTRIES ? 2 : 1);
  var iterator, iterFn, index, length, result, next, step;

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = toLength(iterable.length); length > index; index++) {
        result = AS_ENTRIES
          ? boundFunction(anObject(step = iterable[index])[0], step[1])
          : boundFunction(iterable[index]);
        if (result && result instanceof Result) return result;
      } return new Result(false);
    }
    iterator = iterFn.call(iterable);
  }

  next = iterator.next;
  while (!(step = next.call(iterator)).done) {
    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
    if (typeof result == 'object' && result && result instanceof Result) return result;
  } return new Result(false);
};

iterate.stop = function (result) {
  return new Result(true, result);
};


/***/ }),

/***/ "2315":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.strike` method
// https://tc39.github.io/ecma262/#sec-string.prototype.strike
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('strike') }, {
  strike: function strike() {
    return createHTML(this, 'strike', '', '');
  }
});


/***/ }),

/***/ "2351":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.split` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.split
defineWellKnownSymbol('split');


/***/ }),

/***/ "23cb":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "23dc":
/***/ (function(module, exports, __webpack_require__) {

var setToStringTag = __webpack_require__("d44e");

// Math[@@toStringTag] property
// https://tc39.github.io/ecma262/#sec-math-@@tostringtag
setToStringTag(Math, 'Math', true);


/***/ }),

/***/ "23e7":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var createNonEnumerableProperty = __webpack_require__("9112");
var redefine = __webpack_require__("6eeb");
var setGlobal = __webpack_require__("ce4e");
var copyConstructorProperties = __webpack_require__("e893");
var isForced = __webpack_require__("94ca");

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "241c":
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__("ca84");
var enumBugKeys = __webpack_require__("7839");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "2532":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var notARegExp = __webpack_require__("5a34");
var requireObjectCoercible = __webpack_require__("1d80");
var correctIsRegExpLogic = __webpack_require__("ab13");

// `String.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-string.prototype.includes
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~String(requireObjectCoercible(this))
      .indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "25a1":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $reduceRight = __webpack_require__("d58f").right;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.reduceRicht` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
exportTypedArrayMethod('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
  return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),

/***/ "25eb":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var parseInt = __webpack_require__("e583");

// `Number.parseInt` method
// https://tc39.github.io/ecma262/#sec-number.parseint
$({ target: 'Number', stat: true, forced: Number.parseInt != parseInt }, {
  parseInt: parseInt
});


/***/ }),

/***/ "25f0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefine = __webpack_require__("6eeb");
var anObject = __webpack_require__("825a");
var fails = __webpack_require__("d039");
var flags = __webpack_require__("ad6d");

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var nativeToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  redefine(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var p = String(R.source);
    var rf = R.flags;
    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
    return '/' + p + '/' + f;
  }, { unsafe: true });
}


/***/ }),

/***/ "2626":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__("d066");
var definePropertyModule = __webpack_require__("9bf2");
var wellKnownSymbol = __webpack_require__("b622");
var DESCRIPTORS = __webpack_require__("83ab");

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};


/***/ }),

/***/ "26e9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var isArray = __webpack_require__("e8b5");

var nativeReverse = [].reverse;
var test = [1, 2];

// `Array.prototype.reverse` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reverse
// fix for Safari 12.0 bug
// https://bugs.webkit.org/show_bug.cgi?id=188794
$({ target: 'Array', proto: true, forced: String(test) === String(test.reverse()) }, {
  reverse: function reverse() {
    // eslint-disable-next-line no-self-assign
    if (isArray(this)) this.length = this.length;
    return nativeReverse.call(this);
  }
});


/***/ }),

/***/ "2954":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var speciesConstructor = __webpack_require__("4840");
var fails = __webpack_require__("d039");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $slice = [].slice;

var FORCED = fails(function () {
  // eslint-disable-next-line no-undef
  new Int8Array(1).slice();
});

// `%TypedArray%.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
exportTypedArrayMethod('slice', function slice(start, end) {
  var list = $slice.call(aTypedArray(this), start, end);
  var C = speciesConstructor(this, this.constructor);
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
}, FORCED);


/***/ }),

/***/ "2a1b":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.match` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.match
defineWellKnownSymbol('match');


/***/ }),

/***/ "2af1":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var sign = __webpack_require__("f748");

// `Math.sign` method
// https://tc39.github.io/ecma262/#sec-math.sign
$({ target: 'Math', stat: true }, {
  sign: sign
});


/***/ }),

/***/ "2b19":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var is = __webpack_require__("129f");

// `Object.is` method
// https://tc39.github.io/ecma262/#sec-object.is
$({ target: 'Object', stat: true }, {
  is: is
});


/***/ }),

/***/ "2b3d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__("3ca3");
var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var USE_NATIVE_URL = __webpack_require__("0d3b");
var global = __webpack_require__("da84");
var defineProperties = __webpack_require__("37e8");
var redefine = __webpack_require__("6eeb");
var anInstance = __webpack_require__("19aa");
var has = __webpack_require__("5135");
var assign = __webpack_require__("60da");
var arrayFrom = __webpack_require__("4df4");
var codeAt = __webpack_require__("6547").codeAt;
var toASCII = __webpack_require__("c98e");
var setToStringTag = __webpack_require__("d44e");
var URLSearchParamsModule = __webpack_require__("9861");
var InternalStateModule = __webpack_require__("69f3");

var NativeURL = global.URL;
var URLSearchParams = URLSearchParamsModule.URLSearchParams;
var getInternalSearchParamsState = URLSearchParamsModule.getState;
var setInternalState = InternalStateModule.set;
var getInternalURLState = InternalStateModule.getterFor('URL');
var floor = Math.floor;
var pow = Math.pow;

var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';

var ALPHA = /[A-Za-z]/;
var ALPHANUMERIC = /[\d+\-.A-Za-z]/;
var DIGIT = /\d/;
var HEX_START = /^(0x|0X)/;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\dA-Fa-f]+$/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
// eslint-disable-next-line no-control-regex
var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
// eslint-disable-next-line no-control-regex
var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
var EOF;

var parseHost = function (url, input) {
  var result, codePoints, index;
  if (input.charAt(0) == '[') {
    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
    result = parseIPv6(input.slice(1, -1));
    if (!result) return INVALID_HOST;
    url.host = result;
  // opaque host
  } else if (!isSpecial(url)) {
    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
    result = '';
    codePoints = arrayFrom(input);
    for (index = 0; index < codePoints.length; index++) {
      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
    }
    url.host = result;
  } else {
    input = toASCII(input);
    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
    result = parseIPv4(input);
    if (result === null) return INVALID_HOST;
    url.host = result;
  }
};

var parseIPv4 = function (input) {
  var parts = input.split('.');
  var partsLength, numbers, index, part, radix, number, ipv4;
  if (parts.length && parts[parts.length - 1] == '') {
    parts.pop();
  }
  partsLength = parts.length;
  if (partsLength > 4) return input;
  numbers = [];
  for (index = 0; index < partsLength; index++) {
    part = parts[index];
    if (part == '') return input;
    radix = 10;
    if (part.length > 1 && part.charAt(0) == '0') {
      radix = HEX_START.test(part) ? 16 : 8;
      part = part.slice(radix == 8 ? 1 : 2);
    }
    if (part === '') {
      number = 0;
    } else {
      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
      number = parseInt(part, radix);
    }
    numbers.push(number);
  }
  for (index = 0; index < partsLength; index++) {
    number = numbers[index];
    if (index == partsLength - 1) {
      if (number >= pow(256, 5 - partsLength)) return null;
    } else if (number > 255) return null;
  }
  ipv4 = numbers.pop();
  for (index = 0; index < numbers.length; index++) {
    ipv4 += numbers[index] * pow(256, 3 - index);
  }
  return ipv4;
};

// eslint-disable-next-line max-statements
var parseIPv6 = function (input) {
  var address = [0, 0, 0, 0, 0, 0, 0, 0];
  var pieceIndex = 0;
  var compress = null;
  var pointer = 0;
  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

  var char = function () {
    return input.charAt(pointer);
  };

  if (char() == ':') {
    if (input.charAt(1) != ':') return;
    pointer += 2;
    pieceIndex++;
    compress = pieceIndex;
  }
  while (char()) {
    if (pieceIndex == 8) return;
    if (char() == ':') {
      if (compress !== null) return;
      pointer++;
      pieceIndex++;
      compress = pieceIndex;
      continue;
    }
    value = length = 0;
    while (length < 4 && HEX.test(char())) {
      value = value * 16 + parseInt(char(), 16);
      pointer++;
      length++;
    }
    if (char() == '.') {
      if (length == 0) return;
      pointer -= length;
      if (pieceIndex > 6) return;
      numbersSeen = 0;
      while (char()) {
        ipv4Piece = null;
        if (numbersSeen > 0) {
          if (char() == '.' && numbersSeen < 4) pointer++;
          else return;
        }
        if (!DIGIT.test(char())) return;
        while (DIGIT.test(char())) {
          number = parseInt(char(), 10);
          if (ipv4Piece === null) ipv4Piece = number;
          else if (ipv4Piece == 0) return;
          else ipv4Piece = ipv4Piece * 10 + number;
          if (ipv4Piece > 255) return;
          pointer++;
        }
        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
        numbersSeen++;
        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
      }
      if (numbersSeen != 4) return;
      break;
    } else if (char() == ':') {
      pointer++;
      if (!char()) return;
    } else if (char()) return;
    address[pieceIndex++] = value;
  }
  if (compress !== null) {
    swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex != 0 && swaps > 0) {
      swap = address[pieceIndex];
      address[pieceIndex--] = address[compress + swaps - 1];
      address[compress + --swaps] = swap;
    }
  } else if (pieceIndex != 8) return;
  return address;
};

var findLongestZeroSequence = function (ipv6) {
  var maxIndex = null;
  var maxLength = 1;
  var currStart = null;
  var currLength = 0;
  var index = 0;
  for (; index < 8; index++) {
    if (ipv6[index] !== 0) {
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      currStart = null;
      currLength = 0;
    } else {
      if (currStart === null) currStart = index;
      ++currLength;
    }
  }
  if (currLength > maxLength) {
    maxIndex = currStart;
    maxLength = currLength;
  }
  return maxIndex;
};

var serializeHost = function (host) {
  var result, index, compress, ignore0;
  // ipv4
  if (typeof host == 'number') {
    result = [];
    for (index = 0; index < 4; index++) {
      result.unshift(host % 256);
      host = floor(host / 256);
    } return result.join('.');
  // ipv6
  } else if (typeof host == 'object') {
    result = '';
    compress = findLongestZeroSequence(host);
    for (index = 0; index < 8; index++) {
      if (ignore0 && host[index] === 0) continue;
      if (ignore0) ignore0 = false;
      if (compress === index) {
        result += index ? ':' : '::';
        ignore0 = true;
      } else {
        result += host[index].toString(16);
        if (index < 7) result += ':';
      }
    }
    return '[' + result + ']';
  } return host;
};

var C0ControlPercentEncodeSet = {};
var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
});
var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
  '#': 1, '?': 1, '{': 1, '}': 1
});
var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
});

var percentEncode = function (char, set) {
  var code = codeAt(char, 0);
  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
};

var specialSchemes = {
  ftp: 21,
  file: null,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

var isSpecial = function (url) {
  return has(specialSchemes, url.scheme);
};

var includesCredentials = function (url) {
  return url.username != '' || url.password != '';
};

var cannotHaveUsernamePasswordPort = function (url) {
  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
};

var isWindowsDriveLetter = function (string, normalized) {
  var second;
  return string.length == 2 && ALPHA.test(string.charAt(0))
    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
};

var startsWithWindowsDriveLetter = function (string) {
  var third;
  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
    string.length == 2 ||
    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
  );
};

var shortenURLsPath = function (url) {
  var path = url.path;
  var pathSize = path.length;
  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
    path.pop();
  }
};

var isSingleDot = function (segment) {
  return segment === '.' || segment.toLowerCase() === '%2e';
};

var isDoubleDot = function (segment) {
  segment = segment.toLowerCase();
  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
};

// States:
var SCHEME_START = {};
var SCHEME = {};
var NO_SCHEME = {};
var SPECIAL_RELATIVE_OR_AUTHORITY = {};
var PATH_OR_AUTHORITY = {};
var RELATIVE = {};
var RELATIVE_SLASH = {};
var SPECIAL_AUTHORITY_SLASHES = {};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
var AUTHORITY = {};
var HOST = {};
var HOSTNAME = {};
var PORT = {};
var FILE = {};
var FILE_SLASH = {};
var FILE_HOST = {};
var PATH_START = {};
var PATH = {};
var CANNOT_BE_A_BASE_URL_PATH = {};
var QUERY = {};
var FRAGMENT = {};

// eslint-disable-next-line max-statements
var parseURL = function (url, input, stateOverride, base) {
  var state = stateOverride || SCHEME_START;
  var pointer = 0;
  var buffer = '';
  var seenAt = false;
  var seenBracket = false;
  var seenPasswordToken = false;
  var codePoints, char, bufferCodePoints, failure;

  if (!stateOverride) {
    url.scheme = '';
    url.username = '';
    url.password = '';
    url.host = null;
    url.port = null;
    url.path = [];
    url.query = null;
    url.fragment = null;
    url.cannotBeABaseURL = false;
    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
  }

  input = input.replace(TAB_AND_NEW_LINE, '');

  codePoints = arrayFrom(input);

  while (pointer <= codePoints.length) {
    char = codePoints[pointer];
    switch (state) {
      case SCHEME_START:
        if (char && ALPHA.test(char)) {
          buffer += char.toLowerCase();
          state = SCHEME;
        } else if (!stateOverride) {
          state = NO_SCHEME;
          continue;
        } else return INVALID_SCHEME;
        break;

      case SCHEME:
        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
          buffer += char.toLowerCase();
        } else if (char == ':') {
          if (stateOverride && (
            (isSpecial(url) != has(specialSchemes, buffer)) ||
            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
            (url.scheme == 'file' && !url.host)
          )) return;
          url.scheme = buffer;
          if (stateOverride) {
            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
            return;
          }
          buffer = '';
          if (url.scheme == 'file') {
            state = FILE;
          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
            state = SPECIAL_RELATIVE_OR_AUTHORITY;
          } else if (isSpecial(url)) {
            state = SPECIAL_AUTHORITY_SLASHES;
          } else if (codePoints[pointer + 1] == '/') {
            state = PATH_OR_AUTHORITY;
            pointer++;
          } else {
            url.cannotBeABaseURL = true;
            url.path.push('');
            state = CANNOT_BE_A_BASE_URL_PATH;
          }
        } else if (!stateOverride) {
          buffer = '';
          state = NO_SCHEME;
          pointer = 0;
          continue;
        } else return INVALID_SCHEME;
        break;

      case NO_SCHEME:
        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
        if (base.cannotBeABaseURL && char == '#') {
          url.scheme = base.scheme;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          url.cannotBeABaseURL = true;
          state = FRAGMENT;
          break;
        }
        state = base.scheme == 'file' ? FILE : RELATIVE;
        continue;

      case SPECIAL_RELATIVE_OR_AUTHORITY:
        if (char == '/' && codePoints[pointer + 1] == '/') {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          pointer++;
        } else {
          state = RELATIVE;
          continue;
        } break;

      case PATH_OR_AUTHORITY:
        if (char == '/') {
          state = AUTHORITY;
          break;
        } else {
          state = PATH;
          continue;
        }

      case RELATIVE:
        url.scheme = base.scheme;
        if (char == EOF) {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
          state = RELATIVE_SLASH;
        } else if (char == '?') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.query = base.query;
          url.fragment = '';
          state = FRAGMENT;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          url.path = base.path.slice();
          url.path.pop();
          state = PATH;
          continue;
        } break;

      case RELATIVE_SLASH:
        if (isSpecial(url) && (char == '/' || char == '\\')) {
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        } else if (char == '/') {
          state = AUTHORITY;
        } else {
          url.username = base.username;
          url.password = base.password;
          url.host = base.host;
          url.port = base.port;
          state = PATH;
          continue;
        } break;

      case SPECIAL_AUTHORITY_SLASHES:
        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
        pointer++;
        break;

      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
        if (char != '/' && char != '\\') {
          state = AUTHORITY;
          continue;
        } break;

      case AUTHORITY:
        if (char == '@') {
          if (seenAt) buffer = '%40' + buffer;
          seenAt = true;
          bufferCodePoints = arrayFrom(buffer);
          for (var i = 0; i < bufferCodePoints.length; i++) {
            var codePoint = bufferCodePoints[i];
            if (codePoint == ':' && !seenPasswordToken) {
              seenPasswordToken = true;
              continue;
            }
            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
            if (seenPasswordToken) url.password += encodedCodePoints;
            else url.username += encodedCodePoints;
          }
          buffer = '';
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (seenAt && buffer == '') return INVALID_AUTHORITY;
          pointer -= arrayFrom(buffer).length + 1;
          buffer = '';
          state = HOST;
        } else buffer += char;
        break;

      case HOST:
      case HOSTNAME:
        if (stateOverride && url.scheme == 'file') {
          state = FILE_HOST;
          continue;
        } else if (char == ':' && !seenBracket) {
          if (buffer == '') return INVALID_HOST;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PORT;
          if (stateOverride == HOSTNAME) return;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url))
        ) {
          if (isSpecial(url) && buffer == '') return INVALID_HOST;
          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
          failure = parseHost(url, buffer);
          if (failure) return failure;
          buffer = '';
          state = PATH_START;
          if (stateOverride) return;
          continue;
        } else {
          if (char == '[') seenBracket = true;
          else if (char == ']') seenBracket = false;
          buffer += char;
        } break;

      case PORT:
        if (DIGIT.test(char)) {
          buffer += char;
        } else if (
          char == EOF || char == '/' || char == '?' || char == '#' ||
          (char == '\\' && isSpecial(url)) ||
          stateOverride
        ) {
          if (buffer != '') {
            var port = parseInt(buffer, 10);
            if (port > 0xFFFF) return INVALID_PORT;
            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
            buffer = '';
          }
          if (stateOverride) return;
          state = PATH_START;
          continue;
        } else return INVALID_PORT;
        break;

      case FILE:
        url.scheme = 'file';
        if (char == '/' || char == '\\') state = FILE_SLASH;
        else if (base && base.scheme == 'file') {
          if (char == EOF) {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
          } else if (char == '?') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.host = base.host;
            url.path = base.path.slice();
            url.query = base.query;
            url.fragment = '';
            state = FRAGMENT;
          } else {
            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
              url.host = base.host;
              url.path = base.path.slice();
              shortenURLsPath(url);
            }
            state = PATH;
            continue;
          }
        } else {
          state = PATH;
          continue;
        } break;

      case FILE_SLASH:
        if (char == '/' || char == '\\') {
          state = FILE_HOST;
          break;
        }
        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
          else url.host = base.host;
        }
        state = PATH;
        continue;

      case FILE_HOST:
        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
          if (!stateOverride && isWindowsDriveLetter(buffer)) {
            state = PATH;
          } else if (buffer == '') {
            url.host = '';
            if (stateOverride) return;
            state = PATH_START;
          } else {
            failure = parseHost(url, buffer);
            if (failure) return failure;
            if (url.host == 'localhost') url.host = '';
            if (stateOverride) return;
            buffer = '';
            state = PATH_START;
          } continue;
        } else buffer += char;
        break;

      case PATH_START:
        if (isSpecial(url)) {
          state = PATH;
          if (char != '/' && char != '\\') continue;
        } else if (!stateOverride && char == '?') {
          url.query = '';
          state = QUERY;
        } else if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          state = PATH;
          if (char != '/') continue;
        } break;

      case PATH:
        if (
          char == EOF || char == '/' ||
          (char == '\\' && isSpecial(url)) ||
          (!stateOverride && (char == '?' || char == '#'))
        ) {
          if (isDoubleDot(buffer)) {
            shortenURLsPath(url);
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else if (isSingleDot(buffer)) {
            if (char != '/' && !(char == '\\' && isSpecial(url))) {
              url.path.push('');
            }
          } else {
            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
              if (url.host) url.host = '';
              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
            }
            url.path.push(buffer);
          }
          buffer = '';
          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
            while (url.path.length > 1 && url.path[0] === '') {
              url.path.shift();
            }
          }
          if (char == '?') {
            url.query = '';
            state = QUERY;
          } else if (char == '#') {
            url.fragment = '';
            state = FRAGMENT;
          }
        } else {
          buffer += percentEncode(char, pathPercentEncodeSet);
        } break;

      case CANNOT_BE_A_BASE_URL_PATH:
        if (char == '?') {
          url.query = '';
          state = QUERY;
        } else if (char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case QUERY:
        if (!stateOverride && char == '#') {
          url.fragment = '';
          state = FRAGMENT;
        } else if (char != EOF) {
          if (char == "'" && isSpecial(url)) url.query += '%27';
          else if (char == '#') url.query += '%23';
          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
        } break;

      case FRAGMENT:
        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
        break;
    }

    pointer++;
  }
};

// `URL` constructor
// https://url.spec.whatwg.org/#url-class
var URLConstructor = function URL(url /* , base */) {
  var that = anInstance(this, URLConstructor, 'URL');
  var base = arguments.length > 1 ? arguments[1] : undefined;
  var urlString = String(url);
  var state = setInternalState(that, { type: 'URL' });
  var baseState, failure;
  if (base !== undefined) {
    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
    else {
      failure = parseURL(baseState = {}, String(base));
      if (failure) throw TypeError(failure);
    }
  }
  failure = parseURL(state, urlString, null, baseState);
  if (failure) throw TypeError(failure);
  var searchParams = state.searchParams = new URLSearchParams();
  var searchParamsState = getInternalSearchParamsState(searchParams);
  searchParamsState.updateSearchParams(state.query);
  searchParamsState.updateURL = function () {
    state.query = String(searchParams) || null;
  };
  if (!DESCRIPTORS) {
    that.href = serializeURL.call(that);
    that.origin = getOrigin.call(that);
    that.protocol = getProtocol.call(that);
    that.username = getUsername.call(that);
    that.password = getPassword.call(that);
    that.host = getHost.call(that);
    that.hostname = getHostname.call(that);
    that.port = getPort.call(that);
    that.pathname = getPathname.call(that);
    that.search = getSearch.call(that);
    that.searchParams = getSearchParams.call(that);
    that.hash = getHash.call(that);
  }
};

var URLPrototype = URLConstructor.prototype;

var serializeURL = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var username = url.username;
  var password = url.password;
  var host = url.host;
  var port = url.port;
  var path = url.path;
  var query = url.query;
  var fragment = url.fragment;
  var output = scheme + ':';
  if (host !== null) {
    output += '//';
    if (includesCredentials(url)) {
      output += username + (password ? ':' + password : '') + '@';
    }
    output += serializeHost(host);
    if (port !== null) output += ':' + port;
  } else if (scheme == 'file') output += '//';
  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
  if (query !== null) output += '?' + query;
  if (fragment !== null) output += '#' + fragment;
  return output;
};

var getOrigin = function () {
  var url = getInternalURLState(this);
  var scheme = url.scheme;
  var port = url.port;
  if (scheme == 'blob') try {
    return new URL(scheme.path[0]).origin;
  } catch (error) {
    return 'null';
  }
  if (scheme == 'file' || !isSpecial(url)) return 'null';
  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
};

var getProtocol = function () {
  return getInternalURLState(this).scheme + ':';
};

var getUsername = function () {
  return getInternalURLState(this).username;
};

var getPassword = function () {
  return getInternalURLState(this).password;
};

var getHost = function () {
  var url = getInternalURLState(this);
  var host = url.host;
  var port = url.port;
  return host === null ? ''
    : port === null ? serializeHost(host)
    : serializeHost(host) + ':' + port;
};

var getHostname = function () {
  var host = getInternalURLState(this).host;
  return host === null ? '' : serializeHost(host);
};

var getPort = function () {
  var port = getInternalURLState(this).port;
  return port === null ? '' : String(port);
};

var getPathname = function () {
  var url = getInternalURLState(this);
  var path = url.path;
  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
};

var getSearch = function () {
  var query = getInternalURLState(this).query;
  return query ? '?' + query : '';
};

var getSearchParams = function () {
  return getInternalURLState(this).searchParams;
};

var getHash = function () {
  var fragment = getInternalURLState(this).fragment;
  return fragment ? '#' + fragment : '';
};

var accessorDescriptor = function (getter, setter) {
  return { get: getter, set: setter, configurable: true, enumerable: true };
};

if (DESCRIPTORS) {
  defineProperties(URLPrototype, {
    // `URL.prototype.href` accessors pair
    // https://url.spec.whatwg.org/#dom-url-href
    href: accessorDescriptor(serializeURL, function (href) {
      var url = getInternalURLState(this);
      var urlString = String(href);
      var failure = parseURL(url, urlString);
      if (failure) throw TypeError(failure);
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.origin` getter
    // https://url.spec.whatwg.org/#dom-url-origin
    origin: accessorDescriptor(getOrigin),
    // `URL.prototype.protocol` accessors pair
    // https://url.spec.whatwg.org/#dom-url-protocol
    protocol: accessorDescriptor(getProtocol, function (protocol) {
      var url = getInternalURLState(this);
      parseURL(url, String(protocol) + ':', SCHEME_START);
    }),
    // `URL.prototype.username` accessors pair
    // https://url.spec.whatwg.org/#dom-url-username
    username: accessorDescriptor(getUsername, function (username) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(username));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.username = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.password` accessors pair
    // https://url.spec.whatwg.org/#dom-url-password
    password: accessorDescriptor(getPassword, function (password) {
      var url = getInternalURLState(this);
      var codePoints = arrayFrom(String(password));
      if (cannotHaveUsernamePasswordPort(url)) return;
      url.password = '';
      for (var i = 0; i < codePoints.length; i++) {
        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
      }
    }),
    // `URL.prototype.host` accessors pair
    // https://url.spec.whatwg.org/#dom-url-host
    host: accessorDescriptor(getHost, function (host) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(host), HOST);
    }),
    // `URL.prototype.hostname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hostname
    hostname: accessorDescriptor(getHostname, function (hostname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      parseURL(url, String(hostname), HOSTNAME);
    }),
    // `URL.prototype.port` accessors pair
    // https://url.spec.whatwg.org/#dom-url-port
    port: accessorDescriptor(getPort, function (port) {
      var url = getInternalURLState(this);
      if (cannotHaveUsernamePasswordPort(url)) return;
      port = String(port);
      if (port == '') url.port = null;
      else parseURL(url, port, PORT);
    }),
    // `URL.prototype.pathname` accessors pair
    // https://url.spec.whatwg.org/#dom-url-pathname
    pathname: accessorDescriptor(getPathname, function (pathname) {
      var url = getInternalURLState(this);
      if (url.cannotBeABaseURL) return;
      url.path = [];
      parseURL(url, pathname + '', PATH_START);
    }),
    // `URL.prototype.search` accessors pair
    // https://url.spec.whatwg.org/#dom-url-search
    search: accessorDescriptor(getSearch, function (search) {
      var url = getInternalURLState(this);
      search = String(search);
      if (search == '') {
        url.query = null;
      } else {
        if ('?' == search.charAt(0)) search = search.slice(1);
        url.query = '';
        parseURL(url, search, QUERY);
      }
      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
    }),
    // `URL.prototype.searchParams` getter
    // https://url.spec.whatwg.org/#dom-url-searchparams
    searchParams: accessorDescriptor(getSearchParams),
    // `URL.prototype.hash` accessors pair
    // https://url.spec.whatwg.org/#dom-url-hash
    hash: accessorDescriptor(getHash, function (hash) {
      var url = getInternalURLState(this);
      hash = String(hash);
      if (hash == '') {
        url.fragment = null;
        return;
      }
      if ('#' == hash.charAt(0)) hash = hash.slice(1);
      url.fragment = '';
      parseURL(url, hash, FRAGMENT);
    })
  });
}

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
redefine(URLPrototype, 'toJSON', function toJSON() {
  return serializeURL.call(this);
}, { enumerable: true });

// `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior
redefine(URLPrototype, 'toString', function toString() {
  return serializeURL.call(this);
}, { enumerable: true });

if (NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL;
  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
  // `URL.createObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
    return nativeCreateObjectURL.apply(NativeURL, arguments);
  });
  // `URL.revokeObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
  // eslint-disable-next-line no-unused-vars
  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
    return nativeRevokeObjectURL.apply(NativeURL, arguments);
  });
}

setToStringTag(URLConstructor, 'URL');

$({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
  URL: URLConstructor
});


/***/ }),

/***/ "2ca0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var toLength = __webpack_require__("50c4");
var notARegExp = __webpack_require__("5a34");
var requireObjectCoercible = __webpack_require__("1d80");
var correctIsRegExpLogic = __webpack_require__("ab13");
var IS_PURE = __webpack_require__("c430");

var nativeStartsWith = ''.startsWith;
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.startsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.startswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = String(requireObjectCoercible(this));
    notARegExp(searchString);
    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return nativeStartsWith
      ? nativeStartsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),

/***/ "2cf4":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var fails = __webpack_require__("d039");
var classof = __webpack_require__("c6b6");
var bind = __webpack_require__("f8c2");
var html = __webpack_require__("1be4");
var createElement = __webpack_require__("cc12");
var IS_IOS = __webpack_require__("b629");

var location = global.location;
var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;

var run = function (id) {
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(id + '', location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (classof(process) == 'process') {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && !fails(post)) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};


/***/ }),

/***/ "30a0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IS_PURE = __webpack_require__("c430");
var global = __webpack_require__("da84");
var fails = __webpack_require__("d039");

// Forced replacement object prototype accessors methods
module.exports = IS_PURE || !fails(function () {
  var key = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, key, function () { /* empty */ });
  delete global[key];
});


/***/ }),

/***/ "3280":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $lastIndexOf = __webpack_require__("e58c");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.lastIndexOf` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
  return $lastIndexOf.apply(aTypedArray(this), arguments);
});


/***/ }),

/***/ "3410":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var toObject = __webpack_require__("7b0b");
var nativeGetPrototypeOf = __webpack_require__("e163");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(it) {
    return nativeGetPrototypeOf(toObject(it));
  }
});



/***/ }),

/***/ "35a1":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("f5df");
var Iterators = __webpack_require__("3f8c");
var wellKnownSymbol = __webpack_require__("b622");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "35b3":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

// `Number.EPSILON` constant
// https://tc39.github.io/ecma262/#sec-number.epsilon
$({ target: 'Number', stat: true }, {
  EPSILON: Math.pow(2, -52)
});


/***/ }),

/***/ "37e8":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var definePropertyModule = __webpack_require__("9bf2");
var anObject = __webpack_require__("825a");
var objectKeys = __webpack_require__("df75");

// `Object.defineProperties` method
// https://tc39.github.io/ecma262/#sec-object.defineproperties
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
  return O;
};


/***/ }),

/***/ "38cf":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var repeat = __webpack_require__("1148");

// `String.prototype.repeat` method
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
$({ target: 'String', proto: true }, {
  repeat: repeat
});


/***/ }),

/***/ "3a7b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $findIndex = __webpack_require__("b727").findIndex;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
exportTypedArrayMethod('findIndex', function findIndex(predicate /* , thisArg */) {
  return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),

/***/ "3bbe":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");

module.exports = function (it) {
  if (!isObject(it) && it !== null) {
    throw TypeError("Can't set " + String(it) + ' as a prototype');
  } return it;
};


/***/ }),

/***/ "3c5d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var toLength = __webpack_require__("50c4");
var toOffset = __webpack_require__("182d");
var toObject = __webpack_require__("7b0b");
var fails = __webpack_require__("d039");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

var FORCED = fails(function () {
  // eslint-disable-next-line no-undef
  new Int8Array(1).set({});
});

// `%TypedArray%.prototype.set` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
exportTypedArrayMethod('set', function set(arrayLike /* , offset */) {
  aTypedArray(this);
  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
  var length = this.length;
  var src = toObject(arrayLike);
  var len = toLength(src.length);
  var index = 0;
  if (len + offset > length) throw RangeError('Wrong length');
  while (index < len) this[offset + index] = src[index++];
}, FORCED);


/***/ }),

/***/ "3ca3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__("6547").charAt;
var InternalStateModule = __webpack_require__("69f3");
var defineIterator = __webpack_require__("7dd0");

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "3ea3":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var sign = __webpack_require__("f748");

var abs = Math.abs;
var pow = Math.pow;

// `Math.cbrt` method
// https://tc39.github.io/ecma262/#sec-math.cbrt
$({ target: 'Math', stat: true }, {
  cbrt: function cbrt(x) {
    return sign(x = +x) * pow(abs(x), 1 / 3);
  }
});


/***/ }),

/***/ "3f3a":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var anObject = __webpack_require__("825a");
var toPrimitive = __webpack_require__("c04e");
var definePropertyModule = __webpack_require__("9bf2");
var fails = __webpack_require__("d039");

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
var ERROR_INSTEAD_OF_FALSE = fails(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(definePropertyModule.f({}, 1, { value: 1 }), 1, { value: 2 });
});

// `Reflect.defineProperty` method
// https://tc39.github.io/ecma262/#sec-reflect.defineproperty
$({ target: 'Reflect', stat: true, forced: ERROR_INSTEAD_OF_FALSE, sham: !DESCRIPTORS }, {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    var key = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      definePropertyModule.f(target, key, attributes);
      return true;
    } catch (error) {
      return false;
    }
  }
});


/***/ }),

/***/ "3f8c":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "3fcc":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $map = __webpack_require__("b727").map;
var speciesConstructor = __webpack_require__("4840");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.map` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
exportTypedArrayMethod('map', function map(mapfn /* , thisArg */) {
  return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
    return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
  });
});


/***/ }),

/***/ "4057":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

var $hypot = Math.hypot;
var abs = Math.abs;
var sqrt = Math.sqrt;

// Chrome 77 bug
// https://bugs.chromium.org/p/v8/issues/detail?id=9546
var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

// `Math.hypot` method
// https://tc39.github.io/ecma262/#sec-math.hypot
$({ target: 'Math', stat: true, forced: BUGGY }, {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * sqrt(sum);
  }
});


/***/ }),

/***/ "4069":
/***/ (function(module, exports, __webpack_require__) {

// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = __webpack_require__("44d2");

addToUnscopables('flat');


/***/ }),

/***/ "408a":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("c6b6");

// `thisNumberValue` abstract operation
// https://tc39.github.io/ecma262/#sec-thisnumbervalue
module.exports = function (value) {
  if (typeof value != 'number' && classof(value) != 'Number') {
    throw TypeError('Incorrect invocation');
  }
  return +value;
};


/***/ }),

/***/ "40d9":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

var floor = Math.floor;
var log = Math.log;
var LOG2E = Math.LOG2E;

// `Math.clz32` method
// https://tc39.github.io/ecma262/#sec-math.clz32
$({ target: 'Math', stat: true }, {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - floor(log(x + 0.5) * LOG2E) : 32;
  }
});


/***/ }),

/***/ "4160":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var forEach = __webpack_require__("17c2");

// `Array.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
$({ target: 'Array', proto: true, forced: [].forEach != forEach }, {
  forEach: forEach
});


/***/ }),

/***/ "428f":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");

module.exports = global;


/***/ }),

/***/ "4312":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_vue_mathlive_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("0feb");
/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_vue_mathlive_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_vue_mathlive_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* unused harmony reexport * */
 /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_vue_mathlive_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "44ad":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var classof = __webpack_require__("c6b6");

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;


/***/ }),

/***/ "44d2":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");
var create = __webpack_require__("7c73");
var definePropertyModule = __webpack_require__("9bf2");

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "44de":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length === 1 ? console.error(a) : console.error(a, b);
  }
};


/***/ }),

/***/ "44e7":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");
var classof = __webpack_require__("c6b6");
var wellKnownSymbol = __webpack_require__("b622");

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.github.io/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};


/***/ }),

/***/ "45fc":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $some = __webpack_require__("b727").some;
var sloppyArrayMethod = __webpack_require__("b301");

// `Array.prototype.some` method
// https://tc39.github.io/ecma262/#sec-array.prototype.some
$({ target: 'Array', proto: true, forced: sloppyArrayMethod('some') }, {
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "466d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
var anObject = __webpack_require__("825a");
var toLength = __webpack_require__("50c4");
var requireObjectCoercible = __webpack_require__("1d80");
var advanceStringIndex = __webpack_require__("8aa5");
var regExpExec = __webpack_require__("14c3");

// @@match logic
fixRegExpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible(this);
      var matcher = regexp == undefined ? undefined : regexp[MATCH];
      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative(nativeMatch, regexp, this);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);

      if (!rx.global) return regExpExec(rx, S);

      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),

/***/ "4840":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var aFunction = __webpack_require__("1c0b");
var wellKnownSymbol = __webpack_require__("b622");

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.github.io/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
};


/***/ }),

/***/ "4930":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  // Chrome 38 Symbol has incorrect toString conversion
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});


/***/ }),

/***/ "498a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $trim = __webpack_require__("58a8").trim;
var forcedStringTrimMethod = __webpack_require__("e070");

// `String.prototype.trim` method
// https://tc39.github.io/ecma262/#sec-string.prototype.trim
$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});


/***/ }),

/***/ "4a9b":
/***/ (function(module, exports, __webpack_require__) {

var createTypedArrayConstructor = __webpack_require__("74e8");

// `Float64Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Float64', function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "4ae1":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var getBuiltIn = __webpack_require__("d066");
var aFunction = __webpack_require__("1c0b");
var anObject = __webpack_require__("825a");
var isObject = __webpack_require__("861d");
var create = __webpack_require__("7c73");
var bind = __webpack_require__("0538");
var fails = __webpack_require__("d039");

var nativeConstruct = getBuiltIn('Reflect', 'construct');

// `Reflect.construct` method
// https://tc39.github.io/ecma262/#sec-reflect.construct
// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  nativeConstruct(function () { /* empty */ });
});
var FORCED = NEW_TARGET_BUG || ARGS_BUG;

$({ target: 'Reflect', stat: true, forced: FORCED, sham: FORCED }, {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),

/***/ "4c53":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.sub` method
// https://tc39.github.io/ecma262/#sec-string.prototype.sub
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sub') }, {
  sub: function sub() {
    return createHTML(this, 'sub', '', '');
  }
});


/***/ }),

/***/ "4d63":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var global = __webpack_require__("da84");
var isForced = __webpack_require__("94ca");
var inheritIfRequired = __webpack_require__("7156");
var defineProperty = __webpack_require__("9bf2").f;
var getOwnPropertyNames = __webpack_require__("241c").f;
var isRegExp = __webpack_require__("44e7");
var getFlags = __webpack_require__("ad6d");
var stickyHelpers = __webpack_require__("9f7f");
var redefine = __webpack_require__("6eeb");
var fails = __webpack_require__("d039");
var setInternalState = __webpack_require__("69f3").set;
var setSpecies = __webpack_require__("2626");
var wellKnownSymbol = __webpack_require__("b622");

var MATCH = wellKnownSymbol('match');
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;

// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

var FORCED = DESCRIPTORS && isForced('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y || fails(function () {
  re2[MATCH] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
})));

// `RegExp` constructor
// https://tc39.github.io/ecma262/#sec-regexp-constructor
if (FORCED) {
  var RegExpWrapper = function RegExp(pattern, flags) {
    var thisIsRegExp = this instanceof RegExpWrapper;
    var patternIsRegExp = isRegExp(pattern);
    var flagsAreUndefined = flags === undefined;
    var sticky;

    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
      return pattern;
    }

    if (CORRECT_NEW) {
      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
    } else if (pattern instanceof RegExpWrapper) {
      if (flagsAreUndefined) flags = getFlags.call(pattern);
      pattern = pattern.source;
    }

    if (UNSUPPORTED_Y) {
      sticky = !!flags && flags.indexOf('y') > -1;
      if (sticky) flags = flags.replace(/y/g, '');
    }

    var result = inheritIfRequired(
      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
      thisIsRegExp ? this : RegExpPrototype,
      RegExpWrapper
    );

    if (UNSUPPORTED_Y && sticky) setInternalState(result, { sticky: sticky });

    return result;
  };
  var proxy = function (key) {
    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
      configurable: true,
      get: function () { return NativeRegExp[key]; },
      set: function (it) { NativeRegExp[key] = it; }
    });
  };
  var keys = getOwnPropertyNames(NativeRegExp);
  var index = 0;
  while (keys.length > index) proxy(keys[index++]);
  RegExpPrototype.constructor = RegExpWrapper;
  RegExpWrapper.prototype = RegExpPrototype;
  redefine(global, 'RegExp', RegExpWrapper);
}

// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
setSpecies('RegExp');


/***/ }),

/***/ "4d64":
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__("fc6a");
var toLength = __webpack_require__("50c4");
var toAbsoluteIndex = __webpack_require__("23cb");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "4d90":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $padStart = __webpack_require__("0ccb").start;
var WEBKIT_BUG = __webpack_require__("699c");

// `String.prototype.padStart` method
// https://tc39.github.io/ecma262/#sec-string.prototype.padstart
$({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "4de4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $filter = __webpack_require__("b727").filter;
var fails = __webpack_require__("d039");
var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
// Edge 14- issue
var USES_TO_LENGTH = HAS_SPECIES_SUPPORT && !fails(function () {
  [].filter.call({ length: -1, 0: 1 }, function (it) { throw it; });
});

// `Array.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "4df4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var bind = __webpack_require__("f8c2");
var toObject = __webpack_require__("7b0b");
var callWithSafeIterationClosing = __webpack_require__("9bdd");
var isArrayIteratorMethod = __webpack_require__("e95a");
var toLength = __webpack_require__("50c4");
var createProperty = __webpack_require__("8418");
var getIteratorMethod = __webpack_require__("35a1");

// `Array.from` method implementation
// https://tc39.github.io/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var C = typeof this == 'function' ? this : Array;
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var index = 0;
  var iteratorMethod = getIteratorMethod(O);
  var length, result, step, iterator, next;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    result = new C();
    for (;!(step = next.call(iterator)).done; index++) {
      createProperty(result, index, mapping
        ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true)
        : step.value
      );
    }
  } else {
    length = toLength(O.length);
    result = new C(length);
    for (;length > index; index++) {
      createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
    }
  }
  result.length = index;
  return result;
};


/***/ }),

/***/ "4e82":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var aFunction = __webpack_require__("1c0b");
var toObject = __webpack_require__("7b0b");
var fails = __webpack_require__("d039");
var sloppyArrayMethod = __webpack_require__("b301");

var test = [];
var nativeSort = test.sort;

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var SLOPPY_METHOD = sloppyArrayMethod('sort');

var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || SLOPPY_METHOD;

// `Array.prototype.sort` method
// https://tc39.github.io/ecma262/#sec-array.prototype.sort
$({ target: 'Array', proto: true, forced: FORCED }, {
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? nativeSort.call(toObject(this))
      : nativeSort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),

/***/ "4ec9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var collection = __webpack_require__("6d61");
var collectionStrong = __webpack_require__("6566");

// `Map` constructor
// https://tc39.github.io/ecma262/#sec-map-objects
module.exports = collection('Map', function (init) {
  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);


/***/ }),

/***/ "4fad":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var $entries = __webpack_require__("6f53").entries;

// `Object.entries` method
// https://tc39.github.io/ecma262/#sec-object.entries
$({ target: 'Object', stat: true }, {
  entries: function entries(O) {
    return $entries(O);
  }
});


/***/ }),

/***/ "50c4":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "5135":
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "51eb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__("825a");
var toPrimitive = __webpack_require__("c04e");

module.exports = function (hint) {
  if (hint !== 'string' && hint !== 'number' && hint !== 'default') {
    throw TypeError('Incorrect hint');
  } return toPrimitive(anObject(this), hint !== 'number');
};


/***/ }),

/***/ "5319":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
var anObject = __webpack_require__("825a");
var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var toInteger = __webpack_require__("a691");
var requireObjectCoercible = __webpack_require__("1d80");
var advanceStringIndex = __webpack_require__("8aa5");
var regExpExec = __webpack_require__("14c3");

var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
      return replacer !== undefined
        ? replacer.call(searchValue, O, replaceValue)
        : nativeReplace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      if (reason.REPLACE_KEEPS_$0 || (typeof replaceValue === 'string' && replaceValue.indexOf('$0') === -1)) {
        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
        if (res.done) return res.value;
      }

      var rx = anObject(regexp);
      var S = String(this);

      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);

      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;

        results.push(result);
        if (!global) break;

        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

  // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return nativeReplace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});


/***/ }),

/***/ "5327":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var log1p = __webpack_require__("1ec1");

var nativeAcosh = Math.acosh;
var log = Math.log;
var sqrt = Math.sqrt;
var LN2 = Math.LN2;

var FORCED = !nativeAcosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  || Math.floor(nativeAcosh(Number.MAX_VALUE)) != 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  || nativeAcosh(Infinity) != Infinity;

// `Math.acosh` method
// https://tc39.github.io/ecma262/#sec-math.acosh
$({ target: 'Math', stat: true, forced: FORCED }, {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? log(x) + LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),

/***/ "5377":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var objectDefinePropertyModule = __webpack_require__("9bf2");
var regExpFlags = __webpack_require__("ad6d");
var UNSUPPORTED_Y = __webpack_require__("9f7f").UNSUPPORTED_Y;

// `RegExp.prototype.flags` getter
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
if (DESCRIPTORS && (/./g.flags != 'g' || UNSUPPORTED_Y)) {
  objectDefinePropertyModule.f(RegExp.prototype, 'flags', {
    configurable: true,
    get: regExpFlags
  });
}


/***/ }),

/***/ "542d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var thisNumberValue = __webpack_require__("408a");

var nativeToPrecision = 1.0.toPrecision;

var FORCED = fails(function () {
  // IE7-
  return nativeToPrecision.call(1, undefined) !== '1';
}) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToPrecision.call({});
});

// `Number.prototype.toPrecision` method
// https://tc39.github.io/ecma262/#sec-number.prototype.toprecision
$({ target: 'Number', proto: true, forced: FORCED }, {
  toPrecision: function toPrecision(precision) {
    return precision === undefined
      ? nativeToPrecision.call(thisNumberValue(this))
      : nativeToPrecision.call(thisNumberValue(this), precision);
  }
});


/***/ }),

/***/ "5692":
/***/ (function(module, exports, __webpack_require__) {

var IS_PURE = __webpack_require__("c430");
var store = __webpack_require__("c6cd");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.6.1',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "56ef":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("d066");
var getOwnPropertyNamesModule = __webpack_require__("241c");
var getOwnPropertySymbolsModule = __webpack_require__("7418");
var anObject = __webpack_require__("825a");

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "583b":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var isInteger = __webpack_require__("5e89");

var abs = Math.abs;

// `Number.isSafeInteger` method
// https://tc39.github.io/ecma262/#sec-number.issafeinteger
$({ target: 'Number', stat: true }, {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
  }
});


/***/ }),

/***/ "5899":
/***/ (function(module, exports) {

// a string of all valid unicode whitespaces
// eslint-disable-next-line max-len
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),

/***/ "58a8":
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__("1d80");
var whitespaces = __webpack_require__("5899");

var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = String(requireObjectCoercible($this));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};


/***/ }),

/***/ "5a34":
/***/ (function(module, exports, __webpack_require__) {

var isRegExp = __webpack_require__("44e7");

module.exports = function (it) {
  if (isRegExp(it)) {
    throw TypeError("The method doesn't accept regular expressions");
  } return it;
};


/***/ }),

/***/ "5bf7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var FORCED = __webpack_require__("30a0");
var toObject = __webpack_require__("7b0b");
var toPrimitive = __webpack_require__("c04e");
var getPrototypeOf = __webpack_require__("e163");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;

// `Object.prototype.__lookupSetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupSetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __lookupSetter__: function __lookupSetter__(P) {
      var O = toObject(this);
      var key = toPrimitive(P, true);
      var desc;
      do {
        if (desc = getOwnPropertyDescriptor(O, key)) return desc.set;
      } while (O = getPrototypeOf(O));
    }
  });
}


/***/ }),

/***/ "5c6c":
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "5cc6":
/***/ (function(module, exports, __webpack_require__) {

var createTypedArrayConstructor = __webpack_require__("74e8");

// `Uint8Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "5d41":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var isObject = __webpack_require__("861d");
var anObject = __webpack_require__("825a");
var has = __webpack_require__("5135");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var getPrototypeOf = __webpack_require__("e163");

// `Reflect.get` method
// https://tc39.github.io/ecma262/#sec-reflect.get
function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var descriptor, prototype;
  if (anObject(target) === receiver) return target[propertyKey];
  if (descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey)) return has(descriptor, 'value')
    ? descriptor.value
    : descriptor.get === undefined
      ? undefined
      : descriptor.get.call(receiver);
  if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);
}

$({ target: 'Reflect', stat: true }, {
  get: get
});


/***/ }),

/***/ "5db7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var flattenIntoArray = __webpack_require__("a2bf");
var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var aFunction = __webpack_require__("1c0b");
var arraySpeciesCreate = __webpack_require__("65f0");

// `Array.prototype.flatMap` method
// https://github.com/tc39/proposal-flatMap
$({ target: 'Array', proto: true }, {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A;
    aFunction(callbackfn);
    A = arraySpeciesCreate(O, 0);
    A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    return A;
  }
});


/***/ }),

/***/ "5ded":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var createProperty = __webpack_require__("8418");

var ISNT_GENERIC = fails(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
});

// `Array.of` method
// https://tc39.github.io/ecma262/#sec-array.of
// WebKit Array.of isn't generic
$({ target: 'Array', stat: true, forced: ISNT_GENERIC }, {
  of: function of(/* ...args */) {
    var index = 0;
    var argumentsLength = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(argumentsLength);
    while (argumentsLength > index) createProperty(result, index, arguments[index++]);
    result.length = argumentsLength;
    return result;
  }
});


/***/ }),

/***/ "5e89":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");

var floor = Math.floor;

// `Number.isInteger` method implementation
// https://tc39.github.io/ecma262/#sec-number.isinteger
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),

/***/ "5f96":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $join = [].join;

// `%TypedArray%.prototype.join` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('join', function join(separator) {
  return $join.apply(aTypedArray(this), arguments);
});


/***/ }),

/***/ "6062":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var collection = __webpack_require__("6d61");
var collectionStrong = __webpack_require__("6566");

// `Set` constructor
// https://tc39.github.io/ecma262/#sec-set-objects
module.exports = collection('Set', function (init) {
  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);


/***/ }),

/***/ "60ae":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var userAgent = __webpack_require__("b39a");

var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  version = match[0] + match[1];
} else if (userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = match[1];
  }
}

module.exports = version && +version;


/***/ }),

/***/ "60bd":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("da84");
var ArrayBufferViewCore = __webpack_require__("ebb5");
var ArrayIterators = __webpack_require__("e260");
var wellKnownSymbol = __webpack_require__("b622");

var ITERATOR = wellKnownSymbol('iterator');
var Uint8Array = global.Uint8Array;
var arrayValues = ArrayIterators.values;
var arrayKeys = ArrayIterators.keys;
var arrayEntries = ArrayIterators.entries;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];

var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

var typedArrayValues = function values() {
  return arrayValues.call(aTypedArray(this));
};

// `%TypedArray%.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
exportTypedArrayMethod('entries', function entries() {
  return arrayEntries.call(aTypedArray(this));
});
// `%TypedArray%.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
exportTypedArrayMethod('keys', function keys() {
  return arrayKeys.call(aTypedArray(this));
});
// `%TypedArray%.prototype.values` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
exportTypedArrayMethod('values', typedArrayValues, !CORRECT_ITER_NAME);
// `%TypedArray%.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);


/***/ }),

/***/ "60da":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__("83ab");
var fails = __webpack_require__("d039");
var objectKeys = __webpack_require__("df75");
var getOwnPropertySymbolsModule = __webpack_require__("7418");
var propertyIsEnumerableModule = __webpack_require__("d1e7");
var toObject = __webpack_require__("7b0b");
var IndexedObject = __webpack_require__("44ad");

var nativeAssign = Object.assign;
var defineProperty = Object.defineProperty;

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
module.exports = !nativeAssign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && nativeAssign({ b: 1 }, nativeAssign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
    }
  } return T;
} : nativeAssign;


/***/ }),

/***/ "621a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("da84");
var DESCRIPTORS = __webpack_require__("83ab");
var NATIVE_ARRAY_BUFFER = __webpack_require__("ebb5").NATIVE_ARRAY_BUFFER;
var createNonEnumerableProperty = __webpack_require__("9112");
var redefineAll = __webpack_require__("e2cc");
var fails = __webpack_require__("d039");
var anInstance = __webpack_require__("19aa");
var toInteger = __webpack_require__("a691");
var toLength = __webpack_require__("50c4");
var toIndex = __webpack_require__("0b25");
var IEEE754 = __webpack_require__("77a7");
var getOwnPropertyNames = __webpack_require__("241c").f;
var defineProperty = __webpack_require__("9bf2").f;
var arrayFill = __webpack_require__("81d5");
var setToStringTag = __webpack_require__("d44e");
var InternalStateModule = __webpack_require__("69f3");

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length';
var WRONG_INDEX = 'Wrong index';
var NativeArrayBuffer = global[ARRAY_BUFFER];
var $ArrayBuffer = NativeArrayBuffer;
var $DataView = global[DATA_VIEW];
var RangeError = global.RangeError;

var packIEEE754 = IEEE754.pack;
var unpackIEEE754 = IEEE754.unpack;

var packInt8 = function (number) {
  return [number & 0xFF];
};

var packInt16 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF];
};

var packInt32 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
};

var unpackInt32 = function (buffer) {
  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
};

var packFloat32 = function (number) {
  return packIEEE754(number, 23, 4);
};

var packFloat64 = function (number) {
  return packIEEE754(number, 52, 8);
};

var addGetter = function (Constructor, key) {
  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState(this)[key]; } });
};

var get = function (view, count, index, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = bytes.slice(start, start + count);
  return isLittleEndian ? pack : pack.reverse();
};

var set = function (view, count, index, conversion, value, isLittleEndian) {
  var intIndex = toIndex(index);
  var store = getInternalState(view);
  if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
  var bytes = getInternalState(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = conversion(+value);
  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
};

if (!NATIVE_ARRAY_BUFFER) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    setInternalState(this, {
      bytes: arrayFill.call(new Array(byteLength), 0),
      byteLength: byteLength
    });
    if (!DESCRIPTORS) this.byteLength = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = getInternalState(buffer).byteLength;
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    setInternalState(this, {
      buffer: buffer,
      byteLength: byteLength,
      byteOffset: offset
    });
    if (!DESCRIPTORS) {
      this.buffer = buffer;
      this.byteLength = byteLength;
      this.byteOffset = offset;
    }
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, 'byteLength');
    addGetter($DataView, 'buffer');
    addGetter($DataView, 'byteLength');
    addGetter($DataView, 'byteOffset');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
    }
  });
} else {
  if (!fails(function () {
    NativeArrayBuffer(1);
  }) || !fails(function () {
    new NativeArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new NativeArrayBuffer(); // eslint-disable-line no-new
    new NativeArrayBuffer(1.5); // eslint-disable-line no-new
    new NativeArrayBuffer(NaN); // eslint-disable-line no-new
    return NativeArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new NativeArrayBuffer(toIndex(length));
    };
    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];
    for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) {
        createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
      }
    }
    ArrayBufferPrototype.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var testView = new $DataView(new $ArrayBuffer(2));
  var nativeSetInt8 = $DataView[PROTOTYPE].setInt8;
  testView.setInt8(0, 2147483648);
  testView.setInt8(1, 2147483649);
  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, { unsafe: true });
}

setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);

module.exports = {
  ArrayBuffer: $ArrayBuffer,
  DataView: $DataView
};


/***/ }),

/***/ "649e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $some = __webpack_require__("b727").some;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.some` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
exportTypedArrayMethod('some', function some(callbackfn /* , thisArg */) {
  return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),

/***/ "64e5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__("d039");
var padStart = __webpack_require__("0ccb").start;

var abs = Math.abs;
var DatePrototype = Date.prototype;
var getTime = DatePrototype.getTime;
var nativeDateToISOString = DatePrototype.toISOString;

// `Date.prototype.toISOString` method implementation
// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit fails here:
module.exports = (fails(function () {
  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  nativeDateToISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var date = this;
  var year = date.getUTCFullYear();
  var milliseconds = date.getUTCMilliseconds();
  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
  return sign + padStart(abs(year), sign ? 6 : 4, 0) +
    '-' + padStart(date.getUTCMonth() + 1, 2, 0) +
    '-' + padStart(date.getUTCDate(), 2, 0) +
    'T' + padStart(date.getUTCHours(), 2, 0) +
    ':' + padStart(date.getUTCMinutes(), 2, 0) +
    ':' + padStart(date.getUTCSeconds(), 2, 0) +
    '.' + padStart(milliseconds, 3, 0) +
    'Z';
} : nativeDateToISOString;


/***/ }),

/***/ "6547":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");
var requireObjectCoercible = __webpack_require__("1d80");

// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = String(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),

/***/ "6566":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var defineProperty = __webpack_require__("9bf2").f;
var create = __webpack_require__("7c73");
var redefineAll = __webpack_require__("e2cc");
var bind = __webpack_require__("f8c2");
var anInstance = __webpack_require__("19aa");
var iterate = __webpack_require__("2266");
var defineIterator = __webpack_require__("7dd0");
var setSpecies = __webpack_require__("2626");
var DESCRIPTORS = __webpack_require__("83ab");
var fastKey = __webpack_require__("f183").fastKey;
var InternalStateModule = __webpack_require__("69f3");

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, CONSTRUCTOR_NAME);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!DESCRIPTORS) that.size = 0;
      if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
    });

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
      // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS) state.size++;
        else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      } return that;
    };

    var getEntry = function (that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key) return entry;
      }
    };

    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (DESCRIPTORS) state.size = 0;
        else that.size = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first == entry) state.first = next;
          if (state.last == entry) state.last = prev;
          if (DESCRIPTORS) state.size--;
          else that.size--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });

    redefineAll(C.prototype, IS_MAP ? {
      // 23.1.3.6 Map.prototype.get(key)
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // 23.1.3.9 Map.prototype.set(key, value)
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // 23.2.3.1 Set.prototype.add(value)
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS) defineProperty(C.prototype, 'size', {
      get: function () {
        return getInternalState(this).size;
      }
    });
    return C;
  },
  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) entry = entry.previous;
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return { value: undefined, done: true };
      }
      // return step by kind
      if (kind == 'keys') return { value: entry.key, done: false };
      if (kind == 'values') return { value: entry.value, done: false };
      return { value: [entry.key, entry.value], done: false };
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(CONSTRUCTOR_NAME);
  }
};


/***/ }),

/***/ "65f0":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");
var isArray = __webpack_require__("e8b5");
var wellKnownSymbol = __webpack_require__("b622");

var SPECIES = wellKnownSymbol('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};


/***/ }),

/***/ "664f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.sup` method
// https://tc39.github.io/ecma262/#sec-string.prototype.sup
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sup') }, {
  sup: function sup() {
    return createHTML(this, 'sup', '', '');
  }
});


/***/ }),

/***/ "699c":
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/zloirock/core-js/issues/280
var userAgent = __webpack_require__("b39a");

// eslint-disable-next-line unicorn/no-unsafe-regex
module.exports = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);


/***/ }),

/***/ "69f3":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__("7f9a");
var global = __webpack_require__("da84");
var isObject = __webpack_require__("861d");
var createNonEnumerableProperty = __webpack_require__("9112");
var objectHas = __webpack_require__("5135");
var sharedKey = __webpack_require__("f772");
var hiddenKeys = __webpack_require__("d012");

var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = new WeakMap();
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "6b93":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

var log = Math.log;
var LOG10E = Math.LOG10E;

// `Math.log10` method
// https://tc39.github.io/ecma262/#sec-math.log10
$({ target: 'Math', stat: true }, {
  log10: function log10(x) {
    return log(x) * LOG10E;
  }
});


/***/ }),

/***/ "6b9e":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.search` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.search
defineWellKnownSymbol('search');


/***/ }),

/***/ "6d61":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var global = __webpack_require__("da84");
var isForced = __webpack_require__("94ca");
var redefine = __webpack_require__("6eeb");
var InternalMetadataModule = __webpack_require__("f183");
var iterate = __webpack_require__("2266");
var anInstance = __webpack_require__("19aa");
var isObject = __webpack_require__("861d");
var fails = __webpack_require__("d039");
var checkCorrectnessOfIteration = __webpack_require__("1c7e");
var setToStringTag = __webpack_require__("d44e");
var inheritIfRequired = __webpack_require__("7156");

module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
  var ADDER = IS_MAP ? 'set' : 'add';
  var NativeConstructor = global[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var Constructor = NativeConstructor;
  var exported = {};

  var fixMethod = function (KEY) {
    var nativeMethod = NativePrototype[KEY];
    redefine(NativePrototype, KEY,
      KEY == 'add' ? function add(value) {
        nativeMethod.call(this, value === 0 ? 0 : value);
        return this;
      } : KEY == 'delete' ? function (key) {
        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
      } : KEY == 'get' ? function get(key) {
        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
      } : KEY == 'has' ? function has(key) {
        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
      } : function set(key, value) {
        nativeMethod.call(this, key === 0 ? 0 : key, value);
        return this;
      }
    );
  };

  // eslint-disable-next-line max-len
  if (isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
    new NativeConstructor().entries().next();
  })))) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.REQUIRED = true;
  } else if (isForced(CONSTRUCTOR_NAME, true)) {
    var instance = new Constructor();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    // eslint-disable-next-line no-new
    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new NativeConstructor();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      Constructor = wrapper(function (dummy, iterable) {
        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
        if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
        return that;
      });
      Constructor.prototype = NativePrototype;
      NativePrototype.constructor = Constructor;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

    // weak collections should not contains .clear method
    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
  }

  exported[CONSTRUCTOR_NAME] = Constructor;
  $({ global: true, forced: Constructor != NativeConstructor }, exported);

  setToStringTag(Constructor, CONSTRUCTOR_NAME);

  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

  return Constructor;
};


/***/ }),

/***/ "6eeb":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var createNonEnumerableProperty = __webpack_require__("9112");
var has = __webpack_require__("5135");
var setGlobal = __webpack_require__("ce4e");
var inspectSource = __webpack_require__("8925");
var InternalStateModule = __webpack_require__("69f3");

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
});


/***/ }),

/***/ "6f53":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var objectKeys = __webpack_require__("df75");
var toIndexedObject = __webpack_require__("fc6a");
var propertyIsEnumerable = __webpack_require__("d1e7").f;

// `Object.{ entries, values }` methods implementation
var createMethod = function (TO_ENTRIES) {
  return function (it) {
    var O = toIndexedObject(it);
    var keys = objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

module.exports = {
  // `Object.entries` method
  // https://tc39.github.io/ecma262/#sec-object.entries
  entries: createMethod(true),
  // `Object.values` method
  // https://tc39.github.io/ecma262/#sec-object.values
  values: createMethod(false)
};


/***/ }),

/***/ "6fe5":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var trim = __webpack_require__("58a8").trim;
var whitespaces = __webpack_require__("5899");

var nativeParseFloat = global.parseFloat;
var FORCED = 1 / nativeParseFloat(whitespaces + '-0') !== -Infinity;

// `parseFloat` method
// https://tc39.github.io/ecma262/#sec-parsefloat-string
module.exports = FORCED ? function parseFloat(string) {
  var trimmedString = trim(String(string));
  var result = nativeParseFloat(trimmedString);
  return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
} : nativeParseFloat;


/***/ }),

/***/ "7039":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var nativeGetOwnPropertyNames = __webpack_require__("057f").f;

var FAILS_ON_PRIMITIVES = fails(function () { return !Object.getOwnPropertyNames(1); });

// `Object.getOwnPropertyNames` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  getOwnPropertyNames: nativeGetOwnPropertyNames
});


/***/ }),

/***/ "7156":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");
var setPrototypeOf = __webpack_require__("d2bb");

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    typeof (NewTarget = dummy.constructor) == 'function' &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};


/***/ }),

/***/ "72f7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var exportTypedArrayMethod = __webpack_require__("ebb5").exportTypedArrayMethod;
var fails = __webpack_require__("d039");
var global = __webpack_require__("da84");

var Uint8Array = global.Uint8Array;
var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
var arrayToString = [].toString;
var arrayJoin = [].join;

if (fails(function () { arrayToString.call({}); })) {
  arrayToString = function toString() {
    return arrayJoin.call(this);
  };
}

var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

// `%TypedArray%.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);


/***/ }),

/***/ "735e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $fill = __webpack_require__("81d5");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
// eslint-disable-next-line no-unused-vars
exportTypedArrayMethod('fill', function fill(value /* , start, end */) {
  return $fill.apply(aTypedArray(this), arguments);
});


/***/ }),

/***/ "73d9":
/***/ (function(module, exports, __webpack_require__) {

// this method was added to unscopables after implementation
// in popular engines, so it's moved to a separate module
var addToUnscopables = __webpack_require__("44d2");

addToUnscopables('flatMap');


/***/ }),

/***/ "7418":
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "746f":
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__("428f");
var has = __webpack_require__("5135");
var wrappedWellKnownSymbolModule = __webpack_require__("c032");
var defineProperty = __webpack_require__("9bf2").f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};


/***/ }),

/***/ "74e8":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var global = __webpack_require__("da84");
var DESCRIPTORS = __webpack_require__("83ab");
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__("166a");
var ArrayBufferViewCore = __webpack_require__("ebb5");
var ArrayBufferModule = __webpack_require__("621a");
var anInstance = __webpack_require__("19aa");
var createPropertyDescriptor = __webpack_require__("5c6c");
var createNonEnumerableProperty = __webpack_require__("9112");
var toLength = __webpack_require__("50c4");
var toIndex = __webpack_require__("0b25");
var toOffset = __webpack_require__("182d");
var toPrimitive = __webpack_require__("c04e");
var has = __webpack_require__("5135");
var classof = __webpack_require__("f5df");
var isObject = __webpack_require__("861d");
var create = __webpack_require__("7c73");
var setPrototypeOf = __webpack_require__("d2bb");
var getOwnPropertyNames = __webpack_require__("241c").f;
var typedArrayFrom = __webpack_require__("a078");
var forEach = __webpack_require__("b727").forEach;
var setSpecies = __webpack_require__("2626");
var definePropertyModule = __webpack_require__("9bf2");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var InternalStateModule = __webpack_require__("69f3");
var inheritIfRequired = __webpack_require__("7156");

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var round = Math.round;
var RangeError = global.RangeError;
var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
var TypedArray = ArrayBufferViewCore.TypedArray;
var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var isTypedArray = ArrayBufferViewCore.isTypedArray;
var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
var WRONG_LENGTH = 'Wrong length';

var fromList = function (C, list) {
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
};

var addGetter = function (it, key) {
  nativeDefineProperty(it, key, { get: function () {
    return getInternalState(this)[key];
  } });
};

var isArrayBuffer = function (it) {
  var klass;
  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
};

var isTypedArrayIndex = function (target, key) {
  return isTypedArray(target)
    && typeof key != 'symbol'
    && key in target
    && String(+key) == String(key);
};

var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
  return isTypedArrayIndex(target, key = toPrimitive(key, true))
    ? createPropertyDescriptor(2, target[key])
    : nativeGetOwnPropertyDescriptor(target, key);
};

var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
  if (isTypedArrayIndex(target, key = toPrimitive(key, true))
    && isObject(descriptor)
    && has(descriptor, 'value')
    && !has(descriptor, 'get')
    && !has(descriptor, 'set')
    // TODO: add validation descriptor w/o calling accessors
    && !descriptor.configurable
    && (!has(descriptor, 'writable') || descriptor.writable)
    && (!has(descriptor, 'enumerable') || descriptor.enumerable)
  ) {
    target[key] = descriptor.value;
    return target;
  } return nativeDefineProperty(target, key, descriptor);
};

if (DESCRIPTORS) {
  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
    definePropertyModule.f = wrappedDefineProperty;
    addGetter(TypedArrayPrototype, 'buffer');
    addGetter(TypedArrayPrototype, 'byteOffset');
    addGetter(TypedArrayPrototype, 'byteLength');
    addGetter(TypedArrayPrototype, 'length');
  }

  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
    defineProperty: wrappedDefineProperty
  });

  module.exports = function (TYPE, wrapper, CLAMPED) {
    var BYTES = TYPE.match(/\d+$/)[0] / 8;
    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + TYPE;
    var SETTER = 'set' + TYPE;
    var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
    var TypedArrayConstructor = NativeTypedArrayConstructor;
    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
    var exported = {};

    var getter = function (that, index) {
      var data = getInternalState(that);
      return data.view[GETTER](index * BYTES + data.byteOffset, true);
    };

    var setter = function (that, index, value) {
      var data = getInternalState(that);
      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
    };

    var addElement = function (that, index) {
      nativeDefineProperty(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };

    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
        var index = 0;
        var byteOffset = 0;
        var buffer, byteLength, length;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new ArrayBuffer(byteLength);
        } else if (isArrayBuffer(data)) {
          buffer = data;
          byteOffset = toOffset(offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - byteOffset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (isTypedArray(data)) {
          return fromList(TypedArrayConstructor, data);
        } else {
          return typedArrayFrom.call(TypedArrayConstructor, data);
        }
        setInternalState(that, {
          buffer: buffer,
          byteOffset: byteOffset,
          byteLength: byteLength,
          length: length,
          view: new DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
        return inheritIfRequired(function () {
          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
          if (isArrayBuffer(data)) return $length !== undefined
            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
            : typedArrayOffset !== undefined
              ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
              : new NativeTypedArrayConstructor(data);
          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
          return typedArrayFrom.call(TypedArrayConstructor, data);
        }(), dummy, TypedArrayConstructor);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
        if (!(key in TypedArrayConstructor)) {
          createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
        }
      });
      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
    }

    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
    }

    if (TYPED_ARRAY_TAG) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
    }

    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

    $({
      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
    }, exported);

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
      createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
    }

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
      createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
    }

    setSpecies(CONSTRUCTOR_NAME);
  };
} else module.exports = function () { /* empty */ };


/***/ }),

/***/ "77a7":
/***/ (function(module, exports) {

// IEEE754 conversions based on https://github.com/feross/ieee754
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = 1 / 0;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;

var pack = function (number, mantissaLength, bytes) {
  var buffer = new Array(bytes);
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
  var index = 0;
  var exponent, mantissa, c;
  number = abs(number);
  // eslint-disable-next-line no-self-compare
  if (number != number || number === Infinity) {
    // eslint-disable-next-line no-self-compare
    mantissa = number != number ? 1 : 0;
    exponent = eMax;
  } else {
    exponent = floor(log(number) / LN2);
    if (number * (c = pow(2, -exponent)) < 1) {
      exponent--;
      c *= 2;
    }
    if (exponent + eBias >= 1) {
      number += rt / c;
    } else {
      number += rt * pow(2, 1 - eBias);
    }
    if (number * c >= 2) {
      exponent++;
      c /= 2;
    }
    if (exponent + eBias >= eMax) {
      mantissa = 0;
      exponent = eMax;
    } else if (exponent + eBias >= 1) {
      mantissa = (number * c - 1) * pow(2, mantissaLength);
      exponent = exponent + eBias;
    } else {
      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
      exponent = 0;
    }
  }
  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
  exponent = exponent << mantissaLength | mantissa;
  exponentLength += mantissaLength;
  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
  buffer[--index] |= sign * 128;
  return buffer;
};

var unpack = function (buffer, mantissaLength) {
  var bytes = buffer.length;
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var nBits = exponentLength - 7;
  var index = bytes - 1;
  var sign = buffer[index--];
  var exponent = sign & 127;
  var mantissa;
  sign >>= 7;
  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
  mantissa = exponent & (1 << -nBits) - 1;
  exponent >>= -nBits;
  nBits += mantissaLength;
  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
  if (exponent === 0) {
    exponent = 1 - eBias;
  } else if (exponent === eMax) {
    return mantissa ? NaN : sign ? -Infinity : Infinity;
  } else {
    mantissa = mantissa + pow(2, mantissaLength);
    exponent = exponent - eBias;
  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
};

module.exports = {
  pack: pack,
  unpack: unpack
};


/***/ }),

/***/ "7839":
/***/ (function(module, exports) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "7898":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var expm1 = __webpack_require__("8eb5");

var exp = Math.exp;

// `Math.tanh` method
// https://tc39.github.io/ecma262/#sec-math.tanh
$({ target: 'Math', stat: true }, {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),

/***/ "79a8":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

var nativeAsinh = Math.asinh;
var log = Math.log;
var sqrt = Math.sqrt;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
}

// `Math.asinh` method
// https://tc39.github.io/ecma262/#sec-math.asinh
// Tor Browser bug: Math.asinh(0) -> -0
$({ target: 'Math', stat: true, forced: !(nativeAsinh && 1 / nativeAsinh(0) > 0) }, {
  asinh: asinh
});


/***/ }),

/***/ "7a82":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var objectDefinePropertyModile = __webpack_require__("9bf2");

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
$({ target: 'Object', stat: true, forced: !DESCRIPTORS, sham: !DESCRIPTORS }, {
  defineProperty: objectDefinePropertyModile.f
});


/***/ }),

/***/ "7b0b":
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__("1d80");

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "7c73":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var defineProperties = __webpack_require__("37e8");
var enumBugKeys = __webpack_require__("7839");
var hiddenKeys = __webpack_require__("d012");
var html = __webpack_require__("1be4");
var documentCreateElement = __webpack_require__("cc12");
var sharedKey = __webpack_require__("f772");

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    /* global ActiveXObject */
    activeXDocument = document.domain && new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.github.io/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : defineProperties(result, Properties);
};


/***/ }),

/***/ "7db0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $find = __webpack_require__("b727").find;
var addToUnscopables = __webpack_require__("44d2");

var FIND = 'find';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.github.io/ecma262/#sec-array.prototype.find
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND);


/***/ }),

/***/ "7dd0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createIteratorConstructor = __webpack_require__("9ed3");
var getPrototypeOf = __webpack_require__("e163");
var setPrototypeOf = __webpack_require__("d2bb");
var setToStringTag = __webpack_require__("d44e");
var createNonEnumerableProperty = __webpack_require__("9112");
var redefine = __webpack_require__("6eeb");
var wellKnownSymbol = __webpack_require__("b622");
var IS_PURE = __webpack_require__("c430");
var Iterators = __webpack_require__("3f8c");
var IteratorsCore = __webpack_require__("ae93");

var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;
    defaultIterator = function values() { return nativeIterator.call(this); };
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
  }
  Iterators[NAME] = defaultIterator;

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  return methods;
};


/***/ }),

/***/ "7ed3":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var anObject = __webpack_require__("825a");
var isObject = __webpack_require__("861d");
var has = __webpack_require__("5135");
var fails = __webpack_require__("d039");
var definePropertyModule = __webpack_require__("9bf2");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var getPrototypeOf = __webpack_require__("e163");
var createPropertyDescriptor = __webpack_require__("5c6c");

// `Reflect.set` method
// https://tc39.github.io/ecma262/#sec-reflect.set
function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
  var existingDescriptor, prototype;
  if (!ownDescriptor) {
    if (isObject(prototype = getPrototypeOf(target))) {
      return set(prototype, propertyKey, V, receiver);
    }
    ownDescriptor = createPropertyDescriptor(0);
  }
  if (has(ownDescriptor, 'value')) {
    if (ownDescriptor.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      definePropertyModule.f(receiver, propertyKey, existingDescriptor);
    } else definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(0, V));
    return true;
  }
  return ownDescriptor.set === undefined ? false : (ownDescriptor.set.call(receiver, V), true);
}

// MS Edge 17-18 Reflect.set allows setting the property to object
// with non-writable property on the prototype
var MS_EDGE_BUG = fails(function () {
  var object = definePropertyModule.f({}, 'a', { configurable: true });
  // eslint-disable-next-line no-undef
  return Reflect.set(getPrototypeOf(object), 'a', 1, object) !== false;
});

$({ target: 'Reflect', stat: true, forced: MS_EDGE_BUG }, {
  set: set
});


/***/ }),

/***/ "7f78":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var anObject = __webpack_require__("825a");
var objectGetPrototypeOf = __webpack_require__("e163");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

// `Reflect.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-reflect.getprototypeof
$({ target: 'Reflect', stat: true, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(target) {
    return objectGetPrototypeOf(anObject(target));
  }
});


/***/ }),

/***/ "7f9a":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var inspectSource = __webpack_require__("8925");

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));


/***/ }),

/***/ "80e0":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.replace` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.replace
defineWellKnownSymbol('replace');


/***/ }),

/***/ "8172":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.toPrimitive` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.toprimitive
defineWellKnownSymbol('toPrimitive');


/***/ }),

/***/ "81b8":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.unscopables` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.unscopables
defineWellKnownSymbol('unscopables');


/***/ }),

/***/ "81d5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toObject = __webpack_require__("7b0b");
var toAbsoluteIndex = __webpack_require__("23cb");
var toLength = __webpack_require__("50c4");

// `Array.prototype.fill` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),

/***/ "825a":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};


/***/ }),

/***/ "82da":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var ArrayBufferViewCore = __webpack_require__("ebb5");

var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

// `ArrayBuffer.isView` method
// https://tc39.github.io/ecma262/#sec-arraybuffer.isview
$({ target: 'ArrayBuffer', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
  isView: ArrayBufferViewCore.isView
});


/***/ }),

/***/ "82f8":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $includes = __webpack_require__("4d64").includes;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
exportTypedArrayMethod('includes', function includes(searchElement /* , fromIndex */) {
  return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),

/***/ "83ab":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

// Thank's IE8 for his funny defineProperty
module.exports = !fails(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "8418":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toPrimitive = __webpack_require__("c04e");
var definePropertyModule = __webpack_require__("9bf2");
var createPropertyDescriptor = __webpack_require__("5c6c");

module.exports = function (object, key, value) {
  var propertyKey = toPrimitive(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};


/***/ }),

/***/ "841c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
var anObject = __webpack_require__("825a");
var requireObjectCoercible = __webpack_require__("1d80");
var sameValue = __webpack_require__("129f");
var regExpExec = __webpack_require__("14c3");

// @@search logic
fixRegExpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = requireObjectCoercible(this);
      var searcher = regexp == undefined ? undefined : regexp[SEARCH];
      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative(nativeSearch, regexp, this);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);

      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});


/***/ }),

/***/ "843c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $padEnd = __webpack_require__("0ccb").end;
var WEBKIT_BUG = __webpack_require__("699c");

// `String.prototype.padEnd` method
// https://tc39.github.io/ecma262/#sec-string.prototype.padend
$({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "84c3":
/***/ (function(module, exports, __webpack_require__) {

var createTypedArrayConstructor = __webpack_require__("74e8");

// `Uint16Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint16', function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "857a":
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__("1d80");

var quot = /"/g;

// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
// https://tc39.github.io/ecma262/#sec-createhtml
module.exports = function (string, tag, attribute, value) {
  var S = String(requireObjectCoercible(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};


/***/ }),

/***/ "861d":
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "8925":
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__("c6cd");

var functionToString = Function.toString;

// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
if (typeof store.inspectSource != 'function') {
  store.inspectSource = function (it) {
    return functionToString.call(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "8a59":
/***/ (function(module, exports, __webpack_require__) {

var createTypedArrayConstructor = __webpack_require__("74e8");

// `Uint8ClampedArray` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),

/***/ "8a79":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var toLength = __webpack_require__("50c4");
var notARegExp = __webpack_require__("5a34");
var requireObjectCoercible = __webpack_require__("1d80");
var correctIsRegExpLogic = __webpack_require__("ab13");
var IS_PURE = __webpack_require__("c430");

var nativeEndsWith = ''.endsWith;
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.endsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.endswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = String(requireObjectCoercible(this));
    notARegExp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : min(toLength(endPosition), len);
    var search = String(searchString);
    return nativeEndsWith
      ? nativeEndsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),

/***/ "8aa5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__("6547").charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};


/***/ }),

/***/ "8b09":
/***/ (function(module, exports, __webpack_require__) {

var createTypedArrayConstructor = __webpack_require__("74e8");

// `Int16Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int16', function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "8b9a":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var anObject = __webpack_require__("825a");
var aPossiblePrototype = __webpack_require__("3bbe");
var objectSetPrototypeOf = __webpack_require__("d2bb");

// `Reflect.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-reflect.setprototypeof
if (objectSetPrototypeOf) $({ target: 'Reflect', stat: true }, {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    anObject(target);
    aPossiblePrototype(proto);
    try {
      objectSetPrototypeOf(target, proto);
      return true;
    } catch (error) {
      return false;
    }
  }
});


/***/ }),

/***/ "8ba4":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var isInteger = __webpack_require__("5e89");

// `Number.isInteger` method
// https://tc39.github.io/ecma262/#sec-number.isinteger
$({ target: 'Number', stat: true }, {
  isInteger: isInteger
});


/***/ }),

/***/ "8eb5":
/***/ (function(module, exports) {

var nativeExpm1 = Math.expm1;
var exp = Math.exp;

// `Math.expm1` method implementation
// https://tc39.github.io/ecma262/#sec-math.expm1
module.exports = (!nativeExpm1
  // Old FF bug
  || nativeExpm1(10) > 22025.465794806719 || nativeExpm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || nativeExpm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
} : nativeExpm1;


/***/ }),

/***/ "90d7":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

var log = Math.log;
var LN2 = Math.LN2;

// `Math.log2` method
// https://tc39.github.io/ecma262/#sec-math.log2
$({ target: 'Math', stat: true }, {
  log2: function log2(x) {
    return log(x) / LN2;
  }
});


/***/ }),

/***/ "90e3":
/***/ (function(module, exports) {

var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};


/***/ }),

/***/ "9112":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var definePropertyModule = __webpack_require__("9bf2");
var createPropertyDescriptor = __webpack_require__("5c6c");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "9129":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

// `Number.isNaN` method
// https://tc39.github.io/ecma262/#sec-number.isnan
$({ target: 'Number', stat: true }, {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),

/***/ "9263":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpFlags = __webpack_require__("ad6d");
var stickyHelpers = __webpack_require__("9f7f");

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = regexpFlags.call(re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = flags.replace('y', '');
      if (flags.indexOf('g') === -1) {
        flags += 'g';
      }

      strCopy = String(str).slice(re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = nativeExec.call(sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = match.input.slice(charsAdded);
        match[0] = match[0].slice(charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ "944a":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.toStringTag` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.tostringtag
defineWellKnownSymbol('toStringTag');


/***/ }),

/***/ "94ca":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "96cf":
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "9767":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.fontcolor` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fontcolor
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fontcolor') }, {
  fontcolor: function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  }
});


/***/ }),

/***/ "9861":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__("e260");
var $ = __webpack_require__("23e7");
var getBuiltIn = __webpack_require__("d066");
var USE_NATIVE_URL = __webpack_require__("0d3b");
var redefine = __webpack_require__("6eeb");
var redefineAll = __webpack_require__("e2cc");
var setToStringTag = __webpack_require__("d44e");
var createIteratorConstructor = __webpack_require__("9ed3");
var InternalStateModule = __webpack_require__("69f3");
var anInstance = __webpack_require__("19aa");
var hasOwn = __webpack_require__("5135");
var bind = __webpack_require__("f8c2");
var classof = __webpack_require__("f5df");
var anObject = __webpack_require__("825a");
var isObject = __webpack_require__("861d");
var create = __webpack_require__("7c73");
var createPropertyDescriptor = __webpack_require__("5c6c");
var getIterator = __webpack_require__("9a1f");
var getIteratorMethod = __webpack_require__("35a1");
var wellKnownSymbol = __webpack_require__("b622");

var $fetch = getBuiltIn('fetch');
var Headers = getBuiltIn('Headers');
var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState = InternalStateModule.set;
var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);

var plus = /\+/g;
var sequences = Array(4);

var percentSequence = function (bytes) {
  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};

var percentDecode = function (sequence) {
  try {
    return decodeURIComponent(sequence);
  } catch (error) {
    return sequence;
  }
};

var deserialize = function (it) {
  var result = it.replace(plus, ' ');
  var bytes = 4;
  try {
    return decodeURIComponent(result);
  } catch (error) {
    while (bytes) {
      result = result.replace(percentSequence(bytes--), percentDecode);
    }
    return result;
  }
};

var find = /[!'()~]|%20/g;

var replace = {
  '!': '%21',
  "'": '%27',
  '(': '%28',
  ')': '%29',
  '~': '%7E',
  '%20': '+'
};

var replacer = function (match) {
  return replace[match];
};

var serialize = function (it) {
  return encodeURIComponent(it).replace(find, replacer);
};

var parseSearchParams = function (result, query) {
  if (query) {
    var attributes = query.split('&');
    var index = 0;
    var attribute, entry;
    while (index < attributes.length) {
      attribute = attributes[index++];
      if (attribute.length) {
        entry = attribute.split('=');
        result.push({
          key: deserialize(entry.shift()),
          value: deserialize(entry.join('='))
        });
      }
    }
  }
};

var updateSearchParams = function (query) {
  this.entries.length = 0;
  parseSearchParams(this.entries, query);
};

var validateArgumentsLength = function (passed, required) {
  if (passed < required) throw TypeError('Not enough arguments');
};

var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
  setInternalState(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(params).entries),
    kind: kind
  });
}, 'Iterator', function next() {
  var state = getInternalIteratorState(this);
  var kind = state.kind;
  var step = state.iterator.next();
  var entry = step.value;
  if (!step.done) {
    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
  } return step;
});

// `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams
var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
  var init = arguments.length > 0 ? arguments[0] : undefined;
  var that = this;
  var entries = [];
  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

  setInternalState(that, {
    type: URL_SEARCH_PARAMS,
    entries: entries,
    updateURL: function () { /* empty */ },
    updateSearchParams: updateSearchParams
  });

  if (init !== undefined) {
    if (isObject(init)) {
      iteratorMethod = getIteratorMethod(init);
      if (typeof iteratorMethod === 'function') {
        iterator = iteratorMethod.call(init);
        next = iterator.next;
        while (!(step = next.call(iterator)).done) {
          entryIterator = getIterator(anObject(step.value));
          entryNext = entryIterator.next;
          if (
            (first = entryNext.call(entryIterator)).done ||
            (second = entryNext.call(entryIterator)).done ||
            !entryNext.call(entryIterator).done
          ) throw TypeError('Expected sequence with length 2');
          entries.push({ key: first.value + '', value: second.value + '' });
        }
      } else for (key in init) if (hasOwn(init, key)) entries.push({ key: key, value: init[key] + '' });
    } else {
      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
    }
  }
};

var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

redefineAll(URLSearchParamsPrototype, {
  // `URLSearchParams.prototype.appent` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
  append: function append(name, value) {
    validateArgumentsLength(arguments.length, 2);
    var state = getInternalParamsState(this);
    state.entries.push({ key: name + '', value: value + '' });
    state.updateURL();
  },
  // `URLSearchParams.prototype.delete` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
  'delete': function (name) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index].key === key) entries.splice(index, 1);
      else index++;
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.get` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
  get: function get(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) return entries[index].value;
    }
    return null;
  },
  // `URLSearchParams.prototype.getAll` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
  getAll: function getAll(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var result = [];
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) result.push(entries[index].value);
    }
    return result;
  },
  // `URLSearchParams.prototype.has` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
  has: function has(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = name + '';
    var index = 0;
    while (index < entries.length) {
      if (entries[index++].key === key) return true;
    }
    return false;
  },
  // `URLSearchParams.prototype.set` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
  set: function set(name, value) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var found = false;
    var key = name + '';
    var val = value + '';
    var index = 0;
    var entry;
    for (; index < entries.length; index++) {
      entry = entries[index];
      if (entry.key === key) {
        if (found) entries.splice(index--, 1);
        else {
          found = true;
          entry.value = val;
        }
      }
    }
    if (!found) entries.push({ key: key, value: val });
    state.updateURL();
  },
  // `URLSearchParams.prototype.sort` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
  sort: function sort() {
    var state = getInternalParamsState(this);
    var entries = state.entries;
    // Array#sort is not stable in some engines
    var slice = entries.slice();
    var entry, entriesIndex, sliceIndex;
    entries.length = 0;
    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
      entry = slice[sliceIndex];
      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
        if (entries[entriesIndex].key > entry.key) {
          entries.splice(entriesIndex, 0, entry);
          break;
        }
      }
      if (entriesIndex === sliceIndex) entries.push(entry);
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.forEach` method
  forEach: function forEach(callback /* , thisArg */) {
    var entries = getInternalParamsState(this).entries;
    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      boundFunction(entry.value, entry.key, this);
    }
  },
  // `URLSearchParams.prototype.keys` method
  keys: function keys() {
    return new URLSearchParamsIterator(this, 'keys');
  },
  // `URLSearchParams.prototype.values` method
  values: function values() {
    return new URLSearchParamsIterator(this, 'values');
  },
  // `URLSearchParams.prototype.entries` method
  entries: function entries() {
    return new URLSearchParamsIterator(this, 'entries');
  }
}, { enumerable: true });

// `URLSearchParams.prototype[@@iterator]` method
redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);

// `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
redefine(URLSearchParamsPrototype, 'toString', function toString() {
  var entries = getInternalParamsState(this).entries;
  var result = [];
  var index = 0;
  var entry;
  while (index < entries.length) {
    entry = entries[index++];
    result.push(serialize(entry.key) + '=' + serialize(entry.value));
  } return result.join('&');
}, { enumerable: true });

setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

$({ global: true, forced: !USE_NATIVE_URL }, {
  URLSearchParams: URLSearchParamsConstructor
});

// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
// https://github.com/zloirock/core-js/issues/674
if (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers == 'function') {
  $({ global: true, enumerable: true, forced: true }, {
    fetch: function fetch(input /* , init */) {
      var args = [input];
      var init, body, headers;
      if (arguments.length > 1) {
        init = arguments[1];
        if (isObject(init)) {
          body = init.body;
          if (classof(body) === URL_SEARCH_PARAMS) {
            headers = init.headers ? new Headers(init.headers) : new Headers();
            if (!headers.has('content-type')) {
              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
            init = create(init, {
              body: createPropertyDescriptor(0, String(body)),
              headers: createPropertyDescriptor(0, headers)
            });
          }
        }
        args.push(init);
      } return $fetch.apply(this, args);
    }
  });
}

module.exports = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
};


/***/ }),

/***/ "9911":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.link` method
// https://tc39.github.io/ecma262/#sec-string.prototype.link
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('link') }, {
  link: function link(url) {
    return createHTML(this, 'a', 'href', url);
  }
});


/***/ }),

/***/ "99af":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var isArray = __webpack_require__("e8b5");
var isObject = __webpack_require__("861d");
var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var createProperty = __webpack_require__("8418");
var arraySpeciesCreate = __webpack_require__("65f0");
var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
var wellKnownSymbol = __webpack_require__("b622");
var V8_VERSION = __webpack_require__("60ae");

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.github.io/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, forced: FORCED }, {
  concat: function concat(arg) { // eslint-disable-line no-unused-vars
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = toLength(E.length);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});


/***/ }),

/***/ "9a1f":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var getIteratorMethod = __webpack_require__("35a1");

module.exports = function (it) {
  var iteratorMethod = getIteratorMethod(it);
  if (typeof iteratorMethod != 'function') {
    throw TypeError(String(it) + ' is not iterable');
  } return anObject(iteratorMethod.call(it));
};


/***/ }),

/***/ "9a8c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $copyWithin = __webpack_require__("145e");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.copyWithin` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
exportTypedArrayMethod('copyWithin', function copyWithin(target, start /* , end */) {
  return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
});


/***/ }),

/***/ "9bdd":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (error) {
    var returnMethod = iterator['return'];
    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
    throw error;
  }
};


/***/ }),

/***/ "9bf2":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var IE8_DOM_DEFINE = __webpack_require__("0cfb");
var anObject = __webpack_require__("825a");
var toPrimitive = __webpack_require__("c04e");

var nativeDefineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.github.io/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "9e4a":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var anObject = __webpack_require__("825a");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");

// `Reflect.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-reflect.getownpropertydescriptor
$({ target: 'Reflect', stat: true, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
  }
});


/***/ }),

/***/ "9ed3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IteratorPrototype = __webpack_require__("ae93").IteratorPrototype;
var create = __webpack_require__("7c73");
var createPropertyDescriptor = __webpack_require__("5c6c");
var setToStringTag = __webpack_require__("d44e");
var Iterators = __webpack_require__("3f8c");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "9f7f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fails = __webpack_require__("d039");

// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
// so we use an intermediate function.
function RE(s, f) {
  return RegExp(s, f);
}

exports.UNSUPPORTED_Y = fails(function () {
  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
  var re = RE('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

exports.BROKEN_CARET = fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = RE('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});


/***/ }),

/***/ "9f96":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var global = __webpack_require__("da84");
var microtask = __webpack_require__("b575");
var classof = __webpack_require__("c6b6");

var process = global.process;
var isNode = classof(process) == 'process';

// `queueMicrotask` method
// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask
$({ global: true, enumerable: true, noTargetGet: true }, {
  queueMicrotask: function queueMicrotask(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});


/***/ }),

/***/ "9ff9":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

var nativeAtanh = Math.atanh;
var log = Math.log;

// `Math.atanh` method
// https://tc39.github.io/ecma262/#sec-math.atanh
// Tor Browser bug: Math.atanh(-0) -> 0
$({ target: 'Math', stat: true, forced: !(nativeAtanh && 1 / nativeAtanh(-0) < 0) }, {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),

/***/ "a078":
/***/ (function(module, exports, __webpack_require__) {

var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var getIteratorMethod = __webpack_require__("35a1");
var isArrayIteratorMethod = __webpack_require__("e95a");
var bind = __webpack_require__("f8c2");
var aTypedArrayConstructor = __webpack_require__("ebb5").aTypedArrayConstructor;

module.exports = function from(source /* , mapfn, thisArg */) {
  var O = toObject(source);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var i, length, result, step, iterator, next;
  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    O = [];
    while (!(step = next.call(iterator)).done) {
      O.push(step.value);
    }
  }
  if (mapping && argumentsLength > 2) {
    mapfn = bind(mapfn, arguments[2], 2);
  }
  length = toLength(O.length);
  result = new (aTypedArrayConstructor(this))(length);
  for (i = 0; length > i; i++) {
    result[i] = mapping ? mapfn(O[i], i) : O[i];
  }
  return result;
};


/***/ }),

/***/ "a15b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var IndexedObject = __webpack_require__("44ad");
var toIndexedObject = __webpack_require__("fc6a");
var sloppyArrayMethod = __webpack_require__("b301");

var nativeJoin = [].join;

var ES3_STRINGS = IndexedObject != Object;
var SLOPPY_METHOD = sloppyArrayMethod('join', ',');

// `Array.prototype.join` method
// https://tc39.github.io/ecma262/#sec-array.prototype.join
$({ target: 'Array', proto: true, forced: ES3_STRINGS || SLOPPY_METHOD }, {
  join: function join(separator) {
    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),

/***/ "a2bf":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isArray = __webpack_require__("e8b5");
var toLength = __webpack_require__("50c4");
var bind = __webpack_require__("f8c2");

// `FlattenIntoArray` abstract operation
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
  var element;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      if (depth > 0 && isArray(element)) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
};

module.exports = flattenIntoArray;


/***/ }),

/***/ "a434":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var toAbsoluteIndex = __webpack_require__("23cb");
var toInteger = __webpack_require__("a691");
var toLength = __webpack_require__("50c4");
var toObject = __webpack_require__("7b0b");
var arraySpeciesCreate = __webpack_require__("65f0");
var createProperty = __webpack_require__("8418");
var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

var max = Math.max;
var min = Math.min;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

// `Array.prototype.splice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.splice
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('splice') }, {
  splice: function splice(start, deleteCount /* , ...items */) {
    var O = toObject(this);
    var len = toLength(O.length);
    var actualStart = toAbsoluteIndex(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
    }
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O) createProperty(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});


/***/ }),

/***/ "a4d3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var global = __webpack_require__("da84");
var getBuiltIn = __webpack_require__("d066");
var IS_PURE = __webpack_require__("c430");
var DESCRIPTORS = __webpack_require__("83ab");
var NATIVE_SYMBOL = __webpack_require__("4930");
var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");
var fails = __webpack_require__("d039");
var has = __webpack_require__("5135");
var isArray = __webpack_require__("e8b5");
var isObject = __webpack_require__("861d");
var anObject = __webpack_require__("825a");
var toObject = __webpack_require__("7b0b");
var toIndexedObject = __webpack_require__("fc6a");
var toPrimitive = __webpack_require__("c04e");
var createPropertyDescriptor = __webpack_require__("5c6c");
var nativeObjectCreate = __webpack_require__("7c73");
var objectKeys = __webpack_require__("df75");
var getOwnPropertyNamesModule = __webpack_require__("241c");
var getOwnPropertyNamesExternal = __webpack_require__("057f");
var getOwnPropertySymbolsModule = __webpack_require__("7418");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var definePropertyModule = __webpack_require__("9bf2");
var propertyIsEnumerableModule = __webpack_require__("d1e7");
var createNonEnumerableProperty = __webpack_require__("9112");
var redefine = __webpack_require__("6eeb");
var shared = __webpack_require__("5692");
var sharedKey = __webpack_require__("f772");
var hiddenKeys = __webpack_require__("d012");
var uid = __webpack_require__("90e3");
var wellKnownSymbol = __webpack_require__("b622");
var wrappedWellKnownSymbolModule = __webpack_require__("c032");
var defineWellKnownSymbol = __webpack_require__("746f");
var setToStringTag = __webpack_require__("d44e");
var InternalStateModule = __webpack_require__("69f3");
var $forEach = __webpack_require__("b727").forEach;

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var $stringify = getBuiltIn('JSON', 'stringify');
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');
var WellKnownSymbolsStore = shared('wks');
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var isSymbol = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return Object(it) instanceof $Symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPrimitive(P, true);
  anObject(Attributes);
  if (has(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPrimitive(V, true);
  var enumerable = nativePropertyIsEnumerable.call(this, P);
  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPrimitive(P, true);
  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
  });
  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
      result.push(AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.github.io/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return getInternalState(this).tag;
  });

  redefine($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }
}

$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  // `Symbol.for` method
  // https://tc39.github.io/ecma262/#sec-symbol.for
  'for': function (key) {
    var string = String(key);
    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = $Symbol(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  },
  // `Symbol.keyFor` method
  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  },
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.github.io/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames,
  // `Object.getOwnPropertySymbols` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return getOwnPropertySymbolsModule.f(toObject(it));
  }
});

// `JSON.stringify` method behavior with symbols
// https://tc39.github.io/ecma262/#sec-json.stringify
if ($stringify) {
  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
    var symbol = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    return $stringify([symbol]) != '[null]'
      // WebKit converts symbol values to JSON as null
      || $stringify({ a: symbol }) != '{}'
      // V8 throws on boxed symbols
      || $stringify(Object(symbol)) != '{}';
  });

  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
    // eslint-disable-next-line no-unused-vars
    stringify: function stringify(it, replacer, space) {
      var args = [it];
      var index = 1;
      var $replacer;
      while (arguments.length > index) args.push(arguments[index++]);
      $replacer = replacer;
      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      if (!isArray(replacer)) replacer = function (key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return $stringify.apply(null, args);
    }
  });
}

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
  createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
}
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;


/***/ }),

/***/ "a623":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $every = __webpack_require__("b727").every;
var sloppyArrayMethod = __webpack_require__("b301");

// `Array.prototype.every` method
// https://tc39.github.io/ecma262/#sec-array.prototype.every
$({ target: 'Array', proto: true, forced: sloppyArrayMethod('every') }, {
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "a630":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var from = __webpack_require__("4df4");
var checkCorrectnessOfIteration = __webpack_require__("1c7e");

var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  Array.from(iterable);
});

// `Array.from` method
// https://tc39.github.io/ecma262/#sec-array.from
$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
  from: from
});


/***/ }),

/***/ "a691":
/***/ (function(module, exports) {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};


/***/ }),

/***/ "a6fd":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var getBuiltIn = __webpack_require__("d066");
var aFunction = __webpack_require__("1c0b");
var anObject = __webpack_require__("825a");
var fails = __webpack_require__("d039");

var nativeApply = getBuiltIn('Reflect', 'apply');
var functionApply = Function.apply;

// MS Edge argumentsList argument is optional
var OPTIONAL_ARGUMENTS_LIST = !fails(function () {
  nativeApply(function () { /* empty */ });
});

// `Reflect.apply` method
// https://tc39.github.io/ecma262/#sec-reflect.apply
$({ target: 'Reflect', stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
  apply: function apply(target, thisArgument, argumentsList) {
    aFunction(target);
    anObject(argumentsList);
    return nativeApply
      ? nativeApply(target, thisArgument, argumentsList)
      : functionApply.call(target, thisArgument, argumentsList);
  }
});


/***/ }),

/***/ "a79d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var IS_PURE = __webpack_require__("c430");
var NativePromise = __webpack_require__("fea9");
var fails = __webpack_require__("d039");
var getBuiltIn = __webpack_require__("d066");
var speciesConstructor = __webpack_require__("4840");
var promiseResolve = __webpack_require__("cdf9");
var redefine = __webpack_require__("6eeb");

// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
var NON_GENERIC = !!NativePromise && fails(function () {
  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
});

// `Promise.prototype.finally` method
// https://tc39.github.io/ecma262/#sec-promise.prototype.finally
$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
  'finally': function (onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = typeof onFinally == 'function';
    return this.then(
      isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () { return x; });
      } : onFinally,
      isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () { throw e; });
      } : onFinally
    );
  }
});

// patch native Promise.prototype for native async functions
if (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {
  redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);
}


/***/ }),

/***/ "a874":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var copyWithin = __webpack_require__("145e");
var addToUnscopables = __webpack_require__("44d2");

// `Array.prototype.copyWithin` method
// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
$({ target: 'Array', proto: true }, {
  copyWithin: copyWithin
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('copyWithin');


/***/ }),

/***/ "a975":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $every = __webpack_require__("b727").every;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.every` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
exportTypedArrayMethod('every', function every(callbackfn /* , thisArg */) {
  return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),

/***/ "a9e3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__("83ab");
var global = __webpack_require__("da84");
var isForced = __webpack_require__("94ca");
var redefine = __webpack_require__("6eeb");
var has = __webpack_require__("5135");
var classof = __webpack_require__("c6b6");
var inheritIfRequired = __webpack_require__("7156");
var toPrimitive = __webpack_require__("c04e");
var fails = __webpack_require__("d039");
var create = __webpack_require__("7c73");
var getOwnPropertyNames = __webpack_require__("241c").f;
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var defineProperty = __webpack_require__("9bf2").f;
var trim = __webpack_require__("58a8").trim;

var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;

// Opera ~12 has broken Object#toString
var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;

// `ToNumber` abstract operation
// https://tc39.github.io/ecma262/#sec-tonumber
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  var first, third, radix, maxCode, digits, length, index, code;
  if (typeof it == 'string' && it.length > 2) {
    it = trim(it);
    first = it.charCodeAt(0);
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
        default: return +it;
      }
      digits = it.slice(2);
      length = digits.length;
      for (index = 0; index < length; index++) {
        code = digits.charCodeAt(index);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

// `Number` constructor
// https://tc39.github.io/ecma262/#sec-number-constructor
if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
  var NumberWrapper = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var dummy = this;
    return dummy instanceof NumberWrapper
      // check on 1..constructor(foo) case
      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)
        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
  };
  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }
  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  redefine(global, NUMBER, NumberWrapper);
}


/***/ }),

/***/ "ab13":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (e) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (f) { /* empty */ }
  } return false;
};


/***/ }),

/***/ "ac16":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var anObject = __webpack_require__("825a");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;

// `Reflect.deleteProperty` method
// https://tc39.github.io/ecma262/#sec-reflect.deleteproperty
$({ target: 'Reflect', stat: true }, {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var descriptor = getOwnPropertyDescriptor(anObject(target), propertyKey);
    return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),

/***/ "ac1f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var exec = __webpack_require__("9263");

$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});


/***/ }),

/***/ "acac":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__("e2cc");
var getWeakData = __webpack_require__("f183").getWeakData;
var anObject = __webpack_require__("825a");
var isObject = __webpack_require__("861d");
var anInstance = __webpack_require__("19aa");
var iterate = __webpack_require__("2266");
var ArrayIterationModule = __webpack_require__("b727");
var $has = __webpack_require__("5135");
var InternalStateModule = __webpack_require__("69f3");

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
var find = ArrayIterationModule.find;
var findIndex = ArrayIterationModule.findIndex;
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (store) {
  return store.frozen || (store.frozen = new UncaughtFrozenStore());
};

var UncaughtFrozenStore = function () {
  this.entries = [];
};

var findUncaughtFrozen = function (store, key) {
  return find(store.entries, function (it) {
    return it[0] === key;
  });
};

UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.entries.push([key, value]);
  },
  'delete': function (key) {
    var index = findIndex(this.entries, function (it) {
      return it[0] === key;
    });
    if (~index) this.entries.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, CONSTRUCTOR_NAME);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        id: id++,
        frozen: undefined
      });
      if (iterable != undefined) iterate(iterable, that[ADDER], that, IS_MAP);
    });

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var data = getWeakData(anObject(key), true);
      if (data === true) uncaughtFrozenStore(state).set(key, value);
      else data[state.id] = value;
      return that;
    };

    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
        return data && $has(data, state.id) && delete data[state.id];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state).has(key);
        return data && $has(data, state.id);
      }
    });

    redefineAll(C.prototype, IS_MAP ? {
      // 23.3.3.3 WeakMap.prototype.get(key)
      get: function get(key) {
        var state = getInternalState(this);
        if (isObject(key)) {
          var data = getWeakData(key);
          if (data === true) return uncaughtFrozenStore(state).get(key);
          return data ? data[state.id] : undefined;
        }
      },
      // 23.3.3.5 WeakMap.prototype.set(key, value)
      set: function set(key, value) {
        return define(this, key, value);
      }
    } : {
      // 23.4.3.1 WeakSet.prototype.add(value)
      add: function add(value) {
        return define(this, value, true);
      }
    });

    return C;
  }
};


/***/ }),

/***/ "accc":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var toISOString = __webpack_require__("64e5");

// `Date.prototype.toISOString` method
// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
// PhantomJS / old WebKit has a broken implementations
$({ target: 'Date', proto: true, forced: Date.prototype.toISOString !== toISOString }, {
  toISOString: toISOString
});


/***/ }),

/***/ "acd8":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var parseFloatImplementation = __webpack_require__("6fe5");

// `parseFloat` method
// https://tc39.github.io/ecma262/#sec-parsefloat-string
$({ global: true, forced: parseFloat != parseFloatImplementation }, {
  parseFloat: parseFloatImplementation
});


/***/ }),

/***/ "ace4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var ArrayBufferModule = __webpack_require__("621a");
var anObject = __webpack_require__("825a");
var toAbsoluteIndex = __webpack_require__("23cb");
var toLength = __webpack_require__("50c4");
var speciesConstructor = __webpack_require__("4840");

var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
var DataView = ArrayBufferModule.DataView;
var nativeArrayBufferSlice = ArrayBuffer.prototype.slice;

var INCORRECT_SLICE = fails(function () {
  return !new ArrayBuffer(2).slice(1, undefined).byteLength;
});

// `ArrayBuffer.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice
$({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
  slice: function slice(start, end) {
    if (nativeArrayBufferSlice !== undefined && end === undefined) {
      return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
    }
    var length = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var result = new (speciesConstructor(this, ArrayBuffer))(toLength(fin - first));
    var viewSource = new DataView(this);
    var viewTarget = new DataView(result);
    var index = 0;
    while (first < fin) {
      viewTarget.setUint8(index++, viewSource.getUint8(first++));
    } return result;
  }
});


/***/ }),

/***/ "ad6d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__("825a");

// `RegExp.prototype.flags` getter implementation
// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "ae93":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getPrototypeOf = __webpack_require__("e163");
var createNonEnumerableProperty = __webpack_require__("9112");
var has = __webpack_require__("5135");
var wellKnownSymbol = __webpack_require__("b622");
var IS_PURE = __webpack_require__("c430");

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "af93":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var isObject = __webpack_require__("861d");
var onFreeze = __webpack_require__("f183").onFreeze;
var FREEZING = __webpack_require__("bb2f");
var fails = __webpack_require__("d039");

var nativeSeal = Object.seal;
var FAILS_ON_PRIMITIVES = fails(function () { nativeSeal(1); });

// `Object.seal` method
// https://tc39.github.io/ecma262/#sec-object.seal
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  seal: function seal(it) {
    return nativeSeal && isObject(it) ? nativeSeal(onFreeze(it)) : it;
  }
});


/***/ }),

/***/ "aff5":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

// `Number.MAX_SAFE_INTEGER` constant
// https://tc39.github.io/ecma262/#sec-number.max_safe_integer
$({ target: 'Number', stat: true }, {
  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
});


/***/ }),

/***/ "b041":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
var classof = __webpack_require__("f5df");

// `Object.prototype.toString` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};


/***/ }),

/***/ "b0c0":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var defineProperty = __webpack_require__("9bf2").f;

var FunctionPrototype = Function.prototype;
var FunctionPrototypeToString = FunctionPrototype.toString;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// Function instances `.name` property
// https://tc39.github.io/ecma262/#sec-function-instances-name
if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
  defineProperty(FunctionPrototype, NAME, {
    configurable: true,
    get: function () {
      try {
        return FunctionPrototypeToString.call(this).match(nameRE)[1];
      } catch (error) {
        return '';
      }
    }
  });
}


/***/ }),

/***/ "b301":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__("d039");

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !method || !fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal
    method.call(null, argument || function () { throw 1; }, 1);
  });
};


/***/ }),

/***/ "b39a":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("d066");

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),

/***/ "b39a9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("da84");
var ArrayBufferViewCore = __webpack_require__("ebb5");
var fails = __webpack_require__("d039");

var Int8Array = global.Int8Array;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $toLocaleString = [].toLocaleString;
var $slice = [].slice;

// iOS Safari 6.x fails here
var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {
  $toLocaleString.call(new Int8Array(1));
});

var FORCED = fails(function () {
  return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
}) || !fails(function () {
  Int8Array.prototype.toLocaleString.call([1, 2]);
});

// `%TypedArray%.prototype.toLocaleString` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
exportTypedArrayMethod('toLocaleString', function toLocaleString() {
  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
}, FORCED);


/***/ }),

/***/ "b420":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var ArrayBufferModule = __webpack_require__("621a");
var NATIVE_ARRAY_BUFFER = __webpack_require__("ebb5").NATIVE_ARRAY_BUFFER;

// `DataView` constructor
// https://tc39.github.io/ecma262/#sec-dataview-constructor
$({ global: true, forced: !NATIVE_ARRAY_BUFFER }, {
  DataView: ArrayBufferModule.DataView
});


/***/ }),

/***/ "b56e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__("861d");
var definePropertyModule = __webpack_require__("9bf2");
var getPrototypeOf = __webpack_require__("e163");
var wellKnownSymbol = __webpack_require__("b622");

var HAS_INSTANCE = wellKnownSymbol('hasInstance');
var FunctionPrototype = Function.prototype;

// `Function.prototype[@@hasInstance]` method
// https://tc39.github.io/ecma262/#sec-function.prototype-@@hasinstance
if (!(HAS_INSTANCE in FunctionPrototype)) {
  definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, { value: function (O) {
    if (typeof this != 'function' || !isObject(O)) return false;
    if (!isObject(this.prototype)) return O instanceof this;
    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
    while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
    return false;
  } });
}


/***/ }),

/***/ "b575":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var classof = __webpack_require__("c6b6");
var macrotask = __webpack_require__("2cf4").set;
var IS_IOS = __webpack_require__("b629");

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var IS_NODE = classof(process) == 'process';
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  } else if (MutationObserver && !IS_IOS) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    then = promise.then;
    notify = function () {
      then.call(promise, flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};


/***/ }),

/***/ "b622":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var shared = __webpack_require__("5692");
var has = __webpack_require__("5135");
var uid = __webpack_require__("90e3");
var NATIVE_SYMBOL = __webpack_require__("4930");
var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!has(WellKnownSymbolsStore, name)) {
    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];
    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "b629":
/***/ (function(module, exports, __webpack_require__) {

var userAgent = __webpack_require__("b39a");

module.exports = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);


/***/ }),

/***/ "b636":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.asyncIterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.asynciterator
defineWellKnownSymbol('asyncIterator');


/***/ }),

/***/ "b64b":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var toObject = __webpack_require__("7b0b");
var nativeKeys = __webpack_require__("df75");
var fails = __webpack_require__("d039");

var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});


/***/ }),

/***/ "b65f":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.github.io/ecma262/#sec-math.trunc
$({ target: 'Math', stat: true }, {
  trunc: function trunc(it) {
    return (it > 0 ? floor : ceil)(it);
  }
});


/***/ }),

/***/ "b680":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var toInteger = __webpack_require__("a691");
var thisNumberValue = __webpack_require__("408a");
var repeat = __webpack_require__("1148");
var fails = __webpack_require__("d039");

var nativeToFixed = 1.0.toFixed;
var floor = Math.floor;

var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

var FORCED = nativeToFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !fails(function () {
  // V8 ~ Android 4.3-
  nativeToFixed.call({});
});

// `Number.prototype.toFixed` method
// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
$({ target: 'Number', proto: true, forced: FORCED }, {
  // eslint-disable-next-line max-statements
  toFixed: function toFixed(fractionDigits) {
    var number = thisNumberValue(this);
    var fractDigits = toInteger(fractionDigits);
    var data = [0, 0, 0, 0, 0, 0];
    var sign = '';
    var result = '0';
    var e, z, j, k;

    var multiply = function (n, c) {
      var index = -1;
      var c2 = c;
      while (++index < 6) {
        c2 += n * data[index];
        data[index] = c2 % 1e7;
        c2 = floor(c2 / 1e7);
      }
    };

    var divide = function (n) {
      var index = 6;
      var c = 0;
      while (--index >= 0) {
        c += data[index];
        data[index] = floor(c / n);
        c = (c % n) * 1e7;
      }
    };

    var dataToString = function () {
      var index = 6;
      var s = '';
      while (--index >= 0) {
        if (s !== '' || index === 0 || data[index] !== 0) {
          var t = String(data[index]);
          s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
        }
      } return s;
    };

    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
    // eslint-disable-next-line no-self-compare
    if (number != number) return 'NaN';
    if (number <= -1e21 || number >= 1e21) return String(number);
    if (number < 0) {
      sign = '-';
      number = -number;
    }
    if (number > 1e-21) {
      e = log(number * pow(2, 69, 1)) - 69;
      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = fractDigits;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        result = dataToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        result = dataToString() + repeat.call('0', fractDigits);
      }
    }
    if (fractDigits > 0) {
      k = result.length;
      result = sign + (k <= fractDigits
        ? '0.' + repeat.call('0', fractDigits - k) + result
        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
    } else {
      result = sign + result;
    } return result;
  }
});


/***/ }),

/***/ "b727":
/***/ (function(module, exports, __webpack_require__) {

var bind = __webpack_require__("f8c2");
var IndexedObject = __webpack_require__("44ad");
var toObject = __webpack_require__("7b0b");
var toLength = __webpack_require__("50c4");
var arraySpeciesCreate = __webpack_require__("65f0");

var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push.call(target, value); // filter
        } else if (IS_EVERY) return false;  // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6)
};


/***/ }),

/***/ "baa5":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var lastIndexOf = __webpack_require__("e58c");

// `Array.prototype.lastIndexOf` method
// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
$({ target: 'Array', proto: true, forced: lastIndexOf !== [].lastIndexOf }, {
  lastIndexOf: lastIndexOf
});


/***/ }),

/***/ "bb2f":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

module.exports = !fails(function () {
  return Object.isExtensible(Object.preventExtensions({}));
});


/***/ }),

/***/ "bc01":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");

var nativeImul = Math.imul;

var FORCED = fails(function () {
  return nativeImul(0xFFFFFFFF, 5) != -5 || nativeImul.length != 2;
});

// `Math.imul` method
// https://tc39.github.io/ecma262/#sec-math.imul
// some WebKit versions fails with big numbers, some has wrong arity
$({ target: 'Math', stat: true, forced: FORCED }, {
  imul: function imul(x, y) {
    var UINT16 = 0xFFFF;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),

/***/ "be8e":
/***/ (function(module, exports, __webpack_require__) {

var sign = __webpack_require__("f748");

var abs = Math.abs;
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

// `Math.fround` method implementation
// https://tc39.github.io/ecma262/#sec-math.fround
module.exports = Math.fround || function fround(x) {
  var $abs = abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),

/***/ "bf19":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
$({ target: 'URL', proto: true, enumerable: true }, {
  toJSON: function toJSON() {
    return URL.prototype.toString.call(this);
  }
});


/***/ }),

/***/ "bf96":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var FORCED = __webpack_require__("30a0");
var toObject = __webpack_require__("7b0b");
var toPrimitive = __webpack_require__("c04e");
var getPrototypeOf = __webpack_require__("e163");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;

// `Object.prototype.__lookupGetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupGetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __lookupGetter__: function __lookupGetter__(P) {
      var O = toObject(this);
      var key = toPrimitive(P, true);
      var desc;
      do {
        if (desc = getOwnPropertyDescriptor(O, key)) return desc.get;
      } while (O = getPrototypeOf(O));
    }
  });
}


/***/ }),

/***/ "c032":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");

exports.f = wellKnownSymbol;


/***/ }),

/***/ "c04e":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");

// `ToPrimitive` abstract operation
// https://tc39.github.io/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "c19f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var global = __webpack_require__("da84");
var arrayBufferModule = __webpack_require__("621a");
var setSpecies = __webpack_require__("2626");

var ARRAY_BUFFER = 'ArrayBuffer';
var ArrayBuffer = arrayBufferModule[ARRAY_BUFFER];
var NativeArrayBuffer = global[ARRAY_BUFFER];

// `ArrayBuffer` constructor
// https://tc39.github.io/ecma262/#sec-arraybuffer-constructor
$({ global: true, forced: NativeArrayBuffer !== ArrayBuffer }, {
  ArrayBuffer: ArrayBuffer
});

setSpecies(ARRAY_BUFFER);


/***/ }),

/***/ "c1ac":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $filter = __webpack_require__("b727").filter;
var speciesConstructor = __webpack_require__("4840");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.filter` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
exportTypedArrayMethod('filter', function filter(callbackfn /* , thisArg */) {
  var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  var C = speciesConstructor(this, this.constructor);
  var index = 0;
  var length = list.length;
  var result = new (aTypedArrayConstructor(C))(length);
  while (length > index) result[index] = list[index++];
  return result;
});


/***/ }),

/***/ "c1f9":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var iterate = __webpack_require__("2266");
var createProperty = __webpack_require__("8418");

// `Object.fromEntries` method
// https://github.com/tc39/proposal-object-from-entries
$({ target: 'Object', stat: true }, {
  fromEntries: function fromEntries(iterable) {
    var obj = {};
    iterate(iterable, function (k, v) {
      createProperty(obj, k, v);
    }, undefined, true);
    return obj;
  }
});


/***/ }),

/***/ "c35a":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var parseFloat = __webpack_require__("6fe5");

// `Number.parseFloat` method
// https://tc39.github.io/ecma262/#sec-number.parseFloat
$({ target: 'Number', stat: true, forced: Number.parseFloat != parseFloat }, {
  parseFloat: parseFloat
});


/***/ }),

/***/ "c430":
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "c5d0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.italics` method
// https://tc39.github.io/ecma262/#sec-string.prototype.italics
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('italics') }, {
  italics: function italics() {
    return createHTML(this, 'i', '', '');
  }
});


/***/ }),

/***/ "c6b6":
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "c6cd":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var setGlobal = __webpack_require__("ce4e");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;


/***/ }),

/***/ "c740":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $findIndex = __webpack_require__("b727").findIndex;
var addToUnscopables = __webpack_require__("44d2");

var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

// `Array.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND_INDEX);


/***/ }),

/***/ "c760":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

// `Reflect.has` method
// https://tc39.github.io/ecma262/#sec-reflect.has
$({ target: 'Reflect', stat: true }, {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),

/***/ "c7cd":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.fixed` method
// https://tc39.github.io/ecma262/#sec-string.prototype.fixed
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('fixed') }, {
  fixed: function fixed() {
    return createHTML(this, 'tt', '', '');
  }
});


/***/ }),

/***/ "c8ba":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "c906":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var isObject = __webpack_require__("861d");

var nativeIsExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsExtensible(1); });

// `Object.isExtensible` method
// https://tc39.github.io/ecma262/#sec-object.isextensible
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isExtensible: function isExtensible(it) {
    return isObject(it) ? nativeIsExtensible ? nativeIsExtensible(it) : true : false;
  }
});


/***/ }),

/***/ "c96a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.small` method
// https://tc39.github.io/ecma262/#sec-string.prototype.small
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('small') }, {
  small: function small() {
    return createHTML(this, 'small', '', '');
  }
});


/***/ }),

/***/ "c975":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $indexOf = __webpack_require__("4d64").indexOf;
var sloppyArrayMethod = __webpack_require__("b301");

var nativeIndexOf = [].indexOf;

var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
var SLOPPY_METHOD = sloppyArrayMethod('indexOf');

// `Array.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || SLOPPY_METHOD }, {
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? nativeIndexOf.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "c98e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;
var floor = Math.floor;
var stringFromCharCode = String.fromCharCode;

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */
var ucs2decode = function (string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  while (counter < length) {
    var value = string.charCodeAt(counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = string.charCodeAt(counter++);
      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
};

/**
 * Converts a digit/integer into a basic code point.
 */
var digitToBasic = function (digit) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */
var adapt = function (delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */
// eslint-disable-next-line  max-statements
var encode = function (input) {
  var output = [];

  // Convert the input in UCS-2 to an array of Unicode code points.
  input = ucs2decode(input);

  // Cache the length.
  var inputLength = input.length;

  // Initialize the state.
  var n = initialN;
  var delta = 0;
  var bias = initialBias;
  var i, currentValue;

  // Handle the basic code points.
  for (i = 0; i < input.length; i++) {
    currentValue = input[i];
    if (currentValue < 0x80) {
      output.push(stringFromCharCode(currentValue));
    }
  }

  var basicLength = output.length; // number of basic code points.
  var handledCPCount = basicLength; // number of code points that have been handled;

  // Finish the basic string with a delimiter unless it's empty.
  if (basicLength) {
    output.push(delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next larger one:
    var m = maxInt;
    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
    var handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      throw RangeError(OVERFLOW_ERROR);
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue < n && ++delta > maxInt) {
        throw RangeError(OVERFLOW_ERROR);
      }
      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;
        for (var k = base; /* no condition */; k += base) {
          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
          if (q < t) break;
          var qMinusT = q - t;
          var baseMinusT = base - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
          q = floor(qMinusT / baseMinusT);
        }

        output.push(stringFromCharCode(digitToBasic(q)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }

    ++delta;
    ++n;
  }
  return output.join('');
};

module.exports = function (input) {
  var encoded = [];
  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
  var i, label;
  for (i = 0; i < labels.length; i++) {
    label = labels[i];
    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
  }
  return encoded.join('.');
};


/***/ }),

/***/ "ca21":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var log1p = __webpack_require__("1ec1");

// `Math.log1p` method
// https://tc39.github.io/ecma262/#sec-math.log1p
$({ target: 'Math', stat: true }, { log1p: log1p });


/***/ }),

/***/ "ca84":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("5135");
var toIndexedObject = __webpack_require__("fc6a");
var indexOf = __webpack_require__("4d64").indexOf;
var hiddenKeys = __webpack_require__("d012");

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "ca91":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $reduce = __webpack_require__("d58f").left;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.reduce` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
exportTypedArrayMethod('reduce', function reduce(callbackfn /* , initialValue */) {
  return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),

/***/ "caad":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $includes = __webpack_require__("4d64").includes;
var addToUnscopables = __webpack_require__("44d2");

// `Array.prototype.includes` method
// https://tc39.github.io/ecma262/#sec-array.prototype.includes
$({ target: 'Array', proto: true }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');


/***/ }),

/***/ "cb29":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var fill = __webpack_require__("81d5");
var addToUnscopables = __webpack_require__("44d2");

// `Array.prototype.fill` method
// https://tc39.github.io/ecma262/#sec-array.prototype.fill
$({ target: 'Array', proto: true }, {
  fill: fill
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('fill');


/***/ }),

/***/ "cc12":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var isObject = __webpack_require__("861d");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "cc71":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var createHTML = __webpack_require__("857a");
var forcedStringHTMLMethod = __webpack_require__("eae9");

// `String.prototype.bold` method
// https://tc39.github.io/ecma262/#sec-string.prototype.bold
$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('bold') }, {
  bold: function bold() {
    return createHTML(this, 'b', '', '');
  }
});


/***/ }),

/***/ "cca6":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var assign = __webpack_require__("60da");

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
  assign: assign
});


/***/ }),

/***/ "cd26":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var floor = Math.floor;

// `%TypedArray%.prototype.reverse` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
exportTypedArrayMethod('reverse', function reverse() {
  var that = this;
  var length = aTypedArray(that).length;
  var middle = floor(length / 2);
  var index = 0;
  var value;
  while (index < middle) {
    value = that[index];
    that[index++] = that[--length];
    that[length] = value;
  } return that;
});


/***/ }),

/***/ "cdf9":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var isObject = __webpack_require__("861d");
var newPromiseCapability = __webpack_require__("f069");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "ce4e":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var createNonEnumerableProperty = __webpack_require__("9112");

module.exports = function (key, value) {
  try {
    createNonEnumerableProperty(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "cee8":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var isObject = __webpack_require__("861d");
var onFreeze = __webpack_require__("f183").onFreeze;
var FREEZING = __webpack_require__("bb2f");
var fails = __webpack_require__("d039");

var nativePreventExtensions = Object.preventExtensions;
var FAILS_ON_PRIMITIVES = fails(function () { nativePreventExtensions(1); });

// `Object.preventExtensions` method
// https://tc39.github.io/ecma262/#sec-object.preventextensions
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  preventExtensions: function preventExtensions(it) {
    return nativePreventExtensions && isObject(it) ? nativePreventExtensions(onFreeze(it)) : it;
  }
});


/***/ }),

/***/ "cfc3":
/***/ (function(module, exports, __webpack_require__) {

var createTypedArrayConstructor = __webpack_require__("74e8");

// `Float32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Float32', function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "d012":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "d039":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "d066":
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__("428f");
var global = __webpack_require__("da84");

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "d139":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $find = __webpack_require__("b727").find;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.find` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
exportTypedArrayMethod('find', function find(predicate /* , thisArg */) {
  return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),

/***/ "d1e7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;


/***/ }),

/***/ "d28b":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.iterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');


/***/ }),

/***/ "d2bb":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("825a");
var aPossiblePrototype = __webpack_require__("3bbe");

// `Object.setPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "d3b7":
/***/ (function(module, exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
var redefine = __webpack_require__("6eeb");
var toString = __webpack_require__("b041");

// `Object.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  redefine(Object.prototype, 'toString', toString, { unsafe: true });
}


/***/ }),

/***/ "d44e":
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__("9bf2").f;
var has = __webpack_require__("5135");
var wellKnownSymbol = __webpack_require__("b622");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),

/***/ "d58f":
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__("1c0b");
var toObject = __webpack_require__("7b0b");
var IndexedObject = __webpack_require__("44ad");
var toLength = __webpack_require__("50c4");

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function (IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aFunction(callbackfn);
    var O = toObject(that);
    var self = IndexedObject(O);
    var length = toLength(O.length);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
};

module.exports = {
  // `Array.prototype.reduce` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};


/***/ }),

/***/ "d5d6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $forEach = __webpack_require__("b727").forEach;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.forEach` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
exportTypedArrayMethod('forEach', function forEach(callbackfn /* , thisArg */) {
  $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),

/***/ "d6dd":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var getBuiltIn = __webpack_require__("d066");
var anObject = __webpack_require__("825a");
var FREEZING = __webpack_require__("bb2f");

// `Reflect.preventExtensions` method
// https://tc39.github.io/ecma262/#sec-reflect.preventextensions
$({ target: 'Reflect', stat: true, sham: !FREEZING }, {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      var objectPreventExtensions = getBuiltIn('Object', 'preventExtensions');
      if (objectPreventExtensions) objectPreventExtensions(target);
      return true;
    } catch (error) {
      return false;
    }
  }
});


/***/ }),

/***/ "d784":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefine = __webpack_require__("6eeb");
var fails = __webpack_require__("d039");
var wellKnownSymbol = __webpack_require__("b622");
var regexpExec = __webpack_require__("9263");
var createNonEnumerableProperty = __webpack_require__("9112");

var SPECIES = wellKnownSymbol('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  return 'a'.replace(/./, '$0') === '$0';
})();

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

module.exports = function (KEY, length, exec, sham) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !(REPLACE_SUPPORTS_NAMED_GROUPS && REPLACE_KEEPS_$0)) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      if (regexp.exec === regexpExec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
        }
        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
      }
      return { done: false };
    }, { REPLACE_KEEPS_$0: REPLACE_KEEPS_$0 });
    var stringMethod = methods[0];
    var regexMethod = methods[1];

    redefine(String.prototype, KEY, stringMethod);
    redefine(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return regexMethod.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return regexMethod.call(string, this); }
    );
  }

  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
};


/***/ }),

/***/ "d80f":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var toIndexedObject = __webpack_require__("fc6a");
var toLength = __webpack_require__("50c4");

// `String.raw` method
// https://tc39.github.io/ecma262/#sec-string.raw
$({ target: 'String', stat: true }, {
  raw: function raw(template) {
    var rawTemplate = toIndexedObject(template.raw);
    var literalSegments = toLength(rawTemplate.length);
    var argumentsLength = arguments.length;
    var elements = [];
    var i = 0;
    while (literalSegments > i) {
      elements.push(String(rawTemplate[i++]));
      if (i < argumentsLength) elements.push(String(arguments[i]));
    } return elements.join('');
  }
});


/***/ }),

/***/ "d81d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $map = __webpack_require__("b727").map;
var fails = __webpack_require__("d039");
var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');
// FF49- issue
var USES_TO_LENGTH = HAS_SPECIES_SUPPORT && !fails(function () {
  [].map.call({ length: -1, 0: 1 }, function (it) { throw it; });
});

// `Array.prototype.map` method
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "da84":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line no-undef
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func
  Function('return this')();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "db96":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var anObject = __webpack_require__("825a");

var objectIsExtensible = Object.isExtensible;

// `Reflect.isExtensible` method
// https://tc39.github.io/ecma262/#sec-reflect.isextensible
$({ target: 'Reflect', stat: true }, {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return objectIsExtensible ? objectIsExtensible(target) : true;
  }
});


/***/ }),

/***/ "dbb4":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var ownKeys = __webpack_require__("56ef");
var toIndexedObject = __webpack_require__("fc6a");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var createProperty = __webpack_require__("8418");

// `Object.getOwnPropertyDescriptors` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIndexedObject(object);
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var keys = ownKeys(O);
    var result = {};
    var index = 0;
    var key, descriptor;
    while (keys.length > index) {
      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
      if (descriptor !== undefined) createProperty(result, key, descriptor);
    }
    return result;
  }
});


/***/ }),

/***/ "dc8d":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.hasInstance` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.hasinstance
defineWellKnownSymbol('hasInstance');


/***/ }),

/***/ "dca8":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var FREEZING = __webpack_require__("bb2f");
var fails = __webpack_require__("d039");
var isObject = __webpack_require__("861d");
var onFreeze = __webpack_require__("f183").onFreeze;

var nativeFreeze = Object.freeze;
var FAILS_ON_PRIMITIVES = fails(function () { nativeFreeze(1); });

// `Object.freeze` method
// https://tc39.github.io/ecma262/#sec-object.freeze
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
  freeze: function freeze(it) {
    return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
  }
});


/***/ }),

/***/ "ddb0":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var DOMIterables = __webpack_require__("fdbc");
var ArrayIteratorMethods = __webpack_require__("e260");
var createNonEnumerableProperty = __webpack_require__("9112");
var wellKnownSymbol = __webpack_require__("b622");

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
}


/***/ }),

/***/ "df75":
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__("ca84");
var enumBugKeys = __webpack_require__("7839");

// `Object.keys` method
// https://tc39.github.io/ecma262/#sec-object.keys
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "e01a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// `Symbol.prototype.description` getter
// https://tc39.github.io/ecma262/#sec-symbol.prototype.description

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var global = __webpack_require__("da84");
var has = __webpack_require__("5135");
var isObject = __webpack_require__("861d");
var defineProperty = __webpack_require__("9bf2").f;
var copyConstructorProperties = __webpack_require__("e893");

var NativeSymbol = global.Symbol;

if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
    var result = this instanceof SymbolWrapper
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };
  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
  symbolPrototype.constructor = SymbolWrapper;

  var symbolToString = symbolPrototype.toString;
  var native = String(NativeSymbol('test')) == 'Symbol(test)';
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  defineProperty(symbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = isObject(this) ? this.valueOf() : this;
      var string = symbolToString.call(symbol);
      if (has(EmptyStringDescriptionStore, symbol)) return '';
      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  $({ global: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}


/***/ }),

/***/ "e070":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var whitespaces = __webpack_require__("5899");

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
  });
};


/***/ }),

/***/ "e163":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("5135");
var toObject = __webpack_require__("7b0b");
var sharedKey = __webpack_require__("f772");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.github.io/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "e177":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "e21d":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var isObject = __webpack_require__("861d");

var nativeIsFrozen = Object.isFrozen;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsFrozen(1); });

// `Object.isFrozen` method
// https://tc39.github.io/ecma262/#sec-object.isfrozen
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isFrozen: function isFrozen(it) {
    return isObject(it) ? nativeIsFrozen ? nativeIsFrozen(it) : false : true;
  }
});


/***/ }),

/***/ "e25e":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var parseIntImplementation = __webpack_require__("e583");

// `parseInt` method
// https://tc39.github.io/ecma262/#sec-parseint-string-radix
$({ global: true, forced: parseInt != parseIntImplementation }, {
  parseInt: parseIntImplementation
});


/***/ }),

/***/ "e260":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__("fc6a");
var addToUnscopables = __webpack_require__("44d2");
var Iterators = __webpack_require__("3f8c");
var InternalStateModule = __webpack_require__("69f3");
var defineIterator = __webpack_require__("7dd0");

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.github.io/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.github.io/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "e285":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");

var globalIsFinite = global.isFinite;

// `Number.isFinite` method
// https://tc39.github.io/ecma262/#sec-number.isfinite
module.exports = Number.isFinite || function isFinite(it) {
  return typeof it == 'number' && globalIsFinite(it);
};


/***/ }),

/***/ "e2cc":
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__("6eeb");

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};


/***/ }),

/***/ "e439":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var toIndexedObject = __webpack_require__("fc6a");
var nativeGetOwnPropertyDescriptor = __webpack_require__("06cf").f;
var DESCRIPTORS = __webpack_require__("83ab");

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });
var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
  }
});


/***/ }),

/***/ "e43e":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var isObject = __webpack_require__("861d");

var nativeIsSealed = Object.isSealed;
var FAILS_ON_PRIMITIVES = fails(function () { nativeIsSealed(1); });

// `Object.isSealed` method
// https://tc39.github.io/ecma262/#sec-object.issealed
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  isSealed: function isSealed(it) {
    return isObject(it) ? nativeIsSealed ? nativeIsSealed(it) : false : true;
  }
});


/***/ }),

/***/ "e583":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var trim = __webpack_require__("58a8").trim;
var whitespaces = __webpack_require__("5899");

var nativeParseInt = global.parseInt;
var hex = /^[+-]?0[Xx]/;
var FORCED = nativeParseInt(whitespaces + '08') !== 8 || nativeParseInt(whitespaces + '0x16') !== 22;

// `parseInt` method
// https://tc39.github.io/ecma262/#sec-parseint-string-radix
module.exports = FORCED ? function parseInt(string, radix) {
  var S = trim(String(string));
  return nativeParseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
} : nativeParseInt;


/***/ }),

/***/ "e58c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__("fc6a");
var toInteger = __webpack_require__("a691");
var toLength = __webpack_require__("50c4");
var sloppyArrayMethod = __webpack_require__("b301");

var min = Math.min;
var nativeLastIndexOf = [].lastIndexOf;
var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
var SLOPPY_METHOD = sloppyArrayMethod('lastIndexOf');

// `Array.prototype.lastIndexOf` method implementation
// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
module.exports = (NEGATIVE_ZERO || SLOPPY_METHOD) ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
  // convert -0 to +0
  if (NEGATIVE_ZERO) return nativeLastIndexOf.apply(this, arguments) || 0;
  var O = toIndexedObject(this);
  var length = toLength(O.length);
  var index = length - 1;
  if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
  if (index < 0) index = length + index;
  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
  return -1;
} : nativeLastIndexOf;


/***/ }),

/***/ "e667":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};


/***/ }),

/***/ "e6cf":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var IS_PURE = __webpack_require__("c430");
var global = __webpack_require__("da84");
var getBuiltIn = __webpack_require__("d066");
var NativePromise = __webpack_require__("fea9");
var redefine = __webpack_require__("6eeb");
var redefineAll = __webpack_require__("e2cc");
var setToStringTag = __webpack_require__("d44e");
var setSpecies = __webpack_require__("2626");
var isObject = __webpack_require__("861d");
var aFunction = __webpack_require__("1c0b");
var anInstance = __webpack_require__("19aa");
var classof = __webpack_require__("c6b6");
var inspectSource = __webpack_require__("8925");
var iterate = __webpack_require__("2266");
var checkCorrectnessOfIteration = __webpack_require__("1c7e");
var speciesConstructor = __webpack_require__("4840");
var task = __webpack_require__("2cf4").set;
var microtask = __webpack_require__("b575");
var promiseResolve = __webpack_require__("cdf9");
var hostReportErrors = __webpack_require__("44de");
var newPromiseCapabilityModule = __webpack_require__("f069");
var perform = __webpack_require__("e667");
var InternalStateModule = __webpack_require__("69f3");
var isForced = __webpack_require__("94ca");
var wellKnownSymbol = __webpack_require__("b622");
var V8_VERSION = __webpack_require__("60ae");

var SPECIES = wellKnownSymbol('species');
var PROMISE = 'Promise';
var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var PromiseConstructor = NativePromise;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var $fetch = getBuiltIn('fetch');
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;
var IS_NODE = classof(process) == 'process';
var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

var FORCED = isForced(PROMISE, function () {
  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
  if (!GLOBAL_CORE_JS_PROMISE) {
    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
    // We can't detect it synchronously, so just check versions
    if (V8_VERSION === 66) return true;
    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    if (!IS_NODE && typeof PromiseRejectionEvent != 'function') return true;
  }
  // We need Promise#finally in the pure version for preventing prototype pollution
  if (IS_PURE && !PromiseConstructor.prototype['finally']) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION >= 51 && /native code/.test(PromiseConstructor)) return false;
  // Detect correctness of subclassing with @@species support
  var promise = PromiseConstructor.resolve(1);
  var FakePromise = function (exec) {
    exec(function () { /* empty */ }, function () { /* empty */ });
  };
  var constructor = promise.constructor = {};
  constructor[SPECIES] = FakePromise;
  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
});

var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
});

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};

var notify = function (promise, state, isReject) {
  if (state.notified) return;
  state.notified = true;
  var chain = state.reactions;
  microtask(function () {
    var value = state.value;
    var ok = state.state == FULFILLED;
    var index = 0;
    // variable length - can't use forEach
    while (chain.length > index) {
      var reaction = chain[index++];
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
            state.rejection = HANDLED;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // can throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (error) {
        if (domain && !exited) domain.exit();
        reject(error);
      }
    }
    state.reactions = [];
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(promise, state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (handler = global['on' + name]) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (promise, state) {
  task.call(global, function () {
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (promise, state) {
  task.call(global, function () {
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, promise, state, unwrap) {
  return function (value) {
    fn(promise, state, value, unwrap);
  };
};

var internalReject = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(promise, state, true);
};

var internalResolve = function (promise, state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          then.call(value,
            bind(internalResolve, promise, wrapper, state),
            bind(internalReject, promise, wrapper, state)
          );
        } catch (error) {
          internalReject(promise, wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(promise, state, false);
    }
  } catch (error) {
    internalReject(promise, { done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromiseConstructor, PROMISE);
    aFunction(executor);
    Internal.call(this);
    var state = getInternalState(this);
    try {
      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
    } catch (error) {
      internalReject(this, state, error);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: [],
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };
  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
    // `Promise.prototype.then` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
    then: function then(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this);
      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = IS_NODE ? process.domain : undefined;
      state.parent = true;
      state.reactions.push(reaction);
      if (state.state != PENDING) notify(this, state, false);
      return reaction.promise;
    },
    // `Promise.prototype.catch` method
    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, promise, state);
    this.reject = bind(internalReject, promise, state);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && typeof NativePromise == 'function') {
    nativeThen = NativePromise.prototype.then;

    // wrap native Promise#then for native async functions
    redefine(NativePromise.prototype, 'then', function then(onFulfilled, onRejected) {
      var that = this;
      return new PromiseConstructor(function (resolve, reject) {
        nativeThen.call(that, resolve, reject);
      }).then(onFulfilled, onRejected);
    // https://github.com/zloirock/core-js/issues/640
    }, { unsafe: true });

    // wrap fetch result
    if (typeof $fetch == 'function') $({ global: true, enumerable: true, forced: true }, {
      // eslint-disable-next-line no-unused-vars
      fetch: function fetch(input /* , init */) {
        return promiseResolve(PromiseConstructor, $fetch.apply(global, arguments));
      }
    });
  }
}

$({ global: true, wrap: true, forced: FORCED }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

PromiseWrapper = getBuiltIn(PROMISE);

// statics
$({ target: PROMISE, stat: true, forced: FORCED }, {
  // `Promise.reject` method
  // https://tc39.github.io/ecma262/#sec-promise.reject
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    capability.reject.call(undefined, r);
    return capability.promise;
  }
});

$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
  // `Promise.resolve` method
  // https://tc39.github.io/ecma262/#sec-promise.resolve
  resolve: function resolve(x) {
    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
  }
});

$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
  // `Promise.all` method
  // https://tc39.github.io/ecma262/#sec-promise.all
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        $promiseResolve.call(C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  },
  // `Promise.race` method
  // https://tc39.github.io/ecma262/#sec-promise.race
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aFunction(C.resolve);
      iterate(iterable, function (promise) {
        $promiseResolve.call(C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "e6e1":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");

// `Number.MIN_SAFE_INTEGER` constant
// https://tc39.github.io/ecma262/#sec-number.min_safe_integer
$({ target: 'Number', stat: true }, {
  MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
});


/***/ }),

/***/ "e71b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var DESCRIPTORS = __webpack_require__("83ab");
var FORCED = __webpack_require__("30a0");
var toObject = __webpack_require__("7b0b");
var aFunction = __webpack_require__("1c0b");
var definePropertyModule = __webpack_require__("9bf2");

// `Object.prototype.__defineSetter__` method
// https://tc39.github.io/ecma262/#sec-object.prototype.__defineSetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __defineSetter__: function __defineSetter__(P, setter) {
      definePropertyModule.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
    }
  });
}


/***/ }),

/***/ "e893":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("5135");
var ownKeys = __webpack_require__("56ef");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var definePropertyModule = __webpack_require__("9bf2");

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};


/***/ }),

/***/ "e8b5":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("c6b6");

// `IsArray` abstract operation
// https://tc39.github.io/ecma262/#sec-isarray
module.exports = Array.isArray || function isArray(arg) {
  return classof(arg) == 'Array';
};


/***/ }),

/***/ "e91f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var $indexOf = __webpack_require__("4d64").indexOf;

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.indexOf` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
exportTypedArrayMethod('indexOf', function indexOf(searchElement /* , fromIndex */) {
  return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
});


/***/ }),

/***/ "e95a":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");
var Iterators = __webpack_require__("3f8c");

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ "eae9":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

// check the existence of a method, lowercase
// of a tag and escaping quotes in arguments
module.exports = function (METHOD_NAME) {
  return fails(function () {
    var test = ''[METHOD_NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  });
};


/***/ }),

/***/ "ebb5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__("83ab");
var global = __webpack_require__("da84");
var isObject = __webpack_require__("861d");
var has = __webpack_require__("5135");
var classof = __webpack_require__("f5df");
var createNonEnumerableProperty = __webpack_require__("9112");
var redefine = __webpack_require__("6eeb");
var defineProperty = __webpack_require__("9bf2").f;
var getPrototypeOf = __webpack_require__("e163");
var setPrototypeOf = __webpack_require__("d2bb");
var wellKnownSymbol = __webpack_require__("b622");
var uid = __webpack_require__("90e3");

var DataView = global.DataView;
var DataViewPrototype = DataView && DataView.prototype;
var Int8Array = global.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var Uint8ClampedArray = global.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
var TypedArray = Int8Array && getPrototypeOf(Int8Array);
var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
var ObjectPrototype = Object.prototype;
var isPrototypeOf = ObjectPrototype.isPrototypeOf;

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
var NATIVE_ARRAY_BUFFER = !!(global.ArrayBuffer && DataView);
// Fixing native typed arrays in Opera Presto crashes the browser, see #595
var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQIRED = false;
var NAME;

var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};

var isView = function isView(it) {
  var klass = classof(it);
  return klass === 'DataView' || has(TypedArrayConstructorsList, klass);
};

var isTypedArray = function (it) {
  return isObject(it) && has(TypedArrayConstructorsList, classof(it));
};

var aTypedArray = function (it) {
  if (isTypedArray(it)) return it;
  throw TypeError('Target is not a typed array');
};

var aTypedArrayConstructor = function (C) {
  if (setPrototypeOf) {
    if (isPrototypeOf.call(TypedArray, C)) return C;
  } else for (var ARRAY in TypedArrayConstructorsList) if (has(TypedArrayConstructorsList, NAME)) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
      return C;
    }
  } throw TypeError('Target is not a typed array constructor');
};

var exportTypedArrayMethod = function (KEY, property, forced) {
  if (!DESCRIPTORS) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {
      delete TypedArrayConstructor.prototype[KEY];
    }
  }
  if (!TypedArrayPrototype[KEY] || forced) {
    redefine(TypedArrayPrototype, KEY, forced ? property
      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
  }
};

var exportTypedArrayStaticMethod = function (KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!DESCRIPTORS) return;
  if (setPrototypeOf) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global[ARRAY];
      if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {
        delete TypedArrayConstructor[KEY];
      }
    }
    if (!TypedArray[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY] || property);
      } catch (error) { /* empty */ }
    } else return;
  }
  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      redefine(TypedArrayConstructor, KEY, property);
    }
  }
};

for (NAME in TypedArrayConstructorsList) {
  if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
}

// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
  // eslint-disable-next-line no-shadow
  TypedArray = function TypedArray() {
    throw TypeError('Incorrect invocation');
  };
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
  }
}

if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
  TypedArrayPrototype = TypedArray.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
  }
}

// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
}

if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
  TYPED_ARRAY_TAG_REQIRED = true;
  defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function () {
    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
  } });
  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {
    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
  }
}

// WebKit bug - the same parent prototype for typed arrays and data view
if (NATIVE_ARRAY_BUFFER && setPrototypeOf && getPrototypeOf(DataViewPrototype) !== ObjectPrototype) {
  setPrototypeOf(DataViewPrototype, ObjectPrototype);
}

module.exports = {
  NATIVE_ARRAY_BUFFER: NATIVE_ARRAY_BUFFER,
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
  aTypedArray: aTypedArray,
  aTypedArrayConstructor: aTypedArrayConstructor,
  exportTypedArrayMethod: exportTypedArrayMethod,
  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
  isView: isView,
  isTypedArray: isTypedArray,
  TypedArray: TypedArray,
  TypedArrayPrototype: TypedArrayPrototype
};


/***/ }),

/***/ "ec97":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = __webpack_require__("166a");

var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
var exportTypedArrayStaticMethod = ArrayBufferViewCore.exportTypedArrayStaticMethod;

// `%TypedArray%.of` method
// https://tc39.github.io/ecma262/#sec-%typedarray%.of
exportTypedArrayStaticMethod('of', function of(/* ...items */) {
  var index = 0;
  var length = arguments.length;
  var result = new (aTypedArrayConstructor(this))(length);
  while (length > index) result[index] = arguments[index++];
  return result;
}, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);


/***/ }),

/***/ "eee7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $trimStart = __webpack_require__("58a8").start;
var forcedStringTrimMethod = __webpack_require__("e070");

var FORCED = forcedStringTrimMethod('trimStart');

var trimStart = FORCED ? function trimStart() {
  return $trimStart(this);
} : ''.trimStart;

// `String.prototype.{ trimStart, trimLeft }` methods
// https://github.com/tc39/ecmascript-string-left-right-trim
$({ target: 'String', proto: true, forced: FORCED }, {
  trimStart: trimStart,
  trimLeft: trimStart
});


/***/ }),

/***/ "efe9":
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.isConcatSpreadable` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
defineWellKnownSymbol('isConcatSpreadable');


/***/ }),

/***/ "efec":
/***/ (function(module, exports, __webpack_require__) {

var createNonEnumerableProperty = __webpack_require__("9112");
var dateToPrimitive = __webpack_require__("51eb");
var wellKnownSymbol = __webpack_require__("b622");

var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var DatePrototype = Date.prototype;

// `Date.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-date.prototype-@@toprimitive
if (!(TO_PRIMITIVE in DatePrototype)) {
  createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
}


/***/ }),

/***/ "f00c":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var numberIsFinite = __webpack_require__("e285");

// `Number.isFinite` method
// https://tc39.github.io/ecma262/#sec-number.isfinite
$({ target: 'Number', stat: true }, { isFinite: numberIsFinite });


/***/ }),

/***/ "f069":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__("1c0b");

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
};

// 25.4.1.5 NewPromiseCapability(C)
module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "f183":
/***/ (function(module, exports, __webpack_require__) {

var hiddenKeys = __webpack_require__("d012");
var isObject = __webpack_require__("861d");
var has = __webpack_require__("5135");
var defineProperty = __webpack_require__("9bf2").f;
var uid = __webpack_require__("90e3");
var FREEZING = __webpack_require__("bb2f");

var METADATA = uid('meta');
var id = 0;

var isExtensible = Object.isExtensible || function () {
  return true;
};

var setMetadata = function (it) {
  defineProperty(it, METADATA, { value: {
    objectID: 'O' + ++id, // object ID
    weakData: {}          // weak collections IDs
  } });
};

var fastKey = function (it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
  // return object ID
  } return it[METADATA].objectID;
};

var getWeakData = function (it, create) {
  if (!has(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
  // return the store of weak collections IDs
  } return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
  return it;
};

var meta = module.exports = {
  REQUIRED: false,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};

hiddenKeys[METADATA] = true;


/***/ }),

/***/ "f4b3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var fails = __webpack_require__("d039");
var toObject = __webpack_require__("7b0b");
var toPrimitive = __webpack_require__("c04e");

var FORCED = fails(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
});

// `Date.prototype.toJSON` method
// https://tc39.github.io/ecma262/#sec-date.prototype.tojson
$({ target: 'Date', proto: true, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),

/***/ "f4dd":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var $reduceRight = __webpack_require__("d58f").right;
var sloppyArrayMethod = __webpack_require__("b301");

// `Array.prototype.reduceRight` method
// https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
$({ target: 'Array', proto: true, forced: sloppyArrayMethod('reduceRight') }, {
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "f5b2":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var codeAt = __webpack_require__("6547").codeAt;

// `String.prototype.codePointAt` method
// https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
$({ target: 'String', proto: true }, {
  codePointAt: function codePointAt(pos) {
    return codeAt(this, pos);
  }
});


/***/ }),

/***/ "f5df":
/***/ (function(module, exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
var classofRaw = __webpack_require__("c6b6");
var wellKnownSymbol = __webpack_require__("b622");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};


/***/ }),

/***/ "f664":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var fround = __webpack_require__("be8e");

// `Math.fround` method
// https://tc39.github.io/ecma262/#sec-math.fround
$({ target: 'Math', stat: true }, { fround: fround });


/***/ }),

/***/ "f6d6":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var toAbsoluteIndex = __webpack_require__("23cb");

var fromCharCode = String.fromCharCode;
var nativeFromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
var INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1;

// `String.fromCodePoint` method
// https://tc39.github.io/ecma262/#sec-string.fromcodepoint
$({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var elements = [];
    var length = arguments.length;
    var i = 0;
    var code;
    while (length > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
      elements.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00)
      );
    } return elements.join('');
  }
});


/***/ }),

/***/ "f6fd":
/***/ (function(module, exports) {

// document.currentScript polyfill by Adam Miller

// MIT license

(function(document){
  var currentScript = "currentScript",
      scripts = document.getElementsByTagName('script'); // Live NodeList collection

  // If browser needs currentScript polyfill, add get currentScript() to the document object
  if (!(currentScript in document)) {
    Object.defineProperty(document, currentScript, {
      get: function(){

        // IE 6-10 supports script readyState
        // IE 10+ support stack trace
        try { throw new Error(); }
        catch (err) {

          // Find the second match for the "at" string to get file src url from stack.
          // Specifically works with the format of stack traces in IE.
          var i, res = ((/.*at [^\(]*\((.*):.+:.+\)$/ig).exec(err.stack) || [false])[1];

          // For all scripts on the page, if src matches or if ready state is interactive, return the script tag
          for(i in scripts){
            if(scripts[i].src == res || scripts[i].readyState == "interactive"){
              return scripts[i];
            }
          }

          // If no match, return null
          return null;
        }
      }
    });
  }
})(document);


/***/ }),

/***/ "f748":
/***/ (function(module, exports) {

// `Math.sign` method implementation
// https://tc39.github.io/ecma262/#sec-math.sign
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),

/***/ "f772":
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__("5692");
var uid = __webpack_require__("90e3");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "f785":
/***/ (function(module, exports, __webpack_require__) {

var setSpecies = __webpack_require__("2626");

// `Array[@@species]` getter
// https://tc39.github.io/ecma262/#sec-get-array-@@species
setSpecies('Array');


/***/ }),

/***/ "f8c2":
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__("1c0b");

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "f8cd":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("a691");

module.exports = function (it) {
  var result = toInteger(it);
  if (result < 0) throw RangeError("The argument can't be less than 0");
  return result;
};


/***/ }),

/***/ "fb15":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js
// This file is imported into lib/wc client bundles.

if (typeof window !== 'undefined') {
  if (true) {
    __webpack_require__("f6fd")
  }

  var setPublicPath_i
  if ((setPublicPath_i = window.document.currentScript) && (setPublicPath_i = setPublicPath_i.src.match(/(.+\/)[^/]+\.js(\?.*)?$/))) {
    __webpack_require__.p = setPublicPath_i[1] // eslint-disable-line
  }
}

// Indicate to webpack that this file can be concatenated
/* harmony default export */ var setPublicPath = (null);

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js
var es_symbol = __webpack_require__("a4d3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js
var es_symbol_description = __webpack_require__("e01a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.async-iterator.js
var es_symbol_async_iterator = __webpack_require__("b636");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.has-instance.js
var es_symbol_has_instance = __webpack_require__("dc8d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.is-concat-spreadable.js
var es_symbol_is_concat_spreadable = __webpack_require__("efe9");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js
var es_symbol_iterator = __webpack_require__("d28b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.match.js
var es_symbol_match = __webpack_require__("2a1b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.replace.js
var es_symbol_replace = __webpack_require__("80e0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.search.js
var es_symbol_search = __webpack_require__("6b9e");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.species.js
var es_symbol_species = __webpack_require__("197b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.split.js
var es_symbol_split = __webpack_require__("2351");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.to-primitive.js
var es_symbol_to_primitive = __webpack_require__("8172");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.to-string-tag.js
var es_symbol_to_string_tag = __webpack_require__("944a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.unscopables.js
var es_symbol_unscopables = __webpack_require__("81b8");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js
var es_array_concat = __webpack_require__("99af");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.copy-within.js
var es_array_copy_within = __webpack_require__("a874");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.every.js
var es_array_every = __webpack_require__("a623");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.fill.js
var es_array_fill = __webpack_require__("cb29");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.filter.js
var es_array_filter = __webpack_require__("4de4");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find.js
var es_array_find = __webpack_require__("7db0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.find-index.js
var es_array_find_index = __webpack_require__("c740");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.flat.js
var es_array_flat = __webpack_require__("0481");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.flat-map.js
var es_array_flat_map = __webpack_require__("5db7");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.for-each.js
var es_array_for_each = __webpack_require__("4160");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js
var es_array_from = __webpack_require__("a630");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js
var es_array_includes = __webpack_require__("caad");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.index-of.js
var es_array_index_of = __webpack_require__("c975");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js
var es_array_iterator = __webpack_require__("e260");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.join.js
var es_array_join = __webpack_require__("a15b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.last-index-of.js
var es_array_last_index_of = __webpack_require__("baa5");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js
var es_array_map = __webpack_require__("d81d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.of.js
var es_array_of = __webpack_require__("5ded");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.reduce.js
var es_array_reduce = __webpack_require__("13d5");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.reduce-right.js
var es_array_reduce_right = __webpack_require__("f4dd");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.reverse.js
var es_array_reverse = __webpack_require__("26e9");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js
var es_array_slice = __webpack_require__("fb6a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.some.js
var es_array_some = __webpack_require__("45fc");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.sort.js
var es_array_sort = __webpack_require__("4e82");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.species.js
var es_array_species = __webpack_require__("f785");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.splice.js
var es_array_splice = __webpack_require__("a434");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.unscopables.flat.js
var es_array_unscopables_flat = __webpack_require__("4069");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.unscopables.flat-map.js
var es_array_unscopables_flat_map = __webpack_require__("73d9");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array-buffer.constructor.js
var es_array_buffer_constructor = __webpack_require__("c19f");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array-buffer.is-view.js
var es_array_buffer_is_view = __webpack_require__("82da");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array-buffer.slice.js
var es_array_buffer_slice = __webpack_require__("ace4");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.data-view.js
var es_data_view = __webpack_require__("b420");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.date.to-iso-string.js
var es_date_to_iso_string = __webpack_require__("accc");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.date.to-json.js
var es_date_to_json = __webpack_require__("f4b3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.date.to-primitive.js
var es_date_to_primitive = __webpack_require__("efec");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.date.to-string.js
var es_date_to_string = __webpack_require__("0d03");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.has-instance.js
var es_function_has_instance = __webpack_require__("b56e");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js
var es_function_name = __webpack_require__("b0c0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.json.to-string-tag.js
var es_json_to_string_tag = __webpack_require__("0c47");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.map.js
var es_map = __webpack_require__("4ec9");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.acosh.js
var es_math_acosh = __webpack_require__("5327");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.asinh.js
var es_math_asinh = __webpack_require__("79a8");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.atanh.js
var es_math_atanh = __webpack_require__("9ff9");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.cbrt.js
var es_math_cbrt = __webpack_require__("3ea3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.clz32.js
var es_math_clz32 = __webpack_require__("40d9");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.cosh.js
var es_math_cosh = __webpack_require__("ff9c");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.expm1.js
var es_math_expm1 = __webpack_require__("0ac8");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.fround.js
var es_math_fround = __webpack_require__("f664");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.hypot.js
var es_math_hypot = __webpack_require__("4057");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.imul.js
var es_math_imul = __webpack_require__("bc01");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.log10.js
var es_math_log10 = __webpack_require__("6b93");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.log1p.js
var es_math_log1p = __webpack_require__("ca21");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.log2.js
var es_math_log2 = __webpack_require__("90d7");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.sign.js
var es_math_sign = __webpack_require__("2af1");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.sinh.js
var es_math_sinh = __webpack_require__("0261");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.tanh.js
var es_math_tanh = __webpack_require__("7898");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.to-string-tag.js
var es_math_to_string_tag = __webpack_require__("23dc");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.math.trunc.js
var es_math_trunc = __webpack_require__("b65f");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.constructor.js
var es_number_constructor = __webpack_require__("a9e3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.epsilon.js
var es_number_epsilon = __webpack_require__("35b3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.is-finite.js
var es_number_is_finite = __webpack_require__("f00c");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.is-integer.js
var es_number_is_integer = __webpack_require__("8ba4");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.is-nan.js
var es_number_is_nan = __webpack_require__("9129");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.is-safe-integer.js
var es_number_is_safe_integer = __webpack_require__("583b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.max-safe-integer.js
var es_number_max_safe_integer = __webpack_require__("aff5");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.min-safe-integer.js
var es_number_min_safe_integer = __webpack_require__("e6e1");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.parse-float.js
var es_number_parse_float = __webpack_require__("c35a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.parse-int.js
var es_number_parse_int = __webpack_require__("25eb");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.to-fixed.js
var es_number_to_fixed = __webpack_require__("b680");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.number.to-precision.js
var es_number_to_precision = __webpack_require__("542d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.assign.js
var es_object_assign = __webpack_require__("cca6");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.define-getter.js
var es_object_define_getter = __webpack_require__("12a8");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.define-properties.js
var es_object_define_properties = __webpack_require__("1d1c");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.define-property.js
var es_object_define_property = __webpack_require__("7a82");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.define-setter.js
var es_object_define_setter = __webpack_require__("e71b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.entries.js
var es_object_entries = __webpack_require__("4fad");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.freeze.js
var es_object_freeze = __webpack_require__("dca8");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.from-entries.js
var es_object_from_entries = __webpack_require__("c1f9");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js
var es_object_get_own_property_descriptor = __webpack_require__("e439");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-descriptors.js
var es_object_get_own_property_descriptors = __webpack_require__("dbb4");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-own-property-names.js
var es_object_get_own_property_names = __webpack_require__("7039");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-prototype-of.js
var es_object_get_prototype_of = __webpack_require__("3410");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.is.js
var es_object_is = __webpack_require__("2b19");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.is-extensible.js
var es_object_is_extensible = __webpack_require__("c906");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.is-frozen.js
var es_object_is_frozen = __webpack_require__("e21d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.is-sealed.js
var es_object_is_sealed = __webpack_require__("e43e");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js
var es_object_keys = __webpack_require__("b64b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.lookup-getter.js
var es_object_lookup_getter = __webpack_require__("bf96");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.lookup-setter.js
var es_object_lookup_setter = __webpack_require__("5bf7");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.prevent-extensions.js
var es_object_prevent_extensions = __webpack_require__("cee8");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.seal.js
var es_object_seal = __webpack_require__("af93");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.set-prototype-of.js
var es_object_set_prototype_of = __webpack_require__("131a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js
var es_object_to_string = __webpack_require__("d3b7");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.values.js
var es_object_values = __webpack_require__("07ac");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.parse-float.js
var es_parse_float = __webpack_require__("acd8");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.parse-int.js
var es_parse_int = __webpack_require__("e25e");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.promise.js
var es_promise = __webpack_require__("e6cf");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.promise.finally.js
var es_promise_finally = __webpack_require__("a79d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.apply.js
var es_reflect_apply = __webpack_require__("a6fd");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.construct.js
var es_reflect_construct = __webpack_require__("4ae1");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.define-property.js
var es_reflect_define_property = __webpack_require__("3f3a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.delete-property.js
var es_reflect_delete_property = __webpack_require__("ac16");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.get.js
var es_reflect_get = __webpack_require__("5d41");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.get-own-property-descriptor.js
var es_reflect_get_own_property_descriptor = __webpack_require__("9e4a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.get-prototype-of.js
var es_reflect_get_prototype_of = __webpack_require__("7f78");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.has.js
var es_reflect_has = __webpack_require__("c760");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.is-extensible.js
var es_reflect_is_extensible = __webpack_require__("db96");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.own-keys.js
var es_reflect_own_keys = __webpack_require__("1bf2");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.prevent-extensions.js
var es_reflect_prevent_extensions = __webpack_require__("d6dd");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.set.js
var es_reflect_set = __webpack_require__("7ed3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.set-prototype-of.js
var es_reflect_set_prototype_of = __webpack_require__("8b9a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.constructor.js
var es_regexp_constructor = __webpack_require__("4d63");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js
var es_regexp_exec = __webpack_require__("ac1f");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.flags.js
var es_regexp_flags = __webpack_require__("5377");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js
var es_regexp_to_string = __webpack_require__("25f0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.set.js
var es_set = __webpack_require__("6062");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.code-point-at.js
var es_string_code_point_at = __webpack_require__("f5b2");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.ends-with.js
var es_string_ends_with = __webpack_require__("8a79");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.from-code-point.js
var es_string_from_code_point = __webpack_require__("f6d6");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js
var es_string_includes = __webpack_require__("2532");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js
var es_string_iterator = __webpack_require__("3ca3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.match.js
var es_string_match = __webpack_require__("466d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.pad-end.js
var es_string_pad_end = __webpack_require__("843c");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.pad-start.js
var es_string_pad_start = __webpack_require__("4d90");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.raw.js
var es_string_raw = __webpack_require__("d80f");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.repeat.js
var es_string_repeat = __webpack_require__("38cf");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.replace.js
var es_string_replace = __webpack_require__("5319");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.search.js
var es_string_search = __webpack_require__("841c");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.split.js
var es_string_split = __webpack_require__("1276");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.starts-with.js
var es_string_starts_with = __webpack_require__("2ca0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim.js
var es_string_trim = __webpack_require__("498a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim-end.js
var es_string_trim_end = __webpack_require__("1e25");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.trim-start.js
var es_string_trim_start = __webpack_require__("eee7");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.anchor.js
var es_string_anchor = __webpack_require__("18a5");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.big.js
var es_string_big = __webpack_require__("1393");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.blink.js
var es_string_blink = __webpack_require__("04d3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.bold.js
var es_string_bold = __webpack_require__("cc71");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.fixed.js
var es_string_fixed = __webpack_require__("c7cd");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.fontcolor.js
var es_string_fontcolor = __webpack_require__("9767");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.fontsize.js
var es_string_fontsize = __webpack_require__("1913");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.italics.js
var es_string_italics = __webpack_require__("c5d0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.link.js
var es_string_link = __webpack_require__("9911");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.small.js
var es_string_small = __webpack_require__("c96a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.strike.js
var es_string_strike = __webpack_require__("2315");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.sub.js
var es_string_sub = __webpack_require__("4c53");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.sup.js
var es_string_sup = __webpack_require__("664f");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.float32-array.js
var es_typed_array_float32_array = __webpack_require__("cfc3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.float64-array.js
var es_typed_array_float64_array = __webpack_require__("4a9b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.int8-array.js
var es_typed_array_int8_array = __webpack_require__("fd87");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.int16-array.js
var es_typed_array_int16_array = __webpack_require__("8b09");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.int32-array.js
var es_typed_array_int32_array = __webpack_require__("143c");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.uint8-array.js
var es_typed_array_uint8_array = __webpack_require__("5cc6");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.uint8-clamped-array.js
var es_typed_array_uint8_clamped_array = __webpack_require__("8a59");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.uint16-array.js
var es_typed_array_uint16_array = __webpack_require__("84c3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.uint32-array.js
var es_typed_array_uint32_array = __webpack_require__("fb2c");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.copy-within.js
var es_typed_array_copy_within = __webpack_require__("9a8c");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.every.js
var es_typed_array_every = __webpack_require__("a975");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.fill.js
var es_typed_array_fill = __webpack_require__("735e");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.filter.js
var es_typed_array_filter = __webpack_require__("c1ac");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find.js
var es_typed_array_find = __webpack_require__("d139");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.find-index.js
var es_typed_array_find_index = __webpack_require__("3a7b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.for-each.js
var es_typed_array_for_each = __webpack_require__("d5d6");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.from.js
var es_typed_array_from = __webpack_require__("20bf");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.includes.js
var es_typed_array_includes = __webpack_require__("82f8");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.index-of.js
var es_typed_array_index_of = __webpack_require__("e91f");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.iterator.js
var es_typed_array_iterator = __webpack_require__("60bd");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.join.js
var es_typed_array_join = __webpack_require__("5f96");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.last-index-of.js
var es_typed_array_last_index_of = __webpack_require__("3280");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.map.js
var es_typed_array_map = __webpack_require__("3fcc");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.of.js
var es_typed_array_of = __webpack_require__("ec97");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce.js
var es_typed_array_reduce = __webpack_require__("ca91");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reduce-right.js
var es_typed_array_reduce_right = __webpack_require__("25a1");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.reverse.js
var es_typed_array_reverse = __webpack_require__("cd26");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.set.js
var es_typed_array_set = __webpack_require__("3c5d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.slice.js
var es_typed_array_slice = __webpack_require__("2954");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.some.js
var es_typed_array_some = __webpack_require__("649e");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.sort.js
var es_typed_array_sort = __webpack_require__("219c");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.subarray.js
var es_typed_array_subarray = __webpack_require__("170b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-locale-string.js
var es_typed_array_to_locale_string = __webpack_require__("b39a9");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.to-string.js
var es_typed_array_to_string = __webpack_require__("72f7");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.weak-map.js
var es_weak_map = __webpack_require__("10d1");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.weak-set.js
var es_weak_set = __webpack_require__("1fe2");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.for-each.js
var web_dom_collections_for_each = __webpack_require__("159b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js
var web_dom_collections_iterator = __webpack_require__("ddb0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.immediate.js
var web_immediate = __webpack_require__("130f");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.queue-microtask.js
var web_queue_microtask = __webpack_require__("9f96");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url.js
var web_url = __webpack_require__("2b3d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url.to-json.js
var web_url_to_json = __webpack_require__("bf19");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.url-search-params.js
var web_url_search_params = __webpack_require__("9861");

// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js
var runtime = __webpack_require__("96cf");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"0011b04a-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./packages/vue-mathlive.vue?vue&type=template&id=6b820180&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"mathfield",attrs:{"id":_vm.id}},[_vm._t("default")],2)}
var staticRenderFns = []


// CONCATENATED MODULE: ./packages/vue-mathlive.vue?vue&type=template&id=6b820180&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./packages/vue-mathlive.vue?vue&type=script&lang=js&
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//
//
//
//
//
//
/* harmony default export */ var vue_mathlivevue_type_script_lang_js_ = ({
  name: 'math-input',
  props: {
    id: {
      type: String,
      default: ''
    },
    value: {
      type: String,
      default: ''
    },
    config: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    onKeystroke: {
      type: Function,
      default: function _default(_keystroke, _ev) {
        return true;
      }
    },
    onMoveOutOf: {
      type: Function,
      default: function _default(_direction) {
        return true;
      }
    },
    onTabOutOf: {
      type: Function,
      default: function _default(_direction) {
        return true;
      }
    }
  },

  /*
   * To register this component, call:
   * ```
   *     import MathLive from './mathlive.mjs';
   *     import Mathfield from './vue-mathlive.mjs';
   *     Vue.use(Mathfield, MathLive);
   * ```
   *
   * The HTML tag for this component is `<mathlive-mathfield>`
   *
   * @param {object} vue - This module, as returned from an import statement
   * @param {object} mathlive - The MathLive module, as returned from an import
   * statement
   */
  watch: {
    value: function value(newValue, oldValue) {
      // When the `value` prop (from the model) is modified
      // update the mathfield to stay in sync, but don't send back content
      // change notifications, to avoid infinite loops.
      console.log(newValue, oldValue);

      if (newValue !== oldValue) {
        if (!newValue) {
          newValue = ' ';
        }

        this.$el.mathfield.$latex(newValue, {
          suppressChangeNotifications: true
        });
      }
    },
    config: {
      deep: true,
      handler: function handler(config) {
        this.$el.mathfield.$setConfig(config);
      }
    }
  },
  mounted: function mounted() {
    // A new instance is being created
    var vm = this; // Keep a reference to the ViewModel
    // Wait until the DOM has been constructed...

    this.$nextTick(function () {
      // ... then make the MathField
      // console.log(vm.$el, vm.config)
      vm.$mathlive.makeMathField(vm.$el, _objectSpread({}, vm.config, {
        // To support the 'model' directive, this handler will connect
        // the content of the mathfield to the ViewModel
        onContentDidChange: function onContentDidChange(_) {
          // When the mathfield is updated, notify the model.
          // The initial input value is generated from the <slot>
          // content, so it may need to be updated.
          // vm.$emit('input', vm.$el.mathfield.$text());
          vm.$emit('input', vm.$el.mathfield.$latex());
        },
        // Those asynchronous notification handlers are translated to events
        onFocus: function onFocus(_) {
          vm.$emit('focus');
        },
        onBlur: function onBlur(_) {
          vm.$emit('blur');
        },
        onContentWillChange: function onContentWillChange(_) {
          vm.$emit('content-will-change');
        },
        onSelectionWillChange: function onSelectionWillChange(_) {
          vm.$emit('selection-will-change');
        },
        onUndoStateWillChange: function onUndoStateWillChange(_, command) {
          vm.$emit('undo-state-will-change', command);
        },
        onUndoStateDidChange: function onUndoStateDidChange(_, command) {
          vm.$emit('undo-state-did-change', command);
        },
        onVirtualKeyboardToggle: function onVirtualKeyboardToggle(_, visible, keyboardElement) {
          vm.$emit('virtual-keyboard-toggle', visible, keyboardElement);
        },
        onReadAloudStatus: function onReadAloudStatus(_, status) {
          vm.$emit('read-aloud-status', status);
        },
        // Those notification handlers expect an answer back, so translate
        // them to callbacks via props
        onKeystroke: function onKeystroke(_, keystroke, ev) {
          return vm.onKeystroke(keystroke, ev);
        },
        onMoveOutOf: function onMoveOutOf(_, direction) {
          return vm.onMoveOutOf(direction);
        },
        onTabOutOf: function onTabOutOf(_, direction) {
          return vm.onTabOutOf(direction);
        }
      }));
    });
  },
  methods: {
    /*
     *
     * @param {string} selector
     */
    perform: function perform(selector) {
      this.$el.mathfield.$perform(selector);
    },

    /*
     * @return {boolean}
     */
    hasFocus: function hasFocus() {
      return this.$el.mathfield.$hasFocus();
    },
    focus: function focus() {
      this.$el.mathfield.$focus();
    },
    blur: function blur() {
      this.$el.mathfield.$blur();
    },
    text: function text(format) {
      console.log(format);
      return this.$el.mathfield.$text(format);
    },
    selectedText: function selectedText(format) {
      return this.$el.mathfield.$selectedText(format);
    },
    insert: function insert(text, options) {
      this.$el.mathfield.$insert(text, options);
    },
    keystroke: function keystroke(keys, evt) {
      return this.$el.mathfield.$keystroke(keys, evt);
    },
    typedText: function typedText(text) {
      this.$el.mathfield.$keystroke(text);
    },
    selectionIsCollapsed: function selectionIsCollapsed() {
      return this.$el.mathfield.$selectionIsCollapsed();
    },
    selectionDepth: function selectionDepth() {
      return this.$el.mathfield.$selectionDepth();
    },
    selectionAtStart: function selectionAtStart() {
      return this.$el.mathfield.$selectionAtStart();
    },
    selectionAtEnd: function selectionAtEnd() {
      return this.$el.mathfield.$selectionAtEnd();
    },
    select: function select() {
      this.$el.mathfield.$select();
    },
    clearSelection: function clearSelection() {
      this.$el.mathfield.$clearSelection();
    } // updateOutput(mathfield) {
    //     document.getElementById('output').innerHTML = mathfield.$text('latex');
    // }

  }
});
// CONCATENATED MODULE: ./packages/vue-mathlive.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_vue_mathlivevue_type_script_lang_js_ = (vue_mathlivevue_type_script_lang_js_); 
// EXTERNAL MODULE: ./packages/vue-mathlive.vue?vue&type=style&index=0&lang=css&
var vue_mathlivevue_type_style_index_0_lang_css_ = __webpack_require__("4312");

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}

// CONCATENATED MODULE: ./packages/vue-mathlive.vue






/* normalize component */

var component = normalizeComponent(
  packages_vue_mathlivevue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* harmony default export */ var vue_mathlive = (component.exports);
// CONCATENATED MODULE: ./packages/core/grapheme-splitter.js
/*
Breaks a JavaScript string into individual user-perceived "characters"
called extended grapheme clusters by implementing the Unicode UAX-29 standard, version 8.0.0

Usage:
var splitter = new GraphemeSplitter();
//returns an array of strings, one string for each grapheme cluster
var graphemes = splitter.splitGraphemes(string);

*/
var CR = 0,
    LF = 1,
    Control = 2,
    Extend = 3,
    Regional_Indicator = 4,
    SpacingMark = 5,
    L = 6,
    V = 7,
    T = 8,
    LV = 9,
    LVT = 10,
    Other = 11,
    Skin_Tone = 12; // Private function, gets a Unicode code point from a JavaScript UTF-16 string
// handling surrogate pairs appropriately

function codePointAt(str, idx) {
  idx = idx || 0;
  var code = str.charCodeAt(idx); // if a high surrogate

  if (0xD800 <= code && code <= 0xDBFF && idx < str.length - 1) {
    var hi = code;
    var low = str.charCodeAt(idx + 1);

    if (0xDC00 <= low && low <= 0xDFFF) {
      return (hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000;
    }

    return hi;
  } // if a low surrogate


  if (0xDC00 <= code && code <= 0xDFFF && idx >= 1) {
    var _hi = str.charCodeAt(idx - 1);

    var _low = code;

    if (0xD800 <= _hi && _hi <= 0xDBFF) {
      return (_hi - 0xD800) * 0x400 + (_low - 0xDC00) + 0x10000;
    }

    return _low;
  } //just return the char if an unmatched surrogate half or a
  //single-char codepoint


  return code;
} // Private function, returns whether a break is allowed between the
// two given grapheme breaking classes


function shouldBreak(previous, current) {
  if (previous === Other && current === Skin_Tone) {
    // From version 10. Skin tone modifiers with emojis
    return false;
  } else if (previous === Extend && current === Other) {
    // From version 10. Combining emojis, such as the Bowie emoji
    return false;
  } else if (previous === Other && current === Extend) {
    // From version 10. Combining emojis, such as skin tones emojis
    return false;
  } else if (previous === CR && current === LF) {
    // GB3. CR X LF
    return false;
  } else if (previous === Control || previous === CR || previous === LF) {
    // GB4. (Control|CR|LF) ÷
    return true;
  } else if (current === Control || current === CR || current === LF) {
    // GB5. ÷ (Control|CR|LF)
    return true;
  } else if (previous === L && (current === L || current === V || current === LV || current === LVT)) {
    // GB6. L X (L|V|LV|LVT)
    return false;
  } else if ((previous === LV || previous === V) && ( // GB7. (LV|V) X (V|T)
  current === V || current === T)) {
    return false;
  } else if ((previous === LVT || previous === T) && current === T) {
    // GB8. (LVT|T) X (T)
    return false;
  } else if (previous === Regional_Indicator && current === Regional_Indicator) {
    // GB8a. Regional_Indicator X Regional_Indicator
    return false;
  } else if (current === Extend) {
    // GB9. X Extend
    return false;
  } else if (current === SpacingMark) {
    // GB9a. X SpacingMark
    return false;
  } // GB9b. Prepend X (there are currently no characters with this class)
  // else if previous is Prepend
  //   return false
  // GB10. Any ÷ Any


  return true;
} // Returns the next grapheme break in the string after the given index


function nextBreak(string, index) {
  index = index || 0;

  if (index < 0) {
    return 0;
  }

  if (index >= string.length - 1) {
    return string.length;
  }

  var prev = getGraphemeBreakProperty(codePointAt(string, index));

  for (var i = index + 1; i < string.length; i++) {
    // check for already processed low surrogates
    if (0xd800 <= string.charCodeAt(i - 1) && string.charCodeAt(i - 1) <= 0xdbff && 0xdc00 <= string.charCodeAt(i) && string.charCodeAt(i) <= 0xdfff) {
      continue;
    }

    var next = getGraphemeBreakProperty(codePointAt(string, i));

    if (shouldBreak(prev, next)) {
      return i;
    }

    prev = next;
  }

  return string.length;
} // Breaks the given string into an array of grapheme cluster strings


function splitGraphemes(str) {
  // If it's all ASCII, short-circuit the grapheme splitting...
  if (/^[\x20-\xFF]*$/.test(str)) return str;
  var res = [];
  var index = 0;
  var brk;

  while ((brk = nextBreak(str, index)) < str.length) {
    res.push(str.slice(index, brk));
    index = brk;
  }

  if (index < str.length) {
    res.push(str.slice(index));
  }

  return res;
} // Returns the number of grapheme clusters there are in the given string


function countGraphemes(str) {
  var count = 0;
  var index = 0;
  var brk;

  while ((brk = nextBreak(str, index)) < str.length) {
    index = brk;
    count++;
  }

  if (index < str.length) {
    count++;
  }

  return count;
} //given a Unicode code point, determines this symbol's grapheme break property


function getGraphemeBreakProperty(code) {
  //grapheme break property for Unicode 8.0.0,
  //taken from http://www.unicode.org/Public/8.0.0/ucd/auxiliary/GraphemeBreakProperty.txt
  //and adapted to JavaScript rules
  if (0x000D === code // Cc       <control-000D>
  ) {
      return CR;
    }

  if (0x000A === code // Cc       <control-000A>
  ) {
      return LF;
    }

  if (0x0000 <= code && code <= 0x0009 || // Cc  [10] <control-0000>..<control-0009>
  0x000B <= code && code <= 0x000C || // Cc   [2] <control-000B>..<control-000C>
  0x000E <= code && code <= 0x001F || // Cc  [18] <control-000E>..<control-001F>
  0x007F <= code && code <= 0x009F || // Cc  [33] <control-007F>..<control-009F>
  0x00AD === code || // Cf       SOFT HYPHEN
  0x0600 <= code && code <= 0x0605 || // Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE
  0x061C === code || // Cf       ARABIC LETTER MARK
  0x06DD === code || // Cf       ARABIC END OF AYAH
  0x070F === code || // Cf       SYRIAC ABBREVIATION MARK
  0x180E === code || // Cf       MONGOLIAN VOWEL SEPARATOR
  0x200B === code || // Cf       ZERO WIDTH SPACE
  0x200E <= code && code <= 0x200F || // Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK
  0x2028 === code || // Zl       LINE SEPARATOR
  0x2029 === code || // Zp       PARAGRAPH SEPARATOR
  0x202A <= code && code <= 0x202E || // Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE
  0x2060 <= code && code <= 0x2064 || // Cf   [5] WORD JOINER..INVISIBLE PLUS
  0x2065 === code || // Cn       <reserved-2065>
  0x2066 <= code && code <= 0x206F || // Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES
  0xD800 <= code && code <= 0xDFFF || // Cs [2048] <surrogate-D800>..<surrogate-DFFF>
  0xFEFF === code || // Cf       ZERO WIDTH NO-BREAK SPACE
  0xFFF0 <= code && code <= 0xFFF8 || // Cn   [9] <reserved-FFF0>..<reserved-FFF8>
  0xFFF9 <= code && code <= 0xFFFB || // Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR
  0x110BD === code || // Cf       KAITHI NUMBER SIGN
  0x1BCA0 <= code && code <= 0x1BCA3 || // Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP
  0x1D173 <= code && code <= 0x1D17A || // Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE
  0xE0000 === code || // Cn       <reserved-E0000>
  0xE0001 === code || // Cf       LANGUAGE TAG
  0xE0002 <= code && code <= 0xE001F || // Cn  [30] <reserved-E0002>..<reserved-E001F>
  0xE0020 <= code && code <= 0xE007F || // Cf  [96] TAG SPACE..CANCEL TAG
  0xE0080 <= code && code <= 0xE00FF || // Cn [128] <reserved-E0080>..<reserved-E00FF>
  0xE01F0 <= code && code <= 0xE0FFF // Cn [3600] <reserved-E01F0>..<reserved-E0FFF>
  ) {
      return Control;
    }

  if (0x0300 <= code && code <= 0x036F || // Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X
  0x0483 <= code && code <= 0x0487 || // Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE
  0x0488 <= code && code <= 0x0489 || // Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN
  0x0591 <= code && code <= 0x05BD || // Mn  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG
  0x05BF === code || // Mn       HEBREW POINT RAFE
  0x05C1 <= code && code <= 0x05C2 || // Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT
  0x05C4 <= code && code <= 0x05C5 || // Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT
  0x05C7 === code || // Mn       HEBREW POINT QAMATS QATAN
  0x0610 <= code && code <= 0x061A || // Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA
  0x064B <= code && code <= 0x065F || // Mn  [21] ARABIC FATHATAN..ARABIC WAVY HAMZA BELOW
  0x0670 === code || // Mn       ARABIC LETTER SUPERSCRIPT ALEF
  0x06D6 <= code && code <= 0x06DC || // Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN
  0x06DF <= code && code <= 0x06E4 || // Mn   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA
  0x06E7 <= code && code <= 0x06E8 || // Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON
  0x06EA <= code && code <= 0x06ED || // Mn   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM
  0x0711 === code || // Mn       SYRIAC LETTER SUPERSCRIPT ALAPH
  0x0730 <= code && code <= 0x074A || // Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH
  0x07A6 <= code && code <= 0x07B0 || // Mn  [11] THAANA ABAFILI..THAANA SUKUN
  0x07EB <= code && code <= 0x07F3 || // Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE
  0x0816 <= code && code <= 0x0819 || // Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH
  0x081B <= code && code <= 0x0823 || // Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A
  0x0825 <= code && code <= 0x0827 || // Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U
  0x0829 <= code && code <= 0x082D || // Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA
  0x0859 <= code && code <= 0x085B || // Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK
  0x08E3 <= code && code <= 0x0902 || // Mn  [32] ARABIC TURNED DAMMA BELOW..DEVANAGARI SIGN ANUSVARA
  0x093A === code || // Mn       DEVANAGARI VOWEL SIGN OE
  0x093C === code || // Mn       DEVANAGARI SIGN NUKTA
  0x0941 <= code && code <= 0x0948 || // Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI
  0x094D === code || // Mn       DEVANAGARI SIGN VIRAMA
  0x0951 <= code && code <= 0x0957 || // Mn   [7] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI VOWEL SIGN UUE
  0x0962 <= code && code <= 0x0963 || // Mn   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL
  0x0981 === code || // Mn       BENGALI SIGN CANDRABINDU
  0x09BC === code || // Mn       BENGALI SIGN NUKTA
  0x09BE === code || // Mc       BENGALI VOWEL SIGN AA
  0x09C1 <= code && code <= 0x09C4 || // Mn   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR
  0x09CD === code || // Mn       BENGALI SIGN VIRAMA
  0x09D7 === code || // Mc       BENGALI AU LENGTH MARK
  0x09E2 <= code && code <= 0x09E3 || // Mn   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL
  0x0A01 <= code && code <= 0x0A02 || // Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI
  0x0A3C === code || // Mn       GURMUKHI SIGN NUKTA
  0x0A41 <= code && code <= 0x0A42 || // Mn   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU
  0x0A47 <= code && code <= 0x0A48 || // Mn   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI
  0x0A4B <= code && code <= 0x0A4D || // Mn   [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA
  0x0A51 === code || // Mn       GURMUKHI SIGN UDAAT
  0x0A70 <= code && code <= 0x0A71 || // Mn   [2] GURMUKHI TIPPI..GURMUKHI ADDAK
  0x0A75 === code || // Mn       GURMUKHI SIGN YAKASH
  0x0A81 <= code && code <= 0x0A82 || // Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA
  0x0ABC === code || // Mn       GUJARATI SIGN NUKTA
  0x0AC1 <= code && code <= 0x0AC5 || // Mn   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E
  0x0AC7 <= code && code <= 0x0AC8 || // Mn   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI
  0x0ACD === code || // Mn       GUJARATI SIGN VIRAMA
  0x0AE2 <= code && code <= 0x0AE3 || // Mn   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL
  0x0B01 === code || // Mn       ORIYA SIGN CANDRABINDU
  0x0B3C === code || // Mn       ORIYA SIGN NUKTA
  0x0B3E === code || // Mc       ORIYA VOWEL SIGN AA
  0x0B3F === code || // Mn       ORIYA VOWEL SIGN I
  0x0B41 <= code && code <= 0x0B44 || // Mn   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR
  0x0B4D === code || // Mn       ORIYA SIGN VIRAMA
  0x0B56 === code || // Mn       ORIYA AI LENGTH MARK
  0x0B57 === code || // Mc       ORIYA AU LENGTH MARK
  0x0B62 <= code && code <= 0x0B63 || // Mn   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL
  0x0B82 === code || // Mn       TAMIL SIGN ANUSVARA
  0x0BBE === code || // Mc       TAMIL VOWEL SIGN AA
  0x0BC0 === code || // Mn       TAMIL VOWEL SIGN II
  0x0BCD === code || // Mn       TAMIL SIGN VIRAMA
  0x0BD7 === code || // Mc       TAMIL AU LENGTH MARK
  0x0C00 === code || // Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE
  0x0C3E <= code && code <= 0x0C40 || // Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II
  0x0C46 <= code && code <= 0x0C48 || // Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI
  0x0C4A <= code && code <= 0x0C4D || // Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA
  0x0C55 <= code && code <= 0x0C56 || // Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK
  0x0C62 <= code && code <= 0x0C63 || // Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL
  0x0C81 === code || // Mn       KANNADA SIGN CANDRABINDU
  0x0CBC === code || // Mn       KANNADA SIGN NUKTA
  0x0CBF === code || // Mn       KANNADA VOWEL SIGN I
  0x0CC2 === code || // Mc       KANNADA VOWEL SIGN UU
  0x0CC6 === code || // Mn       KANNADA VOWEL SIGN E
  0x0CCC <= code && code <= 0x0CCD || // Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA
  0x0CD5 <= code && code <= 0x0CD6 || // Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK
  0x0CE2 <= code && code <= 0x0CE3 || // Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL
  0x0D01 === code || // Mn       MALAYALAM SIGN CANDRABINDU
  0x0D3E === code || // Mc       MALAYALAM VOWEL SIGN AA
  0x0D41 <= code && code <= 0x0D44 || // Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR
  0x0D4D === code || // Mn       MALAYALAM SIGN VIRAMA
  0x0D57 === code || // Mc       MALAYALAM AU LENGTH MARK
  0x0D62 <= code && code <= 0x0D63 || // Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL
  0x0DCA === code || // Mn       SINHALA SIGN AL-LAKUNA
  0x0DCF === code || // Mc       SINHALA VOWEL SIGN AELA-PILLA
  0x0DD2 <= code && code <= 0x0DD4 || // Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA
  0x0DD6 === code || // Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA
  0x0DDF === code || // Mc       SINHALA VOWEL SIGN GAYANUKITTA
  0x0E31 === code || // Mn       THAI CHARACTER MAI HAN-AKAT
  0x0E34 <= code && code <= 0x0E3A || // Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU
  0x0E47 <= code && code <= 0x0E4E || // Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN
  0x0EB1 === code || // Mn       LAO VOWEL SIGN MAI KAN
  0x0EB4 <= code && code <= 0x0EB9 || // Mn   [6] LAO VOWEL SIGN I..LAO VOWEL SIGN UU
  0x0EBB <= code && code <= 0x0EBC || // Mn   [2] LAO VOWEL SIGN MAI KON..LAO SEMIVOWEL SIGN LO
  0x0EC8 <= code && code <= 0x0ECD || // Mn   [6] LAO TONE MAI EK..LAO NIGGAHITA
  0x0F18 <= code && code <= 0x0F19 || // Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS
  0x0F35 === code || // Mn       TIBETAN MARK NGAS BZUNG NYI ZLA
  0x0F37 === code || // Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS
  0x0F39 === code || // Mn       TIBETAN MARK TSA -PHRU
  0x0F71 <= code && code <= 0x0F7E || // Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO
  0x0F80 <= code && code <= 0x0F84 || // Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA
  0x0F86 <= code && code <= 0x0F87 || // Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS
  0x0F8D <= code && code <= 0x0F97 || // Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA
  0x0F99 <= code && code <= 0x0FBC || // Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA
  0x0FC6 === code || // Mn       TIBETAN SYMBOL PADMA GDAN
  0x102D <= code && code <= 0x1030 || // Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU
  0x1032 <= code && code <= 0x1037 || // Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW
  0x1039 <= code && code <= 0x103A || // Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT
  0x103D <= code && code <= 0x103E || // Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA
  0x1058 <= code && code <= 0x1059 || // Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL
  0x105E <= code && code <= 0x1060 || // Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA
  0x1071 <= code && code <= 0x1074 || // Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE
  0x1082 === code || // Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA
  0x1085 <= code && code <= 0x1086 || // Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y
  0x108D === code || // Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE
  0x109D === code || // Mn       MYANMAR VOWEL SIGN AITON AI
  0x135D <= code && code <= 0x135F || // Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK
  0x1712 <= code && code <= 0x1714 || // Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA
  0x1732 <= code && code <= 0x1734 || // Mn   [3] HANUNOO VOWEL SIGN I..HANUNOO SIGN PAMUDPOD
  0x1752 <= code && code <= 0x1753 || // Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U
  0x1772 <= code && code <= 0x1773 || // Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U
  0x17B4 <= code && code <= 0x17B5 || // Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA
  0x17B7 <= code && code <= 0x17BD || // Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA
  0x17C6 === code || // Mn       KHMER SIGN NIKAHIT
  0x17C9 <= code && code <= 0x17D3 || // Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT
  0x17DD === code || // Mn       KHMER SIGN ATTHACAN
  0x180B <= code && code <= 0x180D || // Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE
  0x18A9 === code || // Mn       MONGOLIAN LETTER ALI GALI DAGALGA
  0x1920 <= code && code <= 0x1922 || // Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U
  0x1927 <= code && code <= 0x1928 || // Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O
  0x1932 === code || // Mn       LIMBU SMALL LETTER ANUSVARA
  0x1939 <= code && code <= 0x193B || // Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I
  0x1A17 <= code && code <= 0x1A18 || // Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U
  0x1A1B === code || // Mn       BUGINESE VOWEL SIGN AE
  0x1A56 === code || // Mn       TAI THAM CONSONANT SIGN MEDIAL LA
  0x1A58 <= code && code <= 0x1A5E || // Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA
  0x1A60 === code || // Mn       TAI THAM SIGN SAKOT
  0x1A62 === code || // Mn       TAI THAM VOWEL SIGN MAI SAT
  0x1A65 <= code && code <= 0x1A6C || // Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW
  0x1A73 <= code && code <= 0x1A7C || // Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN
  0x1A7F === code || // Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT
  0x1AB0 <= code && code <= 0x1ABD || // Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW
  0x1ABE === code || // Me       COMBINING PARENTHESES OVERLAY
  0x1B00 <= code && code <= 0x1B03 || // Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG
  0x1B34 === code || // Mn       BALINESE SIGN REREKAN
  0x1B36 <= code && code <= 0x1B3A || // Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA
  0x1B3C === code || // Mn       BALINESE VOWEL SIGN LA LENGA
  0x1B42 === code || // Mn       BALINESE VOWEL SIGN PEPET
  0x1B6B <= code && code <= 0x1B73 || // Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG
  0x1B80 <= code && code <= 0x1B81 || // Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR
  0x1BA2 <= code && code <= 0x1BA5 || // Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU
  0x1BA8 <= code && code <= 0x1BA9 || // Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG
  0x1BAB <= code && code <= 0x1BAD || // Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA
  0x1BE6 === code || // Mn       BATAK SIGN TOMPI
  0x1BE8 <= code && code <= 0x1BE9 || // Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE
  0x1BED === code || // Mn       BATAK VOWEL SIGN KARO O
  0x1BEF <= code && code <= 0x1BF1 || // Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H
  0x1C2C <= code && code <= 0x1C33 || // Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T
  0x1C36 <= code && code <= 0x1C37 || // Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA
  0x1CD0 <= code && code <= 0x1CD2 || // Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA
  0x1CD4 <= code && code <= 0x1CE0 || // Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA
  0x1CE2 <= code && code <= 0x1CE8 || // Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL
  0x1CED === code || // Mn       VEDIC SIGN TIRYAK
  0x1CF4 === code || // Mn       VEDIC TONE CANDRA ABOVE
  0x1CF8 <= code && code <= 0x1CF9 || // Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE
  0x1DC0 <= code && code <= 0x1DF5 || // Mn  [54] COMBINING DOTTED GRAVE ACCENT..COMBINING UP TACK ABOVE
  0x1DFC <= code && code <= 0x1DFF || // Mn   [4] COMBINING DOUBLE INVERTED BREVE BELOW..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW
  0x200C <= code && code <= 0x200D || // Cf   [2] ZERO WIDTH NON-JOINER..ZERO WIDTH JOINER
  0x20D0 <= code && code <= 0x20DC || // Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE
  0x20DD <= code && code <= 0x20E0 || // Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH
  0x20E1 === code || // Mn       COMBINING LEFT RIGHT ARROW ABOVE
  0x20E2 <= code && code <= 0x20E4 || // Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE
  0x20E5 <= code && code <= 0x20F0 || // Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE
  0x2CEF <= code && code <= 0x2CF1 || // Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS
  0x2D7F === code || // Mn       TIFINAGH CONSONANT JOINER
  0x2DE0 <= code && code <= 0x2DFF || // Mn  [32] COMBINING CYRILLIC LETTER BE..COMBINING CYRILLIC LETTER IOTIFIED BIG YUS
  0x302A <= code && code <= 0x302D || // Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK
  0x302E <= code && code <= 0x302F || // Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK
  0x3099 <= code && code <= 0x309A || // Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
  0xA66F === code || // Mn       COMBINING CYRILLIC VZMET
  0xA670 <= code && code <= 0xA672 || // Me   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN
  0xA674 <= code && code <= 0xA67D || // Mn  [10] COMBINING CYRILLIC LETTER UKRAINIAN IE..COMBINING CYRILLIC PAYEROK
  0xA69E <= code && code <= 0xA69F || // Mn   [2] COMBINING CYRILLIC LETTER EF..COMBINING CYRILLIC LETTER IOTIFIED E
  0xA6F0 <= code && code <= 0xA6F1 || // Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS
  0xA802 === code || // Mn       SYLOTI NAGRI SIGN DVISVARA
  0xA806 === code || // Mn       SYLOTI NAGRI SIGN HASANTA
  0xA80B === code || // Mn       SYLOTI NAGRI SIGN ANUSVARA
  0xA825 <= code && code <= 0xA826 || // Mn   [2] SYLOTI NAGRI VOWEL SIGN U..SYLOTI NAGRI VOWEL SIGN E
  0xA8C4 === code || // Mn       SAURASHTRA SIGN VIRAMA
  0xA8E0 <= code && code <= 0xA8F1 || // Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA
  0xA926 <= code && code <= 0xA92D || // Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU
  0xA947 <= code && code <= 0xA951 || // Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R
  0xA980 <= code && code <= 0xA982 || // Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR
  0xA9B3 === code || // Mn       JAVANESE SIGN CECAK TELU
  0xA9B6 <= code && code <= 0xA9B9 || // Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT
  0xA9BC === code || // Mn       JAVANESE VOWEL SIGN PEPET
  0xA9E5 === code || // Mn       MYANMAR SIGN SHAN SAW
  0xAA29 <= code && code <= 0xAA2E || // Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE
  0xAA31 <= code && code <= 0xAA32 || // Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE
  0xAA35 <= code && code <= 0xAA36 || // Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA
  0xAA43 === code || // Mn       CHAM CONSONANT SIGN FINAL NG
  0xAA4C === code || // Mn       CHAM CONSONANT SIGN FINAL M
  0xAA7C === code || // Mn       MYANMAR SIGN TAI LAING TONE-2
  0xAAB0 === code || // Mn       TAI VIET MAI KANG
  0xAAB2 <= code && code <= 0xAAB4 || // Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U
  0xAAB7 <= code && code <= 0xAAB8 || // Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA
  0xAABE <= code && code <= 0xAABF || // Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK
  0xAAC1 === code || // Mn       TAI VIET TONE MAI THO
  0xAAEC <= code && code <= 0xAAED || // Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI
  0xAAF6 === code || // Mn       MEETEI MAYEK VIRAMA
  0xABE5 === code || // Mn       MEETEI MAYEK VOWEL SIGN ANAP
  0xABE8 === code || // Mn       MEETEI MAYEK VOWEL SIGN UNAP
  0xABED === code || // Mn       MEETEI MAYEK APUN IYEK
  0xFB1E === code || // Mn       HEBREW POINT JUDEO-SPANISH VARIKA
  0xFE00 <= code && code <= 0xFE0F || // Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16
  0xFE20 <= code && code <= 0xFE2F || // Mn  [16] COMBINING LIGATURE LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF
  0xFF9E <= code && code <= 0xFF9F || // Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
  0x101FD === code || // Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE
  0x102E0 === code || // Mn       COPTIC EPACT THOUSANDS MARK
  0x10376 <= code && code <= 0x1037A || // Mn   [5] COMBINING OLD PERMIC LETTER AN..COMBINING OLD PERMIC LETTER SII
  0x10A01 <= code && code <= 0x10A03 || // Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R
  0x10A05 <= code && code <= 0x10A06 || // Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O
  0x10A0C <= code && code <= 0x10A0F || // Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA
  0x10A38 <= code && code <= 0x10A3A || // Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW
  0x10A3F === code || // Mn       KHAROSHTHI VIRAMA
  0x10AE5 <= code && code <= 0x10AE6 || // Mn   [2] MANICHAEAN ABBREVIATION MARK ABOVE..MANICHAEAN ABBREVIATION MARK BELOW
  0x11001 === code || // Mn       BRAHMI SIGN ANUSVARA
  0x11038 <= code && code <= 0x11046 || // Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA
  0x1107F <= code && code <= 0x11081 || // Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA
  0x110B3 <= code && code <= 0x110B6 || // Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI
  0x110B9 <= code && code <= 0x110BA || // Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA
  0x11100 <= code && code <= 0x11102 || // Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA
  0x11127 <= code && code <= 0x1112B || // Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU
  0x1112D <= code && code <= 0x11134 || // Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA
  0x11173 === code || // Mn       MAHAJANI SIGN NUKTA
  0x11180 <= code && code <= 0x11181 || // Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA
  0x111B6 <= code && code <= 0x111BE || // Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O
  0x111CA <= code && code <= 0x111CC || // Mn   [3] SHARADA SIGN NUKTA..SHARADA EXTRA SHORT VOWEL MARK
  0x1122F <= code && code <= 0x11231 || // Mn   [3] KHOJKI VOWEL SIGN U..KHOJKI VOWEL SIGN AI
  0x11234 === code || // Mn       KHOJKI SIGN ANUSVARA
  0x11236 <= code && code <= 0x11237 || // Mn   [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA
  0x112DF === code || // Mn       KHUDAWADI SIGN ANUSVARA
  0x112E3 <= code && code <= 0x112EA || // Mn   [8] KHUDAWADI VOWEL SIGN U..KHUDAWADI SIGN VIRAMA
  0x11300 <= code && code <= 0x11301 || // Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU
  0x1133C === code || // Mn       GRANTHA SIGN NUKTA
  0x1133E === code || // Mc       GRANTHA VOWEL SIGN AA
  0x11340 === code || // Mn       GRANTHA VOWEL SIGN II
  0x11357 === code || // Mc       GRANTHA AU LENGTH MARK
  0x11366 <= code && code <= 0x1136C || // Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX
  0x11370 <= code && code <= 0x11374 || // Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA
  0x114B0 === code || // Mc       TIRHUTA VOWEL SIGN AA
  0x114B3 <= code && code <= 0x114B8 || // Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL
  0x114BA === code || // Mn       TIRHUTA VOWEL SIGN SHORT E
  0x114BD === code || // Mc       TIRHUTA VOWEL SIGN SHORT O
  0x114BF <= code && code <= 0x114C0 || // Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA
  0x114C2 <= code && code <= 0x114C3 || // Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA
  0x115AF === code || // Mc       SIDDHAM VOWEL SIGN AA
  0x115B2 <= code && code <= 0x115B5 || // Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR
  0x115BC <= code && code <= 0x115BD || // Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA
  0x115BF <= code && code <= 0x115C0 || // Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA
  0x115DC <= code && code <= 0x115DD || // Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU
  0x11633 <= code && code <= 0x1163A || // Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI
  0x1163D === code || // Mn       MODI SIGN ANUSVARA
  0x1163F <= code && code <= 0x11640 || // Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA
  0x116AB === code || // Mn       TAKRI SIGN ANUSVARA
  0x116AD === code || // Mn       TAKRI VOWEL SIGN AA
  0x116B0 <= code && code <= 0x116B5 || // Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU
  0x116B7 === code || // Mn       TAKRI SIGN NUKTA
  0x1171D <= code && code <= 0x1171F || // Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA
  0x11722 <= code && code <= 0x11725 || // Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU
  0x11727 <= code && code <= 0x1172B || // Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER
  0x16AF0 <= code && code <= 0x16AF4 || // Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE
  0x16B30 <= code && code <= 0x16B36 || // Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM
  0x16F8F <= code && code <= 0x16F92 || // Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW
  0x1BC9D <= code && code <= 0x1BC9E || // Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK
  0x1D165 === code || // Mc       MUSICAL SYMBOL COMBINING STEM
  0x1D167 <= code && code <= 0x1D169 || // Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3
  0x1D16E <= code && code <= 0x1D172 || // Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5
  0x1D17B <= code && code <= 0x1D182 || // Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE
  0x1D185 <= code && code <= 0x1D18B || // Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE
  0x1D1AA <= code && code <= 0x1D1AD || // Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO
  0x1D242 <= code && code <= 0x1D244 || // Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME
  0x1DA00 <= code && code <= 0x1DA36 || // Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN
  0x1DA3B <= code && code <= 0x1DA6C || // Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT
  0x1DA75 === code || // Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS
  0x1DA84 === code || // Mn       SIGNWRITING LOCATION HEAD NECK
  0x1DA9B <= code && code <= 0x1DA9F || // Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6
  0x1DAA1 <= code && code <= 0x1DAAF || // Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16
  0x1E8D0 <= code && code <= 0x1E8D6 || // Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS
  0xE0100 <= code && code <= 0xE01EF // Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256
  ) {
      return Extend;
    }

  if (0x1F1E6 <= code && code <= 0x1F1FF) // So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z
    {
      return Regional_Indicator;
    }

  if (0x1F3FB <= code && code <= 0x1F3FF) //EMOJI MODIFIER FITZPATRICK
    {
      return Skin_Tone;
    }

  if (0x0903 === code || // Mc       DEVANAGARI SIGN VISARGA
  0x093B === code || // Mc       DEVANAGARI VOWEL SIGN OOE
  0x093E <= code && code <= 0x0940 || // Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II
  0x0949 <= code && code <= 0x094C || // Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU
  0x094E <= code && code <= 0x094F || // Mc   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW
  0x0982 <= code && code <= 0x0983 || // Mc   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA
  0x09BF <= code && code <= 0x09C0 || // Mc   [2] BENGALI VOWEL SIGN I..BENGALI VOWEL SIGN II
  0x09C7 <= code && code <= 0x09C8 || // Mc   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI
  0x09CB <= code && code <= 0x09CC || // Mc   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU
  0x0A03 === code || // Mc       GURMUKHI SIGN VISARGA
  0x0A3E <= code && code <= 0x0A40 || // Mc   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II
  0x0A83 === code || // Mc       GUJARATI SIGN VISARGA
  0x0ABE <= code && code <= 0x0AC0 || // Mc   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II
  0x0AC9 === code || // Mc       GUJARATI VOWEL SIGN CANDRA O
  0x0ACB <= code && code <= 0x0ACC || // Mc   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU
  0x0B02 <= code && code <= 0x0B03 || // Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA
  0x0B40 === code || // Mc       ORIYA VOWEL SIGN II
  0x0B47 <= code && code <= 0x0B48 || // Mc   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI
  0x0B4B <= code && code <= 0x0B4C || // Mc   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU
  0x0BBF === code || // Mc       TAMIL VOWEL SIGN I
  0x0BC1 <= code && code <= 0x0BC2 || // Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU
  0x0BC6 <= code && code <= 0x0BC8 || // Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI
  0x0BCA <= code && code <= 0x0BCC || // Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU
  0x0C01 <= code && code <= 0x0C03 || // Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA
  0x0C41 <= code && code <= 0x0C44 || // Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR
  0x0C82 <= code && code <= 0x0C83 || // Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA
  0x0CBE === code || // Mc       KANNADA VOWEL SIGN AA
  0x0CC0 <= code && code <= 0x0CC1 || // Mc   [2] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN U
  0x0CC3 <= code && code <= 0x0CC4 || // Mc   [2] KANNADA VOWEL SIGN VOCALIC R..KANNADA VOWEL SIGN VOCALIC RR
  0x0CC7 <= code && code <= 0x0CC8 || // Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI
  0x0CCA <= code && code <= 0x0CCB || // Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO
  0x0D02 <= code && code <= 0x0D03 || // Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA
  0x0D3F <= code && code <= 0x0D40 || // Mc   [2] MALAYALAM VOWEL SIGN I..MALAYALAM VOWEL SIGN II
  0x0D46 <= code && code <= 0x0D48 || // Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI
  0x0D4A <= code && code <= 0x0D4C || // Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU
  0x0D82 <= code && code <= 0x0D83 || // Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA
  0x0DD0 <= code && code <= 0x0DD1 || // Mc   [2] SINHALA VOWEL SIGN KETTI AEDA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA
  0x0DD8 <= code && code <= 0x0DDE || // Mc   [7] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA
  0x0DF2 <= code && code <= 0x0DF3 || // Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA
  0x0E33 === code || // Lo       THAI CHARACTER SARA AM
  0x0EB3 === code || // Lo       LAO VOWEL SIGN AM
  0x0F3E <= code && code <= 0x0F3F || // Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES
  0x0F7F === code || // Mc       TIBETAN SIGN RNAM BCAD
  0x1031 === code || // Mc       MYANMAR VOWEL SIGN E
  0x103B <= code && code <= 0x103C || // Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA
  0x1056 <= code && code <= 0x1057 || // Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR
  0x1084 === code || // Mc       MYANMAR VOWEL SIGN SHAN E
  0x17B6 === code || // Mc       KHMER VOWEL SIGN AA
  0x17BE <= code && code <= 0x17C5 || // Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU
  0x17C7 <= code && code <= 0x17C8 || // Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU
  0x1923 <= code && code <= 0x1926 || // Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU
  0x1929 <= code && code <= 0x192B || // Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA
  0x1930 <= code && code <= 0x1931 || // Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA
  0x1933 <= code && code <= 0x1938 || // Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA
  0x1A19 <= code && code <= 0x1A1A || // Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O
  0x1A55 === code || // Mc       TAI THAM CONSONANT SIGN MEDIAL RA
  0x1A57 === code || // Mc       TAI THAM CONSONANT SIGN LA TANG LAI
  0x1A6D <= code && code <= 0x1A72 || // Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI
  0x1B04 === code || // Mc       BALINESE SIGN BISAH
  0x1B35 === code || // Mc       BALINESE VOWEL SIGN TEDUNG
  0x1B3B === code || // Mc       BALINESE VOWEL SIGN RA REPA TEDUNG
  0x1B3D <= code && code <= 0x1B41 || // Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG
  0x1B43 <= code && code <= 0x1B44 || // Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG
  0x1B82 === code || // Mc       SUNDANESE SIGN PANGWISAD
  0x1BA1 === code || // Mc       SUNDANESE CONSONANT SIGN PAMINGKAL
  0x1BA6 <= code && code <= 0x1BA7 || // Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG
  0x1BAA === code || // Mc       SUNDANESE SIGN PAMAAEH
  0x1BE7 === code || // Mc       BATAK VOWEL SIGN E
  0x1BEA <= code && code <= 0x1BEC || // Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O
  0x1BEE === code || // Mc       BATAK VOWEL SIGN U
  0x1BF2 <= code && code <= 0x1BF3 || // Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN
  0x1C24 <= code && code <= 0x1C2B || // Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU
  0x1C34 <= code && code <= 0x1C35 || // Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG
  0x1CE1 === code || // Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA
  0x1CF2 <= code && code <= 0x1CF3 || // Mc   [2] VEDIC SIGN ARDHAVISARGA..VEDIC SIGN ROTATED ARDHAVISARGA
  0xA823 <= code && code <= 0xA824 || // Mc   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I
  0xA827 === code || // Mc       SYLOTI NAGRI VOWEL SIGN OO
  0xA880 <= code && code <= 0xA881 || // Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA
  0xA8B4 <= code && code <= 0xA8C3 || // Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU
  0xA952 <= code && code <= 0xA953 || // Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA
  0xA983 === code || // Mc       JAVANESE SIGN WIGNYAN
  0xA9B4 <= code && code <= 0xA9B5 || // Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG
  0xA9BA <= code && code <= 0xA9BB || // Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE
  0xA9BD <= code && code <= 0xA9C0 || // Mc   [4] JAVANESE CONSONANT SIGN KERET..JAVANESE PANGKON
  0xAA2F <= code && code <= 0xAA30 || // Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI
  0xAA33 <= code && code <= 0xAA34 || // Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA
  0xAA4D === code || // Mc       CHAM CONSONANT SIGN FINAL H
  0xAAEB === code || // Mc       MEETEI MAYEK VOWEL SIGN II
  0xAAEE <= code && code <= 0xAAEF || // Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU
  0xAAF5 === code || // Mc       MEETEI MAYEK VOWEL SIGN VISARGA
  0xABE3 <= code && code <= 0xABE4 || // Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP
  0xABE6 <= code && code <= 0xABE7 || // Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP
  0xABE9 <= code && code <= 0xABEA || // Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG
  0xABEC === code || // Mc       MEETEI MAYEK LUM IYEK
  0x11000 === code || // Mc       BRAHMI SIGN CANDRABINDU
  0x11002 === code || // Mc       BRAHMI SIGN VISARGA
  0x11082 === code || // Mc       KAITHI SIGN VISARGA
  0x110B0 <= code && code <= 0x110B2 || // Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II
  0x110B7 <= code && code <= 0x110B8 || // Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU
  0x1112C === code || // Mc       CHAKMA VOWEL SIGN E
  0x11182 === code || // Mc       SHARADA SIGN VISARGA
  0x111B3 <= code && code <= 0x111B5 || // Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II
  0x111BF <= code && code <= 0x111C0 || // Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA
  0x1122C <= code && code <= 0x1122E || // Mc   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II
  0x11232 <= code && code <= 0x11233 || // Mc   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU
  0x11235 === code || // Mc       KHOJKI SIGN VIRAMA
  0x112E0 <= code && code <= 0x112E2 || // Mc   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II
  0x11302 <= code && code <= 0x11303 || // Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA
  0x1133F === code || // Mc       GRANTHA VOWEL SIGN I
  0x11341 <= code && code <= 0x11344 || // Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR
  0x11347 <= code && code <= 0x11348 || // Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI
  0x1134B <= code && code <= 0x1134D || // Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA
  0x11362 <= code && code <= 0x11363 || // Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL
  0x114B1 <= code && code <= 0x114B2 || // Mc   [2] TIRHUTA VOWEL SIGN I..TIRHUTA VOWEL SIGN II
  0x114B9 === code || // Mc       TIRHUTA VOWEL SIGN E
  0x114BB <= code && code <= 0x114BC || // Mc   [2] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN O
  0x114BE === code || // Mc       TIRHUTA VOWEL SIGN AU
  0x114C1 === code || // Mc       TIRHUTA SIGN VISARGA
  0x115B0 <= code && code <= 0x115B1 || // Mc   [2] SIDDHAM VOWEL SIGN I..SIDDHAM VOWEL SIGN II
  0x115B8 <= code && code <= 0x115BB || // Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU
  0x115BE === code || // Mc       SIDDHAM SIGN VISARGA
  0x11630 <= code && code <= 0x11632 || // Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II
  0x1163B <= code && code <= 0x1163C || // Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU
  0x1163E === code || // Mc       MODI SIGN VISARGA
  0x116AC === code || // Mc       TAKRI SIGN VISARGA
  0x116AE <= code && code <= 0x116AF || // Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II
  0x116B6 === code || // Mc       TAKRI SIGN VIRAMA
  0x11720 <= code && code <= 0x11721 || // Mc   [2] AHOM VOWEL SIGN A..AHOM VOWEL SIGN AA
  0x11726 === code || // Mc       AHOM VOWEL SIGN E
  0x16F51 <= code && code <= 0x16F7E || // Mc  [46] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN NG
  0x1D166 === code || // Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM
  0x1D16D === code // Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT
  ) {
      return SpacingMark;
    }

  if (0x1100 <= code && code <= 0x115F || // Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER
  0xA960 <= code && code <= 0xA97C // Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH
  ) {
      return L;
    }

  if (0x1160 <= code && code <= 0x11A7 || // Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE
  0xD7B0 <= code && code <= 0xD7C6 // Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E
  ) {
      return V;
    }

  if (0x11A8 <= code && code <= 0x11FF || // Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN
  0xD7CB <= code && code <= 0xD7FB // Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH
  ) {
      return T;
    }

  if (0xAC00 === code || // Lo       HANGUL SYLLABLE GA
  0xAC1C === code || // Lo       HANGUL SYLLABLE GAE
  0xAC38 === code || // Lo       HANGUL SYLLABLE GYA
  0xAC54 === code || // Lo       HANGUL SYLLABLE GYAE
  0xAC70 === code || // Lo       HANGUL SYLLABLE GEO
  0xAC8C === code || // Lo       HANGUL SYLLABLE GE
  0xACA8 === code || // Lo       HANGUL SYLLABLE GYEO
  0xACC4 === code || // Lo       HANGUL SYLLABLE GYE
  0xACE0 === code || // Lo       HANGUL SYLLABLE GO
  0xACFC === code || // Lo       HANGUL SYLLABLE GWA
  0xAD18 === code || // Lo       HANGUL SYLLABLE GWAE
  0xAD34 === code || // Lo       HANGUL SYLLABLE GOE
  0xAD50 === code || // Lo       HANGUL SYLLABLE GYO
  0xAD6C === code || // Lo       HANGUL SYLLABLE GU
  0xAD88 === code || // Lo       HANGUL SYLLABLE GWEO
  0xADA4 === code || // Lo       HANGUL SYLLABLE GWE
  0xADC0 === code || // Lo       HANGUL SYLLABLE GWI
  0xADDC === code || // Lo       HANGUL SYLLABLE GYU
  0xADF8 === code || // Lo       HANGUL SYLLABLE GEU
  0xAE14 === code || // Lo       HANGUL SYLLABLE GYI
  0xAE30 === code || // Lo       HANGUL SYLLABLE GI
  0xAE4C === code || // Lo       HANGUL SYLLABLE GGA
  0xAE68 === code || // Lo       HANGUL SYLLABLE GGAE
  0xAE84 === code || // Lo       HANGUL SYLLABLE GGYA
  0xAEA0 === code || // Lo       HANGUL SYLLABLE GGYAE
  0xAEBC === code || // Lo       HANGUL SYLLABLE GGEO
  0xAED8 === code || // Lo       HANGUL SYLLABLE GGE
  0xAEF4 === code || // Lo       HANGUL SYLLABLE GGYEO
  0xAF10 === code || // Lo       HANGUL SYLLABLE GGYE
  0xAF2C === code || // Lo       HANGUL SYLLABLE GGO
  0xAF48 === code || // Lo       HANGUL SYLLABLE GGWA
  0xAF64 === code || // Lo       HANGUL SYLLABLE GGWAE
  0xAF80 === code || // Lo       HANGUL SYLLABLE GGOE
  0xAF9C === code || // Lo       HANGUL SYLLABLE GGYO
  0xAFB8 === code || // Lo       HANGUL SYLLABLE GGU
  0xAFD4 === code || // Lo       HANGUL SYLLABLE GGWEO
  0xAFF0 === code || // Lo       HANGUL SYLLABLE GGWE
  0xB00C === code || // Lo       HANGUL SYLLABLE GGWI
  0xB028 === code || // Lo       HANGUL SYLLABLE GGYU
  0xB044 === code || // Lo       HANGUL SYLLABLE GGEU
  0xB060 === code || // Lo       HANGUL SYLLABLE GGYI
  0xB07C === code || // Lo       HANGUL SYLLABLE GGI
  0xB098 === code || // Lo       HANGUL SYLLABLE NA
  0xB0B4 === code || // Lo       HANGUL SYLLABLE NAE
  0xB0D0 === code || // Lo       HANGUL SYLLABLE NYA
  0xB0EC === code || // Lo       HANGUL SYLLABLE NYAE
  0xB108 === code || // Lo       HANGUL SYLLABLE NEO
  0xB124 === code || // Lo       HANGUL SYLLABLE NE
  0xB140 === code || // Lo       HANGUL SYLLABLE NYEO
  0xB15C === code || // Lo       HANGUL SYLLABLE NYE
  0xB178 === code || // Lo       HANGUL SYLLABLE NO
  0xB194 === code || // Lo       HANGUL SYLLABLE NWA
  0xB1B0 === code || // Lo       HANGUL SYLLABLE NWAE
  0xB1CC === code || // Lo       HANGUL SYLLABLE NOE
  0xB1E8 === code || // Lo       HANGUL SYLLABLE NYO
  0xB204 === code || // Lo       HANGUL SYLLABLE NU
  0xB220 === code || // Lo       HANGUL SYLLABLE NWEO
  0xB23C === code || // Lo       HANGUL SYLLABLE NWE
  0xB258 === code || // Lo       HANGUL SYLLABLE NWI
  0xB274 === code || // Lo       HANGUL SYLLABLE NYU
  0xB290 === code || // Lo       HANGUL SYLLABLE NEU
  0xB2AC === code || // Lo       HANGUL SYLLABLE NYI
  0xB2C8 === code || // Lo       HANGUL SYLLABLE NI
  0xB2E4 === code || // Lo       HANGUL SYLLABLE DA
  0xB300 === code || // Lo       HANGUL SYLLABLE DAE
  0xB31C === code || // Lo       HANGUL SYLLABLE DYA
  0xB338 === code || // Lo       HANGUL SYLLABLE DYAE
  0xB354 === code || // Lo       HANGUL SYLLABLE DEO
  0xB370 === code || // Lo       HANGUL SYLLABLE DE
  0xB38C === code || // Lo       HANGUL SYLLABLE DYEO
  0xB3A8 === code || // Lo       HANGUL SYLLABLE DYE
  0xB3C4 === code || // Lo       HANGUL SYLLABLE DO
  0xB3E0 === code || // Lo       HANGUL SYLLABLE DWA
  0xB3FC === code || // Lo       HANGUL SYLLABLE DWAE
  0xB418 === code || // Lo       HANGUL SYLLABLE DOE
  0xB434 === code || // Lo       HANGUL SYLLABLE DYO
  0xB450 === code || // Lo       HANGUL SYLLABLE DU
  0xB46C === code || // Lo       HANGUL SYLLABLE DWEO
  0xB488 === code || // Lo       HANGUL SYLLABLE DWE
  0xB4A4 === code || // Lo       HANGUL SYLLABLE DWI
  0xB4C0 === code || // Lo       HANGUL SYLLABLE DYU
  0xB4DC === code || // Lo       HANGUL SYLLABLE DEU
  0xB4F8 === code || // Lo       HANGUL SYLLABLE DYI
  0xB514 === code || // Lo       HANGUL SYLLABLE DI
  0xB530 === code || // Lo       HANGUL SYLLABLE DDA
  0xB54C === code || // Lo       HANGUL SYLLABLE DDAE
  0xB568 === code || // Lo       HANGUL SYLLABLE DDYA
  0xB584 === code || // Lo       HANGUL SYLLABLE DDYAE
  0xB5A0 === code || // Lo       HANGUL SYLLABLE DDEO
  0xB5BC === code || // Lo       HANGUL SYLLABLE DDE
  0xB5D8 === code || // Lo       HANGUL SYLLABLE DDYEO
  0xB5F4 === code || // Lo       HANGUL SYLLABLE DDYE
  0xB610 === code || // Lo       HANGUL SYLLABLE DDO
  0xB62C === code || // Lo       HANGUL SYLLABLE DDWA
  0xB648 === code || // Lo       HANGUL SYLLABLE DDWAE
  0xB664 === code || // Lo       HANGUL SYLLABLE DDOE
  0xB680 === code || // Lo       HANGUL SYLLABLE DDYO
  0xB69C === code || // Lo       HANGUL SYLLABLE DDU
  0xB6B8 === code || // Lo       HANGUL SYLLABLE DDWEO
  0xB6D4 === code || // Lo       HANGUL SYLLABLE DDWE
  0xB6F0 === code || // Lo       HANGUL SYLLABLE DDWI
  0xB70C === code || // Lo       HANGUL SYLLABLE DDYU
  0xB728 === code || // Lo       HANGUL SYLLABLE DDEU
  0xB744 === code || // Lo       HANGUL SYLLABLE DDYI
  0xB760 === code || // Lo       HANGUL SYLLABLE DDI
  0xB77C === code || // Lo       HANGUL SYLLABLE RA
  0xB798 === code || // Lo       HANGUL SYLLABLE RAE
  0xB7B4 === code || // Lo       HANGUL SYLLABLE RYA
  0xB7D0 === code || // Lo       HANGUL SYLLABLE RYAE
  0xB7EC === code || // Lo       HANGUL SYLLABLE REO
  0xB808 === code || // Lo       HANGUL SYLLABLE RE
  0xB824 === code || // Lo       HANGUL SYLLABLE RYEO
  0xB840 === code || // Lo       HANGUL SYLLABLE RYE
  0xB85C === code || // Lo       HANGUL SYLLABLE RO
  0xB878 === code || // Lo       HANGUL SYLLABLE RWA
  0xB894 === code || // Lo       HANGUL SYLLABLE RWAE
  0xB8B0 === code || // Lo       HANGUL SYLLABLE ROE
  0xB8CC === code || // Lo       HANGUL SYLLABLE RYO
  0xB8E8 === code || // Lo       HANGUL SYLLABLE RU
  0xB904 === code || // Lo       HANGUL SYLLABLE RWEO
  0xB920 === code || // Lo       HANGUL SYLLABLE RWE
  0xB93C === code || // Lo       HANGUL SYLLABLE RWI
  0xB958 === code || // Lo       HANGUL SYLLABLE RYU
  0xB974 === code || // Lo       HANGUL SYLLABLE REU
  0xB990 === code || // Lo       HANGUL SYLLABLE RYI
  0xB9AC === code || // Lo       HANGUL SYLLABLE RI
  0xB9C8 === code || // Lo       HANGUL SYLLABLE MA
  0xB9E4 === code || // Lo       HANGUL SYLLABLE MAE
  0xBA00 === code || // Lo       HANGUL SYLLABLE MYA
  0xBA1C === code || // Lo       HANGUL SYLLABLE MYAE
  0xBA38 === code || // Lo       HANGUL SYLLABLE MEO
  0xBA54 === code || // Lo       HANGUL SYLLABLE ME
  0xBA70 === code || // Lo       HANGUL SYLLABLE MYEO
  0xBA8C === code || // Lo       HANGUL SYLLABLE MYE
  0xBAA8 === code || // Lo       HANGUL SYLLABLE MO
  0xBAC4 === code || // Lo       HANGUL SYLLABLE MWA
  0xBAE0 === code || // Lo       HANGUL SYLLABLE MWAE
  0xBAFC === code || // Lo       HANGUL SYLLABLE MOE
  0xBB18 === code || // Lo       HANGUL SYLLABLE MYO
  0xBB34 === code || // Lo       HANGUL SYLLABLE MU
  0xBB50 === code || // Lo       HANGUL SYLLABLE MWEO
  0xBB6C === code || // Lo       HANGUL SYLLABLE MWE
  0xBB88 === code || // Lo       HANGUL SYLLABLE MWI
  0xBBA4 === code || // Lo       HANGUL SYLLABLE MYU
  0xBBC0 === code || // Lo       HANGUL SYLLABLE MEU
  0xBBDC === code || // Lo       HANGUL SYLLABLE MYI
  0xBBF8 === code || // Lo       HANGUL SYLLABLE MI
  0xBC14 === code || // Lo       HANGUL SYLLABLE BA
  0xBC30 === code || // Lo       HANGUL SYLLABLE BAE
  0xBC4C === code || // Lo       HANGUL SYLLABLE BYA
  0xBC68 === code || // Lo       HANGUL SYLLABLE BYAE
  0xBC84 === code || // Lo       HANGUL SYLLABLE BEO
  0xBCA0 === code || // Lo       HANGUL SYLLABLE BE
  0xBCBC === code || // Lo       HANGUL SYLLABLE BYEO
  0xBCD8 === code || // Lo       HANGUL SYLLABLE BYE
  0xBCF4 === code || // Lo       HANGUL SYLLABLE BO
  0xBD10 === code || // Lo       HANGUL SYLLABLE BWA
  0xBD2C === code || // Lo       HANGUL SYLLABLE BWAE
  0xBD48 === code || // Lo       HANGUL SYLLABLE BOE
  0xBD64 === code || // Lo       HANGUL SYLLABLE BYO
  0xBD80 === code || // Lo       HANGUL SYLLABLE BU
  0xBD9C === code || // Lo       HANGUL SYLLABLE BWEO
  0xBDB8 === code || // Lo       HANGUL SYLLABLE BWE
  0xBDD4 === code || // Lo       HANGUL SYLLABLE BWI
  0xBDF0 === code || // Lo       HANGUL SYLLABLE BYU
  0xBE0C === code || // Lo       HANGUL SYLLABLE BEU
  0xBE28 === code || // Lo       HANGUL SYLLABLE BYI
  0xBE44 === code || // Lo       HANGUL SYLLABLE BI
  0xBE60 === code || // Lo       HANGUL SYLLABLE BBA
  0xBE7C === code || // Lo       HANGUL SYLLABLE BBAE
  0xBE98 === code || // Lo       HANGUL SYLLABLE BBYA
  0xBEB4 === code || // Lo       HANGUL SYLLABLE BBYAE
  0xBED0 === code || // Lo       HANGUL SYLLABLE BBEO
  0xBEEC === code || // Lo       HANGUL SYLLABLE BBE
  0xBF08 === code || // Lo       HANGUL SYLLABLE BBYEO
  0xBF24 === code || // Lo       HANGUL SYLLABLE BBYE
  0xBF40 === code || // Lo       HANGUL SYLLABLE BBO
  0xBF5C === code || // Lo       HANGUL SYLLABLE BBWA
  0xBF78 === code || // Lo       HANGUL SYLLABLE BBWAE
  0xBF94 === code || // Lo       HANGUL SYLLABLE BBOE
  0xBFB0 === code || // Lo       HANGUL SYLLABLE BBYO
  0xBFCC === code || // Lo       HANGUL SYLLABLE BBU
  0xBFE8 === code || // Lo       HANGUL SYLLABLE BBWEO
  0xC004 === code || // Lo       HANGUL SYLLABLE BBWE
  0xC020 === code || // Lo       HANGUL SYLLABLE BBWI
  0xC03C === code || // Lo       HANGUL SYLLABLE BBYU
  0xC058 === code || // Lo       HANGUL SYLLABLE BBEU
  0xC074 === code || // Lo       HANGUL SYLLABLE BBYI
  0xC090 === code || // Lo       HANGUL SYLLABLE BBI
  0xC0AC === code || // Lo       HANGUL SYLLABLE SA
  0xC0C8 === code || // Lo       HANGUL SYLLABLE SAE
  0xC0E4 === code || // Lo       HANGUL SYLLABLE SYA
  0xC100 === code || // Lo       HANGUL SYLLABLE SYAE
  0xC11C === code || // Lo       HANGUL SYLLABLE SEO
  0xC138 === code || // Lo       HANGUL SYLLABLE SE
  0xC154 === code || // Lo       HANGUL SYLLABLE SYEO
  0xC170 === code || // Lo       HANGUL SYLLABLE SYE
  0xC18C === code || // Lo       HANGUL SYLLABLE SO
  0xC1A8 === code || // Lo       HANGUL SYLLABLE SWA
  0xC1C4 === code || // Lo       HANGUL SYLLABLE SWAE
  0xC1E0 === code || // Lo       HANGUL SYLLABLE SOE
  0xC1FC === code || // Lo       HANGUL SYLLABLE SYO
  0xC218 === code || // Lo       HANGUL SYLLABLE SU
  0xC234 === code || // Lo       HANGUL SYLLABLE SWEO
  0xC250 === code || // Lo       HANGUL SYLLABLE SWE
  0xC26C === code || // Lo       HANGUL SYLLABLE SWI
  0xC288 === code || // Lo       HANGUL SYLLABLE SYU
  0xC2A4 === code || // Lo       HANGUL SYLLABLE SEU
  0xC2C0 === code || // Lo       HANGUL SYLLABLE SYI
  0xC2DC === code || // Lo       HANGUL SYLLABLE SI
  0xC2F8 === code || // Lo       HANGUL SYLLABLE SSA
  0xC314 === code || // Lo       HANGUL SYLLABLE SSAE
  0xC330 === code || // Lo       HANGUL SYLLABLE SSYA
  0xC34C === code || // Lo       HANGUL SYLLABLE SSYAE
  0xC368 === code || // Lo       HANGUL SYLLABLE SSEO
  0xC384 === code || // Lo       HANGUL SYLLABLE SSE
  0xC3A0 === code || // Lo       HANGUL SYLLABLE SSYEO
  0xC3BC === code || // Lo       HANGUL SYLLABLE SSYE
  0xC3D8 === code || // Lo       HANGUL SYLLABLE SSO
  0xC3F4 === code || // Lo       HANGUL SYLLABLE SSWA
  0xC410 === code || // Lo       HANGUL SYLLABLE SSWAE
  0xC42C === code || // Lo       HANGUL SYLLABLE SSOE
  0xC448 === code || // Lo       HANGUL SYLLABLE SSYO
  0xC464 === code || // Lo       HANGUL SYLLABLE SSU
  0xC480 === code || // Lo       HANGUL SYLLABLE SSWEO
  0xC49C === code || // Lo       HANGUL SYLLABLE SSWE
  0xC4B8 === code || // Lo       HANGUL SYLLABLE SSWI
  0xC4D4 === code || // Lo       HANGUL SYLLABLE SSYU
  0xC4F0 === code || // Lo       HANGUL SYLLABLE SSEU
  0xC50C === code || // Lo       HANGUL SYLLABLE SSYI
  0xC528 === code || // Lo       HANGUL SYLLABLE SSI
  0xC544 === code || // Lo       HANGUL SYLLABLE A
  0xC560 === code || // Lo       HANGUL SYLLABLE AE
  0xC57C === code || // Lo       HANGUL SYLLABLE YA
  0xC598 === code || // Lo       HANGUL SYLLABLE YAE
  0xC5B4 === code || // Lo       HANGUL SYLLABLE EO
  0xC5D0 === code || // Lo       HANGUL SYLLABLE E
  0xC5EC === code || // Lo       HANGUL SYLLABLE YEO
  0xC608 === code || // Lo       HANGUL SYLLABLE YE
  0xC624 === code || // Lo       HANGUL SYLLABLE O
  0xC640 === code || // Lo       HANGUL SYLLABLE WA
  0xC65C === code || // Lo       HANGUL SYLLABLE WAE
  0xC678 === code || // Lo       HANGUL SYLLABLE OE
  0xC694 === code || // Lo       HANGUL SYLLABLE YO
  0xC6B0 === code || // Lo       HANGUL SYLLABLE U
  0xC6CC === code || // Lo       HANGUL SYLLABLE WEO
  0xC6E8 === code || // Lo       HANGUL SYLLABLE WE
  0xC704 === code || // Lo       HANGUL SYLLABLE WI
  0xC720 === code || // Lo       HANGUL SYLLABLE YU
  0xC73C === code || // Lo       HANGUL SYLLABLE EU
  0xC758 === code || // Lo       HANGUL SYLLABLE YI
  0xC774 === code || // Lo       HANGUL SYLLABLE I
  0xC790 === code || // Lo       HANGUL SYLLABLE JA
  0xC7AC === code || // Lo       HANGUL SYLLABLE JAE
  0xC7C8 === code || // Lo       HANGUL SYLLABLE JYA
  0xC7E4 === code || // Lo       HANGUL SYLLABLE JYAE
  0xC800 === code || // Lo       HANGUL SYLLABLE JEO
  0xC81C === code || // Lo       HANGUL SYLLABLE JE
  0xC838 === code || // Lo       HANGUL SYLLABLE JYEO
  0xC854 === code || // Lo       HANGUL SYLLABLE JYE
  0xC870 === code || // Lo       HANGUL SYLLABLE JO
  0xC88C === code || // Lo       HANGUL SYLLABLE JWA
  0xC8A8 === code || // Lo       HANGUL SYLLABLE JWAE
  0xC8C4 === code || // Lo       HANGUL SYLLABLE JOE
  0xC8E0 === code || // Lo       HANGUL SYLLABLE JYO
  0xC8FC === code || // Lo       HANGUL SYLLABLE JU
  0xC918 === code || // Lo       HANGUL SYLLABLE JWEO
  0xC934 === code || // Lo       HANGUL SYLLABLE JWE
  0xC950 === code || // Lo       HANGUL SYLLABLE JWI
  0xC96C === code || // Lo       HANGUL SYLLABLE JYU
  0xC988 === code || // Lo       HANGUL SYLLABLE JEU
  0xC9A4 === code || // Lo       HANGUL SYLLABLE JYI
  0xC9C0 === code || // Lo       HANGUL SYLLABLE JI
  0xC9DC === code || // Lo       HANGUL SYLLABLE JJA
  0xC9F8 === code || // Lo       HANGUL SYLLABLE JJAE
  0xCA14 === code || // Lo       HANGUL SYLLABLE JJYA
  0xCA30 === code || // Lo       HANGUL SYLLABLE JJYAE
  0xCA4C === code || // Lo       HANGUL SYLLABLE JJEO
  0xCA68 === code || // Lo       HANGUL SYLLABLE JJE
  0xCA84 === code || // Lo       HANGUL SYLLABLE JJYEO
  0xCAA0 === code || // Lo       HANGUL SYLLABLE JJYE
  0xCABC === code || // Lo       HANGUL SYLLABLE JJO
  0xCAD8 === code || // Lo       HANGUL SYLLABLE JJWA
  0xCAF4 === code || // Lo       HANGUL SYLLABLE JJWAE
  0xCB10 === code || // Lo       HANGUL SYLLABLE JJOE
  0xCB2C === code || // Lo       HANGUL SYLLABLE JJYO
  0xCB48 === code || // Lo       HANGUL SYLLABLE JJU
  0xCB64 === code || // Lo       HANGUL SYLLABLE JJWEO
  0xCB80 === code || // Lo       HANGUL SYLLABLE JJWE
  0xCB9C === code || // Lo       HANGUL SYLLABLE JJWI
  0xCBB8 === code || // Lo       HANGUL SYLLABLE JJYU
  0xCBD4 === code || // Lo       HANGUL SYLLABLE JJEU
  0xCBF0 === code || // Lo       HANGUL SYLLABLE JJYI
  0xCC0C === code || // Lo       HANGUL SYLLABLE JJI
  0xCC28 === code || // Lo       HANGUL SYLLABLE CA
  0xCC44 === code || // Lo       HANGUL SYLLABLE CAE
  0xCC60 === code || // Lo       HANGUL SYLLABLE CYA
  0xCC7C === code || // Lo       HANGUL SYLLABLE CYAE
  0xCC98 === code || // Lo       HANGUL SYLLABLE CEO
  0xCCB4 === code || // Lo       HANGUL SYLLABLE CE
  0xCCD0 === code || // Lo       HANGUL SYLLABLE CYEO
  0xCCEC === code || // Lo       HANGUL SYLLABLE CYE
  0xCD08 === code || // Lo       HANGUL SYLLABLE CO
  0xCD24 === code || // Lo       HANGUL SYLLABLE CWA
  0xCD40 === code || // Lo       HANGUL SYLLABLE CWAE
  0xCD5C === code || // Lo       HANGUL SYLLABLE COE
  0xCD78 === code || // Lo       HANGUL SYLLABLE CYO
  0xCD94 === code || // Lo       HANGUL SYLLABLE CU
  0xCDB0 === code || // Lo       HANGUL SYLLABLE CWEO
  0xCDCC === code || // Lo       HANGUL SYLLABLE CWE
  0xCDE8 === code || // Lo       HANGUL SYLLABLE CWI
  0xCE04 === code || // Lo       HANGUL SYLLABLE CYU
  0xCE20 === code || // Lo       HANGUL SYLLABLE CEU
  0xCE3C === code || // Lo       HANGUL SYLLABLE CYI
  0xCE58 === code || // Lo       HANGUL SYLLABLE CI
  0xCE74 === code || // Lo       HANGUL SYLLABLE KA
  0xCE90 === code || // Lo       HANGUL SYLLABLE KAE
  0xCEAC === code || // Lo       HANGUL SYLLABLE KYA
  0xCEC8 === code || // Lo       HANGUL SYLLABLE KYAE
  0xCEE4 === code || // Lo       HANGUL SYLLABLE KEO
  0xCF00 === code || // Lo       HANGUL SYLLABLE KE
  0xCF1C === code || // Lo       HANGUL SYLLABLE KYEO
  0xCF38 === code || // Lo       HANGUL SYLLABLE KYE
  0xCF54 === code || // Lo       HANGUL SYLLABLE KO
  0xCF70 === code || // Lo       HANGUL SYLLABLE KWA
  0xCF8C === code || // Lo       HANGUL SYLLABLE KWAE
  0xCFA8 === code || // Lo       HANGUL SYLLABLE KOE
  0xCFC4 === code || // Lo       HANGUL SYLLABLE KYO
  0xCFE0 === code || // Lo       HANGUL SYLLABLE KU
  0xCFFC === code || // Lo       HANGUL SYLLABLE KWEO
  0xD018 === code || // Lo       HANGUL SYLLABLE KWE
  0xD034 === code || // Lo       HANGUL SYLLABLE KWI
  0xD050 === code || // Lo       HANGUL SYLLABLE KYU
  0xD06C === code || // Lo       HANGUL SYLLABLE KEU
  0xD088 === code || // Lo       HANGUL SYLLABLE KYI
  0xD0A4 === code || // Lo       HANGUL SYLLABLE KI
  0xD0C0 === code || // Lo       HANGUL SYLLABLE TA
  0xD0DC === code || // Lo       HANGUL SYLLABLE TAE
  0xD0F8 === code || // Lo       HANGUL SYLLABLE TYA
  0xD114 === code || // Lo       HANGUL SYLLABLE TYAE
  0xD130 === code || // Lo       HANGUL SYLLABLE TEO
  0xD14C === code || // Lo       HANGUL SYLLABLE TE
  0xD168 === code || // Lo       HANGUL SYLLABLE TYEO
  0xD184 === code || // Lo       HANGUL SYLLABLE TYE
  0xD1A0 === code || // Lo       HANGUL SYLLABLE TO
  0xD1BC === code || // Lo       HANGUL SYLLABLE TWA
  0xD1D8 === code || // Lo       HANGUL SYLLABLE TWAE
  0xD1F4 === code || // Lo       HANGUL SYLLABLE TOE
  0xD210 === code || // Lo       HANGUL SYLLABLE TYO
  0xD22C === code || // Lo       HANGUL SYLLABLE TU
  0xD248 === code || // Lo       HANGUL SYLLABLE TWEO
  0xD264 === code || // Lo       HANGUL SYLLABLE TWE
  0xD280 === code || // Lo       HANGUL SYLLABLE TWI
  0xD29C === code || // Lo       HANGUL SYLLABLE TYU
  0xD2B8 === code || // Lo       HANGUL SYLLABLE TEU
  0xD2D4 === code || // Lo       HANGUL SYLLABLE TYI
  0xD2F0 === code || // Lo       HANGUL SYLLABLE TI
  0xD30C === code || // Lo       HANGUL SYLLABLE PA
  0xD328 === code || // Lo       HANGUL SYLLABLE PAE
  0xD344 === code || // Lo       HANGUL SYLLABLE PYA
  0xD360 === code || // Lo       HANGUL SYLLABLE PYAE
  0xD37C === code || // Lo       HANGUL SYLLABLE PEO
  0xD398 === code || // Lo       HANGUL SYLLABLE PE
  0xD3B4 === code || // Lo       HANGUL SYLLABLE PYEO
  0xD3D0 === code || // Lo       HANGUL SYLLABLE PYE
  0xD3EC === code || // Lo       HANGUL SYLLABLE PO
  0xD408 === code || // Lo       HANGUL SYLLABLE PWA
  0xD424 === code || // Lo       HANGUL SYLLABLE PWAE
  0xD440 === code || // Lo       HANGUL SYLLABLE POE
  0xD45C === code || // Lo       HANGUL SYLLABLE PYO
  0xD478 === code || // Lo       HANGUL SYLLABLE PU
  0xD494 === code || // Lo       HANGUL SYLLABLE PWEO
  0xD4B0 === code || // Lo       HANGUL SYLLABLE PWE
  0xD4CC === code || // Lo       HANGUL SYLLABLE PWI
  0xD4E8 === code || // Lo       HANGUL SYLLABLE PYU
  0xD504 === code || // Lo       HANGUL SYLLABLE PEU
  0xD520 === code || // Lo       HANGUL SYLLABLE PYI
  0xD53C === code || // Lo       HANGUL SYLLABLE PI
  0xD558 === code || // Lo       HANGUL SYLLABLE HA
  0xD574 === code || // Lo       HANGUL SYLLABLE HAE
  0xD590 === code || // Lo       HANGUL SYLLABLE HYA
  0xD5AC === code || // Lo       HANGUL SYLLABLE HYAE
  0xD5C8 === code || // Lo       HANGUL SYLLABLE HEO
  0xD5E4 === code || // Lo       HANGUL SYLLABLE HE
  0xD600 === code || // Lo       HANGUL SYLLABLE HYEO
  0xD61C === code || // Lo       HANGUL SYLLABLE HYE
  0xD638 === code || // Lo       HANGUL SYLLABLE HO
  0xD654 === code || // Lo       HANGUL SYLLABLE HWA
  0xD670 === code || // Lo       HANGUL SYLLABLE HWAE
  0xD68C === code || // Lo       HANGUL SYLLABLE HOE
  0xD6A8 === code || // Lo       HANGUL SYLLABLE HYO
  0xD6C4 === code || // Lo       HANGUL SYLLABLE HU
  0xD6E0 === code || // Lo       HANGUL SYLLABLE HWEO
  0xD6FC === code || // Lo       HANGUL SYLLABLE HWE
  0xD718 === code || // Lo       HANGUL SYLLABLE HWI
  0xD734 === code || // Lo       HANGUL SYLLABLE HYU
  0xD750 === code || // Lo       HANGUL SYLLABLE HEU
  0xD76C === code || // Lo       HANGUL SYLLABLE HYI
  0xD788 === code // Lo       HANGUL SYLLABLE HI
  ) {
      return LV;
    }

  if (0xAC01 <= code && code <= 0xAC1B || // Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH
  0xAC1D <= code && code <= 0xAC37 || // Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH
  0xAC39 <= code && code <= 0xAC53 || // Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH
  0xAC55 <= code && code <= 0xAC6F || // Lo  [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH
  0xAC71 <= code && code <= 0xAC8B || // Lo  [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH
  0xAC8D <= code && code <= 0xACA7 || // Lo  [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH
  0xACA9 <= code && code <= 0xACC3 || // Lo  [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH
  0xACC5 <= code && code <= 0xACDF || // Lo  [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH
  0xACE1 <= code && code <= 0xACFB || // Lo  [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH
  0xACFD <= code && code <= 0xAD17 || // Lo  [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH
  0xAD19 <= code && code <= 0xAD33 || // Lo  [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH
  0xAD35 <= code && code <= 0xAD4F || // Lo  [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH
  0xAD51 <= code && code <= 0xAD6B || // Lo  [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH
  0xAD6D <= code && code <= 0xAD87 || // Lo  [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH
  0xAD89 <= code && code <= 0xADA3 || // Lo  [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH
  0xADA5 <= code && code <= 0xADBF || // Lo  [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH
  0xADC1 <= code && code <= 0xADDB || // Lo  [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH
  0xADDD <= code && code <= 0xADF7 || // Lo  [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH
  0xADF9 <= code && code <= 0xAE13 || // Lo  [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH
  0xAE15 <= code && code <= 0xAE2F || // Lo  [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH
  0xAE31 <= code && code <= 0xAE4B || // Lo  [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH
  0xAE4D <= code && code <= 0xAE67 || // Lo  [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH
  0xAE69 <= code && code <= 0xAE83 || // Lo  [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH
  0xAE85 <= code && code <= 0xAE9F || // Lo  [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH
  0xAEA1 <= code && code <= 0xAEBB || // Lo  [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH
  0xAEBD <= code && code <= 0xAED7 || // Lo  [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH
  0xAED9 <= code && code <= 0xAEF3 || // Lo  [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH
  0xAEF5 <= code && code <= 0xAF0F || // Lo  [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH
  0xAF11 <= code && code <= 0xAF2B || // Lo  [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH
  0xAF2D <= code && code <= 0xAF47 || // Lo  [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH
  0xAF49 <= code && code <= 0xAF63 || // Lo  [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH
  0xAF65 <= code && code <= 0xAF7F || // Lo  [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH
  0xAF81 <= code && code <= 0xAF9B || // Lo  [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH
  0xAF9D <= code && code <= 0xAFB7 || // Lo  [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH
  0xAFB9 <= code && code <= 0xAFD3 || // Lo  [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH
  0xAFD5 <= code && code <= 0xAFEF || // Lo  [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH
  0xAFF1 <= code && code <= 0xB00B || // Lo  [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH
  0xB00D <= code && code <= 0xB027 || // Lo  [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH
  0xB029 <= code && code <= 0xB043 || // Lo  [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH
  0xB045 <= code && code <= 0xB05F || // Lo  [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH
  0xB061 <= code && code <= 0xB07B || // Lo  [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH
  0xB07D <= code && code <= 0xB097 || // Lo  [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH
  0xB099 <= code && code <= 0xB0B3 || // Lo  [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH
  0xB0B5 <= code && code <= 0xB0CF || // Lo  [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH
  0xB0D1 <= code && code <= 0xB0EB || // Lo  [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH
  0xB0ED <= code && code <= 0xB107 || // Lo  [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH
  0xB109 <= code && code <= 0xB123 || // Lo  [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH
  0xB125 <= code && code <= 0xB13F || // Lo  [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH
  0xB141 <= code && code <= 0xB15B || // Lo  [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH
  0xB15D <= code && code <= 0xB177 || // Lo  [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH
  0xB179 <= code && code <= 0xB193 || // Lo  [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH
  0xB195 <= code && code <= 0xB1AF || // Lo  [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH
  0xB1B1 <= code && code <= 0xB1CB || // Lo  [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH
  0xB1CD <= code && code <= 0xB1E7 || // Lo  [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH
  0xB1E9 <= code && code <= 0xB203 || // Lo  [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH
  0xB205 <= code && code <= 0xB21F || // Lo  [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH
  0xB221 <= code && code <= 0xB23B || // Lo  [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH
  0xB23D <= code && code <= 0xB257 || // Lo  [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH
  0xB259 <= code && code <= 0xB273 || // Lo  [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH
  0xB275 <= code && code <= 0xB28F || // Lo  [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH
  0xB291 <= code && code <= 0xB2AB || // Lo  [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH
  0xB2AD <= code && code <= 0xB2C7 || // Lo  [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH
  0xB2C9 <= code && code <= 0xB2E3 || // Lo  [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH
  0xB2E5 <= code && code <= 0xB2FF || // Lo  [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH
  0xB301 <= code && code <= 0xB31B || // Lo  [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH
  0xB31D <= code && code <= 0xB337 || // Lo  [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH
  0xB339 <= code && code <= 0xB353 || // Lo  [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH
  0xB355 <= code && code <= 0xB36F || // Lo  [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH
  0xB371 <= code && code <= 0xB38B || // Lo  [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH
  0xB38D <= code && code <= 0xB3A7 || // Lo  [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH
  0xB3A9 <= code && code <= 0xB3C3 || // Lo  [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH
  0xB3C5 <= code && code <= 0xB3DF || // Lo  [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH
  0xB3E1 <= code && code <= 0xB3FB || // Lo  [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH
  0xB3FD <= code && code <= 0xB417 || // Lo  [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH
  0xB419 <= code && code <= 0xB433 || // Lo  [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH
  0xB435 <= code && code <= 0xB44F || // Lo  [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH
  0xB451 <= code && code <= 0xB46B || // Lo  [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH
  0xB46D <= code && code <= 0xB487 || // Lo  [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH
  0xB489 <= code && code <= 0xB4A3 || // Lo  [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH
  0xB4A5 <= code && code <= 0xB4BF || // Lo  [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH
  0xB4C1 <= code && code <= 0xB4DB || // Lo  [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH
  0xB4DD <= code && code <= 0xB4F7 || // Lo  [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH
  0xB4F9 <= code && code <= 0xB513 || // Lo  [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH
  0xB515 <= code && code <= 0xB52F || // Lo  [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH
  0xB531 <= code && code <= 0xB54B || // Lo  [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH
  0xB54D <= code && code <= 0xB567 || // Lo  [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH
  0xB569 <= code && code <= 0xB583 || // Lo  [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH
  0xB585 <= code && code <= 0xB59F || // Lo  [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH
  0xB5A1 <= code && code <= 0xB5BB || // Lo  [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH
  0xB5BD <= code && code <= 0xB5D7 || // Lo  [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH
  0xB5D9 <= code && code <= 0xB5F3 || // Lo  [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH
  0xB5F5 <= code && code <= 0xB60F || // Lo  [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH
  0xB611 <= code && code <= 0xB62B || // Lo  [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH
  0xB62D <= code && code <= 0xB647 || // Lo  [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH
  0xB649 <= code && code <= 0xB663 || // Lo  [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH
  0xB665 <= code && code <= 0xB67F || // Lo  [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH
  0xB681 <= code && code <= 0xB69B || // Lo  [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH
  0xB69D <= code && code <= 0xB6B7 || // Lo  [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH
  0xB6B9 <= code && code <= 0xB6D3 || // Lo  [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH
  0xB6D5 <= code && code <= 0xB6EF || // Lo  [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH
  0xB6F1 <= code && code <= 0xB70B || // Lo  [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH
  0xB70D <= code && code <= 0xB727 || // Lo  [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH
  0xB729 <= code && code <= 0xB743 || // Lo  [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH
  0xB745 <= code && code <= 0xB75F || // Lo  [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH
  0xB761 <= code && code <= 0xB77B || // Lo  [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH
  0xB77D <= code && code <= 0xB797 || // Lo  [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH
  0xB799 <= code && code <= 0xB7B3 || // Lo  [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH
  0xB7B5 <= code && code <= 0xB7CF || // Lo  [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH
  0xB7D1 <= code && code <= 0xB7EB || // Lo  [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH
  0xB7ED <= code && code <= 0xB807 || // Lo  [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH
  0xB809 <= code && code <= 0xB823 || // Lo  [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH
  0xB825 <= code && code <= 0xB83F || // Lo  [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH
  0xB841 <= code && code <= 0xB85B || // Lo  [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH
  0xB85D <= code && code <= 0xB877 || // Lo  [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH
  0xB879 <= code && code <= 0xB893 || // Lo  [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH
  0xB895 <= code && code <= 0xB8AF || // Lo  [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH
  0xB8B1 <= code && code <= 0xB8CB || // Lo  [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH
  0xB8CD <= code && code <= 0xB8E7 || // Lo  [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH
  0xB8E9 <= code && code <= 0xB903 || // Lo  [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH
  0xB905 <= code && code <= 0xB91F || // Lo  [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH
  0xB921 <= code && code <= 0xB93B || // Lo  [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH
  0xB93D <= code && code <= 0xB957 || // Lo  [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH
  0xB959 <= code && code <= 0xB973 || // Lo  [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH
  0xB975 <= code && code <= 0xB98F || // Lo  [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH
  0xB991 <= code && code <= 0xB9AB || // Lo  [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH
  0xB9AD <= code && code <= 0xB9C7 || // Lo  [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH
  0xB9C9 <= code && code <= 0xB9E3 || // Lo  [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH
  0xB9E5 <= code && code <= 0xB9FF || // Lo  [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH
  0xBA01 <= code && code <= 0xBA1B || // Lo  [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH
  0xBA1D <= code && code <= 0xBA37 || // Lo  [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH
  0xBA39 <= code && code <= 0xBA53 || // Lo  [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH
  0xBA55 <= code && code <= 0xBA6F || // Lo  [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH
  0xBA71 <= code && code <= 0xBA8B || // Lo  [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH
  0xBA8D <= code && code <= 0xBAA7 || // Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH
  0xBAA9 <= code && code <= 0xBAC3 || // Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH
  0xBAC5 <= code && code <= 0xBADF || // Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH
  0xBAE1 <= code && code <= 0xBAFB || // Lo  [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH
  0xBAFD <= code && code <= 0xBB17 || // Lo  [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH
  0xBB19 <= code && code <= 0xBB33 || // Lo  [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH
  0xBB35 <= code && code <= 0xBB4F || // Lo  [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH
  0xBB51 <= code && code <= 0xBB6B || // Lo  [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH
  0xBB6D <= code && code <= 0xBB87 || // Lo  [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH
  0xBB89 <= code && code <= 0xBBA3 || // Lo  [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH
  0xBBA5 <= code && code <= 0xBBBF || // Lo  [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH
  0xBBC1 <= code && code <= 0xBBDB || // Lo  [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH
  0xBBDD <= code && code <= 0xBBF7 || // Lo  [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH
  0xBBF9 <= code && code <= 0xBC13 || // Lo  [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH
  0xBC15 <= code && code <= 0xBC2F || // Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH
  0xBC31 <= code && code <= 0xBC4B || // Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH
  0xBC4D <= code && code <= 0xBC67 || // Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH
  0xBC69 <= code && code <= 0xBC83 || // Lo  [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH
  0xBC85 <= code && code <= 0xBC9F || // Lo  [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH
  0xBCA1 <= code && code <= 0xBCBB || // Lo  [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH
  0xBCBD <= code && code <= 0xBCD7 || // Lo  [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH
  0xBCD9 <= code && code <= 0xBCF3 || // Lo  [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH
  0xBCF5 <= code && code <= 0xBD0F || // Lo  [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH
  0xBD11 <= code && code <= 0xBD2B || // Lo  [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH
  0xBD2D <= code && code <= 0xBD47 || // Lo  [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH
  0xBD49 <= code && code <= 0xBD63 || // Lo  [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH
  0xBD65 <= code && code <= 0xBD7F || // Lo  [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH
  0xBD81 <= code && code <= 0xBD9B || // Lo  [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH
  0xBD9D <= code && code <= 0xBDB7 || // Lo  [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH
  0xBDB9 <= code && code <= 0xBDD3 || // Lo  [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH
  0xBDD5 <= code && code <= 0xBDEF || // Lo  [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH
  0xBDF1 <= code && code <= 0xBE0B || // Lo  [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH
  0xBE0D <= code && code <= 0xBE27 || // Lo  [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH
  0xBE29 <= code && code <= 0xBE43 || // Lo  [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH
  0xBE45 <= code && code <= 0xBE5F || // Lo  [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH
  0xBE61 <= code && code <= 0xBE7B || // Lo  [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH
  0xBE7D <= code && code <= 0xBE97 || // Lo  [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH
  0xBE99 <= code && code <= 0xBEB3 || // Lo  [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH
  0xBEB5 <= code && code <= 0xBECF || // Lo  [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH
  0xBED1 <= code && code <= 0xBEEB || // Lo  [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH
  0xBEED <= code && code <= 0xBF07 || // Lo  [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH
  0xBF09 <= code && code <= 0xBF23 || // Lo  [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH
  0xBF25 <= code && code <= 0xBF3F || // Lo  [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH
  0xBF41 <= code && code <= 0xBF5B || // Lo  [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH
  0xBF5D <= code && code <= 0xBF77 || // Lo  [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH
  0xBF79 <= code && code <= 0xBF93 || // Lo  [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH
  0xBF95 <= code && code <= 0xBFAF || // Lo  [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH
  0xBFB1 <= code && code <= 0xBFCB || // Lo  [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH
  0xBFCD <= code && code <= 0xBFE7 || // Lo  [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH
  0xBFE9 <= code && code <= 0xC003 || // Lo  [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH
  0xC005 <= code && code <= 0xC01F || // Lo  [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH
  0xC021 <= code && code <= 0xC03B || // Lo  [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH
  0xC03D <= code && code <= 0xC057 || // Lo  [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH
  0xC059 <= code && code <= 0xC073 || // Lo  [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH
  0xC075 <= code && code <= 0xC08F || // Lo  [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH
  0xC091 <= code && code <= 0xC0AB || // Lo  [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH
  0xC0AD <= code && code <= 0xC0C7 || // Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH
  0xC0C9 <= code && code <= 0xC0E3 || // Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH
  0xC0E5 <= code && code <= 0xC0FF || // Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH
  0xC101 <= code && code <= 0xC11B || // Lo  [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH
  0xC11D <= code && code <= 0xC137 || // Lo  [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH
  0xC139 <= code && code <= 0xC153 || // Lo  [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH
  0xC155 <= code && code <= 0xC16F || // Lo  [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH
  0xC171 <= code && code <= 0xC18B || // Lo  [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH
  0xC18D <= code && code <= 0xC1A7 || // Lo  [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH
  0xC1A9 <= code && code <= 0xC1C3 || // Lo  [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH
  0xC1C5 <= code && code <= 0xC1DF || // Lo  [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH
  0xC1E1 <= code && code <= 0xC1FB || // Lo  [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH
  0xC1FD <= code && code <= 0xC217 || // Lo  [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH
  0xC219 <= code && code <= 0xC233 || // Lo  [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH
  0xC235 <= code && code <= 0xC24F || // Lo  [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH
  0xC251 <= code && code <= 0xC26B || // Lo  [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH
  0xC26D <= code && code <= 0xC287 || // Lo  [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH
  0xC289 <= code && code <= 0xC2A3 || // Lo  [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH
  0xC2A5 <= code && code <= 0xC2BF || // Lo  [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH
  0xC2C1 <= code && code <= 0xC2DB || // Lo  [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH
  0xC2DD <= code && code <= 0xC2F7 || // Lo  [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH
  0xC2F9 <= code && code <= 0xC313 || // Lo  [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH
  0xC315 <= code && code <= 0xC32F || // Lo  [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH
  0xC331 <= code && code <= 0xC34B || // Lo  [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH
  0xC34D <= code && code <= 0xC367 || // Lo  [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH
  0xC369 <= code && code <= 0xC383 || // Lo  [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH
  0xC385 <= code && code <= 0xC39F || // Lo  [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH
  0xC3A1 <= code && code <= 0xC3BB || // Lo  [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH
  0xC3BD <= code && code <= 0xC3D7 || // Lo  [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH
  0xC3D9 <= code && code <= 0xC3F3 || // Lo  [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH
  0xC3F5 <= code && code <= 0xC40F || // Lo  [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH
  0xC411 <= code && code <= 0xC42B || // Lo  [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH
  0xC42D <= code && code <= 0xC447 || // Lo  [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH
  0xC449 <= code && code <= 0xC463 || // Lo  [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH
  0xC465 <= code && code <= 0xC47F || // Lo  [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH
  0xC481 <= code && code <= 0xC49B || // Lo  [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH
  0xC49D <= code && code <= 0xC4B7 || // Lo  [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH
  0xC4B9 <= code && code <= 0xC4D3 || // Lo  [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH
  0xC4D5 <= code && code <= 0xC4EF || // Lo  [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH
  0xC4F1 <= code && code <= 0xC50B || // Lo  [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH
  0xC50D <= code && code <= 0xC527 || // Lo  [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH
  0xC529 <= code && code <= 0xC543 || // Lo  [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH
  0xC545 <= code && code <= 0xC55F || // Lo  [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH
  0xC561 <= code && code <= 0xC57B || // Lo  [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH
  0xC57D <= code && code <= 0xC597 || // Lo  [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH
  0xC599 <= code && code <= 0xC5B3 || // Lo  [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH
  0xC5B5 <= code && code <= 0xC5CF || // Lo  [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH
  0xC5D1 <= code && code <= 0xC5EB || // Lo  [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH
  0xC5ED <= code && code <= 0xC607 || // Lo  [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH
  0xC609 <= code && code <= 0xC623 || // Lo  [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH
  0xC625 <= code && code <= 0xC63F || // Lo  [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH
  0xC641 <= code && code <= 0xC65B || // Lo  [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH
  0xC65D <= code && code <= 0xC677 || // Lo  [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH
  0xC679 <= code && code <= 0xC693 || // Lo  [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH
  0xC695 <= code && code <= 0xC6AF || // Lo  [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH
  0xC6B1 <= code && code <= 0xC6CB || // Lo  [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH
  0xC6CD <= code && code <= 0xC6E7 || // Lo  [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH
  0xC6E9 <= code && code <= 0xC703 || // Lo  [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH
  0xC705 <= code && code <= 0xC71F || // Lo  [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH
  0xC721 <= code && code <= 0xC73B || // Lo  [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH
  0xC73D <= code && code <= 0xC757 || // Lo  [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH
  0xC759 <= code && code <= 0xC773 || // Lo  [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH
  0xC775 <= code && code <= 0xC78F || // Lo  [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH
  0xC791 <= code && code <= 0xC7AB || // Lo  [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH
  0xC7AD <= code && code <= 0xC7C7 || // Lo  [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH
  0xC7C9 <= code && code <= 0xC7E3 || // Lo  [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH
  0xC7E5 <= code && code <= 0xC7FF || // Lo  [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH
  0xC801 <= code && code <= 0xC81B || // Lo  [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH
  0xC81D <= code && code <= 0xC837 || // Lo  [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH
  0xC839 <= code && code <= 0xC853 || // Lo  [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH
  0xC855 <= code && code <= 0xC86F || // Lo  [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH
  0xC871 <= code && code <= 0xC88B || // Lo  [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH
  0xC88D <= code && code <= 0xC8A7 || // Lo  [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH
  0xC8A9 <= code && code <= 0xC8C3 || // Lo  [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH
  0xC8C5 <= code && code <= 0xC8DF || // Lo  [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH
  0xC8E1 <= code && code <= 0xC8FB || // Lo  [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH
  0xC8FD <= code && code <= 0xC917 || // Lo  [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH
  0xC919 <= code && code <= 0xC933 || // Lo  [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH
  0xC935 <= code && code <= 0xC94F || // Lo  [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH
  0xC951 <= code && code <= 0xC96B || // Lo  [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH
  0xC96D <= code && code <= 0xC987 || // Lo  [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH
  0xC989 <= code && code <= 0xC9A3 || // Lo  [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH
  0xC9A5 <= code && code <= 0xC9BF || // Lo  [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH
  0xC9C1 <= code && code <= 0xC9DB || // Lo  [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH
  0xC9DD <= code && code <= 0xC9F7 || // Lo  [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH
  0xC9F9 <= code && code <= 0xCA13 || // Lo  [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH
  0xCA15 <= code && code <= 0xCA2F || // Lo  [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH
  0xCA31 <= code && code <= 0xCA4B || // Lo  [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH
  0xCA4D <= code && code <= 0xCA67 || // Lo  [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH
  0xCA69 <= code && code <= 0xCA83 || // Lo  [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH
  0xCA85 <= code && code <= 0xCA9F || // Lo  [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH
  0xCAA1 <= code && code <= 0xCABB || // Lo  [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH
  0xCABD <= code && code <= 0xCAD7 || // Lo  [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH
  0xCAD9 <= code && code <= 0xCAF3 || // Lo  [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH
  0xCAF5 <= code && code <= 0xCB0F || // Lo  [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH
  0xCB11 <= code && code <= 0xCB2B || // Lo  [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH
  0xCB2D <= code && code <= 0xCB47 || // Lo  [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH
  0xCB49 <= code && code <= 0xCB63 || // Lo  [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH
  0xCB65 <= code && code <= 0xCB7F || // Lo  [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH
  0xCB81 <= code && code <= 0xCB9B || // Lo  [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH
  0xCB9D <= code && code <= 0xCBB7 || // Lo  [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH
  0xCBB9 <= code && code <= 0xCBD3 || // Lo  [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH
  0xCBD5 <= code && code <= 0xCBEF || // Lo  [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH
  0xCBF1 <= code && code <= 0xCC0B || // Lo  [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH
  0xCC0D <= code && code <= 0xCC27 || // Lo  [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH
  0xCC29 <= code && code <= 0xCC43 || // Lo  [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH
  0xCC45 <= code && code <= 0xCC5F || // Lo  [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH
  0xCC61 <= code && code <= 0xCC7B || // Lo  [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH
  0xCC7D <= code && code <= 0xCC97 || // Lo  [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH
  0xCC99 <= code && code <= 0xCCB3 || // Lo  [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH
  0xCCB5 <= code && code <= 0xCCCF || // Lo  [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH
  0xCCD1 <= code && code <= 0xCCEB || // Lo  [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH
  0xCCED <= code && code <= 0xCD07 || // Lo  [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH
  0xCD09 <= code && code <= 0xCD23 || // Lo  [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH
  0xCD25 <= code && code <= 0xCD3F || // Lo  [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH
  0xCD41 <= code && code <= 0xCD5B || // Lo  [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH
  0xCD5D <= code && code <= 0xCD77 || // Lo  [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH
  0xCD79 <= code && code <= 0xCD93 || // Lo  [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH
  0xCD95 <= code && code <= 0xCDAF || // Lo  [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH
  0xCDB1 <= code && code <= 0xCDCB || // Lo  [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH
  0xCDCD <= code && code <= 0xCDE7 || // Lo  [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH
  0xCDE9 <= code && code <= 0xCE03 || // Lo  [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH
  0xCE05 <= code && code <= 0xCE1F || // Lo  [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH
  0xCE21 <= code && code <= 0xCE3B || // Lo  [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH
  0xCE3D <= code && code <= 0xCE57 || // Lo  [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH
  0xCE59 <= code && code <= 0xCE73 || // Lo  [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH
  0xCE75 <= code && code <= 0xCE8F || // Lo  [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH
  0xCE91 <= code && code <= 0xCEAB || // Lo  [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH
  0xCEAD <= code && code <= 0xCEC7 || // Lo  [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH
  0xCEC9 <= code && code <= 0xCEE3 || // Lo  [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH
  0xCEE5 <= code && code <= 0xCEFF || // Lo  [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH
  0xCF01 <= code && code <= 0xCF1B || // Lo  [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH
  0xCF1D <= code && code <= 0xCF37 || // Lo  [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH
  0xCF39 <= code && code <= 0xCF53 || // Lo  [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH
  0xCF55 <= code && code <= 0xCF6F || // Lo  [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH
  0xCF71 <= code && code <= 0xCF8B || // Lo  [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH
  0xCF8D <= code && code <= 0xCFA7 || // Lo  [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH
  0xCFA9 <= code && code <= 0xCFC3 || // Lo  [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH
  0xCFC5 <= code && code <= 0xCFDF || // Lo  [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH
  0xCFE1 <= code && code <= 0xCFFB || // Lo  [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH
  0xCFFD <= code && code <= 0xD017 || // Lo  [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH
  0xD019 <= code && code <= 0xD033 || // Lo  [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH
  0xD035 <= code && code <= 0xD04F || // Lo  [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH
  0xD051 <= code && code <= 0xD06B || // Lo  [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH
  0xD06D <= code && code <= 0xD087 || // Lo  [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH
  0xD089 <= code && code <= 0xD0A3 || // Lo  [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH
  0xD0A5 <= code && code <= 0xD0BF || // Lo  [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH
  0xD0C1 <= code && code <= 0xD0DB || // Lo  [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH
  0xD0DD <= code && code <= 0xD0F7 || // Lo  [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH
  0xD0F9 <= code && code <= 0xD113 || // Lo  [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH
  0xD115 <= code && code <= 0xD12F || // Lo  [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH
  0xD131 <= code && code <= 0xD14B || // Lo  [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH
  0xD14D <= code && code <= 0xD167 || // Lo  [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH
  0xD169 <= code && code <= 0xD183 || // Lo  [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH
  0xD185 <= code && code <= 0xD19F || // Lo  [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH
  0xD1A1 <= code && code <= 0xD1BB || // Lo  [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH
  0xD1BD <= code && code <= 0xD1D7 || // Lo  [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH
  0xD1D9 <= code && code <= 0xD1F3 || // Lo  [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH
  0xD1F5 <= code && code <= 0xD20F || // Lo  [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH
  0xD211 <= code && code <= 0xD22B || // Lo  [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH
  0xD22D <= code && code <= 0xD247 || // Lo  [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH
  0xD249 <= code && code <= 0xD263 || // Lo  [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH
  0xD265 <= code && code <= 0xD27F || // Lo  [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH
  0xD281 <= code && code <= 0xD29B || // Lo  [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH
  0xD29D <= code && code <= 0xD2B7 || // Lo  [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH
  0xD2B9 <= code && code <= 0xD2D3 || // Lo  [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH
  0xD2D5 <= code && code <= 0xD2EF || // Lo  [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH
  0xD2F1 <= code && code <= 0xD30B || // Lo  [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH
  0xD30D <= code && code <= 0xD327 || // Lo  [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH
  0xD329 <= code && code <= 0xD343 || // Lo  [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH
  0xD345 <= code && code <= 0xD35F || // Lo  [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH
  0xD361 <= code && code <= 0xD37B || // Lo  [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH
  0xD37D <= code && code <= 0xD397 || // Lo  [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH
  0xD399 <= code && code <= 0xD3B3 || // Lo  [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH
  0xD3B5 <= code && code <= 0xD3CF || // Lo  [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH
  0xD3D1 <= code && code <= 0xD3EB || // Lo  [27] HANGUL SYLLABLE PYEG..HANGUL SYLLABLE PYEH
  0xD3ED <= code && code <= 0xD407 || // Lo  [27] HANGUL SYLLABLE POG..HANGUL SYLLABLE POH
  0xD409 <= code && code <= 0xD423 || // Lo  [27] HANGUL SYLLABLE PWAG..HANGUL SYLLABLE PWAH
  0xD425 <= code && code <= 0xD43F || // Lo  [27] HANGUL SYLLABLE PWAEG..HANGUL SYLLABLE PWAEH
  0xD441 <= code && code <= 0xD45B || // Lo  [27] HANGUL SYLLABLE POEG..HANGUL SYLLABLE POEH
  0xD45D <= code && code <= 0xD477 || // Lo  [27] HANGUL SYLLABLE PYOG..HANGUL SYLLABLE PYOH
  0xD479 <= code && code <= 0xD493 || // Lo  [27] HANGUL SYLLABLE PUG..HANGUL SYLLABLE PUH
  0xD495 <= code && code <= 0xD4AF || // Lo  [27] HANGUL SYLLABLE PWEOG..HANGUL SYLLABLE PWEOH
  0xD4B1 <= code && code <= 0xD4CB || // Lo  [27] HANGUL SYLLABLE PWEG..HANGUL SYLLABLE PWEH
  0xD4CD <= code && code <= 0xD4E7 || // Lo  [27] HANGUL SYLLABLE PWIG..HANGUL SYLLABLE PWIH
  0xD4E9 <= code && code <= 0xD503 || // Lo  [27] HANGUL SYLLABLE PYUG..HANGUL SYLLABLE PYUH
  0xD505 <= code && code <= 0xD51F || // Lo  [27] HANGUL SYLLABLE PEUG..HANGUL SYLLABLE PEUH
  0xD521 <= code && code <= 0xD53B || // Lo  [27] HANGUL SYLLABLE PYIG..HANGUL SYLLABLE PYIH
  0xD53D <= code && code <= 0xD557 || // Lo  [27] HANGUL SYLLABLE PIG..HANGUL SYLLABLE PIH
  0xD559 <= code && code <= 0xD573 || // Lo  [27] HANGUL SYLLABLE HAG..HANGUL SYLLABLE HAH
  0xD575 <= code && code <= 0xD58F || // Lo  [27] HANGUL SYLLABLE HAEG..HANGUL SYLLABLE HAEH
  0xD591 <= code && code <= 0xD5AB || // Lo  [27] HANGUL SYLLABLE HYAG..HANGUL SYLLABLE HYAH
  0xD5AD <= code && code <= 0xD5C7 || // Lo  [27] HANGUL SYLLABLE HYAEG..HANGUL SYLLABLE HYAEH
  0xD5C9 <= code && code <= 0xD5E3 || // Lo  [27] HANGUL SYLLABLE HEOG..HANGUL SYLLABLE HEOH
  0xD5E5 <= code && code <= 0xD5FF || // Lo  [27] HANGUL SYLLABLE HEG..HANGUL SYLLABLE HEH
  0xD601 <= code && code <= 0xD61B || // Lo  [27] HANGUL SYLLABLE HYEOG..HANGUL SYLLABLE HYEOH
  0xD61D <= code && code <= 0xD637 || // Lo  [27] HANGUL SYLLABLE HYEG..HANGUL SYLLABLE HYEH
  0xD639 <= code && code <= 0xD653 || // Lo  [27] HANGUL SYLLABLE HOG..HANGUL SYLLABLE HOH
  0xD655 <= code && code <= 0xD66F || // Lo  [27] HANGUL SYLLABLE HWAG..HANGUL SYLLABLE HWAH
  0xD671 <= code && code <= 0xD68B || // Lo  [27] HANGUL SYLLABLE HWAEG..HANGUL SYLLABLE HWAEH
  0xD68D <= code && code <= 0xD6A7 || // Lo  [27] HANGUL SYLLABLE HOEG..HANGUL SYLLABLE HOEH
  0xD6A9 <= code && code <= 0xD6C3 || // Lo  [27] HANGUL SYLLABLE HYOG..HANGUL SYLLABLE HYOH
  0xD6C5 <= code && code <= 0xD6DF || // Lo  [27] HANGUL SYLLABLE HUG..HANGUL SYLLABLE HUH
  0xD6E1 <= code && code <= 0xD6FB || // Lo  [27] HANGUL SYLLABLE HWEOG..HANGUL SYLLABLE HWEOH
  0xD6FD <= code && code <= 0xD717 || // Lo  [27] HANGUL SYLLABLE HWEG..HANGUL SYLLABLE HWEH
  0xD719 <= code && code <= 0xD733 || // Lo  [27] HANGUL SYLLABLE HWIG..HANGUL SYLLABLE HWIH
  0xD735 <= code && code <= 0xD74F || // Lo  [27] HANGUL SYLLABLE HYUG..HANGUL SYLLABLE HYUH
  0xD751 <= code && code <= 0xD76B || // Lo  [27] HANGUL SYLLABLE HEUG..HANGUL SYLLABLE HEUH
  0xD76D <= code && code <= 0xD787 || // Lo  [27] HANGUL SYLLABLE HYIG..HANGUL SYLLABLE HYIH
  0xD789 <= code && code <= 0xD7A3 // Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH
  ) {
      return LVT;
    } //all unlisted characters have a grapheme break property of "Other"


  return Other;
}

/* harmony default export */ var grapheme_splitter = ({
  splitGraphemes: splitGraphemes,
  countGraphemes: countGraphemes,
  nextBreak: nextBreak
});
// CONCATENATED MODULE: ./packages/core/lexer.js
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @module core/lexer
 * @private
 */

/**
 * ## Reference
 * TeX source code:
 * {@link  http://tug.org/texlive/devsrc/Build/source/texk/web2c/tex.web|Tex.web}
 *
 * For a list of standard TeX macros, see:
 * {@link ftp://tug.ctan.org/pub/tex-archive/systems/knuth/dist/lib/plain.tex|plain.tex}
*/

/**
 *
 * A token can be of type:
 *  - `literal`: the value is the character this token represents. This can be
 * a combination of Unicode codepoints, for example for emojis.
 *  - `^` and `_`: superscript and subscript commands.
 *  - `command`: a command such as `\sin` or `\text` or `\alpha`
 *  - `{` and `}`: begin and end group (use for arguments of commands and for grouping)
 *  - `#`: parameter
 *
 *  - `placeholder`: a placeholder value meant to be replaced by some actual value
 *  - `space`: one or more space characters (including tab, etc...)
 *
 *  See: [TeX:289](http://tug.org/texlive/devsrc/Build/source/texk/web2c/tex.web)
 * @property {string} value
 * @property {string} type
 * @class module:core/lexer#Token
 * @private
 */

var Token = function Token(type, value) {
  _classCallCheck(this, Token);

  this.type = type;
  this.value = value;
  console.assert(!(type === 'literal' && value === '}'));
};
/**
 * Given a LaTeX expression represented as a character string,
 * the Lexer class will scan and return Tokens for the lexical
 * units in the string.
 *
 * @param {string} s A string of LaTeX
 * @class Lexer
 * @class module:core/lexer#Lexer
 * @private
 */


var lexer_Lexer =
/*#__PURE__*/
function () {
  function Lexer(s) {
    _classCallCheck(this, Lexer);

    this.s = grapheme_splitter.splitGraphemes(s);
    this.pos = 0;
  }
  /**
   * @return {boolean} True if we reached the end of the stream
   * @method module:core/lexer#Lexer#end
   * @private
   */


  _createClass(Lexer, [{
    key: "end",
    value: function end() {
      return this.pos >= this.s.length;
    }
    /**
     * Return the next char and advance
     * @return {string}
     * @method module:core/lexer#Lexer#get
     * @private
     */

  }, {
    key: "get",
    value: function get() {
      return this.pos < this.s.length ? this.s[this.pos++] : null;
    }
    /**
     * Return the next char, but do not advance
     * @return {string}
     * @method module:core/lexer#Lexer#peek
     * @private
     */

  }, {
    key: "peek",
    value: function peek() {
      return this.s[this.pos];
    }
    /**
     * Return the next substring matching regEx and advance.
     * @param {RegEx} regEx
     * @return {?string}
     * @method module:core/lexer#Lexer#scan
     * @private
     */

  }, {
    key: "scan",
    value: function scan(regEx) {
      var result; // this.s can either be a string, if it's made up only of ASCII chars
      // or an array of graphemes, if it's more complicated.

      if (typeof this.s === 'string') {
        result = regEx.exec(this.s.slice(this.pos));
      } else {
        result = regEx.exec(this.s.slice(this.pos).join(''));
      }

      if (result) {
        this.pos += result[0].length;
        return result[0];
      }

      return null;
    }
    /**
     * Return true if next char is white space. Does not advance.
     *
     * See [Stackoverflow](http://stackoverflow.com/questions/6073637/)
     * @method module:core/lexer#Lexer#isWhiteSpace
     * @private
     */

  }, {
    key: "isWhiteSpace",
    value: function isWhiteSpace() {
      return /[ \f\n\r\t\v\xA0\u2028\u2029]/.test(this.s[this.pos]);
      /*
          Note that browsers are inconsistent in their definitions of the
          `\s` metacharacter, so we use an explicit pattern instead.
      
          - IE:          `[ \f\n\r\t\v]`
          - Chrome:      `[ \f\n\r\t\v\u00A0]`
          - Firefox:     `[ \f\n\r\t\v\u00A0\u2028\u2029]`
      
          - \f \u000C: form feed (FORM FEED)
          - \n \u000A: linefeed (LINE FEED)
          - \r \u000D: carriage return
          - \t \u0009: tab (CHARACTER TABULATION)
          - \v \u000B: vertical tab (LINE TABULATION)
          - \u00A0: NON-BREAKING SPACE
          - \u2028: LINE SEPARATOR
          - \u2029: PARAGRAPH SEPARATOR
      
          Could be considered:
          - \u2000-\u200a spacing
          - \u202f NARROW NO-BREAK SPACE
          - \u205F MEDIUM MATHEMATICAL SPACE
          - \u3000 IDEOGRAPHIC SPACE
          - \uFEFF ZERO WITH NON-BREAKING SPACE
      */
    }
    /**
     * Return a single token, or null, created from the lexer.
     *
     * @returns {Token}
     * @method module:core/lexer#Lexer#makeToken
     * @private
     */

  }, {
    key: "makeToken",
    value: function makeToken() {
      // If we've reached the end, exit
      if (this.end()) return null; // Handle white space
      // Note that in text mode, spaces are significant and can't be coalesced.

      if (this.isWhiteSpace()) {
        this.get();
        return new Token('space');
      }

      var result = null; // Is it a command?

      if (this.peek() === '\\') {
        this.get(); // Skip the initial \

        if (!this.end()) {
          // A command is either a string of letters and asterisks...
          var command = this.scan(/^[a-zA-Z*]+/); // There are a few special commands that are handled here...

          if (command === 'bgroup') {
            // Begin group, synonym for opening brace
            result = new Token('{');
          } else if (command === 'egroup') {
            // End group, synonym for closing brace
            result = new Token('}');
          } else {
            if (!command) {
              // ... or a single non-letter character
              command = this.get();
            }

            result = new Token('command', command);
          }
        } // Is it a group start/end?

      } else if (this.peek() === '{' || this.peek() === '}') {
        result = new Token(this.get());
      } else if (this.peek() === '#') {
        // This could be either a param token, or a literal # (used for
        // colorspecs, for example). A param token is a '#' followed by
        // - a digit 0-9 followed by a non-alpha, non-digit
        // - or '?'.
        // Otherwise, it's a literal '#'.
        this.get();

        if (!this.end()) {
          var isParam = false;
          var next = this.peek();

          if (/[0-9?]/.test(next)) {
            // Could be a param
            isParam = true; // Need to look ahead to the following char

            if (this.pos + 1 < this.s.length) {
              var after = this.s[this.pos + 1];
              isParam = /[^0-9A-Za-z]/.test(after);
            }
          }

          if (isParam) {
            result = new Token('#');
            next = this.get();

            if (next >= '0' && next <= '9') {
              result.value = parseInt(next);
            } else {
              result.value = '?';
            }
          } else {
            result = new Token('literal', '#');
          }
        } // result = new Token(this.get());
        // if (!this.end()) {
        //     const next = this.get();
        //     if (next >= '0' && next <= '9') {
        //         result.value = parseInt(next);
        //     } else {
        //         result.value = next;
        //     }
        // }

      } else if (this.peek() === '~') {
        // Spacing
        this.get();
        result = new Token('command', 'space');
      } else if (this.peek() === '$') {
        // Mode switch
        this.get();

        if (this.peek() === '$') {
          // $$
          this.get();
          result = new Token('$$');
        } else {
          // $
          result = new Token('$');
        }
      } else {
        result = new Token('literal', this.get());
      }

      return result;
    }
  }]);

  return Lexer;
}();
/**
 * Create Tokens from a stream of LaTeX
 *
 * @param {string} s - A string o LaTeX. It can include comments (with the `%`
 * marker) and multiple lines.
 * @return {Token[]}
 * @memberof module:core/lexer
 * @private
 */


function tokenize(s) {
  var result = [];
  var lines = s.toString().split(/\r?\n/);
  var stream = '';
  var sep = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var line = _step.value;
      stream += sep;
      sep = ' '; // Remove everything after a % (comment marker)
      // (but \% should be preserved...)

      var m = line.match(/((?:\\%)|[^%])*/);
      if (m) stream += m[0];
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var lex = new lexer_Lexer(stream);

  while (!lex.end()) {
    var token = lex.makeToken();
    if (token) result.push(token);
  }

  return result;
}

/* harmony default export */ var lexer = ({
  tokenize: tokenize
});
// CONCATENATED MODULE: ./packages/core/fontMetricsData.js
/* harmony default export */ var fontMetricsData = ({
  'AMS-Regular': {
    '65': [0, 0.68889, 0, 0],
    '66': [0, 0.68889, 0, 0],
    '67': [0, 0.68889, 0, 0],
    '68': [0, 0.68889, 0, 0],
    '69': [0, 0.68889, 0, 0],
    '70': [0, 0.68889, 0, 0],
    '71': [0, 0.68889, 0, 0],
    '72': [0, 0.68889, 0, 0],
    '73': [0, 0.68889, 0, 0],
    '74': [0.16667, 0.68889, 0, 0],
    '75': [0, 0.68889, 0, 0],
    '76': [0, 0.68889, 0, 0],
    '77': [0, 0.68889, 0, 0],
    '78': [0, 0.68889, 0, 0],
    '79': [0.16667, 0.68889, 0, 0],
    '80': [0, 0.68889, 0, 0],
    '81': [0.16667, 0.68889, 0, 0],
    '82': [0, 0.68889, 0, 0],
    '83': [0, 0.68889, 0, 0],
    '84': [0, 0.68889, 0, 0],
    '85': [0, 0.68889, 0, 0],
    '86': [0, 0.68889, 0, 0],
    '87': [0, 0.68889, 0, 0],
    '88': [0, 0.68889, 0, 0],
    '89': [0, 0.68889, 0, 0],
    '90': [0, 0.68889, 0, 0],
    '107': [0, 0.68889, 0, 0],
    '165': [0, 0.675, 0.025, 0],
    '174': [0.15559, 0.69224, 0, 0],
    '240': [0, 0.68889, 0, 0],
    '295': [0, 0.68889, 0, 0],
    '710': [0, 0.825, 0, 0],
    '732': [0, 0.9, 0, 0],
    '770': [0, 0.825, 0, 0],
    '771': [0, 0.9, 0, 0],
    '989': [0.08167, 0.58167, 0, 0],
    '1008': [0, 0.43056, 0.04028, 0],
    '8245': [0, 0.54986, 0, 0],
    '8463': [0, 0.68889, 0, 0],
    '8487': [0, 0.68889, 0, 0],
    '8498': [0, 0.68889, 0, 0],
    '8502': [0, 0.68889, 0, 0],
    '8503': [0, 0.68889, 0, 0],
    '8504': [0, 0.68889, 0, 0],
    '8513': [0, 0.68889, 0, 0],
    '8592': [-0.03598, 0.46402, 0, 0],
    '8594': [-0.03598, 0.46402, 0, 0],
    '8602': [-0.13313, 0.36687, 0, 0],
    '8603': [-0.13313, 0.36687, 0, 0],
    '8606': [0.01354, 0.52239, 0, 0],
    '8608': [0.01354, 0.52239, 0, 0],
    '8610': [0.01354, 0.52239, 0, 0],
    '8611': [0.01354, 0.52239, 0, 0],
    '8619': [0, 0.54986, 0, 0],
    '8620': [0, 0.54986, 0, 0],
    '8621': [-0.13313, 0.37788, 0, 0],
    '8622': [-0.13313, 0.36687, 0, 0],
    '8624': [0, 0.69224, 0, 0],
    '8625': [0, 0.69224, 0, 0],
    '8630': [0, 0.43056, 0, 0],
    '8631': [0, 0.43056, 0, 0],
    '8634': [0.08198, 0.58198, 0, 0],
    '8635': [0.08198, 0.58198, 0, 0],
    '8638': [0.19444, 0.69224, 0, 0],
    '8639': [0.19444, 0.69224, 0, 0],
    '8642': [0.19444, 0.69224, 0, 0],
    '8643': [0.19444, 0.69224, 0, 0],
    '8644': [0.1808, 0.675, 0, 0],
    '8646': [0.1808, 0.675, 0, 0],
    '8647': [0.1808, 0.675, 0, 0],
    '8648': [0.19444, 0.69224, 0, 0],
    '8649': [0.1808, 0.675, 0, 0],
    '8650': [0.19444, 0.69224, 0, 0],
    '8651': [0.01354, 0.52239, 0, 0],
    '8652': [0.01354, 0.52239, 0, 0],
    '8653': [-0.13313, 0.36687, 0, 0],
    '8654': [-0.13313, 0.36687, 0, 0],
    '8655': [-0.13313, 0.36687, 0, 0],
    '8666': [0.13667, 0.63667, 0, 0],
    '8667': [0.13667, 0.63667, 0, 0],
    '8669': [-0.13313, 0.37788, 0, 0],
    '8672': [-0.064, 0.437, 0, 0],
    '8674': [-0.064, 0.437, 0, 0],
    '8705': [0, 0.825, 0, 0],
    '8708': [0, 0.68889, 0, 0],
    '8709': [0.08167, 0.58167, 0, 0],
    '8717': [0, 0.43056, 0, 0],
    '8722': [-0.03598, 0.46402, 0, 0],
    '8724': [0.08198, 0.69224, 0, 0],
    '8726': [0.08167, 0.58167, 0, 0],
    '8733': [0, 0.69224, 0, 0],
    '8736': [0, 0.69224, 0, 0],
    '8737': [0, 0.69224, 0, 0],
    '8738': [0.03517, 0.52239, 0, 0],
    '8739': [0.08167, 0.58167, 0, 0],
    '8740': [0.25142, 0.74111, 0, 0],
    '8741': [0.08167, 0.58167, 0, 0],
    '8742': [0.25142, 0.74111, 0, 0],
    '8756': [0, 0.69224, 0, 0],
    '8757': [0, 0.69224, 0, 0],
    '8764': [-0.13313, 0.36687, 0, 0],
    '8765': [-0.13313, 0.37788, 0, 0],
    '8769': [-0.13313, 0.36687, 0, 0],
    '8770': [-0.03625, 0.46375, 0, 0],
    '8774': [0.30274, 0.79383, 0, 0],
    '8776': [-0.01688, 0.48312, 0, 0],
    '8778': [0.08167, 0.58167, 0, 0],
    '8782': [0.06062, 0.54986, 0, 0],
    '8783': [0.06062, 0.54986, 0, 0],
    '8785': [0.08198, 0.58198, 0, 0],
    '8786': [0.08198, 0.58198, 0, 0],
    '8787': [0.08198, 0.58198, 0, 0],
    '8790': [0, 0.69224, 0, 0],
    '8791': [0.22958, 0.72958, 0, 0],
    '8796': [0.08198, 0.91667, 0, 0],
    '8806': [0.25583, 0.75583, 0, 0],
    '8807': [0.25583, 0.75583, 0, 0],
    '8808': [0.25142, 0.75726, 0, 0],
    '8809': [0.25142, 0.75726, 0, 0],
    '8812': [0.25583, 0.75583, 0, 0],
    '8814': [0.20576, 0.70576, 0, 0],
    '8815': [0.20576, 0.70576, 0, 0],
    '8816': [0.30274, 0.79383, 0, 0],
    '8817': [0.30274, 0.79383, 0, 0],
    '8818': [0.22958, 0.72958, 0, 0],
    '8819': [0.22958, 0.72958, 0, 0],
    '8822': [0.1808, 0.675, 0, 0],
    '8823': [0.1808, 0.675, 0, 0],
    '8828': [0.13667, 0.63667, 0, 0],
    '8829': [0.13667, 0.63667, 0, 0],
    '8830': [0.22958, 0.72958, 0, 0],
    '8831': [0.22958, 0.72958, 0, 0],
    '8832': [0.20576, 0.70576, 0, 0],
    '8833': [0.20576, 0.70576, 0, 0],
    '8840': [0.30274, 0.79383, 0, 0],
    '8841': [0.30274, 0.79383, 0, 0],
    '8842': [0.13597, 0.63597, 0, 0],
    '8843': [0.13597, 0.63597, 0, 0],
    '8847': [0.03517, 0.54986, 0, 0],
    '8848': [0.03517, 0.54986, 0, 0],
    '8858': [0.08198, 0.58198, 0, 0],
    '8859': [0.08198, 0.58198, 0, 0],
    '8861': [0.08198, 0.58198, 0, 0],
    '8862': [0, 0.675, 0, 0],
    '8863': [0, 0.675, 0, 0],
    '8864': [0, 0.675, 0, 0],
    '8865': [0, 0.675, 0, 0],
    '8872': [0, 0.69224, 0, 0],
    '8873': [0, 0.69224, 0, 0],
    '8874': [0, 0.69224, 0, 0],
    '8876': [0, 0.68889, 0, 0],
    '8877': [0, 0.68889, 0, 0],
    '8878': [0, 0.68889, 0, 0],
    '8879': [0, 0.68889, 0, 0],
    '8882': [0.03517, 0.54986, 0, 0],
    '8883': [0.03517, 0.54986, 0, 0],
    '8884': [0.13667, 0.63667, 0, 0],
    '8885': [0.13667, 0.63667, 0, 0],
    '8888': [0, 0.54986, 0, 0],
    '8890': [0.19444, 0.43056, 0, 0],
    '8891': [0.19444, 0.69224, 0, 0],
    '8892': [0.19444, 0.69224, 0, 0],
    '8901': [0, 0.54986, 0, 0],
    '8903': [0.08167, 0.58167, 0, 0],
    '8905': [0.08167, 0.58167, 0, 0],
    '8906': [0.08167, 0.58167, 0, 0],
    '8907': [0, 0.69224, 0, 0],
    '8908': [0, 0.69224, 0, 0],
    '8909': [-0.03598, 0.46402, 0, 0],
    '8910': [0, 0.54986, 0, 0],
    '8911': [0, 0.54986, 0, 0],
    '8912': [0.03517, 0.54986, 0, 0],
    '8913': [0.03517, 0.54986, 0, 0],
    '8914': [0, 0.54986, 0, 0],
    '8915': [0, 0.54986, 0, 0],
    '8916': [0, 0.69224, 0, 0],
    '8918': [0.0391, 0.5391, 0, 0],
    '8919': [0.0391, 0.5391, 0, 0],
    '8920': [0.03517, 0.54986, 0, 0],
    '8921': [0.03517, 0.54986, 0, 0],
    '8922': [0.38569, 0.88569, 0, 0],
    '8923': [0.38569, 0.88569, 0, 0],
    '8926': [0.13667, 0.63667, 0, 0],
    '8927': [0.13667, 0.63667, 0, 0],
    '8928': [0.30274, 0.79383, 0, 0],
    '8929': [0.30274, 0.79383, 0, 0],
    '8934': [0.23222, 0.74111, 0, 0],
    '8935': [0.23222, 0.74111, 0, 0],
    '8936': [0.23222, 0.74111, 0, 0],
    '8937': [0.23222, 0.74111, 0, 0],
    '8938': [0.20576, 0.70576, 0, 0],
    '8939': [0.20576, 0.70576, 0, 0],
    '8940': [0.30274, 0.79383, 0, 0],
    '8941': [0.30274, 0.79383, 0, 0],
    '8994': [0.19444, 0.69224, 0, 0],
    '8995': [0.19444, 0.69224, 0, 0],
    '9416': [0.15559, 0.69224, 0, 0],
    '9484': [0, 0.69224, 0, 0],
    '9488': [0, 0.69224, 0, 0],
    '9492': [0, 0.37788, 0, 0],
    '9496': [0, 0.37788, 0, 0],
    '9585': [0.19444, 0.68889, 0, 0],
    '9586': [0.19444, 0.74111, 0, 0],
    '9632': [0, 0.675, 0, 0],
    '9633': [0, 0.675, 0, 0],
    '9650': [0, 0.54986, 0, 0],
    '9651': [0, 0.54986, 0, 0],
    '9654': [0.03517, 0.54986, 0, 0],
    '9660': [0, 0.54986, 0, 0],
    '9661': [0, 0.54986, 0, 0],
    '9664': [0.03517, 0.54986, 0, 0],
    '9674': [0.11111, 0.69224, 0, 0],
    '9733': [0.19444, 0.69224, 0, 0],
    '10003': [0, 0.69224, 0, 0],
    '10016': [0, 0.69224, 0, 0],
    '10731': [0.11111, 0.69224, 0, 0],
    '10846': [0.19444, 0.75583, 0, 0],
    '10877': [0.13667, 0.63667, 0, 0],
    '10878': [0.13667, 0.63667, 0, 0],
    '10885': [0.25583, 0.75583, 0, 0],
    '10886': [0.25583, 0.75583, 0, 0],
    '10887': [0.13597, 0.63597, 0, 0],
    '10888': [0.13597, 0.63597, 0, 0],
    '10889': [0.26167, 0.75726, 0, 0],
    '10890': [0.26167, 0.75726, 0, 0],
    '10891': [0.48256, 0.98256, 0, 0],
    '10892': [0.48256, 0.98256, 0, 0],
    '10901': [0.13667, 0.63667, 0, 0],
    '10902': [0.13667, 0.63667, 0, 0],
    '10933': [0.25142, 0.75726, 0, 0],
    '10934': [0.25142, 0.75726, 0, 0],
    '10935': [0.26167, 0.75726, 0, 0],
    '10936': [0.26167, 0.75726, 0, 0],
    '10937': [0.26167, 0.75726, 0, 0],
    '10938': [0.26167, 0.75726, 0, 0],
    '10949': [0.25583, 0.75583, 0, 0],
    '10950': [0.25583, 0.75583, 0, 0],
    '10955': [0.28481, 0.79383, 0, 0],
    '10956': [0.28481, 0.79383, 0, 0],
    '57350': [0.08167, 0.58167, 0, 0],
    '57351': [0.08167, 0.58167, 0, 0],
    '57352': [0.08167, 0.58167, 0, 0],
    '57353': [0, 0.43056, 0.04028, 0],
    '57356': [0.25142, 0.75726, 0, 0],
    '57357': [0.25142, 0.75726, 0, 0],
    '57358': [0.41951, 0.91951, 0, 0],
    '57359': [0.30274, 0.79383, 0, 0],
    '57360': [0.30274, 0.79383, 0, 0],
    '57361': [0.41951, 0.91951, 0, 0],
    '57366': [0.25142, 0.75726, 0, 0],
    '57367': [0.25142, 0.75726, 0, 0],
    '57368': [0.25142, 0.75726, 0, 0],
    '57369': [0.25142, 0.75726, 0, 0],
    '57370': [0.13597, 0.63597, 0, 0],
    '57371': [0.13597, 0.63597, 0, 0]
  },
  'Caligraphic-Regular': {
    '48': [0, 0.43056, 0, 0],
    '49': [0, 0.43056, 0, 0],
    '50': [0, 0.43056, 0, 0],
    '51': [0.19444, 0.43056, 0, 0],
    '52': [0.19444, 0.43056, 0, 0],
    '53': [0.19444, 0.43056, 0, 0],
    '54': [0, 0.64444, 0, 0],
    '55': [0.19444, 0.43056, 0, 0],
    '56': [0, 0.64444, 0, 0],
    '57': [0.19444, 0.43056, 0, 0],
    '65': [0, 0.68333, 0, 0.19445],
    '66': [0, 0.68333, 0.03041, 0.13889],
    '67': [0, 0.68333, 0.05834, 0.13889],
    '68': [0, 0.68333, 0.02778, 0.08334],
    '69': [0, 0.68333, 0.08944, 0.11111],
    '70': [0, 0.68333, 0.09931, 0.11111],
    '71': [0.09722, 0.68333, 0.0593, 0.11111],
    '72': [0, 0.68333, 0.00965, 0.11111],
    '73': [0, 0.68333, 0.07382, 0],
    '74': [0.09722, 0.68333, 0.18472, 0.16667],
    '75': [0, 0.68333, 0.01445, 0.05556],
    '76': [0, 0.68333, 0, 0.13889],
    '77': [0, 0.68333, 0, 0.13889],
    '78': [0, 0.68333, 0.14736, 0.08334],
    '79': [0, 0.68333, 0.02778, 0.11111],
    '80': [0, 0.68333, 0.08222, 0.08334],
    '81': [0.09722, 0.68333, 0, 0.11111],
    '82': [0, 0.68333, 0, 0.08334],
    '83': [0, 0.68333, 0.075, 0.13889],
    '84': [0, 0.68333, 0.25417, 0],
    '85': [0, 0.68333, 0.09931, 0.08334],
    '86': [0, 0.68333, 0.08222, 0],
    '87': [0, 0.68333, 0.08222, 0.08334],
    '88': [0, 0.68333, 0.14643, 0.13889],
    '89': [0.09722, 0.68333, 0.08222, 0.08334],
    '90': [0, 0.68333, 0.07944, 0.13889]
  },
  'Fraktur-Regular': {
    '33': [0, 0.69141, 0, 0],
    '34': [0, 0.69141, 0, 0],
    '38': [0, 0.69141, 0, 0],
    '39': [0, 0.69141, 0, 0],
    '40': [0.24982, 0.74947, 0, 0],
    '41': [0.24982, 0.74947, 0, 0],
    '42': [0, 0.62119, 0, 0],
    '43': [0.08319, 0.58283, 0, 0],
    '44': [0, 0.10803, 0, 0],
    '45': [0.08319, 0.58283, 0, 0],
    '46': [0, 0.10803, 0, 0],
    '47': [0.24982, 0.74947, 0, 0],
    '48': [0, 0.47534, 0, 0],
    '49': [0, 0.47534, 0, 0],
    '50': [0, 0.47534, 0, 0],
    '51': [0.18906, 0.47534, 0, 0],
    '52': [0.18906, 0.47534, 0, 0],
    '53': [0.18906, 0.47534, 0, 0],
    '54': [0, 0.69141, 0, 0],
    '55': [0.18906, 0.47534, 0, 0],
    '56': [0, 0.69141, 0, 0],
    '57': [0.18906, 0.47534, 0, 0],
    '58': [0, 0.47534, 0, 0],
    '59': [0.12604, 0.47534, 0, 0],
    '61': [-0.13099, 0.36866, 0, 0],
    '63': [0, 0.69141, 0, 0],
    '65': [0, 0.69141, 0, 0],
    '66': [0, 0.69141, 0, 0],
    '67': [0, 0.69141, 0, 0],
    '68': [0, 0.69141, 0, 0],
    '69': [0, 0.69141, 0, 0],
    '70': [0.12604, 0.69141, 0, 0],
    '71': [0, 0.69141, 0, 0],
    '72': [0.06302, 0.69141, 0, 0],
    '73': [0, 0.69141, 0, 0],
    '74': [0.12604, 0.69141, 0, 0],
    '75': [0, 0.69141, 0, 0],
    '76': [0, 0.69141, 0, 0],
    '77': [0, 0.69141, 0, 0],
    '78': [0, 0.69141, 0, 0],
    '79': [0, 0.69141, 0, 0],
    '80': [0.18906, 0.69141, 0, 0],
    '81': [0.03781, 0.69141, 0, 0],
    '82': [0, 0.69141, 0, 0],
    '83': [0, 0.69141, 0, 0],
    '84': [0, 0.69141, 0, 0],
    '85': [0, 0.69141, 0, 0],
    '86': [0, 0.69141, 0, 0],
    '87': [0, 0.69141, 0, 0],
    '88': [0, 0.69141, 0, 0],
    '89': [0.18906, 0.69141, 0, 0],
    '90': [0.12604, 0.69141, 0, 0],
    '91': [0.24982, 0.74947, 0, 0],
    '93': [0.24982, 0.74947, 0, 0],
    '94': [0, 0.69141, 0, 0],
    '97': [0, 0.47534, 0, 0],
    '98': [0, 0.69141, 0, 0],
    '99': [0, 0.47534, 0, 0],
    '100': [0, 0.62119, 0, 0],
    '101': [0, 0.47534, 0, 0],
    '102': [0.18906, 0.69141, 0, 0],
    '103': [0.18906, 0.47534, 0, 0],
    '104': [0.18906, 0.69141, 0, 0],
    '105': [0, 0.69141, 0, 0],
    '106': [0, 0.69141, 0, 0],
    '107': [0, 0.69141, 0, 0],
    '108': [0, 0.69141, 0, 0],
    '109': [0, 0.47534, 0, 0],
    '110': [0, 0.47534, 0, 0],
    '111': [0, 0.47534, 0, 0],
    '112': [0.18906, 0.52396, 0, 0],
    '113': [0.18906, 0.47534, 0, 0],
    '114': [0, 0.47534, 0, 0],
    '115': [0, 0.47534, 0, 0],
    '116': [0, 0.62119, 0, 0],
    '117': [0, 0.47534, 0, 0],
    '118': [0, 0.52396, 0, 0],
    '119': [0, 0.52396, 0, 0],
    '120': [0.18906, 0.47534, 0, 0],
    '121': [0.18906, 0.47534, 0, 0],
    '122': [0.18906, 0.47534, 0, 0],
    '8216': [0, 0.69141, 0, 0],
    '8217': [0, 0.69141, 0, 0],
    '58112': [0, 0.62119, 0, 0],
    '58113': [0, 0.62119, 0, 0],
    '58114': [0.18906, 0.69141, 0, 0],
    '58115': [0.18906, 0.69141, 0, 0],
    '58116': [0.18906, 0.47534, 0, 0],
    '58117': [0, 0.69141, 0, 0],
    '58118': [0, 0.62119, 0, 0],
    '58119': [0, 0.47534, 0, 0]
  },
  'Main-Bold': {
    '33': [0, 0.69444, 0, 0],
    '34': [0, 0.69444, 0, 0],
    '35': [0.19444, 0.69444, 0, 0],
    '36': [0.05556, 0.75, 0, 0],
    '37': [0.05556, 0.75, 0, 0],
    '38': [0, 0.69444, 0, 0],
    '39': [0, 0.69444, 0, 0],
    '40': [0.25, 0.75, 0, 0],
    '41': [0.25, 0.75, 0, 0],
    '42': [0, 0.75, 0, 0],
    '43': [0.13333, 0.63333, 0, 0],
    '44': [0.19444, 0.15556, 0, 0],
    '45': [0, 0.44444, 0, 0],
    '46': [0, 0.15556, 0, 0],
    '47': [0.25, 0.75, 0, 0],
    '48': [0, 0.64444, 0, 0],
    '49': [0, 0.64444, 0, 0],
    '50': [0, 0.64444, 0, 0],
    '51': [0, 0.64444, 0, 0],
    '52': [0, 0.64444, 0, 0],
    '53': [0, 0.64444, 0, 0],
    '54': [0, 0.64444, 0, 0],
    '55': [0, 0.64444, 0, 0],
    '56': [0, 0.64444, 0, 0],
    '57': [0, 0.64444, 0, 0],
    '58': [0, 0.44444, 0, 0],
    '59': [0.19444, 0.44444, 0, 0],
    '60': [0.08556, 0.58556, 0, 0],
    '61': [-0.10889, 0.39111, 0, 0],
    '62': [0.08556, 0.58556, 0, 0],
    '63': [0, 0.69444, 0, 0],
    '64': [0, 0.69444, 0, 0],
    '65': [0, 0.68611, 0, 0],
    '66': [0, 0.68611, 0, 0],
    '67': [0, 0.68611, 0, 0],
    '68': [0, 0.68611, 0, 0],
    '69': [0, 0.68611, 0, 0],
    '70': [0, 0.68611, 0, 0],
    '71': [0, 0.68611, 0, 0],
    '72': [0, 0.68611, 0, 0],
    '73': [0, 0.68611, 0, 0],
    '74': [0, 0.68611, 0, 0],
    '75': [0, 0.68611, 0, 0],
    '76': [0, 0.68611, 0, 0],
    '77': [0, 0.68611, 0, 0],
    '78': [0, 0.68611, 0, 0],
    '79': [0, 0.68611, 0, 0],
    '80': [0, 0.68611, 0, 0],
    '81': [0.19444, 0.68611, 0, 0],
    '82': [0, 0.68611, 0, 0],
    '83': [0, 0.68611, 0, 0],
    '84': [0, 0.68611, 0, 0],
    '85': [0, 0.68611, 0, 0],
    '86': [0, 0.68611, 0.01597, 0],
    '87': [0, 0.68611, 0.01597, 0],
    '88': [0, 0.68611, 0, 0],
    '89': [0, 0.68611, 0.02875, 0],
    '90': [0, 0.68611, 0, 0],
    '91': [0.25, 0.75, 0, 0],
    '92': [0.25, 0.75, 0, 0],
    '93': [0.25, 0.75, 0, 0],
    '94': [0, 0.69444, 0, 0],
    '95': [0.31, 0.13444, 0.03194, 0],
    '96': [0, 0.69444, 0, 0],
    '97': [0, 0.44444, 0, 0],
    '98': [0, 0.69444, 0, 0],
    '99': [0, 0.44444, 0, 0],
    '100': [0, 0.69444, 0, 0],
    '101': [0, 0.44444, 0, 0],
    '102': [0, 0.69444, 0.10903, 0],
    '103': [0.19444, 0.44444, 0.01597, 0],
    '104': [0, 0.69444, 0, 0],
    '105': [0, 0.69444, 0, 0],
    '106': [0.19444, 0.69444, 0, 0],
    '107': [0, 0.69444, 0, 0],
    '108': [0, 0.69444, 0, 0],
    '109': [0, 0.44444, 0, 0],
    '110': [0, 0.44444, 0, 0],
    '111': [0, 0.44444, 0, 0],
    '112': [0.19444, 0.44444, 0, 0],
    '113': [0.19444, 0.44444, 0, 0],
    '114': [0, 0.44444, 0, 0],
    '115': [0, 0.44444, 0, 0],
    '116': [0, 0.63492, 0, 0],
    '117': [0, 0.44444, 0, 0],
    '118': [0, 0.44444, 0.01597, 0],
    '119': [0, 0.44444, 0.01597, 0],
    '120': [0, 0.44444, 0, 0],
    '121': [0.19444, 0.44444, 0.01597, 0],
    '122': [0, 0.44444, 0, 0],
    '123': [0.25, 0.75, 0, 0],
    '124': [0.25, 0.75, 0, 0],
    '125': [0.25, 0.75, 0, 0],
    '126': [0.35, 0.34444, 0, 0],
    '168': [0, 0.69444, 0, 0],
    '172': [0, 0.44444, 0, 0],
    '175': [0, 0.59611, 0, 0],
    '176': [0, 0.69444, 0, 0],
    '177': [0.13333, 0.63333, 0, 0],
    '180': [0, 0.69444, 0, 0],
    '215': [0.13333, 0.63333, 0, 0],
    '247': [0.13333, 0.63333, 0, 0],
    '305': [0, 0.44444, 0, 0],
    '567': [0.19444, 0.44444, 0, 0],
    '710': [0, 0.69444, 0, 0],
    '711': [0, 0.63194, 0, 0],
    '713': [0, 0.59611, 0, 0],
    '714': [0, 0.69444, 0, 0],
    '715': [0, 0.69444, 0, 0],
    '728': [0, 0.69444, 0, 0],
    '729': [0, 0.69444, 0, 0],
    '730': [0, 0.69444, 0, 0],
    '732': [0, 0.69444, 0, 0],
    '768': [0, 0.69444, 0, 0],
    '769': [0, 0.69444, 0, 0],
    '770': [0, 0.69444, 0, 0],
    '771': [0, 0.69444, 0, 0],
    '772': [0, 0.59611, 0, 0],
    '774': [0, 0.69444, 0, 0],
    '775': [0, 0.69444, 0, 0],
    '776': [0, 0.69444, 0, 0],
    '778': [0, 0.69444, 0, 0],
    '779': [0, 0.69444, 0, 0],
    '780': [0, 0.63194, 0, 0],
    '824': [0.19444, 0.69444, 0, 0],
    '915': [0, 0.68611, 0, 0],
    '916': [0, 0.68611, 0, 0],
    '920': [0, 0.68611, 0, 0],
    '923': [0, 0.68611, 0, 0],
    '926': [0, 0.68611, 0, 0],
    '928': [0, 0.68611, 0, 0],
    '931': [0, 0.68611, 0, 0],
    '933': [0, 0.68611, 0, 0],
    '934': [0, 0.68611, 0, 0],
    '936': [0, 0.68611, 0, 0],
    '937': [0, 0.68611, 0, 0],
    '8211': [0, 0.44444, 0.03194, 0],
    '8212': [0, 0.44444, 0.03194, 0],
    '8216': [0, 0.69444, 0, 0],
    '8217': [0, 0.69444, 0, 0],
    '8220': [0, 0.69444, 0, 0],
    '8221': [0, 0.69444, 0, 0],
    '8224': [0.19444, 0.69444, 0, 0],
    '8225': [0.19444, 0.69444, 0, 0],
    '8242': [0, 0.55556, 0, 0],
    '8407': [0, 0.72444, 0.15486, 0],
    '8463': [0, 0.69444, 0, 0],
    '8465': [0, 0.69444, 0, 0],
    '8467': [0, 0.69444, 0, 0],
    '8472': [0.19444, 0.44444, 0, 0],
    '8476': [0, 0.69444, 0, 0],
    '8501': [0, 0.69444, 0, 0],
    '8592': [-0.10889, 0.39111, 0, 0],
    '8593': [0.19444, 0.69444, 0, 0],
    '8594': [-0.10889, 0.39111, 0, 0],
    '8595': [0.19444, 0.69444, 0, 0],
    '8596': [-0.10889, 0.39111, 0, 0],
    '8597': [0.25, 0.75, 0, 0],
    '8598': [0.19444, 0.69444, 0, 0],
    '8599': [0.19444, 0.69444, 0, 0],
    '8600': [0.19444, 0.69444, 0, 0],
    '8601': [0.19444, 0.69444, 0, 0],
    '8636': [-0.10889, 0.39111, 0, 0],
    '8637': [-0.10889, 0.39111, 0, 0],
    '8640': [-0.10889, 0.39111, 0, 0],
    '8641': [-0.10889, 0.39111, 0, 0],
    '8656': [-0.10889, 0.39111, 0, 0],
    '8657': [0.19444, 0.69444, 0, 0],
    '8658': [-0.10889, 0.39111, 0, 0],
    '8659': [0.19444, 0.69444, 0, 0],
    '8660': [-0.10889, 0.39111, 0, 0],
    '8661': [0.25, 0.75, 0, 0],
    '8704': [0, 0.69444, 0, 0],
    '8706': [0, 0.69444, 0.06389, 0],
    '8707': [0, 0.69444, 0, 0],
    '8709': [0.05556, 0.75, 0, 0],
    '8711': [0, 0.68611, 0, 0],
    '8712': [0.08556, 0.58556, 0, 0],
    '8715': [0.08556, 0.58556, 0, 0],
    '8722': [0.13333, 0.63333, 0, 0],
    '8723': [0.13333, 0.63333, 0, 0],
    '8725': [0.25, 0.75, 0, 0],
    '8726': [0.25, 0.75, 0, 0],
    '8727': [-0.02778, 0.47222, 0, 0],
    '8728': [-0.02639, 0.47361, 0, 0],
    '8729': [-0.02639, 0.47361, 0, 0],
    '8730': [0.18, 0.82, 0, 0],
    '8733': [0, 0.44444, 0, 0],
    '8734': [0, 0.44444, 0, 0],
    '8736': [0, 0.69224, 0, 0],
    '8739': [0.25, 0.75, 0, 0],
    '8741': [0.25, 0.75, 0, 0],
    '8743': [0, 0.55556, 0, 0],
    '8744': [0, 0.55556, 0, 0],
    '8745': [0, 0.55556, 0, 0],
    '8746': [0, 0.55556, 0, 0],
    '8747': [0.19444, 0.69444, 0.12778, 0],
    '8764': [-0.10889, 0.39111, 0, 0],
    '8768': [0.19444, 0.69444, 0, 0],
    '8771': [0.00222, 0.50222, 0, 0],
    '8776': [0.02444, 0.52444, 0, 0],
    '8781': [0.00222, 0.50222, 0, 0],
    '8801': [0.00222, 0.50222, 0, 0],
    '8804': [0.19667, 0.69667, 0, 0],
    '8805': [0.19667, 0.69667, 0, 0],
    '8810': [0.08556, 0.58556, 0, 0],
    '8811': [0.08556, 0.58556, 0, 0],
    '8826': [0.08556, 0.58556, 0, 0],
    '8827': [0.08556, 0.58556, 0, 0],
    '8834': [0.08556, 0.58556, 0, 0],
    '8835': [0.08556, 0.58556, 0, 0],
    '8838': [0.19667, 0.69667, 0, 0],
    '8839': [0.19667, 0.69667, 0, 0],
    '8846': [0, 0.55556, 0, 0],
    '8849': [0.19667, 0.69667, 0, 0],
    '8850': [0.19667, 0.69667, 0, 0],
    '8851': [0, 0.55556, 0, 0],
    '8852': [0, 0.55556, 0, 0],
    '8853': [0.13333, 0.63333, 0, 0],
    '8854': [0.13333, 0.63333, 0, 0],
    '8855': [0.13333, 0.63333, 0, 0],
    '8856': [0.13333, 0.63333, 0, 0],
    '8857': [0.13333, 0.63333, 0, 0],
    '8866': [0, 0.69444, 0, 0],
    '8867': [0, 0.69444, 0, 0],
    '8868': [0, 0.69444, 0, 0],
    '8869': [0, 0.69444, 0, 0],
    '8900': [-0.02639, 0.47361, 0, 0],
    '8901': [-0.02639, 0.47361, 0, 0],
    '8902': [-0.02778, 0.47222, 0, 0],
    '8968': [0.25, 0.75, 0, 0],
    '8969': [0.25, 0.75, 0, 0],
    '8970': [0.25, 0.75, 0, 0],
    '8971': [0.25, 0.75, 0, 0],
    '8994': [-0.13889, 0.36111, 0, 0],
    '8995': [-0.13889, 0.36111, 0, 0],
    '9651': [0.19444, 0.69444, 0, 0],
    '9657': [-0.02778, 0.47222, 0, 0],
    '9661': [0.19444, 0.69444, 0, 0],
    '9667': [-0.02778, 0.47222, 0, 0],
    '9711': [0.19444, 0.69444, 0, 0],
    '9824': [0.12963, 0.69444, 0, 0],
    '9825': [0.12963, 0.69444, 0, 0],
    '9826': [0.12963, 0.69444, 0, 0],
    '9827': [0.12963, 0.69444, 0, 0],
    '9837': [0, 0.75, 0, 0],
    '9838': [0.19444, 0.69444, 0, 0],
    '9839': [0.19444, 0.69444, 0, 0],
    '10216': [0.25, 0.75, 0, 0],
    '10217': [0.25, 0.75, 0, 0],
    '10815': [0, 0.68611, 0, 0],
    '10927': [0.19667, 0.69667, 0, 0],
    '10928': [0.19667, 0.69667, 0, 0]
  },
  'Main-Italic': {
    '33': [0, 0.69444, 0.12417, 0],
    '34': [0, 0.69444, 0.06961, 0],
    '35': [0.19444, 0.69444, 0.06616, 0],
    '37': [0.05556, 0.75, 0.13639, 0],
    '38': [0, 0.69444, 0.09694, 0],
    '39': [0, 0.69444, 0.12417, 0],
    '40': [0.25, 0.75, 0.16194, 0],
    '41': [0.25, 0.75, 0.03694, 0],
    '42': [0, 0.75, 0.14917, 0],
    '43': [0.05667, 0.56167, 0.03694, 0],
    '44': [0.19444, 0.10556, 0, 0],
    '45': [0, 0.43056, 0.02826, 0],
    '46': [0, 0.10556, 0, 0],
    '47': [0.25, 0.75, 0.16194, 0],
    '48': [0, 0.64444, 0.13556, 0],
    '49': [0, 0.64444, 0.13556, 0],
    '50': [0, 0.64444, 0.13556, 0],
    '51': [0, 0.64444, 0.13556, 0],
    '52': [0.19444, 0.64444, 0.13556, 0],
    '53': [0, 0.64444, 0.13556, 0],
    '54': [0, 0.64444, 0.13556, 0],
    '55': [0.19444, 0.64444, 0.13556, 0],
    '56': [0, 0.64444, 0.13556, 0],
    '57': [0, 0.64444, 0.13556, 0],
    '58': [0, 0.43056, 0.0582, 0],
    '59': [0.19444, 0.43056, 0.0582, 0],
    '61': [-0.13313, 0.36687, 0.06616, 0],
    '63': [0, 0.69444, 0.1225, 0],
    '64': [0, 0.69444, 0.09597, 0],
    '65': [0, 0.68333, 0, 0],
    '66': [0, 0.68333, 0.10257, 0],
    '67': [0, 0.68333, 0.14528, 0],
    '68': [0, 0.68333, 0.09403, 0],
    '69': [0, 0.68333, 0.12028, 0],
    '70': [0, 0.68333, 0.13305, 0],
    '71': [0, 0.68333, 0.08722, 0],
    '72': [0, 0.68333, 0.16389, 0],
    '73': [0, 0.68333, 0.15806, 0],
    '74': [0, 0.68333, 0.14028, 0],
    '75': [0, 0.68333, 0.14528, 0],
    '76': [0, 0.68333, 0, 0],
    '77': [0, 0.68333, 0.16389, 0],
    '78': [0, 0.68333, 0.16389, 0],
    '79': [0, 0.68333, 0.09403, 0],
    '80': [0, 0.68333, 0.10257, 0],
    '81': [0.19444, 0.68333, 0.09403, 0],
    '82': [0, 0.68333, 0.03868, 0],
    '83': [0, 0.68333, 0.11972, 0],
    '84': [0, 0.68333, 0.13305, 0],
    '85': [0, 0.68333, 0.16389, 0],
    '86': [0, 0.68333, 0.18361, 0],
    '87': [0, 0.68333, 0.18361, 0],
    '88': [0, 0.68333, 0.15806, 0],
    '89': [0, 0.68333, 0.19383, 0],
    '90': [0, 0.68333, 0.14528, 0],
    '91': [0.25, 0.75, 0.1875, 0],
    '93': [0.25, 0.75, 0.10528, 0],
    '94': [0, 0.69444, 0.06646, 0],
    '95': [0.31, 0.12056, 0.09208, 0],
    '97': [0, 0.43056, 0.07671, 0],
    '98': [0, 0.69444, 0.06312, 0],
    '99': [0, 0.43056, 0.05653, 0],
    '100': [0, 0.69444, 0.10333, 0],
    '101': [0, 0.43056, 0.07514, 0],
    '102': [0.19444, 0.69444, 0.21194, 0],
    '103': [0.19444, 0.43056, 0.08847, 0],
    '104': [0, 0.69444, 0.07671, 0],
    '105': [0, 0.65536, 0.1019, 0],
    '106': [0.19444, 0.65536, 0.14467, 0],
    '107': [0, 0.69444, 0.10764, 0],
    '108': [0, 0.69444, 0.10333, 0],
    '109': [0, 0.43056, 0.07671, 0],
    '110': [0, 0.43056, 0.07671, 0],
    '111': [0, 0.43056, 0.06312, 0],
    '112': [0.19444, 0.43056, 0.06312, 0],
    '113': [0.19444, 0.43056, 0.08847, 0],
    '114': [0, 0.43056, 0.10764, 0],
    '115': [0, 0.43056, 0.08208, 0],
    '116': [0, 0.61508, 0.09486, 0],
    '117': [0, 0.43056, 0.07671, 0],
    '118': [0, 0.43056, 0.10764, 0],
    '119': [0, 0.43056, 0.10764, 0],
    '120': [0, 0.43056, 0.12042, 0],
    '121': [0.19444, 0.43056, 0.08847, 0],
    '122': [0, 0.43056, 0.12292, 0],
    '126': [0.35, 0.31786, 0.11585, 0],
    '163': [0, 0.69444, 0, 0],
    '305': [0, 0.43056, 0, 0.02778],
    '567': [0.19444, 0.43056, 0, 0.08334],
    '768': [0, 0.69444, 0, 0],
    '769': [0, 0.69444, 0.09694, 0],
    '770': [0, 0.69444, 0.06646, 0],
    '771': [0, 0.66786, 0.11585, 0],
    '772': [0, 0.56167, 0.10333, 0],
    '774': [0, 0.69444, 0.10806, 0],
    '775': [0, 0.66786, 0.11752, 0],
    '776': [0, 0.66786, 0.10474, 0],
    '778': [0, 0.69444, 0, 0],
    '779': [0, 0.69444, 0.1225, 0],
    '780': [0, 0.62847, 0.08295, 0],
    '915': [0, 0.68333, 0.13305, 0],
    '916': [0, 0.68333, 0, 0],
    '920': [0, 0.68333, 0.09403, 0],
    '923': [0, 0.68333, 0, 0],
    '926': [0, 0.68333, 0.15294, 0],
    '928': [0, 0.68333, 0.16389, 0],
    '931': [0, 0.68333, 0.12028, 0],
    '933': [0, 0.68333, 0.11111, 0],
    '934': [0, 0.68333, 0.05986, 0],
    '936': [0, 0.68333, 0.11111, 0],
    '937': [0, 0.68333, 0.10257, 0],
    '8211': [0, 0.43056, 0.09208, 0],
    '8212': [0, 0.43056, 0.09208, 0],
    '8216': [0, 0.69444, 0.12417, 0],
    '8217': [0, 0.69444, 0.12417, 0],
    '8220': [0, 0.69444, 0.1685, 0],
    '8221': [0, 0.69444, 0.06961, 0],
    '8463': [0, 0.68889, 0, 0]
  },
  'Main-Regular': {
    '32': [0, 0, 0, 0],
    '33': [0, 0.69444, 0, 0],
    '34': [0, 0.69444, 0, 0],
    '35': [0.19444, 0.69444, 0, 0],
    '36': [0.05556, 0.75, 0, 0],
    '37': [0.05556, 0.75, 0, 0],
    '38': [0, 0.69444, 0, 0],
    '39': [0, 0.69444, 0, 0],
    '40': [0.25, 0.75, 0, 0],
    '41': [0.25, 0.75, 0, 0],
    '42': [0, 0.75, 0, 0],
    '43': [0.08333, 0.58333, 0, 0],
    '44': [0.19444, 0.10556, 0, 0],
    '45': [0, 0.43056, 0, 0],
    '46': [0, 0.10556, 0, 0],
    '47': [0.25, 0.75, 0, 0],
    '48': [0, 0.64444, 0, 0],
    '49': [0, 0.64444, 0, 0],
    '50': [0, 0.64444, 0, 0],
    '51': [0, 0.64444, 0, 0],
    '52': [0, 0.64444, 0, 0],
    '53': [0, 0.64444, 0, 0],
    '54': [0, 0.64444, 0, 0],
    '55': [0, 0.64444, 0, 0],
    '56': [0, 0.64444, 0, 0],
    '57': [0, 0.64444, 0, 0],
    '58': [0, 0.43056, 0, 0],
    '59': [0.19444, 0.43056, 0, 0],
    '60': [0.0391, 0.5391, 0, 0],
    '61': [-0.13313, 0.36687, 0, 0],
    '62': [0.0391, 0.5391, 0, 0],
    '63': [0, 0.69444, 0, 0],
    '64': [0, 0.69444, 0, 0],
    '65': [0, 0.68333, 0, 0],
    '66': [0, 0.68333, 0, 0],
    '67': [0, 0.68333, 0, 0],
    '68': [0, 0.68333, 0, 0],
    '69': [0, 0.68333, 0, 0],
    '70': [0, 0.68333, 0, 0],
    '71': [0, 0.68333, 0, 0],
    '72': [0, 0.68333, 0, 0],
    '73': [0, 0.68333, 0, 0],
    '74': [0, 0.68333, 0, 0],
    '75': [0, 0.68333, 0, 0],
    '76': [0, 0.68333, 0, 0],
    '77': [0, 0.68333, 0, 0],
    '78': [0, 0.68333, 0, 0],
    '79': [0, 0.68333, 0, 0],
    '80': [0, 0.68333, 0, 0],
    '81': [0.19444, 0.68333, 0, 0],
    '82': [0, 0.68333, 0, 0],
    '83': [0, 0.68333, 0, 0],
    '84': [0, 0.68333, 0, 0],
    '85': [0, 0.68333, 0, 0],
    '86': [0, 0.68333, 0.01389, 0],
    '87': [0, 0.68333, 0.01389, 0],
    '88': [0, 0.68333, 0, 0],
    '89': [0, 0.68333, 0.025, 0],
    '90': [0, 0.68333, 0, 0],
    '91': [0.25, 0.75, 0, 0],
    '92': [0.25, 0.75, 0, 0],
    '93': [0.25, 0.75, 0, 0],
    '94': [0, 0.69444, 0, 0],
    '95': [0.31, 0.12056, 0.02778, 0],
    '96': [0, 0.69444, 0, 0],
    '97': [0, 0.43056, 0, 0],
    '98': [0, 0.69444, 0, 0],
    '99': [0, 0.43056, 0, 0],
    '100': [0, 0.69444, 0, 0],
    '101': [0, 0.43056, 0, 0],
    '102': [0, 0.69444, 0.07778, 0],
    '103': [0.19444, 0.43056, 0.01389, 0],
    '104': [0, 0.69444, 0, 0],
    '105': [0, 0.66786, 0, 0],
    '106': [0.19444, 0.66786, 0, 0],
    '107': [0, 0.69444, 0, 0],
    '108': [0, 0.69444, 0, 0],
    '109': [0, 0.43056, 0, 0],
    '110': [0, 0.43056, 0, 0],
    '111': [0, 0.43056, 0, 0],
    '112': [0.19444, 0.43056, 0, 0],
    '113': [0.19444, 0.43056, 0, 0],
    '114': [0, 0.43056, 0, 0],
    '115': [0, 0.43056, 0, 0],
    '116': [0, 0.61508, 0, 0],
    '117': [0, 0.43056, 0, 0],
    '118': [0, 0.43056, 0.01389, 0],
    '119': [0, 0.43056, 0.01389, 0],
    '120': [0, 0.43056, 0, 0],
    '121': [0.19444, 0.43056, 0.01389, 0],
    '122': [0, 0.43056, 0, 0],
    '123': [0.25, 0.75, 0, 0],
    '124': [0.25, 0.75, 0, 0],
    '125': [0.25, 0.75, 0, 0],
    '126': [0.35, 0.31786, 0, 0],
    '160': [0, 0, 0, 0],
    '168': [0, 0.66786, 0, 0],
    '172': [0, 0.43056, 0, 0],
    '175': [0, 0.56778, 0, 0],
    '176': [0, 0.69444, 0, 0],
    '177': [0.08333, 0.58333, 0, 0],
    '180': [0, 0.69444, 0, 0],
    '215': [0.08333, 0.58333, 0, 0],
    '247': [0.08333, 0.58333, 0, 0],
    '305': [0, 0.43056, 0, 0],
    '567': [0.19444, 0.43056, 0, 0],
    '710': [0, 0.69444, 0, 0],
    '711': [0, 0.62847, 0, 0],
    '713': [0, 0.56778, 0, 0],
    '714': [0, 0.69444, 0, 0],
    '715': [0, 0.69444, 0, 0],
    '728': [0, 0.69444, 0, 0],
    '729': [0, 0.66786, 0, 0],
    '730': [0, 0.69444, 0, 0],
    '732': [0, 0.66786, 0, 0],
    '768': [0, 0.69444, 0, 0],
    '769': [0, 0.69444, 0, 0],
    '770': [0, 0.69444, 0, 0],
    '771': [0, 0.66786, 0, 0],
    '772': [0, 0.56778, 0, 0],
    '774': [0, 0.69444, 0, 0],
    '775': [0, 0.66786, 0, 0],
    '776': [0, 0.66786, 0, 0],
    '778': [0, 0.69444, 0, 0],
    '779': [0, 0.69444, 0, 0],
    '780': [0, 0.62847, 0, 0],
    '824': [0.19444, 0.69444, 0, 0],
    '915': [0, 0.68333, 0, 0],
    '916': [0, 0.68333, 0, 0],
    '920': [0, 0.68333, 0, 0],
    '923': [0, 0.68333, 0, 0],
    '926': [0, 0.68333, 0, 0],
    '928': [0, 0.68333, 0, 0],
    '931': [0, 0.68333, 0, 0],
    '933': [0, 0.68333, 0, 0],
    '934': [0, 0.68333, 0, 0],
    '936': [0, 0.68333, 0, 0],
    '937': [0, 0.68333, 0, 0],
    '8211': [0, 0.43056, 0.02778, 0],
    '8212': [0, 0.43056, 0.02778, 0],
    '8216': [0, 0.69444, 0, 0],
    '8217': [0, 0.69444, 0, 0],
    '8220': [0, 0.69444, 0, 0],
    '8221': [0, 0.69444, 0, 0],
    '8224': [0.19444, 0.69444, 0, 0],
    '8225': [0.19444, 0.69444, 0, 0],
    '8230': [0, 0.12, 0, 0],
    '8242': [0, 0.55556, 0, 0],
    '8407': [0, 0.71444, 0.15382, 0],
    '8463': [0, 0.68889, 0, 0],
    '8465': [0, 0.69444, 0, 0],
    '8467': [0, 0.69444, 0, 0.11111],
    '8472': [0.19444, 0.43056, 0, 0.11111],
    '8476': [0, 0.69444, 0, 0],
    '8501': [0, 0.69444, 0, 0],
    '8592': [-0.13313, 0.36687, 0, 0],
    '8593': [0.19444, 0.69444, 0, 0],
    '8594': [-0.13313, 0.36687, 0, 0],
    '8595': [0.19444, 0.69444, 0, 0],
    '8596': [-0.13313, 0.36687, 0, 0],
    '8597': [0.25, 0.75, 0, 0],
    '8598': [0.19444, 0.69444, 0, 0],
    '8599': [0.19444, 0.69444, 0, 0],
    '8600': [0.19444, 0.69444, 0, 0],
    '8601': [0.19444, 0.69444, 0, 0],
    '8614': [0.011, 0.511, 0, 0],
    '8617': [0.011, 0.511, 0, 0],
    '8618': [0.011, 0.511, 0, 0],
    '8636': [-0.13313, 0.36687, 0, 0],
    '8637': [-0.13313, 0.36687, 0, 0],
    '8640': [-0.13313, 0.36687, 0, 0],
    '8641': [-0.13313, 0.36687, 0, 0],
    '8652': [0.011, 0.671, 0, 0],
    '8656': [-0.13313, 0.36687, 0, 0],
    '8657': [0.19444, 0.69444, 0, 0],
    '8658': [-0.13313, 0.36687, 0, 0],
    '8659': [0.19444, 0.69444, 0, 0],
    '8660': [-0.13313, 0.36687, 0, 0],
    '8661': [0.25, 0.75, 0, 0],
    '8704': [0, 0.69444, 0, 0],
    '8706': [0, 0.69444, 0.05556, 0.08334],
    '8707': [0, 0.69444, 0, 0],
    '8709': [0.05556, 0.75, 0, 0],
    '8711': [0, 0.68333, 0, 0],
    '8712': [0.0391, 0.5391, 0, 0],
    '8715': [0.0391, 0.5391, 0, 0],
    '8722': [0.08333, 0.58333, 0, 0],
    '8723': [0.08333, 0.58333, 0, 0],
    '8725': [0.25, 0.75, 0, 0],
    '8726': [0.25, 0.75, 0, 0],
    '8727': [-0.03472, 0.46528, 0, 0],
    '8728': [-0.05555, 0.44445, 0, 0],
    '8729': [-0.05555, 0.44445, 0, 0],
    '8730': [0.2, 0.8, 0, 0],
    '8733': [0, 0.43056, 0, 0],
    '8734': [0, 0.43056, 0, 0],
    '8736': [0, 0.69224, 0, 0],
    '8739': [0.25, 0.75, 0, 0],
    '8741': [0.25, 0.75, 0, 0],
    '8743': [0, 0.55556, 0, 0],
    '8744': [0, 0.55556, 0, 0],
    '8745': [0, 0.55556, 0, 0],
    '8746': [0, 0.55556, 0, 0],
    '8747': [0.19444, 0.69444, 0.11111, 0],
    '8764': [-0.13313, 0.36687, 0, 0],
    '8768': [0.19444, 0.69444, 0, 0],
    '8771': [-0.03625, 0.46375, 0, 0],
    '8773': [-0.022, 0.589, 0, 0],
    '8776': [-0.01688, 0.48312, 0, 0],
    '8781': [-0.03625, 0.46375, 0, 0],
    '8784': [-0.133, 0.67, 0, 0],
    '8800': [0.215, 0.716, 0, 0],
    '8801': [-0.03625, 0.46375, 0, 0],
    '8804': [0.13597, 0.63597, 0, 0],
    '8805': [0.13597, 0.63597, 0, 0],
    '8810': [0.0391, 0.5391, 0, 0],
    '8811': [0.0391, 0.5391, 0, 0],
    '8826': [0.0391, 0.5391, 0, 0],
    '8827': [0.0391, 0.5391, 0, 0],
    '8834': [0.0391, 0.5391, 0, 0],
    '8835': [0.0391, 0.5391, 0, 0],
    '8838': [0.13597, 0.63597, 0, 0],
    '8839': [0.13597, 0.63597, 0, 0],
    '8846': [0, 0.55556, 0, 0],
    '8849': [0.13597, 0.63597, 0, 0],
    '8850': [0.13597, 0.63597, 0, 0],
    '8851': [0, 0.55556, 0, 0],
    '8852': [0, 0.55556, 0, 0],
    '8853': [0.08333, 0.58333, 0, 0],
    '8854': [0.08333, 0.58333, 0, 0],
    '8855': [0.08333, 0.58333, 0, 0],
    '8856': [0.08333, 0.58333, 0, 0],
    '8857': [0.08333, 0.58333, 0, 0],
    '8866': [0, 0.69444, 0, 0],
    '8867': [0, 0.69444, 0, 0],
    '8868': [0, 0.69444, 0, 0],
    '8869': [0, 0.69444, 0, 0],
    '8872': [0.249, 0.75, 0, 0],
    '8900': [-0.05555, 0.44445, 0, 0],
    '8901': [-0.05555, 0.44445, 0, 0],
    '8902': [-0.03472, 0.46528, 0, 0],
    '8904': [0.005, 0.505, 0, 0],
    '8942': [0.03, 0.9, 0, 0],
    '8943': [-0.19, 0.31, 0, 0],
    '8945': [-0.1, 0.82, 0, 0],
    '8968': [0.25, 0.75, 0, 0],
    '8969': [0.25, 0.75, 0, 0],
    '8970': [0.25, 0.75, 0, 0],
    '8971': [0.25, 0.75, 0, 0],
    '8994': [-0.14236, 0.35764, 0, 0],
    '8995': [-0.14236, 0.35764, 0, 0],
    '9136': [0.244, 0.744, 0, 0],
    '9137': [0.244, 0.744, 0, 0],
    '9651': [0.19444, 0.69444, 0, 0],
    '9657': [-0.03472, 0.46528, 0, 0],
    '9661': [0.19444, 0.69444, 0, 0],
    '9667': [-0.03472, 0.46528, 0, 0],
    '9711': [0.19444, 0.69444, 0, 0],
    '9824': [0.12963, 0.69444, 0, 0],
    '9825': [0.12963, 0.69444, 0, 0],
    '9826': [0.12963, 0.69444, 0, 0],
    '9827': [0.12963, 0.69444, 0, 0],
    '9837': [0, 0.75, 0, 0],
    '9838': [0.19444, 0.69444, 0, 0],
    '9839': [0.19444, 0.69444, 0, 0],
    '10216': [0.25, 0.75, 0, 0],
    '10217': [0.25, 0.75, 0, 0],
    '10222': [0.244, 0.744, 0, 0],
    '10223': [0.244, 0.744, 0, 0],
    '10229': [0.011, 0.511, 0, 0],
    '10230': [0.011, 0.511, 0, 0],
    '10231': [0.011, 0.511, 0, 0],
    '10232': [0.024, 0.525, 0, 0],
    '10233': [0.024, 0.525, 0, 0],
    '10234': [0.024, 0.525, 0, 0],
    '10236': [0.011, 0.511, 0, 0],
    '10815': [0, 0.68333, 0, 0],
    '10927': [0.13597, 0.63597, 0, 0],
    '10928': [0.13597, 0.63597, 0, 0]
  },
  'Math-BoldItalic': {
    '47': [0.19444, 0.69444, 0, 0],
    '65': [0, 0.68611, 0, 0],
    '66': [0, 0.68611, 0.04835, 0],
    '67': [0, 0.68611, 0.06979, 0],
    '68': [0, 0.68611, 0.03194, 0],
    '69': [0, 0.68611, 0.05451, 0],
    '70': [0, 0.68611, 0.15972, 0],
    '71': [0, 0.68611, 0, 0],
    '72': [0, 0.68611, 0.08229, 0],
    '73': [0, 0.68611, 0.07778, 0],
    '74': [0, 0.68611, 0.10069, 0],
    '75': [0, 0.68611, 0.06979, 0],
    '76': [0, 0.68611, 0, 0],
    '77': [0, 0.68611, 0.11424, 0],
    '78': [0, 0.68611, 0.11424, 0],
    '79': [0, 0.68611, 0.03194, 0],
    '80': [0, 0.68611, 0.15972, 0],
    '81': [0.19444, 0.68611, 0, 0],
    '82': [0, 0.68611, 0.00421, 0],
    '83': [0, 0.68611, 0.05382, 0],
    '84': [0, 0.68611, 0.15972, 0],
    '85': [0, 0.68611, 0.11424, 0],
    '86': [0, 0.68611, 0.25555, 0],
    '87': [0, 0.68611, 0.15972, 0],
    '88': [0, 0.68611, 0.07778, 0],
    '89': [0, 0.68611, 0.25555, 0],
    '90': [0, 0.68611, 0.06979, 0],
    '97': [0, 0.44444, 0, 0],
    '98': [0, 0.69444, 0, 0],
    '99': [0, 0.44444, 0, 0],
    '100': [0, 0.69444, 0, 0],
    '101': [0, 0.44444, 0, 0],
    '102': [0.19444, 0.69444, 0.11042, 0],
    '103': [0.19444, 0.44444, 0.03704, 0],
    '104': [0, 0.69444, 0, 0],
    '105': [0, 0.69326, 0, 0],
    '106': [0.19444, 0.69326, 0.0622, 0],
    '107': [0, 0.69444, 0.01852, 0],
    '108': [0, 0.69444, 0.0088, 0],
    '109': [0, 0.44444, 0, 0],
    '110': [0, 0.44444, 0, 0],
    '111': [0, 0.44444, 0, 0],
    '112': [0.19444, 0.44444, 0, 0],
    '113': [0.19444, 0.44444, 0.03704, 0],
    '114': [0, 0.44444, 0.03194, 0],
    '115': [0, 0.44444, 0, 0],
    '116': [0, 0.63492, 0, 0],
    '117': [0, 0.44444, 0, 0],
    '118': [0, 0.44444, 0.03704, 0],
    '119': [0, 0.44444, 0.02778, 0],
    '120': [0, 0.44444, 0, 0],
    '121': [0.19444, 0.44444, 0.03704, 0],
    '122': [0, 0.44444, 0.04213, 0],
    '915': [0, 0.68611, 0.15972, 0],
    '916': [0, 0.68611, 0, 0],
    '920': [0, 0.68611, 0.03194, 0],
    '923': [0, 0.68611, 0, 0],
    '926': [0, 0.68611, 0.07458, 0],
    '928': [0, 0.68611, 0.08229, 0],
    '931': [0, 0.68611, 0.05451, 0],
    '933': [0, 0.68611, 0.15972, 0],
    '934': [0, 0.68611, 0, 0],
    '936': [0, 0.68611, 0.11653, 0],
    '937': [0, 0.68611, 0.04835, 0],
    '945': [0, 0.44444, 0, 0],
    '946': [0.19444, 0.69444, 0.03403, 0],
    '947': [0.19444, 0.44444, 0.06389, 0],
    '948': [0, 0.69444, 0.03819, 0],
    '949': [0, 0.44444, 0, 0],
    '950': [0.19444, 0.69444, 0.06215, 0],
    '951': [0.19444, 0.44444, 0.03704, 0],
    '952': [0, 0.69444, 0.03194, 0],
    '953': [0, 0.44444, 0, 0],
    '954': [0, 0.44444, 0, 0],
    '955': [0, 0.69444, 0, 0],
    '956': [0.19444, 0.44444, 0, 0],
    '957': [0, 0.44444, 0.06898, 0],
    '958': [0.19444, 0.69444, 0.03021, 0],
    '959': [0, 0.44444, 0, 0],
    '960': [0, 0.44444, 0.03704, 0],
    '961': [0.19444, 0.44444, 0, 0],
    '962': [0.09722, 0.44444, 0.07917, 0],
    '963': [0, 0.44444, 0.03704, 0],
    '964': [0, 0.44444, 0.13472, 0],
    '965': [0, 0.44444, 0.03704, 0],
    '966': [0.19444, 0.44444, 0, 0],
    '967': [0.19444, 0.44444, 0, 0],
    '968': [0.19444, 0.69444, 0.03704, 0],
    '969': [0, 0.44444, 0.03704, 0],
    '977': [0, 0.69444, 0, 0],
    '981': [0.19444, 0.69444, 0, 0],
    '982': [0, 0.44444, 0.03194, 0],
    '1009': [0.19444, 0.44444, 0, 0],
    '1013': [0, 0.44444, 0, 0]
  },
  'Math-Italic': {
    '47': [0.19444, 0.69444, 0, 0],
    '65': [0, 0.68333, 0, 0.13889],
    '66': [0, 0.68333, 0.05017, 0.08334],
    '67': [0, 0.68333, 0.07153, 0.08334],
    '68': [0, 0.68333, 0.02778, 0.05556],
    '69': [0, 0.68333, 0.05764, 0.08334],
    '70': [0, 0.68333, 0.13889, 0.08334],
    '71': [0, 0.68333, 0, 0.08334],
    '72': [0, 0.68333, 0.08125, 0.05556],
    '73': [0, 0.68333, 0.07847, 0.11111],
    '74': [0, 0.68333, 0.09618, 0.16667],
    '75': [0, 0.68333, 0.07153, 0.05556],
    '76': [0, 0.68333, 0, 0.02778],
    '77': [0, 0.68333, 0.10903, 0.08334],
    '78': [0, 0.68333, 0.10903, 0.08334],
    '79': [0, 0.68333, 0.02778, 0.08334],
    '80': [0, 0.68333, 0.13889, 0.08334],
    '81': [0.19444, 0.68333, 0, 0.08334],
    '82': [0, 0.68333, 0.00773, 0.08334],
    '83': [0, 0.68333, 0.05764, 0.08334],
    '84': [0, 0.68333, 0.13889, 0.08334],
    '85': [0, 0.68333, 0.10903, 0.02778],
    '86': [0, 0.68333, 0.22222, 0],
    '87': [0, 0.68333, 0.13889, 0],
    '88': [0, 0.68333, 0.07847, 0.08334],
    '89': [0, 0.68333, 0.22222, 0],
    '90': [0, 0.68333, 0.07153, 0.08334],
    '97': [0, 0.43056, 0, 0],
    '98': [0, 0.69444, 0, 0],
    '99': [0, 0.43056, 0, 0.05556],
    '100': [0, 0.69444, 0, 0.16667],
    '101': [0, 0.43056, 0, 0.05556],
    '102': [0.19444, 0.69444, 0.10764, 0.16667],
    '103': [0.19444, 0.43056, 0.03588, 0.02778],
    '104': [0, 0.69444, 0, 0],
    '105': [0, 0.65952, 0, 0],
    '106': [0.19444, 0.65952, 0.05724, 0],
    '107': [0, 0.69444, 0.03148, 0],
    '108': [0, 0.69444, 0.01968, 0.08334],
    '109': [0, 0.43056, 0, 0],
    '110': [0, 0.43056, 0, 0],
    '111': [0, 0.43056, 0, 0.05556],
    '112': [0.19444, 0.43056, 0, 0.08334],
    '113': [0.19444, 0.43056, 0.03588, 0.08334],
    '114': [0, 0.43056, 0.02778, 0.05556],
    '115': [0, 0.43056, 0, 0.05556],
    '116': [0, 0.61508, 0, 0.08334],
    '117': [0, 0.43056, 0, 0.02778],
    '118': [0, 0.43056, 0.03588, 0.02778],
    '119': [0, 0.43056, 0.02691, 0.08334],
    '120': [0, 0.43056, 0, 0.02778],
    '121': [0.19444, 0.43056, 0.03588, 0.05556],
    '122': [0, 0.43056, 0.04398, 0.05556],
    '915': [0, 0.68333, 0.13889, 0.08334],
    '916': [0, 0.68333, 0, 0.16667],
    '920': [0, 0.68333, 0.02778, 0.08334],
    '923': [0, 0.68333, 0, 0.16667],
    '926': [0, 0.68333, 0.07569, 0.08334],
    '928': [0, 0.68333, 0.08125, 0.05556],
    '931': [0, 0.68333, 0.05764, 0.08334],
    '933': [0, 0.68333, 0.13889, 0.05556],
    '934': [0, 0.68333, 0, 0.08334],
    '936': [0, 0.68333, 0.11, 0.05556],
    '937': [0, 0.68333, 0.05017, 0.08334],
    '945': [0, 0.43056, 0.0037, 0.02778],
    '946': [0.19444, 0.69444, 0.05278, 0.08334],
    '947': [0.19444, 0.43056, 0.05556, 0],
    '948': [0, 0.69444, 0.03785, 0.05556],
    '949': [0, 0.43056, 0, 0.08334],
    '950': [0.19444, 0.69444, 0.07378, 0.08334],
    '951': [0.19444, 0.43056, 0.03588, 0.05556],
    '952': [0, 0.69444, 0.02778, 0.08334],
    '953': [0, 0.43056, 0, 0.05556],
    '954': [0, 0.43056, 0, 0],
    '955': [0, 0.69444, 0, 0],
    '956': [0.19444, 0.43056, 0, 0.02778],
    '957': [0, 0.43056, 0.06366, 0.02778],
    '958': [0.19444, 0.69444, 0.04601, 0.11111],
    '959': [0, 0.43056, 0, 0.05556],
    '960': [0, 0.43056, 0.03588, 0],
    '961': [0.19444, 0.43056, 0, 0.08334],
    '962': [0.09722, 0.43056, 0.07986, 0.08334],
    '963': [0, 0.43056, 0.03588, 0],
    '964': [0, 0.43056, 0.1132, 0.02778],
    '965': [0, 0.43056, 0.03588, 0.02778],
    '966': [0.19444, 0.43056, 0, 0.08334],
    '967': [0.19444, 0.43056, 0, 0.05556],
    '968': [0.19444, 0.69444, 0.03588, 0.11111],
    '969': [0, 0.43056, 0.03588, 0],
    '977': [0, 0.69444, 0, 0.08334],
    '981': [0.19444, 0.69444, 0, 0.08334],
    '982': [0, 0.43056, 0.02778, 0],
    '1009': [0.19444, 0.43056, 0, 0.08334],
    '1013': [0, 0.43056, 0, 0.05556]
  },
  'Math-Regular': {
    '65': [0, 0.68333, 0, 0.13889],
    '66': [0, 0.68333, 0.05017, 0.08334],
    '67': [0, 0.68333, 0.07153, 0.08334],
    '68': [0, 0.68333, 0.02778, 0.05556],
    '69': [0, 0.68333, 0.05764, 0.08334],
    '70': [0, 0.68333, 0.13889, 0.08334],
    '71': [0, 0.68333, 0, 0.08334],
    '72': [0, 0.68333, 0.08125, 0.05556],
    '73': [0, 0.68333, 0.07847, 0.11111],
    '74': [0, 0.68333, 0.09618, 0.16667],
    '75': [0, 0.68333, 0.07153, 0.05556],
    '76': [0, 0.68333, 0, 0.02778],
    '77': [0, 0.68333, 0.10903, 0.08334],
    '78': [0, 0.68333, 0.10903, 0.08334],
    '79': [0, 0.68333, 0.02778, 0.08334],
    '80': [0, 0.68333, 0.13889, 0.08334],
    '81': [0.19444, 0.68333, 0, 0.08334],
    '82': [0, 0.68333, 0.00773, 0.08334],
    '83': [0, 0.68333, 0.05764, 0.08334],
    '84': [0, 0.68333, 0.13889, 0.08334],
    '85': [0, 0.68333, 0.10903, 0.02778],
    '86': [0, 0.68333, 0.22222, 0],
    '87': [0, 0.68333, 0.13889, 0],
    '88': [0, 0.68333, 0.07847, 0.08334],
    '89': [0, 0.68333, 0.22222, 0],
    '90': [0, 0.68333, 0.07153, 0.08334],
    '97': [0, 0.43056, 0, 0],
    '98': [0, 0.69444, 0, 0],
    '99': [0, 0.43056, 0, 0.05556],
    '100': [0, 0.69444, 0, 0.16667],
    '101': [0, 0.43056, 0, 0.05556],
    '102': [0.19444, 0.69444, 0.10764, 0.16667],
    '103': [0.19444, 0.43056, 0.03588, 0.02778],
    '104': [0, 0.69444, 0, 0],
    '105': [0, 0.65952, 0, 0],
    '106': [0.19444, 0.65952, 0.05724, 0],
    '107': [0, 0.69444, 0.03148, 0],
    '108': [0, 0.69444, 0.01968, 0.08334],
    '109': [0, 0.43056, 0, 0],
    '110': [0, 0.43056, 0, 0],
    '111': [0, 0.43056, 0, 0.05556],
    '112': [0.19444, 0.43056, 0, 0.08334],
    '113': [0.19444, 0.43056, 0.03588, 0.08334],
    '114': [0, 0.43056, 0.02778, 0.05556],
    '115': [0, 0.43056, 0, 0.05556],
    '116': [0, 0.61508, 0, 0.08334],
    '117': [0, 0.43056, 0, 0.02778],
    '118': [0, 0.43056, 0.03588, 0.02778],
    '119': [0, 0.43056, 0.02691, 0.08334],
    '120': [0, 0.43056, 0, 0.02778],
    '121': [0.19444, 0.43056, 0.03588, 0.05556],
    '122': [0, 0.43056, 0.04398, 0.05556],
    '915': [0, 0.68333, 0.13889, 0.08334],
    '916': [0, 0.68333, 0, 0.16667],
    '920': [0, 0.68333, 0.02778, 0.08334],
    '923': [0, 0.68333, 0, 0.16667],
    '926': [0, 0.68333, 0.07569, 0.08334],
    '928': [0, 0.68333, 0.08125, 0.05556],
    '931': [0, 0.68333, 0.05764, 0.08334],
    '933': [0, 0.68333, 0.13889, 0.05556],
    '934': [0, 0.68333, 0, 0.08334],
    '936': [0, 0.68333, 0.11, 0.05556],
    '937': [0, 0.68333, 0.05017, 0.08334],
    '945': [0, 0.43056, 0.0037, 0.02778],
    '946': [0.19444, 0.69444, 0.05278, 0.08334],
    '947': [0.19444, 0.43056, 0.05556, 0],
    '948': [0, 0.69444, 0.03785, 0.05556],
    '949': [0, 0.43056, 0, 0.08334],
    '950': [0.19444, 0.69444, 0.07378, 0.08334],
    '951': [0.19444, 0.43056, 0.03588, 0.05556],
    '952': [0, 0.69444, 0.02778, 0.08334],
    '953': [0, 0.43056, 0, 0.05556],
    '954': [0, 0.43056, 0, 0],
    '955': [0, 0.69444, 0, 0],
    '956': [0.19444, 0.43056, 0, 0.02778],
    '957': [0, 0.43056, 0.06366, 0.02778],
    '958': [0.19444, 0.69444, 0.04601, 0.11111],
    '959': [0, 0.43056, 0, 0.05556],
    '960': [0, 0.43056, 0.03588, 0],
    '961': [0.19444, 0.43056, 0, 0.08334],
    '962': [0.09722, 0.43056, 0.07986, 0.08334],
    '963': [0, 0.43056, 0.03588, 0],
    '964': [0, 0.43056, 0.1132, 0.02778],
    '965': [0, 0.43056, 0.03588, 0.02778],
    '966': [0.19444, 0.43056, 0, 0.08334],
    '967': [0.19444, 0.43056, 0, 0.05556],
    '968': [0.19444, 0.69444, 0.03588, 0.11111],
    '969': [0, 0.43056, 0.03588, 0],
    '977': [0, 0.69444, 0, 0.08334],
    '981': [0.19444, 0.69444, 0, 0.08334],
    '982': [0, 0.43056, 0.02778, 0],
    '1009': [0.19444, 0.43056, 0, 0.08334],
    '1013': [0, 0.43056, 0, 0.05556]
  },
  'SansSerif-Regular': {
    '33': [0, 0.69444, 0, 0],
    '34': [0, 0.69444, 0, 0],
    '35': [0.19444, 0.69444, 0, 0],
    '36': [0.05556, 0.75, 0, 0],
    '37': [0.05556, 0.75, 0, 0],
    '38': [0, 0.69444, 0, 0],
    '39': [0, 0.69444, 0, 0],
    '40': [0.25, 0.75, 0, 0],
    '41': [0.25, 0.75, 0, 0],
    '42': [0, 0.75, 0, 0],
    '43': [0.08333, 0.58333, 0, 0],
    '44': [0.125, 0.08333, 0, 0],
    '45': [0, 0.44444, 0, 0],
    '46': [0, 0.08333, 0, 0],
    '47': [0.25, 0.75, 0, 0],
    '48': [0, 0.65556, 0, 0],
    '49': [0, 0.65556, 0, 0],
    '50': [0, 0.65556, 0, 0],
    '51': [0, 0.65556, 0, 0],
    '52': [0, 0.65556, 0, 0],
    '53': [0, 0.65556, 0, 0],
    '54': [0, 0.65556, 0, 0],
    '55': [0, 0.65556, 0, 0],
    '56': [0, 0.65556, 0, 0],
    '57': [0, 0.65556, 0, 0],
    '58': [0, 0.44444, 0, 0],
    '59': [0.125, 0.44444, 0, 0],
    '61': [-0.13, 0.37, 0, 0],
    '63': [0, 0.69444, 0, 0],
    '64': [0, 0.69444, 0, 0],
    '65': [0, 0.69444, 0, 0],
    '66': [0, 0.69444, 0, 0],
    '67': [0, 0.69444, 0, 0],
    '68': [0, 0.69444, 0, 0],
    '69': [0, 0.69444, 0, 0],
    '70': [0, 0.69444, 0, 0],
    '71': [0, 0.69444, 0, 0],
    '72': [0, 0.69444, 0, 0],
    '73': [0, 0.69444, 0, 0],
    '74': [0, 0.69444, 0, 0],
    '75': [0, 0.69444, 0, 0],
    '76': [0, 0.69444, 0, 0],
    '77': [0, 0.69444, 0, 0],
    '78': [0, 0.69444, 0, 0],
    '79': [0, 0.69444, 0, 0],
    '80': [0, 0.69444, 0, 0],
    '81': [0.125, 0.69444, 0, 0],
    '82': [0, 0.69444, 0, 0],
    '83': [0, 0.69444, 0, 0],
    '84': [0, 0.69444, 0, 0],
    '85': [0, 0.69444, 0, 0],
    '86': [0, 0.69444, 0.01389, 0],
    '87': [0, 0.69444, 0.01389, 0],
    '88': [0, 0.69444, 0, 0],
    '89': [0, 0.69444, 0.025, 0],
    '90': [0, 0.69444, 0, 0],
    '91': [0.25, 0.75, 0, 0],
    '93': [0.25, 0.75, 0, 0],
    '94': [0, 0.69444, 0, 0],
    '95': [0.35, 0.09444, 0.02778, 0],
    '97': [0, 0.44444, 0, 0],
    '98': [0, 0.69444, 0, 0],
    '99': [0, 0.44444, 0, 0],
    '100': [0, 0.69444, 0, 0],
    '101': [0, 0.44444, 0, 0],
    '102': [0, 0.69444, 0.06944, 0],
    '103': [0.19444, 0.44444, 0.01389, 0],
    '104': [0, 0.69444, 0, 0],
    '105': [0, 0.67937, 0, 0],
    '106': [0.19444, 0.67937, 0, 0],
    '107': [0, 0.69444, 0, 0],
    '108': [0, 0.69444, 0, 0],
    '109': [0, 0.44444, 0, 0],
    '110': [0, 0.44444, 0, 0],
    '111': [0, 0.44444, 0, 0],
    '112': [0.19444, 0.44444, 0, 0],
    '113': [0.19444, 0.44444, 0, 0],
    '114': [0, 0.44444, 0.01389, 0],
    '115': [0, 0.44444, 0, 0],
    '116': [0, 0.57143, 0, 0],
    '117': [0, 0.44444, 0, 0],
    '118': [0, 0.44444, 0.01389, 0],
    '119': [0, 0.44444, 0.01389, 0],
    '120': [0, 0.44444, 0, 0],
    '121': [0.19444, 0.44444, 0.01389, 0],
    '122': [0, 0.44444, 0, 0],
    '126': [0.35, 0.32659, 0, 0],
    '305': [0, 0.44444, 0, 0],
    '567': [0.19444, 0.44444, 0, 0],
    '768': [0, 0.69444, 0, 0],
    '769': [0, 0.69444, 0, 0],
    '770': [0, 0.69444, 0, 0],
    '771': [0, 0.67659, 0, 0],
    '772': [0, 0.60889, 0, 0],
    '774': [0, 0.69444, 0, 0],
    '775': [0, 0.67937, 0, 0],
    '776': [0, 0.67937, 0, 0],
    '778': [0, 0.69444, 0, 0],
    '779': [0, 0.69444, 0, 0],
    '780': [0, 0.63194, 0, 0],
    '915': [0, 0.69444, 0, 0],
    '916': [0, 0.69444, 0, 0],
    '920': [0, 0.69444, 0, 0],
    '923': [0, 0.69444, 0, 0],
    '926': [0, 0.69444, 0, 0],
    '928': [0, 0.69444, 0, 0],
    '931': [0, 0.69444, 0, 0],
    '933': [0, 0.69444, 0, 0],
    '934': [0, 0.69444, 0, 0],
    '936': [0, 0.69444, 0, 0],
    '937': [0, 0.69444, 0, 0],
    '8211': [0, 0.44444, 0.02778, 0],
    '8212': [0, 0.44444, 0.02778, 0],
    '8216': [0, 0.69444, 0, 0],
    '8217': [0, 0.69444, 0, 0],
    '8220': [0, 0.69444, 0, 0],
    '8221': [0, 0.69444, 0, 0]
  },
  'Script-Regular': {
    '65': [0, 0.7, 0.22925, 0],
    '66': [0, 0.7, 0.04087, 0],
    '67': [0, 0.7, 0.1689, 0],
    '68': [0, 0.7, 0.09371, 0],
    '69': [0, 0.7, 0.18583, 0],
    '70': [0, 0.7, 0.13634, 0],
    '71': [0, 0.7, 0.17322, 0],
    '72': [0, 0.7, 0.29694, 0],
    '73': [0, 0.7, 0.19189, 0],
    '74': [0.27778, 0.7, 0.19189, 0],
    '75': [0, 0.7, 0.31259, 0],
    '76': [0, 0.7, 0.19189, 0],
    '77': [0, 0.7, 0.15981, 0],
    '78': [0, 0.7, 0.3525, 0],
    '79': [0, 0.7, 0.08078, 0],
    '80': [0, 0.7, 0.08078, 0],
    '81': [0, 0.7, 0.03305, 0],
    '82': [0, 0.7, 0.06259, 0],
    '83': [0, 0.7, 0.19189, 0],
    '84': [0, 0.7, 0.29087, 0],
    '85': [0, 0.7, 0.25815, 0],
    '86': [0, 0.7, 0.27523, 0],
    '87': [0, 0.7, 0.27523, 0],
    '88': [0, 0.7, 0.26006, 0],
    '89': [0, 0.7, 0.2939, 0],
    '90': [0, 0.7, 0.24037, 0]
  },
  'Size1-Regular': {
    '40': [0.35001, 0.85, 0, 0],
    '41': [0.35001, 0.85, 0, 0],
    '47': [0.35001, 0.85, 0, 0],
    '91': [0.35001, 0.85, 0, 0],
    '92': [0.35001, 0.85, 0, 0],
    '93': [0.35001, 0.85, 0, 0],
    '123': [0.35001, 0.85, 0, 0],
    '125': [0.35001, 0.85, 0, 0],
    '710': [0, 0.72222, 0, 0],
    '732': [0, 0.72222, 0, 0],
    '770': [0, 0.72222, 0, 0],
    '771': [0, 0.72222, 0, 0],
    '8214': [-0.00099, 0.601, 0, 0],
    '8593': [1e-05, 0.6, 0, 0],
    '8595': [1e-05, 0.6, 0, 0],
    '8657': [1e-05, 0.6, 0, 0],
    '8659': [1e-05, 0.6, 0, 0],
    '8719': [0.25001, 0.75, 0, 0],
    '8720': [0.25001, 0.75, 0, 0],
    '8721': [0.25001, 0.75, 0, 0],
    '8730': [0.35001, 0.85, 0, 0],
    '8739': [-0.00599, 0.606, 0, 0],
    '8741': [-0.00599, 0.606, 0, 0],
    '8747': [0.30612, 0.805, 0.19445, 0],
    '8748': [0.306, 0.805, 0.19445, 0],
    '8749': [0.306, 0.805, 0.19445, 0],
    '8750': [0.30612, 0.805, 0.19445, 0],
    '8896': [0.25001, 0.75, 0, 0],
    '8897': [0.25001, 0.75, 0, 0],
    '8898': [0.25001, 0.75, 0, 0],
    '8899': [0.25001, 0.75, 0, 0],
    '8968': [0.35001, 0.85, 0, 0],
    '8969': [0.35001, 0.85, 0, 0],
    '8970': [0.35001, 0.85, 0, 0],
    '8971': [0.35001, 0.85, 0, 0],
    '9168': [-0.00099, 0.601, 0, 0],
    '10216': [0.35001, 0.85, 0, 0],
    '10217': [0.35001, 0.85, 0, 0],
    '10752': [0.25001, 0.75, 0, 0],
    '10753': [0.25001, 0.75, 0, 0],
    '10754': [0.25001, 0.75, 0, 0],
    '10756': [0.25001, 0.75, 0, 0],
    '10758': [0.25001, 0.75, 0, 0]
  },
  'Size2-Regular': {
    '40': [0.65002, 1.15, 0, 0],
    '41': [0.65002, 1.15, 0, 0],
    '47': [0.65002, 1.15, 0, 0],
    '91': [0.65002, 1.15, 0, 0],
    '92': [0.65002, 1.15, 0, 0],
    '93': [0.65002, 1.15, 0, 0],
    '123': [0.65002, 1.15, 0, 0],
    '125': [0.65002, 1.15, 0, 0],
    '710': [0, 0.75, 0, 0],
    '732': [0, 0.75, 0, 0],
    '770': [0, 0.75, 0, 0],
    '771': [0, 0.75, 0, 0],
    '8719': [0.55001, 1.05, 0, 0],
    '8720': [0.55001, 1.05, 0, 0],
    '8721': [0.55001, 1.05, 0, 0],
    '8730': [0.65002, 1.15, 0, 0],
    '8747': [0.86225, 1.36, 0.44445, 0],
    '8748': [0.862, 1.36, 0.44445, 0],
    '8749': [0.862, 1.36, 0.44445, 0],
    '8750': [0.86225, 1.36, 0.44445, 0],
    '8896': [0.55001, 1.05, 0, 0],
    '8897': [0.55001, 1.05, 0, 0],
    '8898': [0.55001, 1.05, 0, 0],
    '8899': [0.55001, 1.05, 0, 0],
    '8968': [0.65002, 1.15, 0, 0],
    '8969': [0.65002, 1.15, 0, 0],
    '8970': [0.65002, 1.15, 0, 0],
    '8971': [0.65002, 1.15, 0, 0],
    '10216': [0.65002, 1.15, 0, 0],
    '10217': [0.65002, 1.15, 0, 0],
    '10752': [0.55001, 1.05, 0, 0],
    '10753': [0.55001, 1.05, 0, 0],
    '10754': [0.55001, 1.05, 0, 0],
    '10756': [0.55001, 1.05, 0, 0],
    '10758': [0.55001, 1.05, 0, 0]
  },
  'Size3-Regular': {
    '40': [0.95003, 1.45, 0, 0],
    '41': [0.95003, 1.45, 0, 0],
    '47': [0.95003, 1.45, 0, 0],
    '91': [0.95003, 1.45, 0, 0],
    '92': [0.95003, 1.45, 0, 0],
    '93': [0.95003, 1.45, 0, 0],
    '123': [0.95003, 1.45, 0, 0],
    '125': [0.95003, 1.45, 0, 0],
    '710': [0, 0.75, 0, 0],
    '732': [0, 0.75, 0, 0],
    '770': [0, 0.75, 0, 0],
    '771': [0, 0.75, 0, 0],
    '8730': [0.95003, 1.45, 0, 0],
    '8968': [0.95003, 1.45, 0, 0],
    '8969': [0.95003, 1.45, 0, 0],
    '8970': [0.95003, 1.45, 0, 0],
    '8971': [0.95003, 1.45, 0, 0],
    '10216': [0.95003, 1.45, 0, 0],
    '10217': [0.95003, 1.45, 0, 0]
  },
  'Size4-Regular': {
    '40': [1.25003, 1.75, 0, 0],
    '41': [1.25003, 1.75, 0, 0],
    '47': [1.25003, 1.75, 0, 0],
    '91': [1.25003, 1.75, 0, 0],
    '92': [1.25003, 1.75, 0, 0],
    '93': [1.25003, 1.75, 0, 0],
    '123': [1.25003, 1.75, 0, 0],
    '125': [1.25003, 1.75, 0, 0],
    '710': [0, 0.825, 0, 0],
    '732': [0, 0.825, 0, 0],
    '770': [0, 0.825, 0, 0],
    '771': [0, 0.825, 0, 0],
    '8730': [1.25003, 1.75, 0, 0],
    '8968': [1.25003, 1.75, 0, 0],
    '8969': [1.25003, 1.75, 0, 0],
    '8970': [1.25003, 1.75, 0, 0],
    '8971': [1.25003, 1.75, 0, 0],
    '9115': [0.64502, 1.155, 0, 0],
    '9116': [1e-05, 0.6, 0, 0],
    '9117': [0.64502, 1.155, 0, 0],
    '9118': [0.64502, 1.155, 0, 0],
    '9119': [1e-05, 0.6, 0, 0],
    '9120': [0.64502, 1.155, 0, 0],
    '9121': [0.64502, 1.155, 0, 0],
    '9122': [-0.00099, 0.601, 0, 0],
    '9123': [0.64502, 1.155, 0, 0],
    '9124': [0.64502, 1.155, 0, 0],
    '9125': [-0.00099, 0.601, 0, 0],
    '9126': [0.64502, 1.155, 0, 0],
    '9127': [1e-05, 0.9, 0, 0],
    '9128': [0.65002, 1.15, 0, 0],
    '9129': [0.90001, 0, 0, 0],
    '9130': [0, 0.3, 0, 0],
    '9131': [1e-05, 0.9, 0, 0],
    '9132': [0.65002, 1.15, 0, 0],
    '9133': [0.90001, 0, 0, 0],
    '9143': [0.88502, 0.915, 0, 0],
    '10216': [1.25003, 1.75, 0, 0],
    '10217': [1.25003, 1.75, 0, 0],
    '57344': [-0.00499, 0.605, 0, 0],
    '57345': [-0.00499, 0.605, 0, 0],
    '57680': [0, 0.12, 0, 0],
    '57681': [0, 0.12, 0, 0],
    '57682': [0, 0.12, 0, 0],
    '57683': [0, 0.12, 0, 0]
  },
  'Typewriter-Regular': {
    '33': [0, 0.61111, 0, 0],
    '34': [0, 0.61111, 0, 0],
    '35': [0, 0.61111, 0, 0],
    '36': [0.08333, 0.69444, 0, 0],
    '37': [0.08333, 0.69444, 0, 0],
    '38': [0, 0.61111, 0, 0],
    '39': [0, 0.61111, 0, 0],
    '40': [0.08333, 0.69444, 0, 0],
    '41': [0.08333, 0.69444, 0, 0],
    '42': [0, 0.52083, 0, 0],
    '43': [-0.08056, 0.53055, 0, 0],
    '44': [0.13889, 0.125, 0, 0],
    '45': [-0.08056, 0.53055, 0, 0],
    '46': [0, 0.125, 0, 0],
    '47': [0.08333, 0.69444, 0, 0],
    '48': [0, 0.61111, 0, 0],
    '49': [0, 0.61111, 0, 0],
    '50': [0, 0.61111, 0, 0],
    '51': [0, 0.61111, 0, 0],
    '52': [0, 0.61111, 0, 0],
    '53': [0, 0.61111, 0, 0],
    '54': [0, 0.61111, 0, 0],
    '55': [0, 0.61111, 0, 0],
    '56': [0, 0.61111, 0, 0],
    '57': [0, 0.61111, 0, 0],
    '58': [0, 0.43056, 0, 0],
    '59': [0.13889, 0.43056, 0, 0],
    '60': [-0.05556, 0.55556, 0, 0],
    '61': [-0.19549, 0.41562, 0, 0],
    '62': [-0.05556, 0.55556, 0, 0],
    '63': [0, 0.61111, 0, 0],
    '64': [0, 0.61111, 0, 0],
    '65': [0, 0.61111, 0, 0],
    '66': [0, 0.61111, 0, 0],
    '67': [0, 0.61111, 0, 0],
    '68': [0, 0.61111, 0, 0],
    '69': [0, 0.61111, 0, 0],
    '70': [0, 0.61111, 0, 0],
    '71': [0, 0.61111, 0, 0],
    '72': [0, 0.61111, 0, 0],
    '73': [0, 0.61111, 0, 0],
    '74': [0, 0.61111, 0, 0],
    '75': [0, 0.61111, 0, 0],
    '76': [0, 0.61111, 0, 0],
    '77': [0, 0.61111, 0, 0],
    '78': [0, 0.61111, 0, 0],
    '79': [0, 0.61111, 0, 0],
    '80': [0, 0.61111, 0, 0],
    '81': [0.13889, 0.61111, 0, 0],
    '82': [0, 0.61111, 0, 0],
    '83': [0, 0.61111, 0, 0],
    '84': [0, 0.61111, 0, 0],
    '85': [0, 0.61111, 0, 0],
    '86': [0, 0.61111, 0, 0],
    '87': [0, 0.61111, 0, 0],
    '88': [0, 0.61111, 0, 0],
    '89': [0, 0.61111, 0, 0],
    '90': [0, 0.61111, 0, 0],
    '91': [0.08333, 0.69444, 0, 0],
    '92': [0.08333, 0.69444, 0, 0],
    '93': [0.08333, 0.69444, 0, 0],
    '94': [0, 0.61111, 0, 0],
    '95': [0.09514, 0, 0, 0],
    '96': [0, 0.61111, 0, 0],
    '97': [0, 0.43056, 0, 0],
    '98': [0, 0.61111, 0, 0],
    '99': [0, 0.43056, 0, 0],
    '100': [0, 0.61111, 0, 0],
    '101': [0, 0.43056, 0, 0],
    '102': [0, 0.61111, 0, 0],
    '103': [0.22222, 0.43056, 0, 0],
    '104': [0, 0.61111, 0, 0],
    '105': [0, 0.61111, 0, 0],
    '106': [0.22222, 0.61111, 0, 0],
    '107': [0, 0.61111, 0, 0],
    '108': [0, 0.61111, 0, 0],
    '109': [0, 0.43056, 0, 0],
    '110': [0, 0.43056, 0, 0],
    '111': [0, 0.43056, 0, 0],
    '112': [0.22222, 0.43056, 0, 0],
    '113': [0.22222, 0.43056, 0, 0],
    '114': [0, 0.43056, 0, 0],
    '115': [0, 0.43056, 0, 0],
    '116': [0, 0.55358, 0, 0],
    '117': [0, 0.43056, 0, 0],
    '118': [0, 0.43056, 0, 0],
    '119': [0, 0.43056, 0, 0],
    '120': [0, 0.43056, 0, 0],
    '121': [0.22222, 0.43056, 0, 0],
    '122': [0, 0.43056, 0, 0],
    '123': [0.08333, 0.69444, 0, 0],
    '124': [0.08333, 0.69444, 0, 0],
    '125': [0.08333, 0.69444, 0, 0],
    '126': [0, 0.61111, 0, 0],
    '127': [0, 0.61111, 0, 0],
    '305': [0, 0.43056, 0, 0],
    '567': [0.22222, 0.43056, 0, 0],
    '768': [0, 0.61111, 0, 0],
    '769': [0, 0.61111, 0, 0],
    '770': [0, 0.61111, 0, 0],
    '771': [0, 0.61111, 0, 0],
    '772': [0, 0.56555, 0, 0],
    '774': [0, 0.61111, 0, 0],
    '776': [0, 0.61111, 0, 0],
    '778': [0, 0.61111, 0, 0],
    '780': [0, 0.56597, 0, 0],
    '915': [0, 0.61111, 0, 0],
    '916': [0, 0.61111, 0, 0],
    '920': [0, 0.61111, 0, 0],
    '923': [0, 0.61111, 0, 0],
    '926': [0, 0.61111, 0, 0],
    '928': [0, 0.61111, 0, 0],
    '931': [0, 0.61111, 0, 0],
    '933': [0, 0.61111, 0, 0],
    '934': [0, 0.61111, 0, 0],
    '936': [0, 0.61111, 0, 0],
    '937': [0, 0.61111, 0, 0],
    '2018': [0, 0.61111, 0, 0],
    '2019': [0, 0.61111, 0, 0],
    '8242': [0, 0.61111, 0, 0]
  }
});
// CONCATENATED MODULE: ./packages/core/fontMetrics.js
/* eslint no-unused-vars:0 */

/**
 * This module contains metrics regarding fonts and individual symbols. The sigma
 * and xi variables, as well as the metricMap map contain data extracted from
 * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
 * `metrics` variable and the getCharacterMetrics function.
 * @module core/fontMetrics
 * @private
 */
 // This metricMap contains a mapping from font name and character code to character
// metrics, including height, depth, italic correction, and skew (kern from the
// character to the corresponding \skewchar)
// This map is generated via `make metrics`. It should not be changed manually.
// const hangulRegex = /[\uAC00-\uD7AF]/;
// This regex combines
// - Hiragana: [\u3040-\u309F]
// - Katakana: [\u30A0-\u30FF]
// - CJK ideograms: [\u4E00-\u9FAF]
// - Hangul syllables: [\uAC00-\uD7AF]
// Notably missing are half width Katakana and Romaji glyphs.

var cjkRegex = /[\u3040-\u309F]|[\u30A0-\u30FF]|[\u4E00-\u9FAF]|[\uAC00-\uD7AF]/;
/*
 *
 * In TeX, there are actually three sets of dimensions, one for each of
 * textstyle, scriptstyle, and scriptscriptstyle.  These are provided in the
 * the arrays below, in that order.
 *
 * The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respectively.
 * This was determined by running the following script:
 *``` bash
      latex -interaction=nonstopmode \
      '\documentclass{article}\usepackage{amsmath}\begin{document}' \
      '$a$ \expandafter\show\the\textfont2' \
      '\expandafter\show\the\scriptfont2' \
      '\expandafter\show\the\scriptscriptfont2' \
      '\stop'
  ```
 * The metrics themselves were retrieved using the following commands:
 * ``` bash
      tftopl cmsy10
      tftopl cmsy7
      tftopl cmsy5
    ```
 *
 * The output of each of these commands is quite lengthy.  The only part we
 * care about is the FONTDIMEN section. Each value is measured in EMs.
 * @memberof module:fontMetrics
 */

var SIGMAS = {
  slant: [0.250, 0.250, 0.250],
  // sigma1
  space: [0.000, 0.000, 0.000],
  // sigma2
  stretch: [0.000, 0.000, 0.000],
  // sigma3
  shrink: [0.000, 0.000, 0.000],
  // sigma4
  xHeight: [0.431, 0.431, 0.431],
  // sigma5
  quad: [1.000, 1.171, 1.472],
  // sigma6
  extraSpace: [0.000, 0.000, 0.000],
  // sigma7
  num1: [0.677, 0.732, 0.925],
  // sigma8
  num2: [0.394, 0.384, 0.387],
  // sigma9
  num3: [0.444, 0.471, 0.504],
  // sigma10
  denom1: [0.686, 0.752, 1.025],
  // sigma11
  denom2: [0.345, 0.344, 0.532],
  // sigma12
  sup1: [0.413, 0.503, 0.504],
  // sigma13
  sup2: [0.363, 0.431, 0.404],
  // sigma14
  sup3: [0.289, 0.286, 0.294],
  // sigma15
  sub1: [0.150, 0.143, 0.200],
  // sigma16
  sub2: [0.247, 0.286, 0.400],
  // sigma17
  supDrop: [0.386, 0.353, 0.494],
  // sigma18
  subDrop: [0.050, 0.071, 0.100],
  // sigma19
  delim1: [2.390, 1.700, 1.980],
  // sigma20
  delim2: [1.010, 1.157, 1.420],
  // sigma21
  axisHeight: [0.250, 0.250, 0.250] // sigma22

}; // These font metrics are extracted from TeX by using
// \font\a=cmex10
// \showthe\fontdimenX\a
// where X is the corresponding variable number. These correspond to the font
// parameters of the extension fonts (family 3). See the TeXbook, page 441.

var xi1 = 0;
var xi2 = 0;
var xi3 = 0;
var xi4 = 0;
var xi5 = 0.431;
var xi6 = 1;
var xi7 = 0;
var xi8 = 0.04;
var xi9 = 0.111;
var xi10 = 0.166;
var xi11 = 0.2;
var xi12 = 0.6;
var xi13 = 0.1; // This value determines how large a pt is, for metrics which are defined in
// terms of pts.
// This value is also used in katex.less; if you change it make sure the values
// match.

var ptPerEm = 10.0; // The space between adjacent `|` columns in an array definition. From
// article.cls.txt:455

var doubleRuleSep = 2.0 / ptPerEm;
/*
 * This is just a mapping from common names to real metrics
 */

var METRICS = {
  defaultRuleThickness: xi8,
  bigOpSpacing1: xi9,
  bigOpSpacing2: xi10,
  bigOpSpacing3: xi11,
  bigOpSpacing4: xi12,
  bigOpSpacing5: xi13,
  ptPerEm: ptPerEm,
  pxPerEm: ptPerEm * 4.0 / 3.0,
  // A CSS pt is fixed at 1.333px
  doubleRuleSep: 2.0 / ptPerEm,
  arraycolsep: 5.0 / ptPerEm,
  baselineskip: 12.0 / ptPerEm,
  arrayrulewidth: 0.4 / ptPerEm,
  fboxsep: 3 / ptPerEm,
  // From letter.dtx:1626
  fboxrule: 0.4 / ptPerEm // From letter.dtx:1627

}; // These are very rough approximations.  We default to Times New Roman which
// should have Latin-1 and Cyrillic characters, but may not depending on the
// operating system.  The metrics do not account for extra height from the
// accents.  In the case of Cyrillic characters which have both ascenders and
// descenders we prefer approximations with ascenders, primarily to prevent
// the fraction bar or root line from intersecting the glyph.
// TODO(kevinb) allow union of multiple glyph metrics for better accuracy.

var extraCharacterMap = {
  "\xA0": " ",
  // NON-BREAKING SPACE is like space
  "\u200B": " ",
  // ZERO WIDTH SPACE is like space
  // Latin-1
  'Å': 'A',
  'Ç': 'C',
  'Ð': 'D',
  'Þ': 'o',
  'å': 'a',
  'ç': 'c',
  'ð': 'd',
  'þ': 'o',
  // Cyrillic
  'А': 'A',
  'Б': 'B',
  'В': 'B',
  'Г': 'F',
  'Д': 'A',
  'Е': 'E',
  'Ж': 'K',
  'З': '3',
  'И': 'N',
  'Й': 'N',
  'К': 'K',
  'Л': 'N',
  'М': 'M',
  'Н': 'H',
  'О': 'O',
  'П': 'N',
  'Р': 'P',
  'С': 'C',
  'Т': 'T',
  'У': 'y',
  'Ф': 'O',
  'Х': 'X',
  'Ц': 'U',
  'Ч': 'h',
  'Ш': 'W',
  'Щ': 'W',
  'Ъ': 'B',
  'Ы': 'X',
  'Ь': 'B',
  'Э': '3',
  'Ю': 'X',
  'Я': 'R',
  'а': 'a',
  'б': 'b',
  'в': 'a',
  'г': 'r',
  'д': 'y',
  'е': 'e',
  'ж': 'm',
  'з': 'e',
  'и': 'n',
  'й': 'n',
  'к': 'n',
  'л': 'n',
  'м': 'm',
  'н': 'n',
  'о': 'o',
  'п': 'n',
  'р': 'p',
  'с': 'c',
  'т': 'o',
  'у': 'y',
  'ф': 'b',
  'х': 'x',
  'ц': 'n',
  'ч': 'n',
  'ш': 'w',
  'щ': 'w',
  'ъ': 'a',
  'ы': 'm',
  'ь': 'a',
  'э': 'e',
  'ю': 'm',
  'я': 'r'
};
/**
 * This function is a convenience function for looking up information in the
 * metricMap table. It takes a character as a string, and a font name.
 *
 * Note: the `width` property may be undefined if fontMetricsData.js wasn't
 * built using `Make extended_metrics`.
 * @param {string} character
 * @param {string} fontCode
 * @memberof module:fontMetrics
 * @private
 */

var fontMetrics_getCharacterMetrics = function getCharacterMetrics(character, fontCode) {
  var fontName = {
    'cal': 'Caligraphic-Regular',
    'ams': 'AMS-Regular',
    'frak': 'Fraktur-Regular',
    'bb': 'AMS-Regular',
    'scr': 'Script-Regular',
    'cmr': 'Main-Regular',
    'cmtt': 'Typewriter-Regular',
    'cmss': 'SansSerif-Regular'
  }[fontCode] || fontCode; // console.assert(character.length === 1);
  // console.assert(metricMap[fontName], 'Unknown font "' + fontName + '"');

  var ch = character.charCodeAt(0);

  if (character[0] in extraCharacterMap) {
    ch = extraCharacterMap[character[0]].charCodeAt(0);
  } else if (cjkRegex.test(character[0])) {
    ch = 77; // 'M'.charCodeAt(0);
  }

  var metrics = fontMetricsData[fontName][ch];

  if (!metrics) {
    // console.warn(
    //     'No metrics for ' +
    //     '"' + character + '" (U+' + ('000000' + ch.toString(16)).substr(-6) + ')' +
    //     ' in font "' + fontName + '"');
    // Assume default values.
    // depth + height should be less than 1.0 em
    return {
      defaultMetrics: true,
      depth: .20,
      height: .70,
      italic: 0,
      skew: 0
    };
  }

  if (metrics) {
    return {
      depth: metrics[0],
      height: metrics[1],
      italic: metrics[2],
      skew: metrics[3]
    };
  }

  return null;
};
/**
 *
 * @param {number|string} value If value is a string, it may be suffixed
 * with a unit, which will override the `unit` paramter
 * @param {string} unit
 * @param {number} precision
 * @private
 */


function convertDimenToEm(value, unit, precision) {
  if (typeof value === 'string') {
    var m = value.match(/([-+]?[0-9.]*)\s*([a-zA-Z]+)/);

    if (!m) {
      value = parseFloat(value);
    } else {
      value = parseFloat(m[1]);
      unit = m[2].toLowerCase();
    }
  } // If the units are missing, TeX assumes 'pt'


  var f = {
    'pt': 1.0,
    'mm': 7227 / 2540,
    'cm': 7227 / 254,
    'ex': 35271 / 8192,
    'px': 3.0 / 4.0,
    'em': METRICS.ptPerEm,
    'bp': 803 / 800,
    'dd': 1238 / 1157,
    'pc': 12.0,
    'in': 72.27,
    'mu': 10 / 18
  }[unit] || 1.0;

  if (isFinite(precision)) {
    var factor = Math.pow(10, precision);
    return Math.round(value / METRICS.ptPerEm * f * factor) / factor;
  }

  return value / METRICS.ptPerEm * f;
}

function convertDimenToPx(value, unit) {
  return convertDimenToEm(value, unit) * (4.0 / 3.0) * METRICS.ptPerEm;
}

/* harmony default export */ var fontMetrics = ({
  toEm: convertDimenToEm,
  toPx: convertDimenToPx,
  METRICS: METRICS,
  SIGMAS: SIGMAS,
  getCharacterMetrics: fontMetrics_getCharacterMetrics
});
// CONCATENATED MODULE: ./packages/core/mathstyle.js
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function mathstyle_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function mathstyle_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function mathstyle_createClass(Constructor, protoProps, staticProps) { if (protoProps) mathstyle_defineProperties(Constructor.prototype, protoProps); if (staticProps) mathstyle_defineProperties(Constructor, staticProps); return Constructor; }

/**
 * This file contains information and classes for the various kinds of styles
 * used in TeX, such as:
 * - `textstyle`: used for math that is displayed inline
 * - `scriptstyle`: used for math displayed in a superscript or subscript
 * - `scriptscriptstyle`: used for math displayed in the superscript or subscript
 * of a superscript or subscript.
 *
 * It provides a generic {@linkcode module:core/mathstyle#Mathstyle Mathstyle}
 * class which holds information about a specific style.
 *
 * It also provides instances of all the different kinds
 * of styles possible, and provides functions to move between them and get
 * information about them.
 * @module core/mathstyle
 * @private
 */

var mathstyle_metrics = [{}, {}, {}];
/* textstyle, scriptstyle, scriptscriptstyle */

var mathstyle_i;

for (var mathstyle_key in SIGMAS) {
  if (Object.prototype.hasOwnProperty.call(SIGMAS, mathstyle_key)) {
    for (mathstyle_i = 0; mathstyle_i < 3; mathstyle_i++) {
      mathstyle_metrics[mathstyle_i][mathstyle_key] = SIGMAS[mathstyle_key][mathstyle_i];
    }
  }
}

for (mathstyle_i = 0; mathstyle_i < 3; mathstyle_i++) {
  mathstyle_metrics[mathstyle_i].emPerEx = SIGMAS.xHeight[mathstyle_i] / SIGMAS.quad[mathstyle_i];
}
/**
 * @property {number} id unique id for the style
 * @property {number} size (which is the same for cramped and uncramped version
 * of a style)
 * @property {number}  size multiplier, which gives the size difference between
 * a style and textstyle.
 * @property {boolean}  cramped flag
 * @memberof module:core/mathstyle
 * @class module:core/mathstyle#Mathstyle
 * @private
 */


var Mathstyle =
/*#__PURE__*/
function () {
  function Mathstyle(id, size, multiplier, cramped) {
    mathstyle_classCallCheck(this, Mathstyle);

    this.id = id;
    this.size = size;
    this.cramped = cramped;
    this.sizeMultiplier = multiplier;
    this.metrics = mathstyle_metrics[size > 0 ? size - 1 : 0];
  }
  /**
   * Get the style of a superscript given a base in the current style.
   * @method module:mathstyle.MathStyle#sup
   * @private
   */


  mathstyle_createClass(Mathstyle, [{
    key: "sup",
    value: function sup() {
      return mathstyle_styles[mathstyle_sup[this.id]];
    }
    /**
     * Get the style of a subscript given a base in the current style.
     * @method module:mathstyle.MathStyle#sub
     * @private
     */

  }, {
    key: "sub",
    value: function sub() {
      return mathstyle_styles[mathstyle_sub[this.id]];
    }
    /**
     * Get the style of a fraction numerator given the fraction in the current
     * style.
     * @method module:mathstyle.MathStyle#fracNum
     * @private
     */

  }, {
    key: "fracNum",
    value: function fracNum() {
      return mathstyle_styles[_fracNum[this.id]];
    }
    /**
     * Get the style of a fraction denominator given the fraction in the current
     * style.
     * @method module:mathstyle.MathStyle#fracDen
     * @private
     */

  }, {
    key: "fracDen",
    value: function fracDen() {
      return mathstyle_styles[_fracDen[this.id]];
    }
    /**
     * Get the cramped version of a style (in particular, cramping a cramped style
     * doesn't change the style).
     * @method module:mathstyle.MathStyle#cramp
     * @private
     */

  }, {
    key: "cramp",
    value: function cramp() {
      return mathstyle_styles[_cramp[this.id]];
    }
    /**
     * HTML class name, like `displaystyle cramped`
     * @method module:mathstyle.MathStyle#cls
     * @private
     */

  }, {
    key: "cls",
    value: function cls() {
      return sizeNames[this.size];
    }
    /**
     * HTML Reset class name, like 'reset-textstyle'
     * @method module:mathstyle.MathStyle#adjustTo
     * @private
     */

  }, {
    key: "adjustTo",
    value: function adjustTo(newStyle) {
      var result = ADJUST_NAMES[this.size][newStyle.size];
      if (result.length > 0) result = ' ' + result;
      return result;
    }
    /**
     * Return if this style is tightly spaced (scriptstyle/scriptscriptstyle)
     * @method module:mathstyle.MathStyle#isTight
     * @private
     */

  }, {
    key: "isTight",
    value: function isTight() {
      return this.size >= 2;
    }
  }]);

  return Mathstyle;
}(); // IDs of the different styles


var D = 0;
var Dc = 1;
var mathstyle_T = 2;
var Tc = 3;
var S = 4;
var Sc = 5;
var SS = 6;
var SSc = 7; // Instances of the different styles

var mathstyle_styles = [new Mathstyle(D, 0, 1.0, false), new Mathstyle(Dc, 0, 1.0, true), new Mathstyle(mathstyle_T, 1, 1.0, false), new Mathstyle(Tc, 1, 1.0, true), new Mathstyle(S, 2, 0.7, false), new Mathstyle(Sc, 2, 0.7, true), new Mathstyle(SS, 3, 0.5, false), new Mathstyle(SSc, 3, 0.5, true)];
/**
 * Maps a string (or a Mathstyle) to an actual Mathstyle object.
 * @param {(Mathstyle|string)} s
 * @return {Mathstyle}
 * @memberof module:mathstyle
 * @private
 */

function toMathstyle(s) {
  if (!s) return s;
  if (_typeof(s) === 'object') return s;
  var STYLE_NAMES = {
    'displaystyle': mathstyle_styles[D],
    'textstyle': mathstyle_styles[mathstyle_T],
    'scriptstyle': mathstyle_styles[S],
    'scriptscriptstyle': mathstyle_styles[SS]
  };
  console.assert(STYLE_NAMES[s], 'unknown style: "', s, '"');
  return STYLE_NAMES[s];
} // String names for the different sizes


var sizeNames = ['displaystyle textstyle', 'textstyle', 'scriptstyle', 'scriptscriptstyle'];
var ADJUST_NAMES = [['', // 'reset-textstyle displaystyle textstyle',
'', // 'reset-textstyle textstyle',
'reset-textstyle scriptstyle', 'reset-textstyle scriptscriptstyle'], ['reset-textstyle displaystyle textstyle', '', // 'reset-textstyle textstyle',
'reset-textstyle scriptstyle', 'reset-textstyle scriptscriptstyle'], ['reset-scriptstyle textstyle displaystyle', 'reset-scriptstyle textstyle', '', // 'reset-scriptstyle scriptstyle',
'reset-scriptstyle scriptscriptstyle'], ['reset-scriptscriptstyle textstyle displaystyle', 'reset-scriptscriptstyle textstyle', 'reset-scriptscriptstyle scriptstyle', '' // 'reset-scriptscriptstyle scriptscriptstyle'
]]; // Lookup tables for switching from one style to another

var mathstyle_sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
var mathstyle_sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
var _fracNum = [mathstyle_T, Tc, S, Sc, SS, SSc, SS, SSc];
var _fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
var _cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc]; // We only export some of the styles. Also, we don't export the `Mathstyle`
// class so no more styles can be generated.

/* harmony default export */ var core_mathstyle = ({
  DISPLAY: mathstyle_styles[D],
  TEXT: mathstyle_styles[mathstyle_T],
  SCRIPT: mathstyle_styles[S],
  SCRIPTSCRIPT: mathstyle_styles[SS],
  toMathstyle: toMathstyle
});
// CONCATENATED MODULE: ./packages/core/context.js
function context_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function context_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function context_createClass(Constructor, protoProps, staticProps) { if (protoProps) context_defineProperties(Constructor.prototype, protoProps); if (staticProps) context_defineProperties(Constructor, staticProps); return Constructor; }


/**
 * This class contains the rendering context of the current parse level.
 *
 * It also holds information about the parent context to handle scaling
 * adjustments.
 *
 * When a new scope is entered, a clone of the context is created with `.clone()`
 * so that any further changes remain local to the scope.
 *
 * A scope is defined for example by:
 * - an explicit group enclosed in braces `{...}`
 * - a semi-simple group enclosed in `\bgroup...\endgroup`
 * - an environment delimited by `\begin{<envname>}...\end{<envname>}`
 *
 * @property {string} mathstyle `'text'` (aka 'inline'), `'display'`,
 * `'script'` or `'scriptscript'`
 * @property {number} opacity
 * @property {number} size
 * @property {boolean|object} generateID - If true, unique IDs should be
 * generated for each span so they can be mapped back to an atom.
 * Can also be an object with a `seed` field to generate a specific range of
 * IDs. Optionally, if a `groupNumbers` property is set to true, an additional
 * span will enclose strings of digits. This is used by read aloud to properly
 * pronounce (and highlight) numbers in expressions.
 * @property {string} parentMathstyle
 * @property {number} parentSize
 * @property {object} macros A macros dictionary
 *
 * @class Context
 * @global
 * @private
 */

var context_Context =
/*#__PURE__*/
function () {
  function Context(from) {
    context_classCallCheck(this, Context);

    this.macros = from.macros || {};
    this.generateID = from.generateID ? from.generateID : false;
    this.mathstyle = core_mathstyle.toMathstyle(from.mathstyle || 'displaystyle');
    this.size = from.size || 'size5'; // medium size

    this.parentMathstyle = from.parentMathstyle || this.mathstyle;
    this.parentSize = from.parentSize || this.size;
    this.opacity = from.opacity;
  }
  /**
   * Returns a new context with the same properties as 'this'.
   * @return {Context}
   * @memberof Context
   * @instance
   * @private
   */


  context_createClass(Context, [{
    key: "clone",
    value: function clone(override) {
      var result = new Context(this);
      result.parentMathstyle = this.mathstyle;
      result.parentSize = this.size;
      result.macros = this.macros;

      if (override) {
        // `'auto'` (or undefined) to indicate that the mathstyle should in
        // fact not be changed. This is used when specifying the mathstyle
        // for some environments.
        if (override.mathstyle === 'auto' || !override.mathstyle) {
          delete override.mathstyle;
        }

        Object.assign(result, override);

        if (typeof override.mathstyle === 'string') {
          result.mathstyle = core_mathstyle.toMathstyle(override.mathstyle);
        }
      }

      return result;
    }
    /**
     * Change the mathstyle of this context
     * @param {string} value - `'auto'` to indicate that the mathstyle should in
     * fact not be changed. This is used when specifying the mathstyle for some
     * environments.
     * @memberof Context
     * @instance
     * @private
     */

  }, {
    key: "setMathstyle",
    value: function setMathstyle(value) {
      if (value && value !== 'auto') {
        this.mathstyle = core_mathstyle.toMathstyle(value);
      }
    }
  }, {
    key: "cramp",
    value: function cramp() {
      return this.clone({
        'mathstyle': this.mathstyle.cramp()
      });
    }
  }, {
    key: "sup",
    value: function sup() {
      return this.clone({
        'mathstyle': this.mathstyle.sup()
      });
    }
  }, {
    key: "sub",
    value: function sub() {
      return this.clone({
        'mathstyle': this.mathstyle.sup()
      });
    }
  }]);

  return Context;
}();

/* harmony default export */ var core_context = ({
  Context: context_Context
});
// CONCATENATED MODULE: ./packages/core/span.js
function span_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { span_typeof = function _typeof(obj) { return typeof obj; }; } else { span_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return span_typeof(obj); }

function span_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function span_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function span_createClass(Constructor, protoProps, staticProps) { if (protoProps) span_defineProperties(Constructor.prototype, protoProps); if (staticProps) span_defineProperties(Constructor, staticProps); return Constructor; }

/**
 * @module core/span
 * @private
 */

/**
 * Return a string made up of the concatenated arguments.
 * Each arguments can be either a string, which is unchanged,
 * or a number, which is converted to a string with at most 5 fractional digits.
 *
 * @param {(Array.<any>|string|number)} arg
 * @return {string}
 * @memberof module:core/span
 * @private
 */

function span_toString(arg) {
  var result = '';

  if (typeof arg === 'number') {
    result += Math.floor(1e2 * arg) / 1e2;
  } else if (typeof arg === 'string') {
    result += arg;
  } else if (Array.isArray(arg)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = arg[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var elem = _step.value;
        result += span_toString(elem);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } else if (arg) {
    result += arg.toString();
  }

  return result;
} //----------------------------------------------------------------------------
// SPAN
//----------------------------------------------------------------------------

/**
 * A span is the most elementary element that can be rendered.
 * It is composed of an optional body of text and an optional list
 * of children (other spans). Each span can be decorated with
 * CSS classes and style attributes.
 *
 * @param {string|Span|Span[]} content the items 'contained' by this node
 * @param {string} classes list of classes attributes associated with this node
 * @return {void}
 * @class
 * @memberof module:core/span
 * @property {string} type - For example, `'command'`, `'mrel'`, etc...
 * @property {string} classes - A string of space separated CSS classes
 * associated with this element
 * @property {string} cssID - A CSS ID assigned to this span (optional)
 * @property {Span[]} children - An array, potentially empty, of spans which
 * this span encloses
 * @property {string} body - Content of this span. Can be empty.
 * @property {Object.<string, any>} style - A set of key/value pairs specifying CSS properties
 * associated with this element.
 * @property {number} height - The measurement from baseline to top, in em.
 * @property {number} depth - The measurement from baseline to bottom, in em.
 * @private
 */


var span_Span =
/*#__PURE__*/
function () {
  function Span(content, classes) {
    span_classCallCheck(this, Span);

    // CLASSES
    this.classes = classes || ''; // CONTENT

    if (Array.isArray(content)) {
      // Check if isArray first, since an array is also an object
      // Flatten it (i.e. [[a1, a2], b1, b2] -> [a1, a2, b1, b2]
      this.children = [].concat.apply([], content);
    } else if (typeof content === 'string') {
      this.body = content;
    } else if (content && span_typeof(content) === 'object') {
      this.children = [content];
    } // STYLE
    // CSS style, as an array of key value pairs.
    // Use this.setStyle() to modify it.


    this.style = null; // Calculate the dimensions of this span based on its children

    this.updateDimensions();
  }
  /**
   * Update the dimensions of this node based on its children:
   * - height: distance from bottom to top
   * - depth: distance from bottom to baseline
   * - maxFontSize: a size multiplier (typically set with commands such as \huge)
   * @method module:core/span.Span#updateDimensions
   * @private
   */


  span_createClass(Span, [{
    key: "updateDimensions",
    value: function updateDimensions() {
      var height = 0.0;
      var depth = 0.0;
      var maxFontSize = 1.0;

      if (this.children) {
        this.children.forEach(function (x) {
          if (x.height > height) height = x.height;
          if (x.depth > depth) depth = x.depth;
          if (x.maxFontSize > maxFontSize) maxFontSize = x.maxFontSize;
        });
      }

      this.height = height;
      this.depth = depth;
      this.maxFontSize = maxFontSize;
    }
  }, {
    key: "selected",
    value: function selected(isSelected) {
      if (isSelected && !/ML__selected/.test(this.classes)) {
        if (this.classes.length > 0) this.classes += ' ';
        this.classes += 'ML__selected';
      }

      if (!isSelected && /ML__selected/.test(this.classes)) {
        this.classes = this.classes.replace('ML__selected', '');
      }

      if (this.children) {
        this.children.forEach(function (x) {
          return x.selected(isSelected);
        });
      }
    }
    /**
     * @param {object} style A style specification with the following
     * (all optionals) properties, which use the TeX terminology:
     *
     * - fontFamily: cmr, cmss, cmtt, cmsy (symbols), cmex (large symbols),
     *  ptm (times), phv (helvetica), pcr (courier)
     * - fontSeries: m (medium), b (bold), bx (bold extended), sb (semi-bold), c (condensed)
     * - fontShape:          italic, oblique, "roman": n (normal, upright), it, sl, sc
     * - fontSize: 'size1', 'size2'...
     * - color:
     * - background:
     * @private
     */

  }, {
    key: "applyStyle",
    value: function applyStyle(style) {
      if (!style) return;

      if (style.color) {
        if (style.color !== 'none') {
          this.setStyle('color', style.color);
        } else {
          this.setStyle('color', '');
        }
      }

      if (style.backgroundColor) {
        if (style.backgroundColor !== 'none') {
          this.setStyle('background-color', style.backgroundColor);
        } else {
          this.setStyle('background-color', '');
        }
      } //
      // 1. Add any custom style classes
      //


      if (style.cssClass) {
        this.classes += ' ' + style.cssClass;
      } // If the body is null (for example for a line), we're done.


      if (!this.body) return; // Determine the appropriate font (and font-related classes)
      //
      // 2. Determine the font family (i.e. 'amsrm', 'mathit', 'mathcal', etc...)
      //

      var fontFamily = style.fontFamily;

      if (fontFamily === 'math' && style.fontShape === 'n') {
        // 'math' is italic by default. If we need upright, switch to main.
        fontFamily = 'cmr';
      }

      var fontName = 'Main-Regular'; // Default font

      if (fontFamily) {
        fontName = getFontName(this.body, fontFamily);
      } //
      // 3. Determine the classes necessary to represent the series and shape
      //


      if (style.fontShape) {
        this.classes += ' ' + ({
          'it': 'ML__it',
          'sl': 'ML__shape_sl',
          // slanted
          'sc': 'ML__shape_sc',
          // small caps
          'ol': 'ML__shape_ol' // outline

        }[style.fontShape] || '');
      }

      if (style.fontSeries) {
        var m = style.fontSeries.match(/(.?[lbm])?(.?[cx])?/);

        if (m) {
          this.classes += ' ' + ({
            'ul': 'ML__series_ul',
            'el': 'ML__series_el',
            'l': 'ML__series_l',
            'sl': 'ML__series_sl',
            'm': '',
            // medium (default)
            'sb': 'ML__series_sb',
            'b': 'ML__bold',
            'eb': 'ML__series_eb',
            'ub': 'ML__series_ub'
          }[m[1] || ''] || '');
          this.classes += ' ' + ({
            'uc': 'ML__series_uc',
            'ec': 'ML__series_ec',
            'c': 'ML__series_c',
            'sc': 'ML__series_sc',
            'n': '',
            // normal (default)
            'sx': 'ML__series_sx',
            'x': 'ML__series_x',
            'ex': 'ML__series_ex',
            'ux': 'ML__series_ux'
          }[m[2] || ''] || '');
        }
      }

      if (FONT_CLASS[fontFamily]) {
        this.classes += ' ' + FONT_CLASS[fontFamily];
      } else if (fontFamily) {
        // Not a well-known family. Use a style.
        this.setStyle('font-family', fontFamily);
      } //
      // 3. Get the metrics information
      //


      if (this.body && this.body.length > 0 && fontName) {
        this.height = 0.0;
        this.depth = 0.0;
        this.maxFontSize = {
          size1: 0.5,
          size2: 0.7,
          size3: 0.8,
          size4: 0.9,
          size5: 1.0,
          size6: 1.2,
          size7: 1.44,
          size8: 1.73,
          size9: 2.07,
          size10: 2.49
        }[style.fontSize] || 1.0;
        this.skew = 0.0;
        this.italic = 0.0;

        for (var i = 0; i < this.body.length; i++) {
          var metrics = fontMetrics.getCharacterMetrics(this.body.charAt(i), fontName); // If we were able to get metrics info for this character, store it.

          if (metrics) {
            this.height = Math.max(this.height, metrics.height);
            this.depth = Math.max(this.depth, metrics.depth);
            this.skew = metrics.skew;
            this.italic = metrics.italic;
          }
        }
      }
    }
    /**
     * Set the value of a CSS property associated with this span.
     * For example, setStyle('border-right', 5.6, 'em');
     *
     * @param {string} prop the CSS property to set
     * @param {...(string|number)} value a series of strings and numbers that will be concatenated.
     * @return {string}
     * @method module:core/span.Span#setStyle
     * @private
     */

  }, {
    key: "setStyle",
    value: function setStyle(prop) {
      for (var _len = arguments.length, value = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        value[_key - 1] = arguments[_key];
      }

      var v = span_toString(value);

      if (v.length > 0) {
        if (!this.style) this.style = {};
        this.style[prop] = v;
      }
    }
  }, {
    key: "setTop",
    value: function setTop(top) {
      if (top && top !== 0) {
        if (!this.style) this.style = {};
        this.style['top'] = span_toString(top) + 'em';
        this.height -= top;
        this.depth += top;
      }
    }
    /**
     *
     * @param {number} left
     * @private
     */

  }, {
    key: "setLeft",
    value: function setLeft(left) {
      if (left && left !== 0) {
        if (!this.style) this.style = {};
        this.style['margin-left'] = span_toString(left) + 'em';
      }
    }
    /**
     *
     * @param {number} right
     * @private
     */

  }, {
    key: "setRight",
    value: function setRight(right) {
      if (right && right !== 0) {
        if (!this.style) this.style = {};
        this.style['margin-right'] = span_toString(right) + 'em';
      }
    }
  }, {
    key: "setWidth",
    value: function setWidth(width) {
      if (width && width !== 0) {
        if (!this.style) this.style = {};
        this.style['width'] = span_toString(width) + 'em';
      }
    }
  }, {
    key: "addMarginRight",
    value: function addMarginRight(margin) {
      if (margin && margin !== 0) {
        if (!this.style && !/qquad|quad|enspace|thickspace|mediumspace|thinspace|negativethinspace/.test(this.classes)) {
          // Attempt to use a class instead of an explicit margin
          var cls = {
            '2': 'qquad',
            '1': 'quad',
            '.5': 'enspace',
            '0.277778': 'thickspace',
            '0.222222': 'mediumspace',
            '0.166667': 'thinspace',
            '-0.166667': 'negativethinspace'
          }[margin.toString()];

          if (cls) {
            this.classes += ' rspace ' + cls;
            return;
          }
        }

        if (!this.style) this.style = {};
        var currentMargin = parseFloat(this.style['margin-right'] || '0');
        this.style['margin-right'] = span_toString(currentMargin + margin) + 'em';
      }
    }
    /**
     * Generate the HTML markup to represent this span.
     *
     * @param {number} [hskip=0] - Space (in mu, 1/18em) to leave on the left side
     * of the span. Implemented as a Unicode character if possible, a margin-left otherwise.
     * @param {number} [hscale=1.0] - If a value is provided, the margins are scaled by
     * this factor.
     * @return {string} HTML markup
     * @method module:core/span.Span#toMarkup
     * @private
     */

  }, {
    key: "toMarkup",
    value: function toMarkup(hskip, hscale) {
      hskip = hskip || 0;
      hscale = hscale || 1.0;
      var result = '';
      var body = this.body || '';

      if (this.children) {
        var previousType = 'none';
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var child = _step2.value;
            var spacing = 0;

            if (previousType) {
              var type = child.type;

              if (type) {
                if (type === 'textord') type = 'mord';
                if (type === 'first') type = 'none';

                if (child.isTight) {
                  spacing = INTER_ATOM_TIGHT_SPACING[previousType + '+' + type] || 0;
                } else {
                  spacing = INTER_ATOM_SPACING[previousType + '+' + type] || 0;
                }

                spacing = Math.floor(hscale * spacing);
              }
            }

            body += child.toMarkup(spacing, hscale);
            previousType = lastSpanType(child);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      } // Collapse 'empty' spans


      if ((body === "\u200B" || !body) && (!this.classes || this.classes === 'ML__selected')) {
        result = '';
      } else {
        // Note: We can't omit the tag, even if it has no class and no style,
        // as some layouts (vlist) depends on the presence of the tag to function
        result = '<span';

        if (this.cssId) {
          result += ' id="' + this.cssId + '" ';
        }

        if (this.svgOverlay) {
          this.setStyle('position', 'relative');
          this.setStyle('height', this.height + this.depth, 'em');
          this.setStyle('vertical-align', -this.depth, 'em');
        }

        if (this.attributes) {
          for (var attribute in this.attributes) {
            if (Object.prototype.hasOwnProperty.call(this.attributes, attribute)) {
              result += ' ' + attribute + '="' + this.attributes[attribute] + '"';
            }
          }
        }

        var classes = this.classes.split(' '); // Add the type (mbin, mrel, etc...) if specified

        if (this.type) {
          if (/command|placeholder|error/.test(this.type)) {
            classes.push({
              'command': 'ML__command',
              'placeholder': 'ML__placeholder',
              'error': 'ML__error'
            }[this.type]);
          }

          if (this.caret && this.type === 'command') {
            classes.push('ML__command-caret');
          }
        } // Remove duplicate and empty classes


        var classList = '';

        if (classes.length > 1) {
          classList = classes.filter(function (x, e, a) {
            return x.length > 0 && a.indexOf(x) === e;
          }).join(' ');
        } else {
          classList = classes[0];
        }

        if (classList.length > 0) {
          result += ' class="' + classList + '"';
        } // If a `hskip` value was provided, add it to the margin-left


        if (hskip) {
          if (this.style && this.style['margin-left']) {
            // There was already a margin, add to it
            this.style['margin-left'] = span_toString(parseFloat(this.style['margin-left']) + hskip / 18) + 'em';
          } else {
            // No margin yet. Can we encode it as a Unicode space?
            if (hskip < 0 && NEGATIVE_SPACING_CHARACTER[-hskip]) {
              body = NEGATIVE_SPACING_CHARACTER[-hskip] + body;
            } else if (SPACING_CHARACTER[hskip]) {
              body = SPACING_CHARACTER[hskip] + body;
            } else {
              if (!this.style) this.style = {};
              this.style['margin-left'] = span_toString(hskip / 18) + 'em';
            }
          }
        }

        if (this.style) {
          var styleString = '';
          var isSelected = /ML__selected/.test(this.classes);

          for (var style in this.style) {
            if (Object.prototype.hasOwnProperty.call(this.style, style)) {
              // Render the style property, except the background
              // of selected spans
              if (style !== 'background-color' || !isSelected) {
                styleString += style + ':' + this.style[style] + ';';
              }
            }
          }

          if (styleString.length > 0) {
            result += ' style="' + styleString + '"';
          }
        }

        result += '>'; // If there is some SVG markup associated with this span,
        // include it now

        if (this.svgOverlay) {
          result += '<span style="';
          result += 'display: inline-block;';
          result += 'height:' + (this.height + this.depth) + 'em;';
          result += 'vertical-align:' + this.depth + 'em;';
          result += '">';
          result += body;
          result += '</span>';
          result += '<svg '; // result += 'style="position:absolute;left:0;top:0;width:100%;height:100%;z-index:2;';

          result += 'style="position:absolute;';
          result += 'overflow:overlay;';
          result += 'height:' + (this.height + this.depth) + 'em;';
          result += 'transform:translateY(-' + Math.round(fontMetrics.toPx(this.depth, 'em') + fontMetrics.toPx(this.style.padding)) + 'px);';

          if (this.style && this.style.padding) {
            result += 'top:' + this.style.padding + ';';
            result += 'left:' + this.style.padding + ';';
            result += 'width:calc(100% - 2 * ' + this.style.padding + ' );';
          } else {
            result += 'top:0;';
            result += 'left:0;';
            result += 'width:100%;';
          }

          result += 'z-index:2;';
          result += '"';

          if (this.svgStyle) {
            result += ' style="' + this.svgStyle + '"';
          }

          result += '>';
          result += this.svgOverlay;
          result += '</svg>';
        } else {
          result += body;
        }

        result = result + '</span>';
      }

      if (this.caret && this.type !== 'command') {
        if (this.caret === 'text') {
          result = result + '<span class="ML__text-caret"></span>';
        } else {
          result = result + '<span class="ML__caret"></span>';
        }
      }

      return result;
    }
    /**
     * Can this span be coalesced with 'span'?
     * This is used to 'coalesce' (i.e. group together) a series of spans that are
     * identical except for their value, and to avoid generating redundant spans.
     * That is: '12' ->
     *      "<span class='mord mathrm'>12</span>"
     * rather than:
     *      "<span class='mord mathrm'>1</span><span class='mord mathrm'>2</span>"
     * @param {Span} span
     * @return {boolean}
     * @method module:core/span.Span#tryCoalesceWith
     * @private
     */

  }, {
    key: "tryCoalesceWith",
    value: function tryCoalesceWith(span) {
      if (this.tag !== span.tag) return false;
      if (this.type !== span.type) return false; // Don't coalesce consecutive errors or placeholders

      if (this.type === 'error' || this.type === 'placeholder' || this.type === 'command') return false; // If this span or the candidate span have children, we can't
      // coalesce them, but we'll try to coalesce their children

      var hasChildren = this.children && this.children.length > 0;
      var spanHasChildren = span.children && span.children.length > 0;
      if (hasChildren || spanHasChildren) return false; // If they have a different number of styles, can't coalesce

      var thisStyleCount = this.style ? this.style.length : 0;
      var spanStyleCount = span.style ? span.style.length : 0;
      if (thisStyleCount !== spanStyleCount) return false; // For the purpose of our comparison,
      // any 'empty' classes (whitespace)

      var classes = this.classes.trim().replace(/\s+/g, ' ').split(' ');
      var spanClasses = span.classes.trim().replace(/\s+/g, ' ').split(' '); // If they have a different number of classes, can't coalesce

      if (classes.length !== spanClasses.length) return false; // OK, let's do the more expensive comparison now.
      // If they have different classes, can't coalesce

      classes.sort();
      spanClasses.sort();

      for (var i = 0; i < classes.length; i++) {
        // Don't coalesce vertical separators
        // (used in column formating with {l||r} for example
        if (classes[i] === 'vertical-separator') return false;
        if (classes[i] !== spanClasses[i]) return false;
      } // If the styles are different, can't coalesce


      if (this.style && span.style) {
        for (var style in this.style) {
          if (Object.prototype.hasOwnProperty.call(this.style, style) && Object.prototype.hasOwnProperty.call(span.style, style)) {
            if (this.style[style] !== span.style[style]) return false;
          }
        }
      } // OK, the attributes of those spans are compatible.
      // Merge span into this


      this.body += span.body;
      this.height = Math.max(this.height, span.height);
      this.depth = Math.max(this.depth, span.depth);
      this.maxFontSize = Math.max(this.maxFontSize, span.maxFontSize); // The italic correction for the coalesced spans is the
      // italic correction of the last span.

      this.italic = span.italic;
      return true;
    }
  }]);

  return Span;
}();
/**
 * Return HTML markup representing this span, its style, classes and
 * children.
 *
 * @param {number} [hskip] amount of whitespace to insert before this element
 * This is used to adjust the inter-spacing between spans of different types,
 * e.g. 'bin' and 'rel', according to the TeX rules.
 * @alias module:core/span.INTER_ATOM_SPACING
 * @private
 */

var INTER_ATOM_SPACING = {
  'mord+mop': 3,
  'mord+mbin': 4,
  'mord+mrel': 5,
  'mord+minner': 3,
  'mop+mord': 3,
  'mop+mop': 3,
  'mop+mbin': 5,
  'mop+minner': 3,
  'mbin+mord': 4,
  'mbin+mop': 4,
  'mbin+mopen': 4,
  'mbin+minner': 4,
  'mrel+mord': 5,
  'mrel+mop': 5,
  'mrel+mopen': 5,
  'mrel+minner': 5,
  'mclose+mop': 3,
  'mclose+mbin': 4,
  'mclose+mrel': 5,
  'mclose+minner': 3,
  'mpunct+mord': 3,
  'mpunct+mop': 3,
  'mpunct+mbin': 4,
  'mpunct+mrel': 5,
  'mpunct+mopen': 3,
  'mpunct+mpunct': 3,
  'mpunct+minner': 3
}; // See https://www.w3.org/TR/2000/WD-MathML2-20000328/chapter6.html
// 6.1.4 Non-Marking Characters

var SPACING_CHARACTER = ["\u200B", // 0/18 ZERO-WIDTH SPACE
"\u200A", // 1/18 HAIR SPACE
"\u200A\u200A", // 2/18
"\u2009", // 3/18 THIN SPACE
"\u205F", // 4/18 MEDIUM MATHEMATICAL SPACE
"\u205F\u200A", // 5/18 MEDIUM MATHEMATICAL SPACE + HAIR SPACE
"\u2004", // 6/18 THREE-PER-EM SPACE   1/3em
'', '', "\u2002" // 9/18 EN SPACE 1/2em = 9/18
];
var NEGATIVE_SPACING_CHARACTER = ['', "\u200A\u2063", // -1/18
'', "\u2009\u2063", // -3/18
"\u205F\u2063", // -4/18
"\u2005\u2063" // -5/18
];
/**
 *
 * @alias module:core/span.INTER_ATOM_TIGHT_SPACING
 * @private
 */

var INTER_ATOM_TIGHT_SPACING = {
  'mord+mop': 3,
  'mop+mord': 3,
  'mop+mop': 3,
  'mclose+mop': 3,
  'minner+mop': 3
};

function lastSpanType(span) {
  var result = span.type;
  if (result === 'first') return 'none';
  if (result === 'textord') return 'mord';
  return result;
}
/**
 * Attempts to coalesce (merge) spans, for example consecutive text spans.
 * Return a new tree with coalesced spans.
 *
 * @param {Span[]} spans
 * @return {Span[]} coalesced tree
 * @memberof module:core/span
 * @private
 */


function coalesce(spans) {
  if (!spans || spans.length === 0) return [];
  spans[0].children = coalesce(spans[0].children);
  var result = [spans[0]];

  for (var i = 1; i < spans.length; i++) {
    if (!result[result.length - 1].tryCoalesceWith(spans[i])) {
      spans[i].children = coalesce(spans[i].children);
      result.push(spans[i]);
    }
  }

  return result;
} //----------------------------------------------------------------------------
// UTILITY FUNCTIONS
//----------------------------------------------------------------------------


function span_height(spans) {
  if (!spans) return 0;

  if (Array.isArray(spans)) {
    return spans.reduce(function (acc, x) {
      return Math.max(acc, x.height);
    }, 0);
  }

  return spans.height;
}

function span_depth(spans) {
  if (!spans) return 0;

  if (Array.isArray(spans)) {
    return spans.reduce(function (acc, x) {
      return Math.max(acc, x.depth);
    }, 0);
  }

  return spans.depth;
}

function span_skew(spans) {
  if (!spans) return 0;

  if (Array.isArray(spans)) {
    var result = 0;
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = spans[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var span = _step3.value;
        result += span.skew || 0;
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return result;
  }

  return spans.skew;
}

function italic(spans) {
  if (!spans) return 0;

  if (Array.isArray(spans)) {
    return spans[spans.length - 1].italic;
  }

  return spans.italic;
}
/**
 * Make an element made of a sequence of children with classes
 * @param {(string|Span|Span[])} content the items 'contained' by this node
 * @param {string} classes list of classes attributes associated with this node
 * @memberof module:core/span
 * @private
 */


function span_makeSpan(content, classes) {
  if (Array.isArray(content)) {
    var c = [];
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = content[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var s = _step4.value;
        if (s) c.push(s);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    if (c.length === 1) {
      return span_makeSpan(c[0], classes);
    }
  }

  return new span_Span(content, classes);
}
/**
 *
 * @param {string} fontFamily
 * @param {string} symbol
 * @param {string} classes
 * @memberof module:core/span
 * @private
 */

function makeSymbol(fontFamily, symbol, classes) {
  var result = new span_Span(symbol, classes);
  var metrics = fontMetrics.getCharacterMetrics(symbol, fontFamily);
  result.height = metrics.height;
  result.depth = metrics.depth;
  result.skew = metrics.skew;
  result.italic = metrics.italic;
  result.setRight(result.italic);
  return result;
}
/**
 * Makes an element placed in each of the vlist elements to ensure that each
 * element has the same max font size. To do this, we create a zero-width space
 * with the correct font size.
//  * Note: without this, even when fontSize = 0, the fraction bar is no
//  * longer positioned correctly
 * @return {Span}
 * @memberof module:core/span
 * @private
 */


function makeFontSizer(context, fontSize) {
  var fontSizeAdjustment = fontSize ? fontSize / context.mathstyle.sizeMultiplier : 0;
  var fontSizeInner = new span_Span("\u200B"); // ZERO WIDTH SPACE

  if (fontSizeAdjustment !== 1) {
    fontSizeInner.setStyle('font-size', fontSizeAdjustment, fontSizeAdjustment > 0 ? 'em' : '');
    fontSizeInner.attributes = {
      "aria-hidden": true
    };
  }

  if (context.size !== 'size5') {
    return new span_Span(fontSizeInner, 'fontsize-ensurer reset-' + context.size + ' size5');
  }

  return fontSizeAdjustment !== 0 ? fontSizeInner : null;
}
/**
 *
 * @param {string} type One of 'mbin', 'mop', 'mord', 'mrel' 'mclose',
 * 'mpunct', 'minner'
 * @param {string|Span[]} content A string or an array of other Spans
 * @param {string} classes CSS classes decorating this span
 * See https://tex.stackexchange.com/questions/81752/
 * for a thorough description of the TeXt atom type and their relevance to
 * proper kerning.
 * @memberof module:core/span
 * @private
 */


function makeSpanOfType(type, content, classes) {
  var result = span_makeSpan(content, classes);
  result.type = type;
  return result;
}

function makeOp(content, classes) {
  return makeSpanOfType('mop', content, classes);
}

function makeOrd(content, classes) {
  return makeSpanOfType('mord', content, classes);
}

function makeRel(content, classes) {
  return makeSpanOfType('mrel', content, classes);
}

function makeClose(content, classes) {
  return makeSpanOfType('mclose', content, classes);
}

function makeOpen(content, classes) {
  return makeSpanOfType('mopen', content, classes);
}

function makeInner(content, classes) {
  return makeSpanOfType('minner', content, classes);
}

function makePunct(content, classes) {
  return makeSpanOfType('mpunct', content, classes);
}

function makeStyleWrap(type, children, fromStyle, toStyle, classes) {
  classes = classes || '';
  classes += ' style-wrap ';
  var result = makeHlist(children, classes + fromStyle.adjustTo(toStyle));
  result.type = type;
  var multiplier = toStyle.sizeMultiplier / fromStyle.sizeMultiplier;
  result.height *= multiplier;
  result.depth *= multiplier;
  result.maxFontSize = toStyle.sizeMultiplier;
  return result;
}
/**
 * Add some SVG markup to be overlaid on top of the span
 *
 * @param {Span} body
 * @param {string} svgMarkup
 * @private
 */


function makeSVG(body, svgMarkup, svgStyle) {
  body.svgOverlay = svgMarkup;
  body.svgStyle = svgStyle;
  return body;
}
/**
 *
 * @param {Span|Span[]} spans
 * @param {string} classes
 * @memberof module:core/span
 * @private
 */


function makeHlist(spans, classes) {
  if (!classes || classes.length === 0) {
    // No decorations...
    if (spans instanceof span_Span) {
      // A single span, use it as the output
      return spans;
    } else if (Array.isArray(spans) && spans.length === 1) {
      // An array, with a single span, use the single span as the output
      return spans[0];
    }
  }

  var result = new span_Span(spans, classes);
  var multiplier = 1.0;

  if (spans instanceof span_Span) {
    multiplier = spans.maxFontSize;
  } else {
    multiplier = spans.reduce(function (acc, x) {
      return Math.max(acc, x.maxFontSize);
    }, 0);
  }

  result.height *= multiplier;
  result.depth *= multiplier;
  return result;
}
/**
 * Create a new span of type `vlist`, a set of vertically stacked items
 * @param {Context} context
 * @param {Array.<(number|Span)>} elements
 * An array of Span and integer. The integer can be either some kerning information
 * or the value of an individual shift of the preceding child if in 'individualShift' mode
 * @param {string} pos The method that will be used to position the elements in the vlist.
 *
 * One of:
 * - `"individualShift"`: each child must be followed by a number indicating how much to shift it (i.e. moved downwards)
 * - `"top"`: posData specifies the topmost point of the vlist (>0 move up)
 * - `"bottom"`: posData specifies the bottommost point of the vlist (>0 move down)
 * - `"shift"`: the baseline of the vlist will be positioned posData away from the baseline
 * of the first child. (>0 moves down)
 * @param {number} posData
 * @memberof module:core/span
 * @private
 */

function makeVlist(context, elements, pos, posData) {
  var listDepth = 0;
  var currPos = 0;
  pos = pos || 'shift';
  posData = posData || 0; // Normalize the elements so that they're all either a number or
  // a single span. If a child is an array of spans,
  // wrap it in a span

  for (var i = 0; i < elements.length; i++) {
    if (Array.isArray(elements[i])) {
      if (elements[i].length === 1) {
        // If that's an array made up of a single span, use that span
        elements[i] = elements[i][0];
      } else {
        // Otherwise, wrap it in a span
        elements[i] = span_makeSpan(elements[i]);
      }
    }
  }

  if (pos === 'shift') {
    listDepth = -elements[0].depth - posData;
  } else if (pos === 'bottom') {
    listDepth = -posData;
  } else if (pos === 'top') {
    var bottom = posData;
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = elements[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var element = _step5.value;

        if (element instanceof span_Span) {
          // It's a Span, use the dimension data
          bottom -= element.height + element.depth;
        } else {
          // It's a kern adjustment
          bottom -= element;
        }
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    listDepth = bottom;
  } else if (pos === 'individualShift') {
    // Individual adjustment to each elements.
    // The elements list is made up of a Span followed
    // by a shift adjustment as an integer
    var originalElements = elements;
    elements = [originalElements[0]]; // Add in kerns to the list of elements to get each element to be
    // shifted to the correct specified shift

    listDepth = -originalElements[1] - originalElements[0].depth;
    currPos = listDepth;

    for (var _i = 2; _i < originalElements.length; _i += 2) {
      var diff = -originalElements[_i + 1] - currPos - originalElements[_i].depth;
      currPos = currPos + diff;
      var kern = diff - (originalElements[_i - 2].height + originalElements[_i - 2].depth);
      elements.push(kern);
      elements.push(originalElements[_i]);
    }
  } else {
    console.assert(false, 'makeVList with unknown method: "' + pos + '"');
  } // Make the fontSizer


  var maxFontSize = 1.0;
  var _iteratorNormalCompletion6 = true;
  var _didIteratorError6 = false;
  var _iteratorError6 = undefined;

  try {
    for (var _iterator6 = elements[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
      var _element = _step6.value;

      if (_element instanceof span_Span) {
        maxFontSize = Math.max(maxFontSize, _element.maxFontSize);
      }
    }
  } catch (err) {
    _didIteratorError6 = true;
    _iteratorError6 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
        _iterator6.return();
      }
    } finally {
      if (_didIteratorError6) {
        throw _iteratorError6;
      }
    }
  }

  var fontSizer = makeFontSizer(context, maxFontSize);
  var newElements = [];
  currPos = listDepth;
  var _iteratorNormalCompletion7 = true;
  var _didIteratorError7 = false;
  var _iteratorError7 = undefined;

  try {
    for (var _iterator7 = elements[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
      var _element2 = _step7.value;

      if (typeof _element2 === 'number') {
        // It's a kern adjustment
        currPos += _element2;
      } else {
        var wrap = span_makeSpan([fontSizer, _element2]);
        wrap.setTop(-_element2.depth - currPos);
        newElements.push(wrap);
        currPos += _element2.height + _element2.depth;
      }
    }
  } catch (err) {
    _didIteratorError7 = true;
    _iteratorError7 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
        _iterator7.return();
      }
    } finally {
      if (_didIteratorError7) {
        throw _iteratorError7;
      }
    }
  }

  var result = span_makeSpan(newElements, 'vlist'); // Fix the final height and depth, in case there were kerns at the ends
  // since makeSpan won't take that into account.

  result.depth = Math.max(listDepth, span_depth(result) || 0);
  result.height = Math.max(-currPos, span_height(result) || 0);
  return result;
} // /**
//  *
//  * @param {Span|Span[]} base
//  * @param {number} strutHeight
//  * @param {number} strutDepth
//  */
// function makeStrut(base, strutHeight, strutDepth) {
//     return [base];
//     const topStrut = makeSpan(null, 'ML__strut');
//     topStrut.height = strutHeight || 0;
//     topStrut.depth = 0;
//     topStrut.setStyle('height', strutHeight, 'em');
//     const bottomStrut = makeSpan(null, 'ML__strut--bottom');
//     bottomStrut.height = strutHeight || 0;
//     bottomStrut.depth = strutDepth || 0;
//     bottomStrut.setStyle('height', strutHeight + strutDepth, 'em');
//     if (strutDepth) {
//         bottomStrut.setStyle('vertical-align', -strutDepth, 'em');
//     }
//     if (Array.isArray(base)) {
//         base.unshift(topStrut);
//         base.unshift(bottomStrut);
//         return base;
//     }
//     return makeOrd([topStrut, bottomStrut, base]);
// }
//----------------------------------------------------------------------------
// FONTS
//----------------------------------------------------------------------------
// Map an abstract 'fontFamily' to an actual font name

var FONT_NAME = {
  'ams': 'AMS-Regular',
  'bb': 'AMS-Regular',
  'cal': 'Caligraphic-Regular',
  'frak': 'Fraktur-Regular',
  'scr': 'Script-Regular',
  'cmr': 'Main-Regular',
  'cmss': 'SansSerif-Regular',
  'cmtt': 'Typewriter-Regular',
  'math': 'Math-Regular',
  'mainit': 'Main-Italic'
};
var FONT_CLASS = {
  'ams': 'ML__ams',
  'bb': 'ML__bb',
  'cal': 'ML__cal',
  'frak': 'ML__frak',
  'scr': 'ML__script',
  'cmr': 'ML__mathrm',
  'cmss': 'ML__sans',
  'cmtt': 'ML__tt',
  'math': 'ML__mathit',
  'mainit': 'ML__mainit'
};
/**
 * Given a font family ('frak', 'math'...) return a corresponding
 * font name. If the font does not support the specified symbol
 * return an alternate font or null if none could be determined.
 * @param {(string|Span[])} symbol the character for which we're seeking the font
 * @param {string} fontFamily such as 'mathbf', 'mathfrak', etc...
 * @return {string} a font name
 * @memberof module:span
 * @private
 */

function getFontName(symbol, fontFamily) {
  // If this is not a single char, just do a simple fontFamily -> fontName mapping
  if (typeof symbol !== 'string' || symbol.length > 1 || symbol === "\u200B") {
    return FONT_NAME[fontFamily];
  } // This is a single character. Do some remapping as necessary.
  // If symbol is not in the repertoire of the font,
  // return null.


  if (fontFamily === 'bb' || fontFamily === 'scr') {
    // These fonts only support [A-Z ]
    if (!/^[A-Z ]$/.test(symbol)) return null;
  } else if (fontFamily === 'cal') {
    // Only supports uppercase latin and digits
    if (!/^[0-9A-Z ]$/.test(symbol)) return null;
  } else if (fontFamily === 'frak') {
    if (!/^[0-9A-Za-z ]$|^[!"#$%&'()*+,\-./:;=?[]^’‘]$/.test(symbol)) {
      return null;
    }
  } else if (fontFamily === 'cmtt' || fontFamily === 'cmss') {
    if (!/^[0-9A-Za-z ]$|^[!"&'()*+,\-./:;=?@[]^_~\u0131\u0237\u0393\u0394\u0398\u039b\u039e\u03A0\u03A3\u03A5\u03A8\u03a9’‘]$/.test(symbol)) {
      return null;
    }
  }

  return FONT_NAME[fontFamily];
} // Export the public interface for this module


/* harmony default export */ var core_span = ({
  coalesce: coalesce,
  makeSpan: span_makeSpan,
  makeOp: makeOp,
  makeOrd: makeOrd,
  makeRel: makeRel,
  makeClose: makeClose,
  makeOpen: makeOpen,
  makeInner: makeInner,
  makePunct: makePunct,
  makeSpanOfType: makeSpanOfType,
  makeSymbol: makeSymbol,
  makeVlist: makeVlist,
  makeHlist: makeHlist,
  makeStyleWrap: makeStyleWrap,
  // makeStrut,
  makeSVG: makeSVG,
  height: span_height,
  depth: span_depth,
  skew: span_skew,
  italic: italic
});
// CONCATENATED MODULE: ./packages/core/definitions.js
function definitions_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { definitions_typeof = function _typeof(obj) { return typeof obj; }; } else { definitions_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return definitions_typeof(obj); }

/**
 * This module contains the definitions of all the symbols and commands, for
 * example `\alpha`, `\sin`, `\mathrm`.
 * There are a few exceptions with some "built-in" commands that require
 * special parsing such as `\char`.
 * @module core/definitions
 * @private
 */

/**
 * To organize the symbols when generating the documentation, we
 * keep track of a category that gets assigned to each symbol.
 * @private
 */

var category = '';
var MATH_SYMBOLS = {};
var FUNCTIONS = {};
var ENVIRONMENTS = {};
var MACROS = {
  'iff': "\\;\u27FA\\;",
  //>2,000 Note: additional spaces around the arrows
  'nicefrac': '^{#1}\\!\\!/\\!_{#2}',
  // From bracket.sty, Diract notation
  'bra': '\\mathinner{\\langle{#1}|}',
  'ket': '\\mathinner{|{#1}\\rangle}',
  'braket': '\\mathinner{\\langle{#1}\\rangle}',
  'set': '\\mathinner{\\lbrace #1 \\rbrace}',
  'Bra': '\\left\\langle #1\\right|',
  'Ket': '\\left|#1\\right\\rangle',
  'Braket': '\\left\\langle{#1}\\right\\rangle',
  'Set': '\\left\\lbrace #1 \\right\\rbrace'
};
var RIGHT_DELIM = {
  '(': ')',
  '{': '}',
  '[': ']',
  '|': '|',
  '\\lbrace': '\\rbrace',
  '\\{': '\\}',
  '\\langle': '\\rangle',
  '\\lfloor': '\\rfloor',
  '\\lceil': '\\rceil',
  '\\vert': '\\vert',
  '\\lvert': '\\rvert',
  '\\Vert': '\\Vert',
  '\\lVert': '\\rVert',
  '\\lbrack': '\\rbrack',
  "\\ulcorner": "\\urcorner",
  '\\llcorner': '\\lrcorner',
  '\\lgroup': '\\rgroup',
  '\\lmoustache': '\\rmoustache'
}; // Frequency of a symbol.
// String constants corresponding to frequency values,
// which are the number of results returned by latexsearch.com
// When the precise number is known, it is provided. Otherwise,
// the following constants are used to denote an estimate.

var CRYPTIC = 'CRYPTIC';
var ARCANE = 'ARCANE'; // const VERY_RARE = 'VERY_RARE';

var RARE = 'RARE';
var UNCOMMON = 'UNCOMMON';
var COMMON = 'COMMON';
var SUPERCOMMON = 'SUPERCOMMON';
/**
 * @type {Object.<string, number>}
 * @private
 */

var FREQUENCY_VALUE = {
  'CRYPTIC': 0,
  'ARCANE': 200,
  'VERY_RARE': 600,
  'RARE': 1200,
  'UNCOMMON': 2000,
  'COMMON': 3000,
  'SUPERCOMMON': 4000
};
/**
 * Set the frequency of the specified symbol.
 * Default frequency is UNCOMMON
 * The argument list is a frequency value, followed by one or more symbol strings
 * For example:
 *  frequency(COMMON , '\\sin', '\\cos')
 * @param {string|number} value The frequency as a string constant,
 * or a numeric value [0...2000]
 * @param {...string}
 * @memberof module:definitions
 * @private
 */

function frequency(value) {
  var v = typeof value === 'string' ? FREQUENCY_VALUE[value] : value;

  for (var _len = arguments.length, symbols = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    symbols[_key - 1] = arguments[_key];
  }

  for (var _i = 0, _symbols = symbols; _i < _symbols.length; _i++) {
    var symbol = _symbols[_i];

    if (MATH_SYMBOLS[symbol]) {
      MATH_SYMBOLS[symbol].frequency = v;
    }

    if (FUNCTIONS[symbol]) {
      // Make a copy of the entry, since it could be shared by multiple
      // symbols
      FUNCTIONS[symbol] = Object.assign({}, FUNCTIONS[symbol]);
      FUNCTIONS[symbol].frequency = v;
    }
  }
}
/**
 *
 * @param {string} latexName    The common LaTeX command for this symbol
 * @param {(string|string[])} mode
 * @param {string} fontFamily
 * @param {string} type
 * @param {string} value
 * @param {(number|string)} [frequency]
 * @memberof module:definitions
 * @private
 */


function defineSymbol(latexName, fontFamily, type, value, frequency) {
  if (fontFamily && !/^(ams|cmr|bb|cal|frak|scr)$/.test(fontFamily)) {
    console.log(fontFamily, latexName);
  } // Convert a frequency constant to a numerical value


  if (typeof frequency === 'string') frequency = FREQUENCY_VALUE[frequency];
  MATH_SYMBOLS[latexName] = {
    type: type === ORD ? MATHORD : type,
    baseFontFamily: fontFamily,
    value: value,
    category: category,
    // To group items when generating the documentation
    frequency: frequency
  };
}
/**
 * Define a set of single-character symbols and all their attributes.
 * The value associated with the symbol is the symbol itself.
 * @param {string} string a string of single character symbols
 * @param {string} mode
 * @param {string} fontFamily
 * @param {string} type
 * @param {(string|number)} [frequency]
 * @memberof module:definitions
 * @private
 */


function defineSymbols(string) {
  for (var i = 0; i < string.length; i++) {
    var ch = string.charAt(i);
    defineSymbol(ch, '', MATHORD, ch);
  }
}
/**
 * Define a set of single-character symbols as a range of Unicode codepoints
 * @param {number} from First Unicode codepoint
 * @param {number} to Last Unicode codepoint
 * @memberof module:definitions
 * @private
 */


function defineSymbolRange(from, to) {
  for (var i = from; i <= to; i++) {
    var ch = String.fromCodePoint(i);
    defineSymbol(ch, '', 'mord', ch);
  }
}

var CODEPOINT_SHORTCUTS = {
  8739: '|',
  0x00b7: '\\cdot',
  0x00bc: '\\frac{1}{4}',
  0x00bd: '\\frac{1}{2}',
  0x00be: '\\frac{3}{4}',
  0x2070: '^{0}',
  0x2071: '^{i}',
  0x00b9: '^{1}',
  0x00b2: '^{2}',
  0x00b3: '^{3}',
  0x2074: '^{4}',
  0x2075: '^{5}',
  0x2076: '^{6}',
  0x2077: '^{7}',
  0x2078: '^{8}',
  0x2079: '^{9}',
  0x207a: '^{+}',
  0x207b: '^{-}',
  0x207c: '^{=}',
  0x207f: '^{n}',
  0x2080: '_{0}',
  0x2081: '_{1}',
  0x2082: '_{2}',
  0x2083: '_{3}',
  0x2084: '_{4}',
  0x2085: '_{5}',
  0x2086: '_{6}',
  0x2087: '_{7}',
  0x2088: '_{8}',
  0x2089: '_{9}',
  0x208A: '_{+}',
  0x208B: '_{-}',
  0x208C: '_{=}',
  0x2090: '_{a}',
  0x2091: '_{e}',
  0x2092: '_{o}',
  0x2093: '_{x}',
  0x2032: '\\prime',
  0x2033: '\\doubleprime',
  0x2220: '\\angle',
  0x2102: '\\C',
  0x2115: '\\N',
  0x2119: '\\P',
  0x211A: '\\Q',
  0x211D: '\\R',
  0x2124: '\\Z'
};
/**
 * Given a character, return a LaTeX expression matching its Unicode codepoint.
 * If there is a matching symbol (e.g. \alpha) it is returned.
 * @param {string} parseMode
 * @param {number} cp
 * @return {string}
 * @memberof module:definitions
 * @private
 */

function matchCodepoint(parseMode, cp) {
  var s = String.fromCodePoint(cp); // Some symbols map to multiple codepoints.
  // Some symbols are 'pseudosuperscript'. Convert them to a super(or sub)script.
  // Map their alternative codepoints here.

  if (parseMode === 'math' && CODEPOINT_SHORTCUTS[s]) return CODEPOINT_SHORTCUTS[s]; // Don't map 'simple' code point.
  // For example "C" maps to \doubleStruckCapitalC, not the desired "C"

  if (cp > 32 && cp < 127) return s;
  var result = '';

  if (parseMode === 'math') {
    for (var p in MATH_SYMBOLS) {
      if (Object.prototype.hasOwnProperty.call(MATH_SYMBOLS, p)) {
        if (MATH_SYMBOLS[p].value === s) {
          result = p;
          break;
        }
      }
    }
  } else {
    for (var _p in TEXT_SYMBOLS) {
      if (Object.prototype.hasOwnProperty.call(TEXT_SYMBOLS, _p)) {
        if (TEXT_SYMBOLS[_p] === s) {
          result = _p;
          break;
        }
      }
    }
  }

  return result || s;
}
/**
 * Given a Unicode character returns {char:, variant:, style} corresponding
 * to this codepoint. `variant` is optional.
 * This maps characters such as "blackboard uppercase C" to
 * {char: 'C', variant: 'double-struck', style:''}
 * @param {string} char
 */

/* Some symbols in the MATHEMATICAL ALPHANUMERICAL SYMBOLS block had
   been previously defined in other blocks. Remap them */


var MATH_LETTER_EXCEPTIONS = {
  0x1d455: 0x0210e,
  0x1D49D: 0x0212C,
  0x1D4A0: 0x02130,
  0x1D4A1: 0x02131,
  0x1D4A3: 0x0210B,
  0x1D4A4: 0x02110,
  0x1D4A7: 0x02112,
  0x1D4A8: 0x02133,
  0x1D4AD: 0x0211B,
  0x1D4BA: 0x0212F,
  0x1D4BC: 0x0210A,
  0x1D4C4: 0x02134,
  0x1D506: 0x0212D,
  0x1D50B: 0x0210C,
  0x1D50C: 0x02111,
  0x1D515: 0x0211C,
  0x1D51D: 0x02128,
  0x1D53A: 0x02102,
  0x1D53F: 0x0210D,
  0x1D545: 0x02115,
  0x1D547: 0x02119,
  0x1D548: 0x0211A,
  0x1D549: 0x0211D,
  0x1D551: 0x02124
};
var MATH_UNICODE_BLOCKS = [{
  start: 0x1D400,
  len: 26,
  offset: 65,
  style: 'bold'
}, {
  start: 0x1D41A,
  len: 26,
  offset: 97,
  style: 'bold'
}, {
  start: 0x1D434,
  len: 26,
  offset: 65,
  style: 'italic'
}, {
  start: 0x1D44E,
  len: 26,
  offset: 97,
  style: 'italic'
}, {
  start: 0x1D468,
  len: 26,
  offset: 65,
  style: 'bolditalic'
}, {
  start: 0x1D482,
  len: 26,
  offset: 97,
  style: 'bolditalic'
}, {
  start: 0x1D49c,
  len: 26,
  offset: 65,
  variant: 'script'
}, {
  start: 0x1D4b6,
  len: 26,
  offset: 97,
  variant: 'script'
}, {
  start: 0x1D4d0,
  len: 26,
  offset: 65,
  variant: 'script',
  style: 'bold'
}, {
  start: 0x1D4ea,
  len: 26,
  offset: 97,
  variant: 'script',
  style: 'bold'
}, {
  start: 0x1D504,
  len: 26,
  offset: 65,
  variant: 'fraktur'
}, {
  start: 0x1D51e,
  len: 26,
  offset: 97,
  variant: 'fraktur'
}, {
  start: 0x1D56c,
  len: 26,
  offset: 65,
  variant: 'fraktur',
  style: 'bold'
}, {
  start: 0x1D586,
  len: 26,
  offset: 97,
  variant: 'fraktur',
  style: 'bold'
}, {
  start: 0x1D538,
  len: 26,
  offset: 65,
  variant: 'double-struck'
}, {
  start: 0x1D552,
  len: 26,
  offset: 97,
  variant: 'double-struck'
}, {
  start: 0x1D5A0,
  len: 26,
  offset: 65,
  variant: 'sans-serif'
}, {
  start: 0x1D5BA,
  len: 26,
  offset: 97,
  variant: 'sans-serif'
}, {
  start: 0x1D5D4,
  len: 26,
  offset: 65,
  variant: 'sans-serif',
  style: 'bold'
}, {
  start: 0x1D5EE,
  len: 26,
  offset: 97,
  variant: 'sans-serif',
  style: 'bold'
}, {
  start: 0x1D608,
  len: 26,
  offset: 65,
  variant: 'sans-serif',
  style: 'italic'
}, {
  start: 0x1D622,
  len: 26,
  offset: 97,
  variant: 'sans-serif',
  style: 'italic'
}, {
  start: 0x1D63c,
  len: 26,
  offset: 65,
  variant: 'sans-serif',
  style: 'bolditalic'
}, {
  start: 0x1D656,
  len: 26,
  offset: 97,
  variant: 'sans-serif',
  style: 'bolditalic'
}, {
  start: 0x1D670,
  len: 26,
  offset: 65,
  variant: 'monospace'
}, {
  start: 0x1D68A,
  len: 26,
  offset: 97,
  variant: 'monospace'
}, {
  start: 0x1D6A8,
  len: 25,
  offset: 0x391,
  style: 'bold'
}, {
  start: 0x1D6C2,
  len: 25,
  offset: 0x3B1,
  style: 'bold'
}, {
  start: 0x1D6E2,
  len: 25,
  offset: 0x391,
  style: 'italic'
}, {
  start: 0x1D6FC,
  len: 25,
  offset: 0x3B1,
  style: 'italic'
}, {
  start: 0x1D71C,
  len: 25,
  offset: 0x391,
  style: 'bolditalic'
}, {
  start: 0x1D736,
  len: 25,
  offset: 0x3B1,
  style: 'bolditalic'
}, {
  start: 0x1D756,
  len: 25,
  offset: 0x391,
  variant: 'sans-serif',
  style: 'bold'
}, {
  start: 0x1D770,
  len: 25,
  offset: 0x3B1,
  variant: 'sans-serif',
  style: 'bold'
}, {
  start: 0x1D790,
  len: 25,
  offset: 0x391,
  variant: 'sans-serif',
  style: 'bolditalic'
}, {
  start: 0x1D7AA,
  len: 25,
  offset: 0x3B1,
  variant: 'sans-serif',
  style: 'bolditalic'
}, {
  start: 0x1D7CE,
  len: 10,
  offset: 48,
  variant: '',
  style: 'bold'
}, {
  start: 0x1D7D8,
  len: 10,
  offset: 48,
  variant: 'double-struck'
}, {
  start: 0x1D7E3,
  len: 10,
  offset: 48,
  variant: 'sans-serif'
}, {
  start: 0x1D7Ec,
  len: 10,
  offset: 48,
  variant: 'sans-serif',
  style: 'bold'
}, {
  start: 0x1D7F6,
  len: 10,
  offset: 48,
  variant: 'monospace'
}];

function unicodeToMathVariant(_char) {
  var codepoint = _char;
  if (typeof _char === 'string') codepoint = _char.codePointAt(0);

  if ((codepoint < 0x1d400 || codepoint > 0x1d7ff) && (codepoint < 0x2100 || codepoint > 0x214f)) {
    return {
      char: _char
    };
  } // Handle the 'gap' letters by converting them back into their logical range


  for (var c in MATH_LETTER_EXCEPTIONS) {
    if (Object.prototype.hasOwnProperty.call(MATH_LETTER_EXCEPTIONS, c)) {
      if (MATH_LETTER_EXCEPTIONS[c] === codepoint) {
        codepoint = c;
        break;
      }
    }
  }

  for (var i = 0; i < MATH_UNICODE_BLOCKS.length; i++) {
    if (codepoint >= MATH_UNICODE_BLOCKS[i].start && codepoint < MATH_UNICODE_BLOCKS[i].start + MATH_UNICODE_BLOCKS[i].len) {
      return {
        char: String.fromCodePoint(codepoint - MATH_UNICODE_BLOCKS[i].start + MATH_UNICODE_BLOCKS[i].offset),
        variant: MATH_UNICODE_BLOCKS[i].variant,
        style: MATH_UNICODE_BLOCKS[i].style
      };
    }
  }

  return {
    char: _char
  };
}
/**
 * Given a character and variant ('bb', 'cal', etc...)
 * return the corresponding unicode character (a string)
 * @param {string} char
 * @param {string} variant
 * @memberof module:definitions
 * @private
 */


function mathVariantToUnicode(_char2, variant, style) {
  if (!/[A-Za-z0-9]/.test(_char2)) return _char2;
  if (!variant && !style) return _char2;

  var codepoint = _char2.codePointAt(0);

  for (var i = 0; i < MATH_UNICODE_BLOCKS.length; i++) {
    if (!variant || MATH_UNICODE_BLOCKS[i].variant === variant) {
      if (!style || MATH_UNICODE_BLOCKS[i].style === style) {
        if (codepoint >= MATH_UNICODE_BLOCKS[i].offset && codepoint < MATH_UNICODE_BLOCKS[i].offset + MATH_UNICODE_BLOCKS[i].len) {
          var result = MATH_UNICODE_BLOCKS[i].start + codepoint - MATH_UNICODE_BLOCKS[i].offset;
          return String.fromCodePoint(MATH_LETTER_EXCEPTIONS[result] || result);
        }
      }
    }
  }

  return _char2;
}

function codepointToLatex(parseMode, cp) {
  // Codepoint shortcuts have priority over variants
  // That is, "\N" vs "\mathbb{N}"
  if (parseMode === 'text') return String.fromCodePoint(cp);
  var result;
  if (CODEPOINT_SHORTCUTS[cp]) return CODEPOINT_SHORTCUTS[cp];
  var v = unicodeToMathVariant(cp);
  if (!v.style && !v.variant) return matchCodepoint(parseMode, cp);
  result = v.char;

  if (v.variant) {
    result = '\\' + v.variant + '{' + result + '}';
  }

  if (v.style === 'bold') {
    result = '\\mathbf{' + result + '}';
  } else if (v.style === 'italic') {
    result = '\\mathit{' + result + '}';
  } else if (v.style === 'bolditalic') {
    result = '\\mathbf{\\mathit{' + result + '}}';
  }

  return '\\mathord{' + result + '}';
}

function unicodeStringToLatex(parseMode, s) {
  var result = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = s[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var cp = _step.value;
      result += codepointToLatex(parseMode, cp.codePointAt(0));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}
/**
 *
 * @param {string} mode
 * @param {string} command
 * @return {boolean} True if command is allowed in the mode
 * (note that command can also be a single character, e.g. "a")
 * @memberof module:definitions
 * @private
 */


function commandAllowed(mode, command) {
  if (FUNCTIONS[command] && (mode !== 'text' || FUNCTIONS[command].allowedInText)) {
    return true;
  }

  if ({
    'text': TEXT_SYMBOLS,
    'math': MATH_SYMBOLS
  }[mode][command]) {
    return true;
  }

  return false;
}

function getValue(mode, symbol) {
  if (mode === 'math') {
    return MATH_SYMBOLS[symbol] && MATH_SYMBOLS[symbol].value ? MATH_SYMBOLS[symbol].value : symbol;
  }

  return TEXT_SYMBOLS[symbol] ? TEXT_SYMBOLS[symbol] : symbol;
}

function getEnvironmentInfo(name) {
  var result = ENVIRONMENTS[name];

  if (!result) {
    result = {
      params: '',
      parser: null,
      mathstyle: 'displaystyle',
      tabular: true,
      colFormat: [],
      lFence: '.',
      rFence: '.' // arrayStretch: 1,

    };
  }

  return result;
}
/**
 * @param {string} symbol    A command (e.g. '\alpha') or a character (e.g. 'a')
 * @param {string} parseMode One of 'math' or 'text'
 * @param {object} macros A macros dictionary
 * @return {object} An info structure about the symbol, or null
 * @memberof module:definitions
 * @private
 */


function getInfo(symbol, parseMode, macros) {
  if (symbol.length === 0) return null;
  var info = null;

  if (symbol.charAt(0) === '\\') {
    // This could be a function or a symbol
    info = FUNCTIONS[symbol];

    if (info) {
      // We've got a match
      if (parseMode === 'math' || info.allowedInText) return info; // That's a valid function, but it's not allowed in non-math mode,
      // and we're in non-math mode

      return null;
    }

    if (!info) {
      // It wasn't a function, maybe it's a symbol?
      if (parseMode === 'math') {
        info = MATH_SYMBOLS[symbol];
      } else if (TEXT_SYMBOLS[symbol]) {
        info = {
          value: TEXT_SYMBOLS[symbol]
        };
      }
    }

    if (!info) {
      // Maybe it's a macro
      var command = symbol.slice(1);

      if (macros && macros[command]) {
        var def = macros[command];

        if (definitions_typeof(def) === 'object') {
          def = def.def;
        }

        var argCount = 0; // Let's see if there are arguments in the definition.

        if (/(^|[^\\])#1/.test(def)) argCount = 1;
        if (/(^|[^\\])#2/.test(def)) argCount = 2;
        if (/(^|[^\\])#3/.test(def)) argCount = 3;
        if (/(^|[^\\])#4/.test(def)) argCount = 4;
        if (/(^|[^\\])#5/.test(def)) argCount = 5;
        if (/(^|[^\\])#6/.test(def)) argCount = 6;
        if (/(^|[^\\])#7/.test(def)) argCount = 7;
        if (/(^|[^\\])#8/.test(def)) argCount = 8;
        if (/(^|[^\\])#9/.test(def)) argCount = 9;
        info = {
          type: 'group',
          allowedInText: false,
          params: [],
          infix: false
        };

        while (argCount >= 1) {
          info.params.push({
            optional: false,
            type: 'math',
            defaultValue: null,
            placeholder: null
          });
          argCount -= 1;
        }
      }
    }
  } else {
    if (parseMode === 'math') {
      info = MATH_SYMBOLS[symbol];
    } else if (TEXT_SYMBOLS[symbol]) {
      info = {
        value: TEXT_SYMBOLS[symbol]
      };
    }
  } // Special case `f`, `g` and `h` are recognized as functions.


  if (info && info.type === 'mord' && (info.value === 'f' || info.value === 'g' || info.value === 'h')) {
    info.isFunction = true;
  }

  return info;
}
/**
 * Return an array of suggestion for completing string 's'.
 * For example, for 'si', it could return ['sin', 'sinh', 'sim', 'simeq', 'sigma']
 * Infix operators are excluded, since they are deprecated commands.
 * @param {string} s
 * @return {string[]}
 * @memberof module:definitions
 * @private
 */


function suggest(s) {
  if (s.length <= 1) return [];
  var result = []; // Iterate over items in the dictionary

  for (var p in FUNCTIONS) {
    if (Object.prototype.hasOwnProperty.call(FUNCTIONS, p)) {
      if (p.startsWith(s) && !FUNCTIONS[p].infix) {
        result.push({
          match: p,
          frequency: FUNCTIONS[p].frequency
        });
      }
    }
  }

  for (var _p2 in MATH_SYMBOLS) {
    if (Object.prototype.hasOwnProperty.call(MATH_SYMBOLS, _p2)) {
      if (_p2.startsWith(s)) {
        result.push({
          match: _p2,
          frequency: MATH_SYMBOLS[_p2].frequency
        });
      }
    }
  }

  result.sort(function (a, b) {
    if (a.frequency === b.frequency) {
      return a.match.length - b.match.length;
    }

    return (b.frequency || 0) - (a.frequency || 0);
  });
  return result;
} // Fonts


var MAIN = ''; // The "main" KaTeX font (in fact one of several
// depending on the math variant, size, etc...)

var AMS = 'ams'; // Some symbols are not in the "main" KaTeX font
// or have a different glyph available in the "AMS"
// font (`\hbar` and `\hslash` for example).
// Type

var ORD = 'mord';
var MATHORD = 'mord'; // Ordinary, e.g. '/'

var BIN = 'mbin'; // e.g. '+'

var REL = 'mrel'; // e.g. '='

var OPEN = 'mopen'; // e.g. '('

var CLOSE = 'mclose'; // e.g. ')'

var PUNCT = 'mpunct'; // e.g. ','

var INNER = 'minner'; // for fractions and \left...\right.
// const ACCENT = 'accent';

var definitions_SPACING = 'spacing';
/**
 * An argument template has the following syntax:
 *
 * <placeholder>:<type>=<default>
 *
 * where
 * - <placeholder> is a string whose value is displayed when the argument
 *   is missing
 * - <type> is one of 'string', 'color', 'dimen', 'auto', 'text', 'math'
 * - <default> is the default value if none is provided for an optional
 * parameter
 *
 * @param {string} argTemplate
 * @param {boolean} isOptional
 * @memberof module:definitions
 * @private
 */

function parseParamTemplateArgument(argTemplate, isOptional) {
  var r = argTemplate.match(/=(.+)/);
  var defaultValue = '{}';
  var type = 'auto';
  var placeholder = null;

  if (r) {
    console.assert(isOptional, "Can't provide a default value for required parameters");
    defaultValue = r[1];
  } // Parse the type (:type)


  r = argTemplate.match(/:([^=]+)/);
  if (r) type = r[1].trim(); // Parse the placeholder

  r = argTemplate.match(/^([^:=]+)/);
  if (r) placeholder = r[1].trim();
  return {
    optional: isOptional,
    type: type,
    defaultValue: defaultValue,
    placeholder: placeholder
  };
}

function parseParamTemplate(paramTemplate) {
  if (!paramTemplate || paramTemplate.length === 0) return [];
  var result = [];
  var params = paramTemplate.split(']');

  if (params[0].charAt(0) === '[') {
    // We found at least one optional parameter.
    result.push(parseParamTemplateArgument(params[0].slice(1), true)); // Parse the rest

    for (var i = 1; i <= params.length; i++) {
      result = result.concat(parseParamTemplate(params[i]));
    }
  } else {
    params = paramTemplate.split('}');

    if (params[0].charAt(0) === '{') {
      // We found a required parameter
      result.push(parseParamTemplateArgument(params[0].slice(1), false)); // Parse the rest

      for (var _i2 = 1; _i2 <= params.length; _i2++) {
        result = result.concat(parseParamTemplate(params[_i2]));
      }
    }
  }

  return result;
}

function parseArgAsString(arg) {
  return arg.map(function (x) {
    return x.body;
  }).join('');
}
/**
 * Define one or more environments to be used with
 *         \begin{<env-name>}...\end{<env-name>}.
 *
 * @param {string|string[]} names
 * @param {string} params The number and type of required and optional parameters.
 * @param {object} options
 * -
 * @param {function(*)} parser
 * @memberof module:definitions
 * @private
 */


function defineEnvironment(names, params, options, parser) {
  if (typeof names === 'string') names = [names];
  if (!options) options = {};
  var parsedParams = parseParamTemplate(params); // Set default values of functions

  var data = {
    // 'category' is a global variable keeping track of the
    // the current category being defined. This value is used
    // strictly to group items in generateDocumentation().
    category: category,
    // Params: the parameters for this function, an array of
    // {optional, type, defaultValue, placeholder}
    params: parsedParams,
    // Callback to parse the arguments
    parser: parser,
    mathstyle: 'displaystyle',
    tabular: options.tabular || true,
    colFormat: options.colFormat || []
  };
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = names[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var name = _step2.value;
      ENVIRONMENTS[name] = data;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}
/**
 * Define one of more functions.
 *
 * @param {string|string[]} names
 * @param {string} params The number and type of required and optional parameters.
 * For example: '{}' defines a single mandatory parameter
 * '[index=2]{indicand:auto}' defines two params, one optional, one required

 * @param {object} options
 * - infix
 * - allowedInText
 * @param {function} parseFunction
 * @memberof module:definitions
 * @private
 */


function defineFunction(names, params, options, parseFunction) {
  if (typeof names === 'string') {
    names = [names];
  }

  if (!options) options = {}; // Set default values of functions

  var data = {
    // 'category' is a global variable keeping track of the
    // the current category being defined. This value is used
    // strictly to group items in generateDocumentation().
    category: category,
    // The base font family, if present, indicates that this font family
    // should always be used to render atom. For example, functions such
    // as "sin", etc... are always drawn in a roman font,
    // regardless of the font styling a user may specify.
    baseFontFamily: options.fontFamily,
    // The parameters for this function, an array of
    // {optional, type, defaultValue, placeholder}
    params: parseParamTemplate(params),
    allowedInText: !!options.allowedInText,
    infix: !!options.infix,
    parse: parseFunction
  };
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = names[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var name = _step3.value;
      FUNCTIONS[name] = data;
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
}

category = 'Environments';
/*

<columns> ::= <column>*<line>
<column> ::= <line>('l'|'c'|'r')
<line> ::= '|' | '||' | ''

'math',
                frequency 0
'displaymath',
                frequency 8

'equation'      centered, numbered
                frequency 8

'subequations'   with an 'equation' environment, appends a letter to eq no
                frequency 1

'array',        {columns:text}
                cells are textstyle math
                no fence

'eqnarray'      DEPRECATED see http://www.tug.org/pracjourn/2006-4/madsen/madsen.pdf
                {rcl}
                first and last cell in each row is displaystyle math
                each cell has a margin of \arraycolsep
                Each line has a eqno
                frequency 7


'theorem'       text mode. Prepends in bold 'Theorem <counter>', then body in italics.

'multline'      single column
                first row left aligned, last right aligned, others centered
                last line has an eqn. counter. multline* will omit the counter
                no output if inside an equation
                

'gather'        at most two columns
                first column centered, second column right aligned
                frequency 1

'gathered'      must be in equation environment
                single column,
                centered
                frequency: COMMON
                optional argument: [b], [t] to vertical align

'align'        multiple columns,
                alternating rl
                there is some 'space' (additional column?) between each pair
                each line is numbered (except when inside an equation environment)
                there is an implicit {} at the beginning of left columns

'aligned'      must be in equation environment
                frequency: COMMON
                @{}r@{}l@{\quad}@{}r@{}l@{}

'split'         must be in an equation environment,
                two columns, additional columns are interpreted as line breaks
                first column is right aligned, second column is left aligned
                entire construct is numbered (as opposed to 'align' where each line is numbered)
                frequency: 0


'alignedat'
From AMSMath:
---The alignedat environment was changed to take two arguments rather
than one: a mandatory argument (as formerly) specifying the number of
align structures, and a new optional one specifying the placement of the
environment (parallel to the optional argument of aligned). However,
aligned is simpler to use, allowing any number of aligned structures
automatically, and therefore the use of alignedat is deprecated.


 'alignat'      {pairs:number}
                {rl} alternating as many times as indicated by <pairs> arg
                no space between column pairs (unlike align)
                there is an implicit {} at the beginning of left columns
                frequency: 0

 'flalign'      multiple columns
                alternate rl
                third column further away than align...?
                frequency: 0


'matrix'        at most 10 columns
                cells centered
                no fence
                no colsep at beginning or end
                (mathtools package add an optional arg for the cell alignment)
                frequency: COMMON

'pmatrix'       fence: ()
                frequency: COMMON

'bmatrix'       fence: []
                frequency: COMMON

'Bmatrix'       fence: {}
                frequency: 237

'vmatrix'       fence: \vert
                frequency: 368

'Vmatrix'       fence: \Vert
                frequency: 41

'smallmatrix'   displaystyle: scriptstyle (?)
                frequency: 279

'cases'
                frequency: COMMON
                l@{2}l

'center'        text mode only?
                frequency: ?
*/
// See https://en.wikibooks.org/wiki/LaTeX/Mathematics
// and http://www.ele.uri.edu/faculty/vetter/Other-stuff/latex/Mathmode.pdf

/*
The star at the end of the name of a displayed math environment causes that
the formula lines won't be numbered. Otherwise they would automatically get a number.

\notag will also turn off the numbering.
\shoveright and \shoveleft will force alignment of a line

The only difference between align and equation is the spacing of the formulas.
You should attempt to use equation when possible, and align when you have multi-line formulas.
Equation will have space before/after < 1em if line before/after is short enough.

Also: equation throws an error when you have an & inside the environment,
so look out for that when converting between the two.



Whereas align produces a structure whose width is the full line width, aligned
gives a width that is the actual width of the contents, thus it can be used as
a component in a containing expression, e.g. for putting the entire alignment
in a parenthesis
*/

defineEnvironment('math', '', {
  frequency: 0
}, function () {
  return {
    mathstyle: 'textstyle'
  };
});
defineEnvironment('displaymath', '', {
  frequency: 8
}, function () {
  return {
    mathstyle: 'displaystyle'
  };
}); // defineEnvironment('text', '', {
//     frequency: 0,
//     }, function(name, args) {
//     return {
//         mathstyle: 'text',         // @todo: not quite right, not a style, a parsemode...
//     };
// });

defineEnvironment('array', '{columns:colspec}', {
  frequency: COMMON
}, function (name, args) {
  return {
    colFormat: args[0],
    mathstyle: 'textstyle'
  };
});
defineEnvironment('eqnarray', '', {}, function () {
  return {};
});
defineEnvironment('equation', '', {}, function () {
  return {
    colFormat: [{
      align: 'c'
    }]
  };
});
defineEnvironment('subequations', '', {}, function () {
  return {
    colFormat: [{
      align: 'c'
    }]
  };
}); // Note spelling: MULTLINE, not multiline.

defineEnvironment('multline', '', {}, function () {
  return {
    firstRowFormat: [{
      align: 'l'
    }],
    colFormat: [{
      align: 'c'
    }],
    lastRowFormat: [{
      align: 'r'
    }]
  };
}); // An AMS-Math environment
// See amsmath.dtx:3565
// Note that some versions of AMS-Math have a gap on the left.
// More recent version suppresses that gap, but have an option to turn it back on
// for backward compatibility.

defineEnvironment(['align', 'aligned'], '', {}, function (name, args, array) {
  var colCount = 0;
  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = array[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var row = _step4.value;
      colCount = Math.max(colCount, row.length);
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
        _iterator4.return();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  var colFormat = [{
    gap: 0
  }, {
    align: 'r'
  }, {
    gap: 0
  }, {
    align: 'l'
  }];
  var i = 2;

  while (i < colCount) {
    colFormat.push({
      gap: 1
    });
    colFormat.push({
      align: 'r'
    });
    colFormat.push({
      gap: 0
    });
    colFormat.push({
      align: 'l'
    });
    i += 2;
  }

  colFormat.push({
    gap: 0
  });
  return {
    colFormat: colFormat,
    jot: 0.3 // Jot is an extra gap between lines of numbered equation.
    // It's 3pt by default in LaTeX (ltmath.dtx:181)

  };
}); // defineEnvironment('alignat', '', {}, function(name, args) {
//     return {
//     };
// });
// defineEnvironment('flalign', '', {}, function(name, args) {
//     return {
//     };
// });

defineEnvironment('split', '', {}, function () {
  return {};
});
defineEnvironment(['gather', 'gathered'], '', {}, function () {
  // An AMS-Math environment
  // %    The \env{gathered} environment is for several lines that are
  // %    centered independently.
  // From amstex.sty
  // \newenvironment{gathered}[1][c]{%
  //   \relax\ifmmode\else\nonmatherr@{\begin{gathered}}\fi
  //   \null\,%
  //   \if #1t\vtop \else \if#1b\vbox \else \vcenter \fi\fi
  //   \bgroup\Let@\restore@math@cr
  //   \ifinany@\else\openup\jot\fi\ialign
  //   \bgroup\hfil\strut@$\m@th\displaystyle##$\hfil\crcr
  return {
    colFormat: [{
      gap: .25
    }, {
      align: 'c'
    }, {
      gap: 0
    }],
    jot: .3
  };
}); // defineEnvironment('cardinality', '', {}, function() {
//     const result = {};
//     result.mathstyle = 'textstyle';
//     result.lFence = '|';
//     result.rFence = '|';
//     return result;
// });

defineEnvironment(['matrix', 'pmatrix', 'bmatrix', 'Bmatrix', 'vmatrix', 'Vmatrix', 'smallmatrix', 'matrix*', 'pmatrix*', 'bmatrix*', 'Bmatrix*', 'vmatrix*', 'Vmatrix*', 'smallmatrix*'], '[columns:colspec]', {}, function (name, args) {
  // From amstex.sty:
  // \def\matrix{\hskip -\arraycolsep\array{*\c@MaxMatrixCols c}}
  // \def\endmatrix{\endarray \hskip -\arraycolsep}
  var result = {};
  result.mathstyle = 'textstyle';

  switch (name) {
    case 'pmatrix':
    case 'pmatrix*':
      result.lFence = '(';
      result.rFence = ')';
      break;

    case 'bmatrix':
    case 'bmatrix*':
      result.lFence = '[';
      result.rFence = ']';
      break;

    case 'Bmatrix':
    case 'Bmatrix*':
      result.lFence = '\\lbrace';
      result.rFence = '\\rbrace';
      break;

    case 'vmatrix':
    case 'vmatrix*':
      result.lFence = '\\vert';
      result.rFence = '\\vert';
      break;

    case 'Vmatrix':
    case 'Vmatrix*':
      result.lFence = '\\Vert';
      result.rFence = '\\Vert';
      break;

    case 'smallmatrix':
    case 'smallmatrix*':
      result.mathstyle = 'scriptstyle';
      break;

    case 'matrix':
    case 'matrix*':
      // Specifying a fence, even a null fence,
      // will prevent the insertion of an initial and final gap
      result.lFence = '.';
      result.rFence = '.';
      break;

    default:
  }

  result.colFormat = args[0] || [{
    align: 'c'
  }, {
    align: 'c'
  }, {
    align: 'c'
  }, {
    align: 'c'
  }, {
    align: 'c'
  }, {
    align: 'c'
  }, {
    align: 'c'
  }, {
    align: 'c'
  }, {
    align: 'c'
  }, {
    align: 'c'
  }];
  return result;
});
defineEnvironment('cases', '', {}, function () {
  // From amstex.sty:
  // \def\cases{\left\{\def\arraystretch{1.2}\hskip-\arraycolsep
  //   \array{l@{\quad}l}}
  // \def\endcases{\endarray\hskip-\arraycolsep\right.}
  // From amsmath.dtx
  // \def\env@cases{%
  //   \let\@ifnextchar\new@ifnextchar
  //   \left\lbrace
  //   \def\arraystretch{1.2}%
  //   \array{@{}l@{\quad}l@{}}%
  return {
    arraystretch: 1.2,
    lFence: '\\lbrace',
    rFence: '.',
    colFormat: [{
      align: 'l'
    }, {
      gap: 1
    }, {
      align: 'l'
    }]
  };
});
defineEnvironment('theorem', '', {}, function () {
  return {};
});
defineEnvironment('center', '', {}, function () {
  return {
    colFormat: [{
      align: 'c'
    }]
  };
});
category = ''; // Simple characters allowed in math mode

defineSymbols('0123456789/@.');
defineSymbolRange(0x0041, 0x005A); // a-z

defineSymbolRange(0x0061, 0x007A); // A-Z

category = 'Trigonometry';
defineFunction(['\\arcsin', '\\arccos', '\\arctan', '\\arctg', '\\arcctg', '\\arg', '\\ch', '\\cos', '\\cosec', '\\cosh', '\\cot', '\\cotg', '\\coth', '\\csc', '\\ctg', '\\cth', '\\sec', '\\sin', '\\sinh', '\\sh', '\\tan', '\\tanh', '\\tg', '\\th'], '', null, function (name) {
  return {
    type: 'mop',
    limits: 'nolimits',
    symbol: false,
    isFunction: true,
    body: name.slice(1),
    baseFontFamily: 'cmr'
  };
});
frequency(SUPERCOMMON, '\\cos', '\\sin', '\\tan');
frequency(UNCOMMON, '\\arcsin', '\\arccos', '\\arctan', '\\arctg', '\\arcctg', '\\arcsec', '\\arccsc');
frequency(UNCOMMON, '\\arsinh', '\\arccosh', '\\arctanh', '\\arcsech', '\\arccsch');
frequency(UNCOMMON, '\\arg', '\\ch', '\\cosec', '\\cosh', '\\cot', '\\cotg', '\\coth', '\\csc', '\\ctg', '\\cth', '\\lg', '\\lb', '\\sec', '\\sinh', '\\sh', '\\tanh', '\\tg', '\\th');
category = 'Functions';
defineFunction(['\\deg', '\\dim', '\\exp', '\\hom', '\\ker', '\\lb', '\\lg', '\\ln', '\\log'], '', null, function (name) {
  return {
    type: 'mop',
    limits: 'nolimits',
    symbol: false,
    isFunction: true,
    body: name.slice(1),
    baseFontFamily: 'cmr'
  };
});
frequency(SUPERCOMMON, '\\ln', '\\log', '\\exp');
frequency(292, '\\hom');
frequency(COMMON, '\\dim');
frequency(COMMON, '\\ker', '\\deg'); // >2,000

defineFunction(['\\lim', '\\mod'], '', null, function (name) {
  return {
    type: 'mop',
    limits: 'limits',
    symbol: false,
    body: name.slice(1),
    baseFontFamily: 'cmr'
  };
});
defineFunction(['\\det', '\\max', '\\min'], '', null, function (name) {
  return {
    type: 'mop',
    limits: 'limits',
    symbol: false,
    isFunction: true,
    body: name.slice(1),
    baseFontFamily: 'cmr'
  };
});
frequency(SUPERCOMMON, '\\lim');
frequency(COMMON, '\\det');
frequency(COMMON, '\\mod');
frequency(COMMON, '\\min');
frequency(COMMON, '\\max');
category = 'Decoration'; // A box of the width and height

defineFunction('\\rule', '[raise:dimen]{width:dimen}{thickness:dimen}', null, function (name, args) {
  return {
    type: 'rule',
    shift: args[0],
    width: args[1],
    height: args[2]
  };
});
defineFunction('\\color', '{:color}', {
  allowedInText: true
}, function (_name, args) {
  return {
    color: args[0]
  };
}); // From the xcolor package.
// As per xcolor, this command does not set the mode to text
// (unlike what its name might suggest)

defineFunction('\\textcolor', '{:color}{content:auto*}', {
  allowedInText: true
}, function (_name, args) {
  return {
    color: args[0]
  };
});
frequency(3, '\\textcolor'); // An overline

defineFunction('\\overline', '{:auto}', null, function (name, args) {
  return {
    type: 'line',
    position: 'overline',
    skipBoundary: true,
    body: args[0]
  };
});
frequency(COMMON, '\\overline'); // > 2,000

defineFunction("\\underline", '{:auto}', null, function (name, args) {
  return {
    type: 'line',
    position: 'underline',
    skipBoundary: true,
    body: args[0]
  };
});
frequency(COMMON, "\\underline"); // > 2,000

defineFunction('\\overset', '{annotation:auto}{symbol:auto}', null, function (name, args) {
  return {
    type: 'overunder',
    overscript: args[0],
    skipBoundary: true,
    body: args[1]
  };
});
frequency(COMMON, '\\overset'); // > 2,000

defineFunction("\\underset", '{annotation:auto}{symbol:auto}', null, function (name, args) {
  return {
    type: 'overunder',
    underscript: args[0],
    skipBoundary: true,
    body: args[1]
  };
});
frequency(COMMON, "\\underset"); // > 2,000

defineFunction(['\\stackrel', '\\stackbin'], '{annotation:auto}{symbol:auto}', null, function (name, args) {
  return {
    type: 'overunder',
    overscript: args[0],
    skipBoundary: true,
    body: args[1],
    mathtype: name === '\\stackrel' ? 'mrel' : 'mbin'
  };
});
frequency(COMMON, '\\stackrel'); // > 2,000

frequency(0, '\\stackbin');
defineFunction('\\rlap', '{:auto}', null, function (name, args) {
  return {
    type: 'overlap',
    align: 'right',
    skipBoundary: true,
    body: args[0]
  };
});
frequency(270, '\\rlap');
defineFunction('\\llap', '{:auto}', null, function (name, args) {
  return {
    type: 'overlap',
    align: 'left',
    skipBoundary: true,
    body: args[0]
  };
});
frequency(18, '\\llap');
defineFunction('\\mathrlap', '{:auto}', null, function (name, args) {
  return {
    type: 'overlap',
    mode: 'math',
    align: 'right',
    skipBoundary: true,
    body: args[0]
  };
});
frequency(CRYPTIC, '\\mathrlap');
defineFunction('\\mathllap', '{:auto}', null, function (name, args) {
  return {
    type: 'overlap',
    mode: 'math',
    align: 'left',
    skipBoundary: true,
    body: args[0]
  };
});
frequency(CRYPTIC, '\\mathllap'); // Can be preceded by e.g. '\fboxsep=4pt' (also \fboxrule)
// Note:
// - \boxed: sets content in displaystyle mode (@todo: should change type of argument)
//      equivalent to \fbox{$$<content>$$}
// - \fbox: sets content in 'auto' mode (frequency 777)
// - \framebox[<width>][<alignment>]{<content>} (<alignment> := 'c'|'t'|'b' (center, top, bottom) (frequency 28)
// @todo

defineFunction('\\boxed', '{content:math}', null, function (name, args) {
  return {
    type: 'box',
    framecolor: 'black',
    skipBoundary: true,
    body: args[0]
  };
});
frequency(1236, '\\boxed');
defineFunction('\\colorbox', '{background-color:color}{content:auto}', {
  allowedInText: true
}, function (name, args) {
  return {
    type: 'box',
    backgroundcolor: args[0],
    skipBoundary: true,
    body: args[1]
  };
});
frequency(CRYPTIC, '\\colorbox');
defineFunction('\\fcolorbox', '{frame-color:color}{background-color:color}{content:auto}', {
  allowedInText: true
}, function (name, args) {
  return {
    type: 'box',
    framecolor: args[0],
    backgroundcolor: args[1],
    skipBoundary: true,
    body: args[2]
  };
});
frequency(CRYPTIC, '\\fcolorbox'); // \bbox, MathJax extension
// The first argument is a CSS border property shorthand, e.g.
// \bbox[red], \bbox[5px,border:2px solid red]
// The MathJax syntax is
// arglist ::= <arg>[,<arg>[,<arg>]]
// arg ::= [<background:color>|<padding:dimen>|<style>]
// style ::= 'border:' <string>

defineFunction('\\bbox', '[:bbox]{body:auto}', {
  allowedInText: true
}, function (name, args) {
  if (args[0]) {
    return {
      type: 'box',
      padding: args[0].padding,
      border: args[0].border,
      backgroundcolor: args[0].backgroundcolor,
      skipBoundary: true,
      body: args[1]
    };
  }

  return {
    type: 'box',
    skipBoundary: true,
    body: args[1]
  };
});
frequency(CRYPTIC, '\\bbox'); // \enclose, a MathJax extension mapping to the MathML `menclose` tag.
// The first argument is a comma delimited list of notations, as defined
// here: https://developer.mozilla.org/en-US/docs/Web/MathML/Element/menclose
// The second, optional, specifies the style to use for the notations.

defineFunction('\\enclose', '{notation:string}[style:string]{body:auto}', null, function (name, args) {
  var notations = args[0] || [];
  var result = {
    type: 'enclose',
    strokeColor: 'currentColor',
    strokeWidth: 1,
    strokeStyle: 'solid',
    backgroundcolor: 'transparent',
    padding: 'auto',
    shadow: 'auto',
    captureSelection: true,
    // Do not let children be selected
    body: args[2]
  }; // Extract info from style string

  if (args[1]) {
    // Split the string by comma delimited sub-strings, ignoring commas
    // that may be inside (). For example"x, rgb(a, b, c)" would return
    // ['x', 'rgb(a, b, c)']
    var styles = args[1].split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = styles[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var s = _step5.value;
        var shorthand = s.match(/\s*(\S+)\s+(\S+)\s+(.*)/);

        if (shorthand) {
          result.strokeWidth = fontMetrics.toPx(shorthand[1], 'px');

          if (!isFinite(result.strokeWidth)) {
            result.strokeWidth = 1;
          }

          result.strokeStyle = shorthand[2];
          result.strokeColor = shorthand[3];
        } else {
          var attribute = s.match(/\s*([a-z]*)\s*=\s*"(.*)"/);

          if (attribute) {
            if (attribute[1] === 'mathbackground') {
              result.backgroundcolor = attribute[2];
            } else if (attribute[1] === 'mathcolor') {
              result.strokeColor = attribute[2];
            } else if (attribute[1] === 'padding') {
              result.padding = fontMetrics.toPx(attribute[2], 'px');
            } else if (attribute[1] === 'shadow') {
              result.shadow = attribute[2];
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    if (result.strokeStyle === 'dashed') {
      result.svgStrokeStyle = '5,5';
    } else if (result.strokeStyle === 'dotted') {
      result.svgStrokeStyle = '1,5';
    }
  }

  result.borderStyle = result.strokeWidth + 'px ' + result.strokeStyle + ' ' + result.strokeColor; // Normalize the list of notations.

  notations = notations.toString().split(/[, ]/).filter(function (v) {
    return v.length > 0;
  }).map(function (v) {
    return v.toLowerCase();
  });
  result.notation = {};
  var _iteratorNormalCompletion6 = true;
  var _didIteratorError6 = false;
  var _iteratorError6 = undefined;

  try {
    for (var _iterator6 = notations[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
      var notation = _step6.value;
      result.notation[notation] = true;
    }
  } catch (err) {
    _didIteratorError6 = true;
    _iteratorError6 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
        _iterator6.return();
      }
    } finally {
      if (_didIteratorError6) {
        throw _iteratorError6;
      }
    }
  }

  if (result.notation['updiagonalarrow']) result.notation['updiagonalstrike'] = false;

  if (result.notation['box']) {
    result.notation['left'] = false;
    result.notation['right'] = false;
    result.notation['bottom'] = false;
    result.notation['top'] = false;
  }

  return result;
});
frequency(CRYPTIC, '\\enclose');
defineFunction('\\cancel', '{body:auto}', null, function (name, args) {
  return {
    type: 'enclose',
    strokeColor: 'currentColor',
    strokeWidth: 1,
    strokeStyle: 'solid',
    borderStyle: '1px solid currentColor',
    backgroundcolor: 'transparent',
    padding: 'auto',
    shadow: 'auto',
    notation: {
      "updiagonalstrike": true
    },
    body: args[0]
  };
});
defineFunction('\\bcancel', '{body:auto}', null, function (name, args) {
  return {
    type: 'enclose',
    strokeColor: 'currentColor',
    strokeWidth: 1,
    strokeStyle: 'solid',
    borderStyle: '1px solid currentColor',
    backgroundcolor: 'transparent',
    padding: 'auto',
    shadow: 'auto',
    notation: {
      "downdiagonalstrike": true
    },
    body: args[0]
  };
});
defineFunction('\\xcancel', '{body:auto}', null, function (name, args) {
  return {
    type: 'enclose',
    strokeColor: 'currentColor',
    strokeWidth: 1,
    strokeStyle: 'solid',
    borderStyle: '1px solid currentColor',
    backgroundcolor: 'transparent',
    padding: 'auto',
    shadow: 'auto',
    notation: {
      "updiagonalstrike": true,
      "downdiagonalstrike": true
    },
    body: args[0]
  };
});
frequency(CRYPTIC, '\\cancel', '\\bcancel', '\\xcancel');
category = 'Styling'; // Size

defineFunction(['\\tiny', '\\scriptsize', '\\footnotesize', '\\small', '\\normalsize', '\\large', '\\Large', '\\LARGE', '\\huge', '\\Huge'], '', {
  allowedInText: true
}, function (name, _args) {
  return {
    fontSize: {
      'tiny': 'size1',
      'scriptsize': 'size2',
      'footnotesize': 'size3',
      'small': 'size4',
      'normalsize': 'size5',
      'large': 'size6',
      'Large': 'size7',
      'LARGE': 'size8',
      'huge': 'size9',
      'Huge': 'size10'
    }[name.slice(1)]
  };
}); // SERIES: weight

defineFunction('\\fontseries', '{:text}', {
  allowedInText: true
}, function (_name, args) {
  return {
    fontSeries: parseArgAsString(args[0])
  };
});
defineFunction('\\bf', '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontSeries: 'b'
  };
});
defineFunction('\\bm', '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontSeries: 'b'
  };
}); // Note: switches to math mode

defineFunction('\\bold', '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    mode: 'math',
    fontSeries: 'b'
  };
});
defineFunction(['\\mathbf', '\\boldsymbol'], '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    mode: 'math',
    fontSeries: 'b',
    fontShape: 'n'
  };
});
defineFunction('\\bfseries', '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontSeries: 'b'
  };
});
defineFunction('\\textbf', '{:text*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontSeries: 'b'
  };
});
defineFunction('\\mathmd', '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    mode: 'math',
    fontSeries: 'm',
    fontShape: 'n'
  };
});
defineFunction('\\mdseries', '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontSeries: 'm'
  };
});
defineFunction('\\textmd', '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontSeries: 'm'
  };
}); // @todo \textlf
// SHAPE: italic, small caps

defineFunction('\\fontshape', '{:text}', {
  allowedInText: true
}, function (_name, args) {
  return {
    fontShape: parseArgAsString(args[0])
  };
});
defineFunction('\\it', '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontShape: 'it'
  };
});
defineFunction('\\mathit', '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    mode: 'math',
    fontSeries: 'm',
    fontShape: 'it'
  };
});
defineFunction("\\upshape", '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontShape: 'n'
  };
});
defineFunction('\\textup', '{:text*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontShape: 'n'
  };
});
defineFunction('\\textit', '{:text*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontShape: 'it'
  };
});
defineFunction('\\slshape', '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontShape: 'sl'
  };
});
defineFunction('\\textsl', '{:text*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontShape: 'sl'
  };
}); // Small caps (switches to text mode)

defineFunction('\\scshape', '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    mode: 'text',
    fontShape: 'sc'
  };
});
defineFunction('\\textsc', '{:text*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontShape: 'sc'
  };
}); // FONT FAMILY: Fraktur, Calligraphic, ...

defineFunction('\\fontfamily', '{:text}', {
  allowedInText: true
}, function (_name, args) {
  return {
    fontFamily: parseArgAsString(args[0])
  };
});
defineFunction('\\mathrm', '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    mode: 'math',
    fontFamily: 'cmr',
    fontSeries: 'm',
    fontShape: 'n'
  };
});
defineFunction('\\rmfamily', '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontFamily: 'cmr'
  };
});
defineFunction('\\textrm', '{:text*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontFamily: 'cmr'
  };
});
defineFunction('\\mathsf', '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    mode: 'math',
    baseFontFamily: 'cmss',
    fontSeries: 'm',
    fontShape: 'n'
  };
});
defineFunction('\\sffamily', '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontFamily: 'cmss'
  };
});
defineFunction('\\textsf', '{:text*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontFamily: 'cmss'
  };
});
defineFunction('\\mathtt', '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    mode: 'math',
    baseFontFamily: 'cmtt',
    fontSeries: 'm',
    fontShape: 'n'
  };
});
defineFunction('\\ttfamily', '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontFamily: 'cmtt'
  };
});
defineFunction('\\texttt', '{:text*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontFamily: 'cmtt'
  };
});
defineFunction(['\\Bbb', '\\mathbb'], '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    mode: 'math',
    baseFontFamily: 'bb'
  };
});
defineFunction(['\\frak', '\\mathfrak'], '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    baseFontFamily: 'frak'
  };
});
defineFunction('\\mathcal', '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    mode: 'math',
    baseFontFamily: 'cal',
    fontSeries: 'm',
    fontShape: 'n'
  };
});
defineFunction('\\mathscr', '{:math*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    mode: 'math',
    baseFontFamily: 'scr',
    fontSeries: 'm',
    fontShape: 'n'
  };
});
frequency(SUPERCOMMON, '\\mathbb');
frequency(1081, '\\Bbb');
frequency(0, '\\mathcal');
frequency(COMMON, '\\mathfrak');
frequency(271, '\\frak');
frequency(COMMON, '\\mathscr');
frequency(UNCOMMON, '\\mathsf');
frequency(COMMON, '\\mathtt');
frequency(COMMON, '\\boldsymbol'); // frequency(780, '\\tt');
// @todo: family could be 'none' or 'default'
// "normal" font of the body text, not necessarily roman

defineFunction('\\textnormal', '{:text*}', {
  allowedInText: true
}, function (_name, _args) {
  return {
    fontFamily: 'cmr',
    fontShape: 'n',
    fontSeries: 'n'
  };
}); // Rough synomym for \text{}

/*
An \mbox within math mode does not use the current math font; rather it uses
the typeface of the surrounding running text.
*/

defineFunction('\\mbox', '{:text*}', null, function (_name, _args) {
  return {
    fontFamily: 'cmr'
  };
});
defineFunction('\\text', '{:text*}', {
  allowedInText: true
}, function (_name, _args) {
  return {};
});
/* A MathJax extension: assign a class to the element */

defineFunction('\\class', '{name:text}{content:auto*}', {
  allowedInText: true
}, function (_name, args) {
  return {
    cssClass: parseArgAsString(args[0])
  };
});
/* A MathJax extension: assign an ID to the element */

defineFunction('\\cssId', '{id:text}{content:auto}', {
  allowedInText: true
}, function (_name, args) {
  return {
    cssId: parseArgAsString(args[0]),
    body: args[1],
    type: 'group'
  };
});
/* Note: in TeX, \em is restricted to text mode. We extend it to math */

defineFunction('\\em', '', {
  allowedInText: true
}, function (_name, _args) {
  return {
    cssClass: 'ML__emph',
    type: 'group'
  };
});
/* Note: in TeX, \emph is restricted to text mode. We extend it to math */

defineFunction('\\emph', '{:auto}', {
  allowedInText: true
}, function (_name, args) {
  return {
    cssClass: 'ML__emph',
    body: args[0],
    type: 'group',
    skipBoundary: true
  };
});
frequency(COMMON, '\\textrm');
frequency(COMMON, '\\textit');
frequency(COMMON, '\\textsf');
frequency(COMMON, '\\texttt');
frequency(433, '\\textnormal');
frequency(COMMON, '\\textbf');
frequency(421, '\\textup');
frequency(819, '\\emph');
frequency(49, '\\em');
category = 'Operators'; // Root

defineFunction('\\sqrt', '[index:auto]{radicand:auto}', null, function (name, args) {
  return {
    type: 'surd',
    body: args[1],
    index: args[0]
  };
});
frequency(SUPERCOMMON, '\\sqrt');
category = 'Fractions'; // Fractions

defineFunction(['\\frac', '\\dfrac', '\\tfrac', '\\cfrac', '\\binom', '\\dbinom', '\\tbinom'], '{numerator}{denominator}', null, function (name, args) {
  var result = {
    type: 'genfrac',
    numer: args[0],
    denom: args[1],
    mathstyle: 'auto'
  };

  switch (name) {
    case '\\dfrac':
    case '\\frac':
    case '\\tfrac':
    case '\\cfrac':
      result.hasBarLine = true;
      break;

    case '\\\\atopfrac':
      result.hasBarLine = false;
      break;

    case '\\dbinom':
    case '\\binom':
    case '\\tbinom':
      result.hasBarLine = false;
      result.leftDelim = '(';
      result.rightDelim = ')';
      break;
  }

  switch (name) {
    case '\\dfrac':
    case '\\dbinom':
      result.mathstyle = 'displaystyle';
      break;

    case '\\tfrac':
    case '\\tbinom':
      result.mathstyle = 'textstyle';
      break;
  }

  if (name === '\\cfrac') {
    result.continuousFraction = true;
  }

  return result;
});
/* \\substack: frequency 16 */

/*
\over = \above 0.4pt
\atop = \above 0pt
\choose = \atopwithdelims()
*/
// infix commands:
// {above}\atop{below} --> \genfrac{}{}{0pt}{above}{below}
// {above}\atopwithdelims{leftdelim}{rightdelim}{below} --> \genfrac{leftdelim}{rightdelim}{0pt}{0/1/2/3}{above}{below}
//  Note: 0/1/2/3 -> displaystyle, textstyle, scriptstyle, scriptscriptstyle
// \atopwithdelimiters
// a\above 0.5pt b               -->
// \abovewithdelims
// \choose              --> \binom
// \choose = \atopwithdelims()          INFIX
// \def\brack{\atopwithdelims[]}        INFIX
// \def\brace{\atopwithdelims\{\}}      INFIX
// '\\above', /* {dim} 122 */
// '\\overwithdelims' /* {leftdelim}{rightdelim} w/ barline 15 */,
// '\\atopwithdelims' /* {leftdelim}{rightdelim} no barline 0 */,
// '\\atop' /* nodelims, no barline 0 */,
// '\\brack', '\\brace' like \choose, but
//      with braces and brackets fences. 0 usage in latexsearch */

defineFunction(['\\over'
/* 21 */
, '\\atop'
/* 12 */
, '\\choose'
/* 1968 */
], '', {
  infix: true
}, function (name, args) {
  var numer = args[0];
  var denom = args[1];
  var hasBarLine = false;
  var leftDelim = null;
  var rightDelim = null;

  switch (name) {
    case '\\atop':
      break;

    case '\\over':
      hasBarLine = true;
      break;

    case '\\choose':
      hasBarLine = false;
      leftDelim = '(';
      rightDelim = ')';
      break;

    default:
      throw new Error('Unrecognized genfrac command');
  }

  return {
    type: 'genfrac',
    numer: numer,
    denom: denom,
    hasBarLine: hasBarLine,
    leftDelim: leftDelim,
    rightDelim: rightDelim,
    mathstyle: 'auto'
  };
});
frequency(21, '\\over');
frequency(12, '\\atop');
frequency(1968, '\\choose');
defineFunction(['\\overwithdelims'
/* 21 */
, '\\atopwithdelims'
/* COMMON */
], '{left-delim:delim}{right-delim:delim}', {
  infix: true
}, function (name, args) {
  return {
    type: 'genfrac',
    numer: args[0],
    denom: args[1],
    hasBarLine: false,
    leftDelim: args[2],
    rightDelim: args[3],
    mathstyle: 'auto'
  };
});
frequency(15, '\\overwithdelims');
frequency(COMMON, '\\atopwithdelims'); // frequency(COMMON, '\\frac');
// frequency(UNCOMMON, '\\binom');
// frequency(RARE, '\\dfrac', '\\tfrac', '\\dbinom', '\\tbinom');
// Slashed package

/*
defineFunction('\\slashed'
*/

category = 'Fractions';
defineFunction('\\pdiff', '{numerator}{denominator}', null, function (_funcname, args) {
  return {
    type: 'genfrac',
    numer: args[0],
    denom: args[1],
    numerPrefix: "\u2202",
    denomPrefix: "\u2202",
    hasBarLine: true,
    leftDelim: null,
    rightDelim: null,
    mathstyle: 'auto'
  };
}); // frequency(RARE, '\\pdiff');
// Quantifiers

category = 'Quantifiers';
defineSymbol('\\forall', MAIN, MATHORD, "\u2200", SUPERCOMMON);
defineSymbol('\\exists', MAIN, MATHORD, "\u2203", SUPERCOMMON);
defineSymbol('\\nexists', AMS, MATHORD, "\u2204", SUPERCOMMON);
defineSymbol('\\mid', MAIN, REL, "\u2223", COMMON);
defineSymbol('\\top', MAIN, MATHORD, "\u22A4", RARE);
defineSymbol('\\bot', MAIN, MATHORD, "\u22A5", RARE);
category = 'Variable Sized Symbols'; // Limits, symbols

defineFunction(['\\sum', '\\prod', '\\bigcup', '\\bigcap', '\\coprod', '\\bigvee', '\\bigwedge', '\\biguplus', '\\bigotimes', '\\bigoplus', '\\bigodot', '\\bigsqcup', '\\smallint', '\\intop'], '', null, function (name) {
  return {
    type: 'mop',
    limits: 'auto',
    symbol: true,
    baseFontFamily: 'cmr',
    body: {
      'coprod': "\u2210",
      'bigvee': "\u22C1",
      'bigwedge': "\u22C0",
      'biguplus': "\u2A04",
      'bigcap': "\u22C2",
      'bigcup': "\u22C3",
      'intop': "\u222B",
      'prod': "\u220F",
      'sum': "\u2211",
      'bigotimes': "\u2A02",
      'bigoplus': "\u2A01",
      'bigodot': "\u2A00",
      'bigsqcup': "\u2A06",
      'smallint': "\u222B"
    }[name.slice(1)]
  };
}); // No limits, symbols

defineFunction(['\\int', '\\iint', '\\iiint', '\\oint', '\\oiint', '\\oiiint', '\\intclockwise', '\\varointclockwise', '\\ointctrclockwise', '\\intctrclockwise'], '', null, function (name) {
  return {
    type: 'mop',
    limits: 'nolimits',
    symbol: true,
    body: {
      'int': "\u222B",
      'iint': "\u222C",
      'iiint': "\u222D",
      'oint': "\u222E",
      'oiint': "\u222F",
      'oiiint': "\u2230",
      'intclockwise': "\u2231",
      'varointclockwise': "\u2232",
      'ointctrclockwise': "\u2233",
      'intctrclockwise': "\u2A11"
    }[name.slice(1)]
  };
});
frequency(SUPERCOMMON, '\\sum', '\\prod', '\\bigcap', '\\bigcup', '\\int');
frequency(COMMON, '\\bigoplus', '\\smallint', '\\iint', '\\oint');
frequency(RARE, '\\bigwedge', '\\bigvee');
frequency(756, '\\coprod');
frequency(723, '\\bigsqcup');
frequency(1241, '\\bigotimes');
frequency(150, '\\bigodot');
frequency(174, '\\biguplus');
frequency(878, '\\iiint');
frequency(97, '\\intop'); // Misc Symbols

category = 'Various';
defineSymbol('\\sharp', MAIN, MATHORD, "\u266F", COMMON); // >2,000

defineSymbol('\\flat', MAIN, MATHORD, "\u266D", 590);
defineSymbol('\\natural', MAIN, MATHORD, "\u266E", 278);
defineSymbol('\\#', MAIN, MATHORD, "#", RARE);
defineSymbol('\\&', MAIN, MATHORD, "&", RARE);
defineSymbol('\\clubsuit', MAIN, MATHORD, "\u2663", 172);
defineSymbol('\\heartsuit', MAIN, MATHORD, "\u2661", ARCANE);
defineSymbol('\\spadesuit', MAIN, MATHORD, "\u2660", ARCANE);
defineSymbol('\\diamondsuit', MAIN, MATHORD, "\u2662", CRYPTIC); // defineSymbol( '\\cross',  MAIN,  MATHORD, '\uF4A0'); // NOTE: not a real TeX symbol, but Mathematica
// defineSymbol( '\\transpose',  MAIN,  MATHORD, '\uF3C7'); // NOTE: not a real TeX symbol, but Mathematica
// defineSymbol( '\\conjugate', 'conj'],  MAIN,  MATHORD, '\uF3C8'); // NOTE: not a real TeX symbol, but Mathematica
// defineSymbol( '\\conjugatetranspose',  MAIN,  MATHORD, '\uF3C9'); // NOTE: not a real TeX symbol, but Mathematica
// defineSymbol( '\\hermitianconjugate',  MAIN,  MATHORD, '\uF3CE'); // NOTE: not a real TeX symbol, but Mathematica

defineSymbol('\\differencedelta', MAIN, REL, "\u2206", COMMON);
category = 'Letters and Letter Like Forms';
defineFunction("\\unicode", '{charcode:number}', null, function (name, args) {
  var codepoint = parseInt(args[0]);
  if (!isFinite(codepoint)) codepoint = 0x2753; // BLACK QUESTION MARK

  return {
    type: 'mord',
    body: String.fromCodePoint(codepoint)
  };
});
defineSymbol('\\backslash', MAIN, MATHORD, '\\');
defineSymbol('?', MAIN, MATHORD, '?');
defineSymbol('!', MAIN, MATHORD, '!');
defineSymbol('\\nabla', MAIN, MATHORD, "\u2207", SUPERCOMMON);
defineSymbol('\\partial', MAIN, MATHORD, "\u2202", SUPERCOMMON); // >2,000

defineSymbol('\\ell', MAIN, MATHORD, "\u2113", COMMON); // >2,000

defineSymbol('\\imaginaryI', MAIN, MATHORD, 'i'); // NOTE: not a real TeX symbol, but Mathematica
// NOTE: set in math as per ISO 80000-2:2009.

defineSymbol('\\imaginaryJ', MAIN, MATHORD, 'j'); // NOTE: not a real TeX symbol, but Mathematica
// NOTE: set in math as per ISO 80000-2:2009.

defineFunction(['\\Re', '\\Im'], '', null, function (name) {
  return {
    type: 'mop',
    limits: 'nolimits',
    symbol: false,
    isFunction: true,
    body: {
      '\\Re': "\u211C",
      '\\Im': "\u2111"
    }[name],
    baseFontFamily: 'frak'
  };
});
defineSymbol('\\hbar', MAIN, MATHORD, "\u210F", COMMON); // >2,000

defineSymbol('\\hslash', AMS, MATHORD, "\u210F", COMMON); // >2,000

defineSymbol('\\differentialD', 'cmr', MATHORD, 'd'); // NOTE: not a real TeX symbol, but Mathematica

defineSymbol('\\rd', 'cmr', MATHORD, 'd'); // NOTE: not a real TeX symbol, but used in ProofWiki
// NOTE: set in math as per ISO 80000-2:2009.

defineSymbol('\\capitalDifferentialD', 'cmr', MATHORD, 'D'); // NOTE: not a real TeX symbol, but Mathematica
// NOTE: set in math as per ISO 80000-2:2009.

defineSymbol('\\rD', 'cmr', MATHORD, 'D'); // NOTE: not a real TeX symbol

defineSymbol('\\exponentialE', 'cmr', MATHORD, 'e'); // NOTE: not a real TeX symbol, but Mathematica
// NOTE: set in math as per ISO 80000-2:2009.

defineSymbol('\\Finv', AMS, MATHORD, "\u2132", 3);
defineSymbol('\\Game', AMS, MATHORD, "\u2141", 1);
defineSymbol('\\wp', MAIN, MATHORD, "\u2118", 1306);
defineSymbol('\\eth', AMS, MATHORD, "\xF0", 77);
defineSymbol('\\mho', AMS, MATHORD, "\u2127", 138);
defineSymbol('\\Bbbk', AMS, MATHORD, "k");
defineSymbol('\\doubleStruckCapitalN', 'bb', MATHORD, 'N'); // NOTE: Not TeX?

defineSymbol('\\N', 'bb', MATHORD, 'N'); // NOTE: Check if standard Latex

defineSymbol('\\doubleStruckCapitalR', 'bb', MATHORD, 'R'); // NOTE: Not TeX?

defineSymbol('\\R', 'bb', MATHORD, 'R'); // NOTE: Check if standard Latex

defineSymbol('\\doubleStruckCapitalQ', 'bb', MATHORD, 'Q'); // NOTE: Not TeX?

defineSymbol('\\Q', 'bb', MATHORD, 'Q'); // NOTE: Check if standard Latex

defineSymbol('\\doubleStruckCapitalC', 'bb', MATHORD, 'C'); // NOTE: Not TeX?

defineSymbol('\\C', 'bb', MATHORD, 'C'); // NOTE: Check if standard Latex

defineSymbol('\\doubleStruckCapitalZ', 'bb', MATHORD, 'Z'); // NOTE: Not TeX?

defineSymbol('\\Z', 'bb', MATHORD, 'Z'); // NOTE: Check if standard Latex

defineSymbol('\\doubleStruckCapitalP', 'bb', MATHORD, 'P'); // NOTE: Not TeX?

defineSymbol('\\P', 'bb', MATHORD, 'P'); // NOTE: Check if standard Latex

defineSymbol('\\scriptCapitalE', 'scr', MATHORD, 'E'); // NOTE: Not TeX?

defineSymbol('\\scriptCapitalH', 'scr', MATHORD, 'H'); // NOTE: Not TeX?

defineSymbol('\\scriptCapitalL', 'scr', MATHORD, 'L'); // NOTE: Not TeX?

defineSymbol('\\gothicCapitalC', 'frak', MATHORD, 'C'); // NOTE: Not TeX?

defineSymbol('\\gothicCapitalH', 'frak', MATHORD, 'H'); // NOTE: Not TeX?

defineSymbol('\\gothicCapitalI', 'frak', MATHORD, 'I'); // NOTE: Not TeX?

defineSymbol('\\gothicCapitalR', 'frak', MATHORD, 'R'); // NOTE: Not TeX?

defineSymbol('\\pounds', MAIN, MATHORD, "\xA3", 509);
defineSymbol('\\yen', AMS, MATHORD, "\xA5", 57);
defineSymbol('\\euro', MAIN, MATHORD, "\u20AC", 4); // NOTE: not TeX built-in, but textcomp package
// TODO Koppa, Stigma, Sampi
// Math and Text

category = 'Crosses';
defineSymbol('\\textdagger', MAIN, BIN, "\u2020");
defineSymbol('\\dagger', MAIN, BIN, "\u2020", COMMON); // >2000

defineSymbol('\\dag', MAIN, BIN, "\u2020", COMMON); // >2000 results

defineSymbol('\\ddag', MAIN, BIN, "\u2021", 500); // 500 results in latexsearch

defineSymbol('\\textdaggerdbl', MAIN, BIN, "\u2021");
defineSymbol('\\ddagger', MAIN, BIN, "\u2021", 353); // 353 results in latexsearch

defineSymbol('\\maltese', AMS, MATHORD, "\u2720", 24); // Arrow Symbols

category = 'Arrows';
defineSymbol('\\longrightarrow', MAIN, REL, "\u27F6", SUPERCOMMON); // >2,000

defineSymbol('\\rightarrow', MAIN, REL, "\u2192", SUPERCOMMON); // >2,000

defineSymbol('\\Longrightarrow', MAIN, REL, "\u27F9", SUPERCOMMON); // See \\implies

defineSymbol('\\Rightarrow', MAIN, REL, "\u21D2", SUPERCOMMON); // >2,000

defineSymbol('\\longmapsto', MAIN, REL, "\u27FC", COMMON); // >2,000

defineSymbol('\\mapsto', MAIN, REL, "\u21A6", COMMON); // >2,000

defineSymbol('\\Longleftrightarrow', MAIN, REL, "\u27FA", COMMON); // >2,000

defineSymbol('\\rightleftarrows', AMS, REL, "\u21C4", COMMON); // >2,000

defineSymbol('\\leftarrow', MAIN, REL, "\u2190", COMMON); // >2,000

defineSymbol('\\curvearrowleft', AMS, REL, "\u21B6", COMMON); // >2,000

defineSymbol("\\uparrow", MAIN, REL, "\u2191", COMMON); // >2,000

defineSymbol('\\downarrow', MAIN, REL, "\u2193", COMMON); // >2,000

defineSymbol('\\hookrightarrow', MAIN, REL, "\u21AA", COMMON); // >2,000

defineSymbol('\\rightharpoonup', MAIN, REL, "\u21C0", COMMON); // >2,000

defineSymbol('\\rightleftharpoons', MAIN, REL, "\u21CC", COMMON); // >2,000

defineSymbol('\\Leftarrow', MAIN, REL, "\u21D0", 1695);
defineSymbol('\\longleftrightarrow', MAIN, REL, "\u27F7", 1599);
defineSymbol('\\longleftarrow', MAIN, REL, "\u27F5", 878);
defineSymbol('\\Longleftarrow', MAIN, REL, "\u27F8", 296);
defineSymbol('\\searrow', MAIN, REL, "\u2198", 1609);
defineSymbol('\\nearrow', MAIN, REL, "\u2197", 1301);
defineSymbol('\\swarrow', MAIN, REL, "\u2199", 167);
defineSymbol('\\nwarrow', MAIN, REL, "\u2196", 108);
defineSymbol("\\Uparrow", MAIN, REL, "\u21D1", 257);
defineSymbol('\\Downarrow', MAIN, REL, "\u21D3", 556);
defineSymbol("\\updownarrow", MAIN, REL, "\u2195", 192);
defineSymbol("\\Updownarrow", MAIN, REL, "\u21D5", 161);
defineSymbol('\\hookleftarrow', MAIN, REL, "\u21A9", 115);
defineSymbol('\\leftharpoonup', MAIN, REL, "\u21BC", 93);
defineSymbol('\\leftharpoondown', MAIN, REL, "\u21BD", 42);
defineSymbol('\\rightharpoondown', MAIN, REL, "\u21C1", 80);
defineSymbol('\\leftrightarrows', AMS, REL, "\u21C6", 765);
defineSymbol('\\dashrightarrow', AMS, REL, "\u21E2", 311);
defineSymbol('\\dashleftarrow', AMS, REL, "\u21E0", 5);
defineSymbol('\\leftleftarrows', AMS, REL, "\u21C7", 8);
defineSymbol('\\Lleftarrow', AMS, REL, "\u21DA", 7);
defineSymbol('\\twoheadleftarrow', AMS, REL, "\u219E", 32);
defineSymbol('\\leftarrowtail', AMS, REL, "\u21A2", 25);
defineSymbol('\\looparrowleft', AMS, REL, "\u21AB", 6);
defineSymbol('\\leftrightharpoons', AMS, REL, "\u21CB", 205);
defineSymbol('\\circlearrowleft', AMS, REL, "\u21BA", 105);
defineSymbol('\\Lsh', AMS, REL, "\u21B0", 11);
defineSymbol("\\upuparrows", AMS, REL, "\u21C8", 15);
defineSymbol('\\downharpoonleft', AMS, REL, "\u21C3", 21);
defineSymbol('\\multimap', AMS, REL, "\u22B8", 108);
defineSymbol('\\leftrightsquigarrow', AMS, REL, "\u21AD", 31);
defineSymbol('\\twoheadrightarrow', AMS, REL, "\u21A0", 835);
defineSymbol('\\rightarrowtail', AMS, REL, "\u21A3", 195);
defineSymbol('\\looparrowright', AMS, REL, "\u21AC", 37);
defineSymbol('\\curvearrowright', AMS, REL, "\u21B7", 209);
defineSymbol('\\circlearrowright', AMS, REL, "\u21BB", 63);
defineSymbol('\\Rsh', AMS, REL, "\u21B1", 18);
defineSymbol('\\downdownarrows', AMS, REL, "\u21CA", 6);
defineSymbol("\\upharpoonright", AMS, REL, "\u21BE", 579);
defineSymbol('\\downharpoonright', AMS, REL, "\u21C2", 39);
defineSymbol('\\rightsquigarrow', AMS, REL, "\u21DD", 674);
defineSymbol('\\leadsto', AMS, REL, "\u21DD", 709);
defineSymbol('\\Rrightarrow', AMS, REL, "\u21DB", 62);
defineSymbol('\\restriction', AMS, REL, "\u21BE", 29);
defineSymbol("\\upharpoonleft", AMS, REL, "\u21BF", CRYPTIC);
defineSymbol('\\rightrightarrows', AMS, REL, "\u21C9", CRYPTIC); // AMS Negated Arrows

category = 'Negated Arrows';
defineSymbol('\\nrightarrow', AMS, REL, "\u219B", 324);
defineSymbol('\\nRightarrow', AMS, REL, "\u21CF", 107);
defineSymbol('\\nleftrightarrow', AMS, REL, "\u21AE", 36);
defineSymbol('\\nLeftrightarrow', AMS, REL, "\u21CE", 20);
defineSymbol('\\nleftarrow', AMS, REL, "\u219A", 7);
defineSymbol('\\nLeftarrow', AMS, REL, "\u21CD", 5); // AMS Negated Binary Relations

category = 'Negated Relations';
defineSymbol('\\nless', AMS, REL, "\u226E", 146);
defineSymbol('\\nleqslant', AMS, REL, "\uE010", 58);
defineSymbol('\\lneq', AMS, REL, "\u2A87", 54);
defineSymbol('\\lneqq', AMS, REL, "\u2268", 36);
defineSymbol('\\nleqq', AMS, REL, "\uE011", 18);
defineSymbol("\\unlhd", AMS, BIN, "\u22B4", 253);
defineSymbol("\\unrhd", AMS, BIN, "\u22B5", 66);
defineSymbol('\\lvertneqq', AMS, REL, "\uE00C", 6);
defineSymbol('\\lnsim', AMS, REL, "\u22E6", 4);
defineSymbol('\\lnapprox', AMS, REL, "\u2A89", CRYPTIC);
defineSymbol('\\nprec', AMS, REL, "\u2280", 71);
defineSymbol('\\npreceq', AMS, REL, "\u22E0", 57);
defineSymbol('\\precnsim', AMS, REL, "\u22E8", 4);
defineSymbol('\\precnapprox', AMS, REL, "\u2AB9", 2);
defineSymbol('\\nsim', AMS, REL, "\u2241", 40);
defineSymbol('\\nshortmid', AMS, REL, "\uE006", 1);
defineSymbol('\\nmid', AMS, REL, "\u2224", 417);
defineSymbol('\\nvdash', AMS, REL, "\u22AC", 266);
defineSymbol('\\nvDash', AMS, REL, "\u22AD", 405);
defineSymbol('\\ngtr', AMS, REL, "\u226F", 90);
defineSymbol('\\ngeqslant', AMS, REL, "\uE00F", 23);
defineSymbol('\\ngeqq', AMS, REL, "\uE00E", 12);
defineSymbol('\\gneq', AMS, REL, "\u2A88", 29);
defineSymbol('\\gneqq', AMS, REL, "\u2269", 35);
defineSymbol('\\gvertneqq', AMS, REL, "\uE00D", 6);
defineSymbol('\\gnsim', AMS, REL, "\u22E7", 3);
defineSymbol('\\gnapprox', AMS, REL, "\u2A8A", CRYPTIC);
defineSymbol('\\nsucc', AMS, REL, "\u2281", 44);
defineSymbol('\\nsucceq', AMS, REL, "\u22E1", CRYPTIC);
defineSymbol('\\succnsim', AMS, REL, "\u22E9", 4);
defineSymbol('\\succnapprox', AMS, REL, "\u2ABA", CRYPTIC);
defineSymbol('\\ncong', AMS, REL, "\u2246", 128);
defineSymbol('\\nshortparallel', AMS, REL, "\uE007", 6);
defineSymbol('\\nparallel', AMS, REL, "\u2226", 54);
defineSymbol('\\nVDash', AMS, REL, "\u22AF", 5);
defineSymbol('\\nsupseteqq', AMS, REL, "\uE018", 1);
defineSymbol('\\supsetneq', AMS, REL, "\u228B", 286);
defineSymbol('\\varsupsetneq', AMS, REL, "\uE01B", 2);
defineSymbol('\\supsetneqq', AMS, REL, "\u2ACC", 49);
defineSymbol('\\varsupsetneqq', AMS, REL, "\uE019", 3);
defineSymbol('\\nVdash', AMS, REL, "\u22AE", 179);
defineSymbol('\\precneqq', AMS, REL, "\u2AB5", 11);
defineSymbol('\\succneqq', AMS, REL, "\u2AB6", 3);
defineSymbol('\\nsubseteqq', AMS, REL, "\uE016", 16); // AMS Misc

category = 'Various';
defineSymbol('\\checkmark', AMS, MATHORD, "\u2713", 1025);
defineSymbol('\\diagup', AMS, MATHORD, "\u2571", 440);
defineSymbol('\\diagdown', AMS, MATHORD, "\u2572", 175);
defineSymbol('\\measuredangle', AMS, MATHORD, "\u2221", 271);
defineSymbol('\\sphericalangle', AMS, MATHORD, "\u2222", 156);
defineSymbol('\\backprime', AMS, MATHORD, "\u2035", 104);
defineSymbol('\\backdoubleprime', AMS, MATHORD, "\u2036", CRYPTIC);
category = 'Shapes';
defineSymbol('\\ast', MAIN, BIN, "\u2217", SUPERCOMMON); // >2,000

defineSymbol('\\star', MAIN, BIN, "\u22C6", COMMON); // >2,000

defineSymbol('\\diamond', MAIN, BIN, "\u22C4", 1356);
defineSymbol('\\Diamond', AMS, MATHORD, "\u25CA", 695);
defineSymbol('\\lozenge', AMS, MATHORD, "\u25CA", 422);
defineSymbol('\\blacklozenge', AMS, MATHORD, "\u29EB", 344);
defineSymbol('\\bigstar', AMS, MATHORD, "\u2605", 168); // AMS Hebrew

category = 'Hebrew';
defineSymbol('\\aleph', MAIN, MATHORD, "\u2135", 1381);
defineSymbol('\\beth', AMS, MATHORD, "\u2136", 54);
defineSymbol('\\daleth', AMS, MATHORD, "\u2138", 43);
defineSymbol('\\gimel', AMS, MATHORD, "\u2137", 36); // AMS Delimiters

category = 'Fences';
defineSymbol('\\lbrace', MAIN, OPEN, '{', SUPERCOMMON); // >2,000

defineSymbol('\\rbrace', MAIN, CLOSE, '}', SUPERCOMMON); // >2,000

defineSymbol('\\langle', MAIN, OPEN, "\u27E8", COMMON); // >2,000

defineSymbol('\\rangle', MAIN, CLOSE, "\u27E9", COMMON);
defineSymbol('\\lfloor', MAIN, OPEN, "\u230A", COMMON); // >2,000

defineSymbol('\\rfloor', MAIN, CLOSE, "\u230B", COMMON); // >2,000

defineSymbol('\\lceil', MAIN, OPEN, "\u2308", COMMON); // >2,000

defineSymbol('\\rceil', MAIN, CLOSE, "\u2309", COMMON); // >2,000

defineSymbol('\\vert', MAIN, MATHORD, "\u2223", SUPERCOMMON); // >2,000

defineSymbol('\\mvert', MAIN, REL, "\u2223");
defineSymbol('\\lvert', MAIN, OPEN, "\u2223", 496);
defineSymbol('\\rvert', MAIN, CLOSE, "\u2223", 496);
defineSymbol('\\|', MAIN, MATHORD, "\u2225");
defineSymbol('\\Vert', MAIN, MATHORD, "\u2225", SUPERCOMMON); // >2,000

defineSymbol('\\mVert', MAIN, MATHORD, "\u2225");
defineSymbol('\\lVert', MAIN, OPEN, "\u2225", 287);
defineSymbol('\\rVert', MAIN, CLOSE, "\u2225", CRYPTIC);
defineSymbol('\\lbrack', MAIN, OPEN, '[', 574);
defineSymbol('\\rbrack', MAIN, CLOSE, ']', 213);
defineSymbol('\\{', MAIN, OPEN, '{');
defineSymbol('\\}', MAIN, CLOSE, '}');
defineSymbol('(', MAIN, OPEN, '(');
defineSymbol(')', MAIN, CLOSE, ')');
defineSymbol('[', MAIN, OPEN, '[');
defineSymbol(']', MAIN, CLOSE, ']');
defineSymbol("\\ulcorner", AMS, OPEN, "\u250C", 296);
defineSymbol("\\urcorner", AMS, CLOSE, "\u2510", 310);
defineSymbol('\\llcorner', AMS, OPEN, "\u2514", 137);
defineSymbol('\\lrcorner', AMS, CLOSE, "\u2518", 199); // Large Delimiters

defineSymbol('\\lgroup', MAIN, OPEN, "\u27EE", 24);
defineSymbol('\\rgroup', MAIN, CLOSE, "\u27EF", 24);
defineSymbol('\\lmoustache', MAIN, OPEN, "\u23B0", CRYPTIC);
defineSymbol('\\rmoustache', MAIN, CLOSE, "\u23B1", CRYPTIC);
defineFunction(['\\middle'], '{:delim}', null, function (name, args) {
  return {
    type: 'delim',
    delim: args[0]
  };
});
category = 'Sizing'; // Extra data needed for the delimiter parse function down below

var delimiterSizes = {
  '\\bigl': {
    mclass: 'mopen',
    size: 1
  },
  '\\Bigl': {
    mclass: 'mopen',
    size: 2
  },
  '\\biggl': {
    mclass: 'mopen',
    size: 3
  },
  '\\Biggl': {
    mclass: 'mopen',
    size: 4
  },
  '\\bigr': {
    mclass: 'mclose',
    size: 1
  },
  '\\Bigr': {
    mclass: 'mclose',
    size: 2
  },
  '\\biggr': {
    mclass: 'mclose',
    size: 3
  },
  '\\Biggr': {
    mclass: 'mclose',
    size: 4
  },
  '\\bigm': {
    mclass: 'mrel',
    size: 1
  },
  '\\Bigm': {
    mclass: 'mrel',
    size: 2
  },
  '\\biggm': {
    mclass: 'mrel',
    size: 3
  },
  '\\Biggm': {
    mclass: 'mrel',
    size: 4
  },
  '\\big': {
    mclass: 'mord',
    size: 1
  },
  '\\Big': {
    mclass: 'mord',
    size: 2
  },
  '\\bigg': {
    mclass: 'mord',
    size: 3
  },
  '\\Bigg': {
    mclass: 'mord',
    size: 4
  }
};
defineFunction(['\\bigl', '\\Bigl', '\\biggl', '\\Biggl', '\\bigr', '\\Bigr', '\\biggr', '\\Biggr', '\\bigm', '\\Bigm', '\\biggm', '\\Biggm', '\\big', '\\Big', '\\bigg', '\\Bigg'], '{:delim}', null, function (name, args) {
  return {
    type: 'sizeddelim',
    size: delimiterSizes[name].size,
    cls: delimiterSizes[name].mclass,
    delim: args[0]
  };
}); // Relations

category = 'Relations';
defineSymbol('=', MAIN, REL, '=', SUPERCOMMON);
defineSymbol('\\ne', MAIN, REL, "\u2260", SUPERCOMMON); // >2,000

defineSymbol('\\neq', MAIN, REL, "\u2260", COMMON); // >2,000
// defineSymbol( '\\longequal',  MAIN,  REL, '\uF7D9');   // NOTE: Not TeXematica

defineSymbol('<', MAIN, REL, '<', SUPERCOMMON); // >2,000

defineSymbol('\\lt', MAIN, REL, '<', COMMON); // >2,000

defineSymbol('>', MAIN, REL, '>', SUPERCOMMON); // >2,000

defineSymbol('\\gt', MAIN, REL, '>', COMMON); // >2,000

defineSymbol('\\le', MAIN, REL, "\u2264", COMMON); // >2,000

defineSymbol('\\ge', MAIN, REL, "\u2265", COMMON); // >2,000

defineSymbol('\\leqslant', AMS, REL, "\u2A7D", SUPERCOMMON); // > 2,000

defineSymbol('\\geqslant', AMS, REL, "\u2A7E", SUPERCOMMON); // > 2,000

defineSymbol('\\leq', MAIN, REL, "\u2264", COMMON); // >2,000

defineSymbol('\\geq', MAIN, REL, "\u2265", COMMON); // >2,000

defineSymbol('\\ll', MAIN, REL, "\u226A");
defineSymbol('\\gg', MAIN, REL, "\u226B", COMMON); // >2,000

defineSymbol('\\coloneq', MAIN, REL, "\u2254", 5);
defineSymbol('\\measeq', MAIN, REL, "\u225D"); // MEASSURED BY

defineSymbol('\\eqdef', MAIN, REL, "\u225E");
defineSymbol('\\questeq', MAIN, REL, "\u225F"); // QUESTIONED EQUAL TO

defineSymbol(':', MAIN, REL, ':');
defineSymbol('\\cong', MAIN, REL, "\u2245", COMMON); // >2,000

defineSymbol('\\equiv', MAIN, REL, "\u2261", COMMON); // >2,000

defineSymbol('\\prec', MAIN, REL, "\u227A", COMMON); // >2,000

defineSymbol('\\preceq', MAIN, REL, "\u2AAF", COMMON); // >2,000

defineSymbol('\\succ', MAIN, REL, "\u227B", COMMON); // >2,000

defineSymbol('\\succeq', MAIN, REL, "\u2AB0", 1916);
defineSymbol('\\perp', MAIN, REL, "\u22A5", COMMON); // > 2,000

defineSymbol('\\parallel', MAIN, REL, "\u2225", COMMON); // >2,000

defineSymbol('\\propto', MAIN, REL, "\u221D", COMMON); // > 2,000

defineSymbol('\\Colon', MAIN, REL, "\u2237");
defineSymbol('\\smile', MAIN, REL, "\u2323", COMMON); // > 2,000

defineSymbol('\\frown', MAIN, REL, "\u2322", COMMON); // > 2,000

defineSymbol('\\sim', MAIN, REL, "\u223C", COMMON); // >2,000

defineSymbol('\\gtrsim', AMS, REL, "\u2273", COMMON); // >2,000

defineSymbol('\\approx', MAIN, REL, "\u2248", SUPERCOMMON); // >2,000

defineSymbol('\\approxeq', AMS, REL, "\u224A", 147);
defineSymbol('\\thickapprox', AMS, REL, "\u2248", 377);
defineSymbol('\\lessapprox', AMS, REL, "\u2A85", 146);
defineSymbol('\\gtrapprox', AMS, REL, "\u2A86", 95);
defineSymbol('\\precapprox', AMS, REL, "\u2AB7", 50);
defineSymbol('\\succapprox', AMS, REL, "\u2AB8", CRYPTIC);
defineSymbol('\\thicksim', AMS, REL, "\u223C", 779);
defineSymbol('\\succsim', AMS, REL, "\u227F", 251);
defineSymbol('\\precsim', AMS, REL, "\u227E", 104);
defineSymbol('\\backsim', AMS, REL, "\u223D", 251);
defineSymbol('\\eqsim', AMS, REL, "\u2242", 62);
defineSymbol('\\backsimeq', AMS, REL, "\u22CD", 91);
defineSymbol('\\simeq', MAIN, REL, "\u2243", CRYPTIC);
defineSymbol('\\lesssim', AMS, REL, "\u2272", CRYPTIC);
defineSymbol('\\nleq', AMS, REL, "\u2270", 369);
defineSymbol('\\ngeq', AMS, REL, "\u2271", 164);
defineSymbol('\\smallsmile', AMS, REL, "\u2323", 31);
defineSymbol('\\smallfrown', AMS, REL, "\u2322", 71);
defineSymbol('\\bowtie', MAIN, REL, "\u22C8", 558);
defineSymbol('\\asymp', MAIN, REL, "\u224D", 755);
defineSymbol('\\sqsubseteq', MAIN, REL, "\u2291", 1255);
defineSymbol('\\sqsupseteq', MAIN, REL, "\u2292", 183);
defineSymbol('\\leqq', AMS, REL, "\u2266", 1356);
defineSymbol('\\eqslantless', AMS, REL, "\u2A95", 15);
defineSymbol('\\lll', AMS, REL, "\u22D8", 157);
defineSymbol('\\lessgtr', AMS, REL, "\u2276", 281);
defineSymbol('\\lesseqgtr', AMS, REL, "\u22DA", 134);
defineSymbol('\\lesseqqgtr', AMS, REL, "\u2A8B", CRYPTIC);
defineSymbol('\\risingdotseq', AMS, REL, "\u2253", 8);
defineSymbol('\\fallingdotseq', AMS, REL, "\u2252", 99);
defineSymbol('\\subseteqq', AMS, REL, "\u2AC5", 82);
defineSymbol('\\Subset', AMS, REL, "\u22D0");
defineSymbol('\\sqsubset', AMS, REL, "\u228F", 309);
defineSymbol('\\preccurlyeq', AMS, REL, "\u227C", 549);
defineSymbol('\\curlyeqprec', AMS, REL, "\u22DE", 14);
defineSymbol('\\vDash', AMS, REL, "\u22A8", 646);
defineSymbol('\\Vvdash', AMS, REL, "\u22AA", 20);
defineSymbol('\\bumpeq', AMS, REL, "\u224F", 13);
defineSymbol('\\Bumpeq', AMS, REL, "\u224E", 12);
defineSymbol('\\geqq', AMS, REL, "\u2267", 972);
defineSymbol('\\eqslantgtr', AMS, REL, "\u2A96", 13);
defineSymbol('\\ggg', AMS, REL, "\u22D9", 127);
defineSymbol('\\gtrless', AMS, REL, "\u2277", 417);
defineSymbol('\\gtreqless', AMS, REL, "\u22DB", 190);
defineSymbol('\\gtreqqless', AMS, REL, "\u2A8C", 91);
defineSymbol('\\supseteqq', AMS, REL, "\u2AC6", 6);
defineSymbol('\\Supset', AMS, REL, "\u22D1", 34);
defineSymbol('\\sqsupset', AMS, REL, "\u2290", 71);
defineSymbol('\\succcurlyeq', AMS, REL, "\u227D", 442);
defineSymbol('\\curlyeqsucc', AMS, REL, "\u22DF", 10);
defineSymbol('\\Vdash', AMS, REL, "\u22A9", 276);
defineSymbol('\\shortmid', AMS, REL, "\u2223", 67);
defineSymbol('\\shortparallel', AMS, REL, "\u2225", 17);
defineSymbol('\\between', AMS, REL, "\u226C", 110);
defineSymbol('\\pitchfork', AMS, REL, "\u22D4", 66);
defineSymbol('\\varpropto', AMS, REL, "\u221D", 203);
defineSymbol('\\backepsilon', AMS, REL, "\u220D", 176);
defineSymbol('\\llless', AMS, REL, "\u22D8", CRYPTIC);
defineSymbol('\\gggtr', AMS, REL, "\u22D9", CRYPTIC);
defineSymbol('\\lhd', AMS, BIN, "\u22B2", 447);
defineSymbol('\\rhd', AMS, BIN, "\u22B3", 338);
defineSymbol('\\Join', MAIN, REL, "\u22C8", 35);
defineSymbol('\\doteq', MAIN, REL, "\u2250", 1450);
defineSymbol('\\doteqdot', AMS, REL, "\u2251", 60);
defineSymbol('\\Doteq', AMS, REL, "\u2251", CRYPTIC);
defineSymbol('\\eqcirc', AMS, REL, "\u2256", 6);
defineSymbol('\\circeq', AMS, REL, "\u2257", 31);
defineSymbol('\\lessdot', AMS, BIN, "\u22D6", 88);
defineSymbol('\\gtrdot', AMS, BIN, "\u22D7", 45); // In TeX, '~' is a spacing command (non-breaking space).
// However, '~' is used as an ASCII Math shortctut character, so define a \\~
// command which maps to the '~' character

defineSymbol('\\~', MAIN, REL, '~');
category = 'Logic';
defineSymbol('\\leftrightarrow', MAIN, REL, "\u2194", SUPERCOMMON); // >2,000

defineSymbol('\\Leftrightarrow', MAIN, REL, "\u21D4", SUPERCOMMON); // >2,000
// defineSymbol( '\\iff',  MAIN,  REL, '\\;\u27fa\\;', SUPERCOMMON);        // >2,000 Note: additional spaces around the arrows

defineSymbol('\\to', MAIN, REL, "\u2192", SUPERCOMMON); // >2,000

defineSymbol('\\models', MAIN, REL, "\u22A8", COMMON); // >2,000

defineSymbol('\\vdash', MAIN, REL, "\u22A2", COMMON); // >2,000

defineSymbol('\\therefore', AMS, REL, "\u2234", 1129);
defineSymbol('\\because', AMS, REL, "\u2235", 388);
defineSymbol('\\implies', MAIN, REL, "\u27F9", 1858);
defineSymbol('\\gets', MAIN, REL, "\u2190", 150);
defineSymbol('\\dashv', MAIN, REL, "\u22A3", 299);
defineSymbol('\\impliedby', MAIN, REL, "\u27F8", CRYPTIC);
defineSymbol('\\biconditional', MAIN, REL, "\u27F7", CRYPTIC);
defineSymbol('\\roundimplies', MAIN, REL, "\u2970", CRYPTIC); // AMS Binary Operators

category = 'Operators';
defineSymbol('+', MAIN, BIN, '+', SUPERCOMMON); // > 2,000

defineSymbol('-', MAIN, BIN, "\u2212", SUPERCOMMON); // > 2,000

defineSymbol("\u2212", MAIN, BIN, "\u2212", SUPERCOMMON); // > 2,000

defineSymbol('\\pm', MAIN, BIN, "\xB1", COMMON); // > 2,000

defineSymbol('\\mp', MAIN, BIN, "\u2213", COMMON); // > 2,000

defineSymbol('*', MAIN, BIN, "\u2217", COMMON); // > 2,000

defineSymbol('\\times', MAIN, BIN, "\xD7", COMMON); // > 2,000

defineSymbol('\\div', MAIN, BIN, "\xF7", COMMON); // > 2,000

defineSymbol('\\surd', MAIN, MATHORD, "\u221A", COMMON); // > 2,000

defineSymbol('\\divides', MAIN, BIN, "\u2223", CRYPTIC); // From MnSymbol package

defineSymbol('\\ltimes', AMS, BIN, "\u22C9", 576);
defineSymbol('\\rtimes', AMS, BIN, "\u22CA", 946);
defineSymbol('\\leftthreetimes', AMS, BIN, "\u22CB", 34);
defineSymbol('\\rightthreetimes', AMS, BIN, "\u22CC", 14);
defineSymbol('\\intercal', AMS, BIN, "\u22BA", 478);
defineSymbol('\\dotplus', AMS, BIN, "\u2214", 81);
defineSymbol('\\centerdot', AMS, BIN, "\u22C5", 271);
defineSymbol('\\doublebarwedge', AMS, BIN, "\u2A5E", 5);
defineSymbol('\\divideontimes', AMS, BIN, "\u22C7", 51);
defineSymbol('\\cdot', MAIN, BIN, "\u22C5", CRYPTIC);
category = 'Others';
defineSymbol('\\infty', MAIN, MATHORD, "\u221E", SUPERCOMMON); // >2,000

defineSymbol('\\prime', MAIN, ORD, "\u2032", SUPERCOMMON); // >2,000

defineSymbol('\\doubleprime', MAIN, MATHORD, "\u2033"); // NOTE: Not in TeX, but Mathematica

defineSymbol('\\angle', MAIN, MATHORD, "\u2220", COMMON); // >2,000

defineSymbol('`', MAIN, MATHORD, "\u2018");
defineSymbol('\\$', MAIN, MATHORD, '$');
defineSymbol('\\%', MAIN, MATHORD, '%');
defineSymbol('\\_', MAIN, MATHORD, '_');
category = 'Greek'; // Note: In TeX, greek symbols are only available in Math mode

defineSymbol('\\alpha', MAIN, ORD, "\u03B1", COMMON); // >2,000

defineSymbol('\\beta', MAIN, ORD, "\u03B2", COMMON); // >2,000

defineSymbol('\\gamma', MAIN, ORD, "\u03B3", COMMON); // >2,000

defineSymbol('\\delta', MAIN, ORD, "\u03B4", COMMON); // >2,000

defineSymbol('\\epsilon', MAIN, ORD, "\u03F5", COMMON); // >2,000

defineSymbol('\\varepsilon', MAIN, ORD, "\u03B5");
defineSymbol('\\zeta', MAIN, ORD, "\u03B6", COMMON); // >2,000

defineSymbol('\\eta', MAIN, ORD, "\u03B7", COMMON); // >2,000

defineSymbol('\\theta', MAIN, ORD, "\u03B8", COMMON); // >2,000

defineSymbol('\\vartheta', MAIN, ORD, "\u03D1", COMMON); // >2,000

defineSymbol('\\iota', MAIN, ORD, "\u03B9", COMMON); // >2,000

defineSymbol('\\kappa', MAIN, ORD, "\u03BA", COMMON); // >2,000

defineSymbol('\\varkappa', AMS, ORD, "\u03F0", COMMON); // >2,000

defineSymbol('\\lambda', MAIN, ORD, "\u03BB", COMMON); // >2,000

defineSymbol('\\mu', MAIN, ORD, "\u03BC", COMMON); // >2,000

defineSymbol('\\nu', MAIN, ORD, "\u03BD", COMMON); // >2,000

defineSymbol('\\xi', MAIN, ORD, "\u03BE", COMMON); // >2,000

defineSymbol('\\omicron', MAIN, ORD, 'o');
defineSymbol('\\pi', MAIN, ORD, "\u03C0", COMMON); // >2,000

defineSymbol('\\varpi', MAIN, ORD, "\u03D6", COMMON); // >2,000

defineSymbol('\\rho', MAIN, ORD, "\u03C1", COMMON); // >2,000

defineSymbol('\\varrho', MAIN, ORD, "\u03F1", COMMON); // >2,000

defineSymbol('\\sigma', MAIN, ORD, "\u03C3", COMMON); // >2,000

defineSymbol('\\varsigma', MAIN, ORD, "\u03C2", COMMON); // >2,000

defineSymbol('\\tau', MAIN, ORD, "\u03C4", COMMON); // >2,000

defineSymbol('\\phi', MAIN, ORD, "\u03D5", COMMON); // >2,000

defineSymbol('\\varphi', MAIN, ORD, "\u03C6", COMMON); // >2,000

defineSymbol("\\upsilon", MAIN, ORD, "\u03C5", COMMON); // >2,000

defineSymbol('\\chi', MAIN, ORD, "\u03C7", COMMON); // >2,000

defineSymbol('\\psi', MAIN, ORD, "\u03C8", COMMON); // >2,000

defineSymbol('\\omega', MAIN, ORD, "\u03C9", COMMON); // >2,000

defineSymbol('\\Gamma', MAIN, ORD, "\u0393", COMMON); // >2,000

defineSymbol('\\Delta', MAIN, ORD, "\u0394", COMMON); // >2,000

defineSymbol('\\Theta', MAIN, ORD, "\u0398", COMMON); // >2,000

defineSymbol('\\Lambda', MAIN, ORD, "\u039B", COMMON); // >2,000

defineSymbol('\\Xi', MAIN, ORD, "\u039E", COMMON); // >2,000

defineSymbol('\\Pi', MAIN, ORD, "\u03A0", COMMON); // >2,000

defineSymbol('\\Sigma', MAIN, ORD, "\u03A3", COMMON); // >2,000

defineSymbol("\\Upsilon", MAIN, ORD, "\u03A5", COMMON); // >2,000

defineSymbol('\\Phi', MAIN, ORD, "\u03A6", COMMON); // >2,000

defineSymbol('\\Psi', MAIN, ORD, "\u03A8", COMMON); // >2,000

defineSymbol('\\Omega', MAIN, ORD, "\u03A9", COMMON); // >2,000
// AMS Greek

defineSymbol('\\digamma', AMS, ORD, "\u03DD", 248);
category = 'Others';
defineSymbol('\\emptyset', MAIN, MATHORD, "\u2205", SUPERCOMMON); // >2,000

defineSymbol('\\varnothing', AMS, MATHORD, "\u2205", SUPERCOMMON); // >2,000

category = 'Set Operators';
defineSymbol('\\cap', MAIN, BIN, "\u2229", SUPERCOMMON);
defineSymbol('\\cup', MAIN, BIN, "\u222A", SUPERCOMMON);
defineSymbol('\\setminus', MAIN, BIN, "\u2216", COMMON); // >2,000

defineSymbol('\\smallsetminus', AMS, BIN, "\u2216", 254);
defineSymbol('\\complement', AMS, MATHORD, "\u2201", 200);
category = 'Set Relations';
defineSymbol('\\in', MAIN, REL, "\u2208", SUPERCOMMON); // >2,000

defineSymbol('\\notin', MAIN, REL, "\u2209", SUPERCOMMON); // >2,000

defineSymbol('\\not', MAIN, REL, "\u0338", COMMON);
defineSymbol('\\ni', MAIN, REL, "\u220B", COMMON); // >2,000

defineSymbol('\\owns', MAIN, REL, "\u220B", 18);
defineSymbol('\\subset', MAIN, REL, "\u2282", SUPERCOMMON); // >2,000

defineSymbol('\\supset', MAIN, REL, "\u2283", SUPERCOMMON); // >2,000

defineSymbol('\\subseteq', MAIN, REL, "\u2286", SUPERCOMMON); // >2,000

defineSymbol('\\supseteq', MAIN, REL, "\u2287", SUPERCOMMON); // >2,000

defineSymbol('\\subsetneq', AMS, REL, "\u228A", 1945);
defineSymbol('\\varsubsetneq', AMS, REL, "\uE01A", 198);
defineSymbol('\\subsetneqq', AMS, REL, "\u2ACB", 314);
defineSymbol('\\varsubsetneqq', AMS, REL, "\uE017", 55);
defineSymbol('\\nsubset', AMS, REL, "\u2284", CRYPTIC); // NOTE: Not TeX?

defineSymbol('\\nsupset', AMS, REL, "\u2285", CRYPTIC); // NOTE: Not TeX?

defineSymbol('\\nsubseteq', AMS, REL, "\u2288", 950);
defineSymbol('\\nsupseteq', AMS, REL, "\u2289", 49);
category = 'Spacing'; // See http://tex.stackexchange.com/questions/41476/lengths-and-when-to-use-them

defineSymbol('\\ ', MAIN, definitions_SPACING, "\xA0");
defineSymbol('~', MAIN, definitions_SPACING, "\xA0");
defineSymbol('\\space', MAIN, definitions_SPACING, "\xA0");
defineSymbol('\\!', MAIN, definitions_SPACING, null);
defineSymbol('\\,', MAIN, definitions_SPACING, null);
defineSymbol('\\:', MAIN, definitions_SPACING, null);
defineSymbol('\\;', MAIN, definitions_SPACING, null);
defineSymbol('\\enskip', MAIN, definitions_SPACING, null); // \enspace is a TeX command (not LaTeX) equivalent to a \skip

defineSymbol('\\enspace', MAIN, definitions_SPACING, null, 672);
defineSymbol('\\quad', MAIN, definitions_SPACING, null, COMMON); // >2,000

defineSymbol('\\qquad', MAIN, definitions_SPACING, null, COMMON); // >2,000

defineFunction(['\\hspace', '\\hspace*' // \hspace* inserts a non-breakable space, but since we don't line break...
// it's the same as \hspace.
], '{width:skip}', {
  allowedInText: true
}, function (_name, args) {
  return {
    type: 'spacing',
    width: args[0] || 0
  };
});
/**
 * If possible, i.e. if they are all simple atoms, return a string made up of
 * their body
 * @param {object[]} atoms
 * @memberof module:definitions
 * @private
 */

function getSimpleString(atoms) {
  var result = '';
  var success = true;
  var _iteratorNormalCompletion7 = true;
  var _didIteratorError7 = false;
  var _iteratorError7 = undefined;

  try {
    for (var _iterator7 = atoms[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
      var atom = _step7.value;

      if (typeof atom.body === 'string') {
        result += atom.body;
      } else {
        success = false;
      }
    }
  } catch (err) {
    _didIteratorError7 = true;
    _iteratorError7 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
        _iterator7.return();
      }
    } finally {
      if (_didIteratorError7) {
        throw _iteratorError7;
      }
    }
  }

  return success ? result : '';
}

defineFunction(['\\mathop', '\\mathbin', '\\mathrel', '\\mathopen', '\\mathclose', '\\mathpunct', '\\mathord', '\\mathinner'], '{:auto}', null, function (name, args) {
  var result = {
    type: {
      '\\mathop': 'mop',
      '\\mathbin': 'mbin',
      '\\mathrel': 'mrel',
      '\\mathopen': 'mopen',
      '\\mathclose': 'mclose',
      '\\mathpunct': 'mpunct',
      '\\mathord': 'mord',
      '\\mathinner': 'minner'
    }[name],
    body: getSimpleString(args[0]) || args[0],
    captureSelection: true,
    // Do not let children be selected
    baseFontFamily: name === '\\mathop' ? 'math' : ''
  };

  if (name === '\\mathop') {
    result.limits = 'nolimits';
    result.isFunction = true;
  }

  return result;
});
defineFunction(['\\operatorname', '\\operatorname*'], '{operator:string}', null, function (name, args) {
  var result = {
    type: 'mop',
    skipBoundary: true,
    body: args[0],
    isFunction: true,
    baseFontFamily: 'cmr'
  };

  if (name === '\\operatorname') {
    result.limits = 'nolimits';
  } else if (name === '\\operatorname*') {
    result.limits = 'limits';
  }

  return result;
}); // Punctuation

category = 'Punctuation';
defineSymbol('\\colon', MAIN, PUNCT, ':', COMMON); // >2,000

defineSymbol('\\cdotp', MAIN, PUNCT, "\u22C5", COMMON); // >2,000

defineSymbol('\\ldots', MAIN, INNER, "\u2026", COMMON); // >2,000

defineSymbol('\\cdots', MAIN, INNER, "\u22EF", COMMON); // >2,000

defineSymbol('\\ddots', MAIN, INNER, "\u22F1", COMMON); // >2,000

defineSymbol('\\mathellipsis', MAIN, INNER, "\u2026", 91);
defineSymbol('\\vdots', MAIN, MATHORD, "\u22EE", COMMON); // >2,000

defineSymbol('\\ldotp', MAIN, PUNCT, ".", 18);
defineSymbol(',', MAIN, PUNCT, ',');
defineSymbol(';', MAIN, PUNCT, ';');
category = 'Logical Operators';
defineSymbol('\\wedge', MAIN, BIN, "\u2227", SUPERCOMMON); // >2,000

defineSymbol('\\vee', MAIN, BIN, "\u2228", SUPERCOMMON); // >2,000

defineSymbol('\\lnot', MAIN, MATHORD, "\xAC", COMMON); // >2,000

defineSymbol('\\neg', MAIN, MATHORD, "\xAC", SUPERCOMMON); // >2,000

defineSymbol('\\land', MAIN, BIN, "\u2227", 659);
defineSymbol('\\lor', MAIN, BIN, "\u2228", 364);
defineSymbol('\\barwedge', AMS, BIN, "\u22BC", 21);
defineSymbol('\\veebar', AMS, BIN, "\u22BB", 43);
defineSymbol('\\nor', AMS, BIN, "\u22BB", 7); // NOTE: Not TeXematica

defineSymbol('\\curlywedge', AMS, BIN, "\u22CF", 58);
defineSymbol('\\curlyvee', AMS, BIN, "\u22CE", 57);
category = 'Boxes';
defineSymbol('\\square', AMS, MATHORD, "\u25A1", COMMON); // >2,000

defineSymbol('\\Box', AMS, MATHORD, "\u25A1", COMMON); // >2,000

defineSymbol('\\blacksquare', AMS, MATHORD, "\u25A0", 1679);
defineSymbol('\\boxminus', AMS, BIN, "\u229F", 79);
defineSymbol('\\boxplus', AMS, BIN, "\u229E", 276);
defineSymbol('\\boxtimes', AMS, BIN, "\u22A0", 457);
defineSymbol('\\boxdot', AMS, BIN, "\u22A1", 120);
category = 'Circles';
defineSymbol('\\circ', MAIN, BIN, "\u2218", SUPERCOMMON); // >2,000

defineSymbol('\\bigcirc', MAIN, BIN, "\u25EF", 903);
defineSymbol('\\bullet', MAIN, BIN, "\u2219", COMMON); // >2,000

defineSymbol('\\circleddash', AMS, BIN, "\u229D", COMMON); // >2,000

defineSymbol('\\circledast', AMS, BIN, "\u229B", 339);
defineSymbol('\\oplus', MAIN, BIN, "\u2295", COMMON); // >2,000

defineSymbol('\\ominus', MAIN, BIN, "\u2296", 1568);
defineSymbol('\\otimes', MAIN, BIN, "\u2297", COMMON); // >2,000

defineSymbol('\\odot', MAIN, BIN, "\u2299", COMMON); // >2,000

defineSymbol('\\circledcirc', AMS, BIN, "\u229A", 93);
defineSymbol('\\oslash', MAIN, BIN, "\u2298", 497);
defineSymbol('\\circledS', AMS, MATHORD, "\u24C8", 31);
defineSymbol('\\circledR', AMS, MATHORD, "\xAE", 1329);
category = 'Triangles';
defineSymbol('\\triangle', MAIN, MATHORD, "\u25B3", COMMON); // > 2,000

defineSymbol('\\triangleq', AMS, REL, "\u225C", COMMON); // >2,000

defineSymbol('\\bigtriangleup', MAIN, BIN, "\u25B3", 1773);
defineSymbol('\\vartriangle', AMS, REL, "\u25B3", 762);
defineSymbol('\\triangledown', AMS, MATHORD, "\u25BD", 520);
defineSymbol('\\bigtriangledown', MAIN, BIN, "\u25BD", 661);
defineSymbol('\\triangleleft', MAIN, BIN, "\u25C3", 534);
defineSymbol('\\vartriangleleft', AMS, REL, "\u22B2", 281);
defineSymbol('\\trianglelefteq', AMS, REL, "\u22B4", 176);
defineSymbol('\\ntriangleleft', AMS, REL, "\u22EA", 13);
defineSymbol('\\ntrianglelefteq', AMS, REL, "\u22EC", 22);
defineSymbol('\\triangleright', MAIN, BIN, "\u25B9", 516);
defineSymbol('\\vartriangleright', AMS, REL, "\u22B3", 209);
defineSymbol('\\trianglerighteq', AMS, REL, "\u22B5", 45);
defineSymbol('\\ntriangleright', AMS, REL, "\u22EB", 15);
defineSymbol('\\ntrianglerighteq', AMS, REL, "\u22ED", 6);
defineSymbol('\\blacktriangle', AMS, MATHORD, "\u25B2", 360);
defineSymbol('\\blacktriangledown', AMS, MATHORD, "\u25BC", 159);
defineSymbol('\\blacktriangleleft', AMS, REL, "\u25C0", 101);
defineSymbol('\\blacktriangleright', AMS, REL, "\u25B6", 271);
category = 'Others';
defineSymbol('\\/', MAIN, ORD, '/');
defineSymbol('|', MAIN, 'textord', "\u2223");
category = 'Big Operators';
defineSymbol('\\sqcup', MAIN, BIN, "\u2294", 1717); // 63

defineSymbol('\\sqcap', MAIN, BIN, "\u2293", 735); // 38

defineSymbol("\\uplus", MAIN, BIN, "\u228E", 597);
defineSymbol('\\wr', MAIN, BIN, "\u2240", 286);
defineSymbol('\\Cap', AMS, BIN, "\u22D2", 2);
defineSymbol('\\Cup', AMS, BIN, "\u22D3", 2);
defineSymbol('\\doublecap', AMS, BIN, "\u22D2", 1);
defineSymbol('\\doublecup', AMS, BIN, "\u22D3", 1);
defineSymbol('\\amalg', MAIN, BIN, "\u2A3F", CRYPTIC);
defineSymbol('\\And', MAIN, BIN, "&");
category = 'Accents'; // defineSymbol( '\\bar',  MAIN,  ACCENT, '\u00af', COMMON);    // >2,000
// defineSymbol( '\\vec',  MAIN,  ACCENT, '\u20d7');
// defineSymbol( '\\hat',  MAIN,  ACCENT, '\u005e');
// defineSymbol( '\\dot',  MAIN,  ACCENT, '\u02d9');
// defineSymbol( '\\ddot',  MAIN,  ACCENT, '\u00a8', COMMON);    // >2,000
// defineSymbol( '\\acute',  MAIN,  ACCENT, '\u00b4', COMMON);    // >2,000
// defineSymbol( '\\tilde',  MAIN,  ACCENT, '\u007e', COMMON);    // >2,000
// defineSymbol( '\\check',  MAIN,  ACCENT, '\u02c7', COMMON);    // >2,000
// defineSymbol( '\\breve',  MAIN,  ACCENT, '\u02d8', 1548);
// defineSymbol( '\\grave',  MAIN,  ACCENT, '\u0060', 735);

defineFunction(['\\acute', '\\grave', '\\dot', '\\ddot', '\\mathring', '\\tilde', '\\bar', '\\breve', '\\check', '\\hat', '\\vec'], '{body:auto}', null, function (name, args) {
  return {
    type: 'accent',
    accent: {
      '\\acute': "\u02CA",
      '\\grave': "\u02CB",
      '\\dot': "\u02D9",
      '\\ddot': "\xA8",
      '\\mathring': "\u02DA",
      '\\tilde': "~",
      '\\bar': "\u02C9",
      '\\breve': "\u02D8",
      '\\check': "\u02C7",
      '\\hat': "^",
      '\\vec': "\u20D7"
    }[name],
    limits: 'accent',
    // This will suppress the regular
    // supsub attachment and will delegate
    // it to the decomposeAccent
    // (any non-null value would do)
    skipBoundary: true,
    body: args[0]
  };
});
frequency(COMMON, '\\bar', '\\ddot', '\\acute', '\\tilde', '\\check');
frequency(1548, '\\breve');
frequency(735, '\\grave');
frequency(SUPERCOMMON, '\\vec'); // note('\\( \\bar{x}\\): Average of the values \\( (x_1,\\ldots ,x_n) \\)');

category = 'Letters and Letter Like Forms';
defineSymbol('\\imath', MAIN, MATHORD, "\u0131");
defineSymbol('\\jmath', MAIN, MATHORD, "\u0237");
category = 'Others';
defineSymbol('\\degree', MAIN, MATHORD, "\xB0", 46);
category = 'Others';
defineSymbol("'", MAIN, MATHORD, "\u2032"); // Prime

defineSymbol('"', MAIN, MATHORD, "\u201D"); // Double Prime
// defineSymbol( "\'',  MAIN,  MATHORD, '\u2033');       // Double Prime
// From plain.tex

category = 'Others';
defineFunction('\\^', '{:string}', {
  allowedInText: true
}, function (name, args) {
  return {
    type: 'mord',
    limits: 'nolimits',
    symbol: true,
    isFunction: false,
    body: args[0] ? {
      'a': 'â',
      'e': 'ê',
      'i': 'î',
      'o': 'ô',
      'u': 'û',
      'A': 'Â',
      'E': 'Ê',
      'I': 'Î',
      'O': 'Ô',
      'U': 'Û'
    }[args[0]] || '^' : '^',
    baseFontFamily: 'cmr'
  };
});
defineFunction("\\`", '{:string}', {
  allowedInText: true
}, function (name, args) {
  return {
    type: 'mord',
    limits: 'nolimits',
    symbol: true,
    isFunction: false,
    body: args[0] ? {
      'a': 'à',
      'e': 'è',
      'i': 'ì',
      'o': 'ò',
      'u': 'ù',
      'A': 'À',
      'E': 'È',
      'I': 'Ì',
      'O': 'Ò',
      'U': 'Ù'
    }[args[0]] || '`' : '`',
    baseFontFamily: 'cmr'
  };
});
defineFunction("\\'", '{:string}', {
  allowedInText: true
}, function (name, args) {
  return {
    type: 'mord',
    limits: 'nolimits',
    symbol: true,
    isFunction: false,
    body: args[0] ? {
      'a': 'á',
      'e': 'é',
      'i': 'í',
      'o': 'ó',
      'u': 'ú',
      'A': 'Á',
      'E': 'É',
      'I': 'Í',
      'O': 'Ó',
      'U': 'Ú'
    }[args[0]] || "^" : "^",
    baseFontFamily: 'cmr'
  };
});
defineFunction('\\~', '{:string}', {
  allowedInText: true
}, function (name, args) {
  return {
    type: 'mord',
    limits: 'nolimits',
    symbol: true,
    isFunction: false,
    body: args[0] ? {
      'n': 'ñ',
      'N': 'Ñ',
      'a': 'ã',
      'o': 'õ',
      'A': 'Ã',
      'O': 'Õ'
    }[args[0]] || "\xB4" : "\xB4",
    baseFontFamily: 'cmr'
  };
});
defineFunction('\\c', '{:string}', {
  allowedInText: true
}, function (name, args) {
  return {
    type: 'mord',
    limits: 'nolimits',
    symbol: true,
    isFunction: false,
    body: args[0] ? {
      'c': 'ç',
      'C': 'Ç'
    }[args[0]] || '' : '',
    baseFontFamily: 'cmr'
  };
}); // Body-text symbols
// See http://ctan.mirrors.hoobly.com/info/symbols/comprehensive/symbols-a4.pdf, p14

var TEXT_SYMBOLS = {
  '\\#': "#",
  '\\&': "&",
  '\\$': '$',
  '\\%': '%',
  '\\_': '_',
  '\\euro': "\u20AC",
  '\\maltese': "\u2720",
  '\\{': '{',
  '\\}': '}',
  '\\nobreakspace': "\xA0",
  '\\ldots': "\u2026",
  '\\textellipsis': "\u2026",
  '\\backslash': '\\',
  '`': "\u2018",
  '\'': "\u2019",
  '``': "\u201C",
  '\'\'': "\u201D",
  '\\degree': "\xB0",
  '\\textasciicircum': '^',
  '\\textasciitilde': '~',
  '\\textasteriskcentered': '*',
  '\\textbackslash': '\\',
  '\\textbraceleft': '{',
  '\\textbraceright': '}',
  '\\textbullet': '•',
  '\\textdollar': '$',
  '\\textsterling': '£',
  '–': "\u2013",
  // EN DASH
  '—': "\u2014",
  // EM DASH
  '‘': "\u2018",
  // LEFT SINGLE QUOTATION MARK
  '’': "\u2019",
  // RIGHT SINGLE QUOTATION MARK
  '“': "\u201C",
  // LEFT DOUBLE QUOTATION MARK
  '”': "\u201D",
  // RIGHT DOUBLE QUOTATION MARK
  '"': "\u201D",
  // DOUBLE PRIME
  '\\ss': "\xDF",
  // LATIN SMALL LETTER SHARP S
  '\\ae': "\xE6",
  // LATIN SMALL LETTER AE
  '\\oe': "\u0153",
  // LATIN SMALL LIGATURE OE
  '\\AE': "\xC6",
  // LATIN CAPITAL LETTER AE
  '\\OE': "\u0152",
  // LATIN CAPITAL LIGATURE OE
  '\\O': "\xD8",
  // LATIN CAPITAL LETTER O WITH STROKE
  '\\i': "\u0131",
  // LATIN SMALL LETTER DOTLESS I
  '\\j': "\u0237",
  // LATIN SMALL LETTER DOTLESS J
  '\\aa': "\xE5",
  // LATIN SMALL LETTER A WITH RING ABOVE
  '\\AA': "\xC5" // LATIN CAPITAL LETTER A WITH RING ABOVE

};
var COMMAND_MODE_CHARACTERS = /[a-zA-Z0-9!@*()-=+{}[\]\\';:?/.,~<>`|'$%#&^_" ]/; // Word boundaries for Cyrillic, Polish, French, German, Italian
// and Spanish. We use \p{L} (Unicode property escapes: "Letter")
// but Firefox doesn't support it
// (https://bugzilla.mozilla.org/show_bug.cgi?id=1361876). Booo...
// See also https://stackoverflow.com/questions/26133593/using-regex-to-match-international-unicode-alphanumeric-characters-in-javascript

var LETTER = typeof navigator !== 'undefined' && /firefox|edge/i.test(navigator.userAgent) ? /[a-zA-ZаАбБвВгГдДеЕёЁжЖзЗиИйЙкКлЛмМнНоОпПрРсСтТуУфФхХцЦчЧшШщЩъЪыЫьЬэЭюЮяĄąĆćĘęŁłŃńÓóŚśŹźŻżàâäôéèëêïîçùûüÿæœÀÂÄÔÉÈËÊÏÎŸÇÙÛÜÆŒäöüßÄÖÜẞàèéìíîòóùúÀÈÉÌÍÎÒÓÙÚáéíñóúüÁÉÍÑÓÚÜ]/ : /(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D])/; // new RegExp("\\p{Letter}", 'u'); // 解决IE兼容性问题

var LETTER_AND_DIGITS = typeof navigator !== 'undefined' && /firefox|edge/i.test(navigator.userAgent) ? /[0-9a-zA-ZаАбБвВгГдДеЕёЁжЖзЗиИйЙкКлЛмМнНоОпПрРсСтТуУфФхХцЦчЧшШщЩъЪыЫьЬэЭюЮяĄąĆćĘęŁłŃńÓóŚśŹźŻżàâäôéèëêïîçùûüÿæœÀÂÄÔÉÈËÊÏÎŸÇÙÛÜÆŒäöüßÄÖÜẞàèéìíîòóùúÀÈÉÌÍÎÒÓÙÚáéíñóúüÁÉÍÑÓÚÜ]/ : /(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D])/; // new RegExp("[0-9\\p{Letter}]", 'u'); // 解决IE兼容性问题

/* harmony default export */ var definitions = ({
  matchCodepoint: matchCodepoint,
  commandAllowed: commandAllowed,
  unicodeToMathVariant: unicodeToMathVariant,
  mathVariantToUnicode: mathVariantToUnicode,
  unicodeStringToLatex: unicodeStringToLatex,
  getInfo: getInfo,
  getValue: getValue,
  getEnvironmentInfo: getEnvironmentInfo,
  suggest: suggest,
  FREQUENCY_VALUE: FREQUENCY_VALUE,
  TEXT_SYMBOLS: TEXT_SYMBOLS,
  MATH_SYMBOLS: MATH_SYMBOLS,
  ENVIRONMENTS: ENVIRONMENTS,
  RIGHT_DELIM: RIGHT_DELIM,
  FUNCTIONS: FUNCTIONS,
  MACROS: MACROS,
  COMMAND_MODE_CHARACTERS: COMMAND_MODE_CHARACTERS,
  LETTER: LETTER,
  LETTER_AND_DIGITS: LETTER_AND_DIGITS
}); // TODO
// Some missing greek letters, but see https://reference.wolfram.com/language/tutorial/LettersAndLetterLikeForms.html
// koppa, stigma, Sampi
// See https://tex.stackexchange.com/questions/231878/accessing-archaic-greek-koppa-in-the-birkmult-document-class
// Capital Alpha, etc...
// Colon (ratio) (2236)
// Function names can have '*' in them
// Review:
// https://en.wikipedia.org/wiki/Help:Displaying_a_formula
// https://reference.wolfram.com/language/tutorial/LettersAndLetterLikeForms.html
// ftp://ftp.dante.de/tex-archive/info/symbols/comprehensive/symbols-a4.pdf
// Media Wiki Reference
// https://en.wikipedia.org/wiki/Help:Displaying_a_formula
// MathJax Reference
// http://docs.mathjax.org/en/latest/tex.html#supported-latex-commands
// http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm
// LaTeX Reference
// http://ctan.sharelatex.com/tex-archive/info/latex2e-help-texinfo/latex2e.html
// iBooks Author/Pages
// https://support.apple.com/en-au/HT202501
// Mathematica Reference
// https://reference.wolfram.com/language/tutorial/NamesOfSymbolsAndMathematicalObjects.html
// https://reference.wolfram.com/language/guide/MathematicalTypesetting.html

/*
    * @todo \sb (equivalent to _) $\mathfrak{sl}\sb 2$ frequency 184
    * @todo \sp (equivalent to ^) $\mathfrak{sl}\sp 2$ frequency 274
    * \intertext    frequency 0


    See http://mirrors.ibiblio.org/CTAN/macros/latex/contrib/mathtools/mathtools.pdf

*/
// CONCATENATED MODULE: ./packages/core/delimiters.js
/**
 * This module deals with creating delimiters of various sizes. The TeXbook
 * discusses these routines on page 441-442, in the "Another subroutine sets box
 * x to a specified variable delimiter" paragraph.
 *
 * There are three main routines here. `makeSmallDelim` makes a delimiter in the
 * normal font, but in either text, script, or scriptscript style.
 * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
 * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
 * smaller pieces that are stacked on top of one another.
 *
 * The functions take a parameter `center`, which determines if the delimiter
 * should be centered around the axis.
 *
 * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
 * one of the given sizes. This is used for things like `\bigl`.
 * `customSizedDelim` makes a delimiter with a given total height+depth. It is
 * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
 * delimiter which surrounds an expression of a given height an depth. It is
 * used in `\left` and `\right`.
 * @summary   Handling of delimiters surrounds symbols.
 * @module core/delimiters
 * @private
 */




var delimiters_makeSymbol = core_span.makeSymbol;
var delimiters_makeSpan = core_span.makeSpan;
var delimiters_makeVlist = core_span.makeVlist;
/**
 * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
 * font, but is restyled to either be in textstyle, scriptstyle, or
 * scriptscriptstyle.
 * @memberof module:delimiters
 * @private
 */

function makeSmallDelim(type, delim, style, center, context, classes) {
  var text = delimiters_makeSymbol('AMS-Regular', definitions.getValue('math', delim));
  var span = core_span.makeStyleWrap(type, text, context.mathstyle, style, classes);

  if (center) {
    span.setTop((1 - context.mathstyle.sizeMultiplier / style.sizeMultiplier) * context.mathstyle.metrics.axisHeight);
  }

  span.setStyle('color', context.color);
  if (typeof context.opacity === 'number') span.setStyle('opacity', context.opacity);
  return span;
}
/**
 * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
 * Size3, or Size4 fonts. It is always rendered in textstyle.
 * @memberof module:delimiters
 * @private
 */


function makeLargeDelim(type, delim, size, center, context, classes) {
  var inner = delimiters_makeSymbol('Size' + size + '-Regular', definitions.getValue('math', delim));
  var result = core_span.makeStyleWrap(type, delimiters_makeSpan(inner, 'delimsizing size' + size), context.mathstyle, core_mathstyle.TEXT, classes);

  if (center) {
    result.setTop((1 - context.mathstyle.sizeMultiplier) * context.mathstyle.metrics.axisHeight);
  }

  result.setStyle('color', context.color);
  if (typeof context.opacity === 'number') result.setStyle('opacity', context.opacity);
  return result;
}
/**
 * Make an inner span with the given offset and in the given font. This is used
 * in `makeStackedDelim` to make the stacking pieces for the delimiter.
 * @memberof module:delimiters
 * @private
 */


function delimiters_makeInner(symbol, font) {
  var sizeClass = ''; // Apply the correct CSS class to choose the right font.

  if (font === 'Size1-Regular') {
    sizeClass = ' delim-size1';
  } else if (font === 'Size4-Regular') {
    sizeClass = ' delim-size4';
  } // @todo: revisit if all this wrapping is needed or if the spans could
  // be simplified


  var inner = delimiters_makeSpan(delimiters_makeSymbol(font, definitions.getValue('math', symbol)), 'delimsizinginner' + sizeClass);
  return inner;
}
/**
 * Make a stacked delimiter out of a given delimiter, with the total height at
 * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
 * @memberof module:delimiters
 * @private
 */


function makeStackedDelim(type, delim, heightTotal, center, context, classes) {
  // There are four parts, the top, an optional middle, a repeated part, and a
  // bottom.
  var top;
  var middle;
  var repeat;
  var bottom;
  top = repeat = bottom = definitions.getValue('math', delim);
  middle = null; // Also keep track of what font the delimiters are in

  var font = 'Size1-Regular'; // We set the parts and font based on the symbol. Note that we use
  // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
  // repeats of the arrows

  if (delim === '\\vert' || delim === '\\lvert' || delim === '\\rvert' || delim === '\\mvert' || delim === '\\mid') {
    repeat = top = bottom = "\u2223";
  } else if (delim === '\\Vert' || delim === '\\lVert' || delim === '\\rVert' || delim === '\\mVert' || delim === '\\|') {
    repeat = top = bottom = "\u2225";
  } else if (delim === "\\uparrow") {
    repeat = bottom = "\u23D0";
  } else if (delim === "\\Uparrow") {
    repeat = bottom = "\u2016";
  } else if (delim === '\\downarrow') {
    top = repeat = "\u23D0";
  } else if (delim === '\\Downarrow') {
    top = repeat = "\u2016";
  } else if (delim === "\\updownarrow") {
    top = "\u2191";
    repeat = "\u23D0";
    bottom = "\u2193";
  } else if (delim === "\\Updownarrow") {
    top = "\u21D1";
    repeat = "\u2016";
    bottom = "\u21D3";
  } else if (delim === '[' || delim === '\\lbrack') {
    top = "\u23A1";
    repeat = "\u23A2";
    bottom = "\u23A3";
    font = 'Size4-Regular';
  } else if (delim === ']' || delim === '\\rbrack') {
    top = "\u23A4";
    repeat = "\u23A5";
    bottom = "\u23A6";
    font = 'Size4-Regular';
  } else if (delim === '\\lfloor') {
    repeat = top = "\u23A2";
    bottom = "\u23A3";
    font = 'Size4-Regular';
  } else if (delim === '\\lceil') {
    top = "\u23A1";
    repeat = bottom = "\u23A2";
    font = 'Size4-Regular';
  } else if (delim === '\\rfloor') {
    repeat = top = "\u23A5";
    bottom = "\u23A6";
    font = 'Size4-Regular';
  } else if (delim === '\\rceil') {
    top = "\u23A4";
    repeat = bottom = "\u23A5";
    font = 'Size4-Regular';
  } else if (delim === '(') {
    top = "\u239B";
    repeat = "\u239C";
    bottom = "\u239D";
    font = 'Size4-Regular';
  } else if (delim === ')') {
    top = "\u239E";
    repeat = "\u239F";
    bottom = "\u23A0";
    font = 'Size4-Regular';
  } else if (delim === '\\{' || delim === '\\lbrace') {
    top = "\u23A7";
    middle = "\u23A8";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = 'Size4-Regular';
  } else if (delim === '\\}' || delim === '\\rbrace') {
    top = "\u23AB";
    middle = "\u23AC";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = 'Size4-Regular';
  } else if (delim === '\\lgroup') {
    top = "\u23A7";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = 'Size4-Regular';
  } else if (delim === '\\rgroup') {
    top = "\u23AB";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = 'Size4-Regular';
  } else if (delim === '\\lmoustache') {
    top = "\u23A7";
    bottom = "\u23AD";
    repeat = "\u23AA";
    font = 'Size4-Regular';
  } else if (delim === '\\rmoustache') {
    top = "\u23AB";
    bottom = "\u23A9";
    repeat = "\u23AA";
    font = 'Size4-Regular';
  } else if (delim === '\\surd') {
    top = "\uE001";
    bottom = "\u23B7";
    repeat = "\uE000";
    font = 'Size4-Regular';
  } else if (delim === "\\ulcorner") {
    top = "\u250C";
    repeat = bottom = ' ';
  } else if (delim === "\\urcorner") {
    top = "\u2510";
    repeat = bottom = ' ';
  } else if (delim === '\\llcorner') {
    bottom = "\u2514";
    repeat = top = ' ';
  } else if (delim === '\\lrcorner') {
    top = "\u2518";
    repeat = top = ' ';
  } // Get the metrics of the four sections


  var topMetrics = fontMetrics.getCharacterMetrics(definitions.getValue('math', top), font);
  var topHeightTotal = topMetrics.height + topMetrics.depth;
  var repeatMetrics = fontMetrics.getCharacterMetrics(definitions.getValue('math', repeat), font);
  var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
  var bottomMetrics = fontMetrics.getCharacterMetrics(definitions.getValue('math', bottom), font);
  var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
  var middleHeightTotal = 0;
  var middleFactor = 1;

  if (middle !== null) {
    var middleMetrics = fontMetrics.getCharacterMetrics(definitions.getValue('math', middle), font);
    middleHeightTotal = middleMetrics.height + middleMetrics.depth;
    middleFactor = 2; // repeat symmetrically above and below middle
  } // Calculate the minimal height that the delimiter can have.
  // It is at least the size of the top, bottom, and optional middle combined.


  var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal; // Compute the number of copies of the repeat symbol we will need

  var repeatCount = Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal)); // Compute the total height of the delimiter including all the symbols

  var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal; // The center of the delimiter is placed at the center of the axis. Note
  // that in this context, 'center' means that the delimiter should be
  // centered around the axis in the current style, while normally it is
  // centered around the axis in textstyle.

  var axisHeight = context.mathstyle.metrics.axisHeight;

  if (center) {
    axisHeight *= context.mathstyle.sizeMultiplier;
  } // Calculate the depth


  var depth = realHeightTotal / 2 - axisHeight; // Now, we start building the pieces that will go into the vlist
  // Keep a list of the inner pieces

  var inners = []; // Add the bottom symbol

  inners.push(delimiters_makeInner(bottom, font));

  if (middle === null) {
    // Add that many symbols
    for (var i = 0; i < repeatCount; i++) {
      inners.push(delimiters_makeInner(repeat, font));
    }
  } else {
    // When there is a middle bit, we need the middle part and two repeated
    // sections
    for (var _i = 0; _i < repeatCount; _i++) {
      inners.push(delimiters_makeInner(repeat, font));
    }

    inners.push(delimiters_makeInner(middle, font));

    for (var _i2 = 0; _i2 < repeatCount; _i2++) {
      inners.push(delimiters_makeInner(repeat, font));
    }
  } // Add the top symbol


  inners.push(delimiters_makeInner(top, font)); // Finally, build the vlist

  var inner = delimiters_makeVlist(context, inners, 'bottom', depth);
  inner.setStyle('color', context.color);
  if (typeof context.opacity === 'number') inner.setStyle('opacity', context.opacity);
  return core_span.makeStyleWrap(type, delimiters_makeSpan(inner, 'delimsizing mult'), context.mathstyle, core_mathstyle.TEXT, classes);
} // There are three kinds of delimiters, delimiters that stack when they become
// too large


var stackLargeDelimiters = ['(', ')', '[', '\\lbrack', ']', '\\rbrack', '\\{', '\\lbrace', '\\}', '\\rbrace', '\\lfloor', '\\rfloor', '\\lceil', '\\rceil', '\\surd']; // delimiters that always stack

var stackAlwaysDelimiters = ["\\uparrow", '\\downarrow', "\\updownarrow", "\\Uparrow", '\\Downarrow', "\\Updownarrow", '|', '\\|', '\\vert', '\\Vert', '\\lvert', '\\rvert', '\\lVert', '\\rVert', '\\mvert', '\\mid', '\\lgroup', '\\rgroup', '\\lmoustache', '\\rmoustache']; // and delimiters that never stack

var stackNeverDelimiters = ['<', '>', '\\langle', '\\rangle', '/', '\\backslash', '\\lt', '\\gt']; // Metrics of the different sizes. Found by looking at TeX's output of
// $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
// Used to create stacked delimiters of appropriate sizes in makeSizedDelim.

var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];
/**
 * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
 * @memberof module:delimiters
 * @private
 */

function makeSizedDelim(type, delim, size, context, classes) {
  if (delim === '.') {
    // Empty delimiters still count as elements, even though they don't
    // show anything.
    return makeNullFence(type, context, classes); // return makeSpan('', classes);
  } // < and > turn into \langle and \rangle in delimiters


  if (delim === '<' || delim === '\\lt') {
    delim = '\\langle';
  } else if (delim === '>' || delim === '\\gt') {
    delim = '\\rangle';
  } // Sized delimiters are never centered.


  if (stackLargeDelimiters.includes(delim) || stackNeverDelimiters.includes(delim)) {
    return makeLargeDelim(type, delim, size, false, context, classes);
  } else if (stackAlwaysDelimiters.includes(delim)) {
    return makeStackedDelim(type, delim, sizeToMaxHeight[size], false, context, classes);
  }

  console.assert(false, 'Unknown delimiter \'' + delim + '\'');
  return null;
}
/*
 * There are three different sequences of delimiter sizes that the delimiters
 * follow depending on the kind of delimiter. This is used when creating custom
 * sized delimiters to decide whether to create a small, large, or stacked
 * delimiter.
 *
 * In real TeX, these sequences aren't explicitly defined, but are instead
 * defined inside the font metrics. Since there are only three sequences that
 * are possible for the delimiters that TeX defines, it is easier to just encode
 * them explicitly here.
 */
// Delimiters that never stack try small delimiters and large delimiters only


var stackNeverDelimiterSequence = [{
  type: 'small',
  mathstyle: core_mathstyle.SCRIPTSCRIPT
}, {
  type: 'small',
  mathstyle: core_mathstyle.SCRIPT
}, {
  type: 'small',
  mathstyle: core_mathstyle.TEXT
}, {
  type: 'large',
  size: 1
}, {
  type: 'large',
  size: 2
}, {
  type: 'large',
  size: 3
}, {
  type: 'large',
  size: 4
}]; // Delimiters that always stack try the small delimiters first, then stack

var stackAlwaysDelimiterSequence = [{
  type: 'small',
  mathstyle: core_mathstyle.SCRIPTSCRIPT
}, {
  type: 'small',
  mathstyle: core_mathstyle.SCRIPT
}, {
  type: 'small',
  mathstyle: core_mathstyle.TEXT
}, {
  type: 'stack'
}]; // Delimiters that stack when large try the small and then large delimiters, and
// stack afterwards

var stackLargeDelimiterSequence = [{
  type: 'small',
  mathstyle: core_mathstyle.SCRIPTSCRIPT
}, {
  type: 'small',
  mathstyle: core_mathstyle.SCRIPT
}, {
  type: 'small',
  mathstyle: core_mathstyle.TEXT
}, {
  type: 'large',
  size: 1
}, {
  type: 'large',
  size: 2
}, {
  type: 'large',
  size: 3
}, {
  type: 'large',
  size: 4
}, {
  type: 'stack'
}];
/*
 * Get the font used in a delimiter based on what kind of delimiter it is.
 */

function delimTypeToFont(type) {
  if (type.type === 'small') {
    return 'Main-Regular';
  } else if (type.type === 'large') {
    return 'Size' + type.size + '-Regular';
  }

  console.assert(type.type === 'stack');
  return 'Size4-Regular';
}
/**
 * Traverse a sequence of types of delimiters to decide what kind of delimiter
 * should be used to create a delimiter of the given height+depth.
 * @param {string} delim: a character value (not a command)
 * @memberof module:delimiters
 * @private
 */


function traverseSequence(delim, height, sequence, context) {
  // Here, we choose the index we should start at in the sequences. In smaller
  // sizes (which correspond to larger numbers in style.size) we start earlier
  // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
  // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
  var start = Math.min(2, 3 - context.mathstyle.size);

  for (var i = start; i < sequence.length; i++) {
    if (sequence[i].type === 'stack') {
      // This is always the last delimiter, so we just break the loop now.
      break;
    }

    var metrics = fontMetrics.getCharacterMetrics(delim, delimTypeToFont(sequence[i]));

    if (metrics.defaultMetrics) {
      // If we don't have metrics info for this character,
      // assume we'll construct as a small delimiter
      return {
        type: 'small',
        mathstyle: core_mathstyle.SCRIPT
      };
    }

    var heightDepth = metrics.height + metrics.depth; // Small delimiters are scaled down versions of the same font, so we
    // account for the style change size.

    if (sequence[i].type === 'small') {
      heightDepth *= sequence[i].mathstyle.sizeMultiplier;
    } // Check if the delimiter at this size works for the given height.


    if (heightDepth > height) {
      return sequence[i];
    }
  } // If we reached the end of the sequence, return the last sequence element.


  return sequence[sequence.length - 1];
}
/**
 * Make a delimiter of a given height+depth, with optional centering. Here, we
 * traverse the sequences, and create a delimiter that the sequence tells us to.
 *
 * @param {string} type 'mopen' or 'mclose'
 * @param {string} delim
 * @param {number} height
 * @param {boolean} center
 * @param {Context.Context} context
 * @param {string[]} classes
 * @memberof module:delimiters
 * @private
 */


function makeCustomSizedDelim(type, delim, height, center, context, classes) {
  if (!delim || delim.length === 0 || delim === '.') {
    return makeNullFence(type, context, type);
  }

  if (delim === '<' || delim === '\\lt') {
    delim = '\\langle';
  } else if (delim === '>' || delim === '\\gt') {
    delim = '\\rangle';
  } // Decide what sequence to use


  var sequence;

  if (stackNeverDelimiters.includes(delim)) {
    sequence = stackNeverDelimiterSequence;
  } else if (stackLargeDelimiters.includes(delim)) {
    sequence = stackLargeDelimiterSequence;
  } else {
    sequence = stackAlwaysDelimiterSequence;
  } // Look through the sequence


  var delimType = traverseSequence(definitions.getValue('math', delim), height, sequence, context); // Depending on the sequence element we decided on, call the appropriate
  // function.

  if (delimType.type === 'small') {
    return makeSmallDelim(type, delim, delimType.mathstyle, center, context, classes);
  } else if (delimType.type === 'large') {
    return makeLargeDelim(type, delim, delimType.size, center, context, classes);
  }

  console.assert(delimType.type === 'stack');
  return makeStackedDelim(type, delim, height, center, context, classes);
}
/**
 * Make a delimiter for use with `\left` and `\right`, given a height and depth
 * of an expression that the delimiters surround.
 * See tex.web:14994
 * @memberof module:delimiters
 * @private
 */


function makeLeftRightDelim(type, delim, height, depth, context, classes) {
  // If this is the empty delimiter, return a null fence
  if (delim === '.') {
    return makeNullFence(type, context, classes);
  } // We always center \left/\right delimiters, so the axis is always shifted


  var axisHeight = context.mathstyle.metrics.axisHeight * context.mathstyle.sizeMultiplier; // Taken from TeX source, tex.web, function make_left_right

  var delimiterFactor = 901; // plain.tex:327

  var delimiterShortfall = 5.0 / fontMetrics.METRICS.ptPerEm; // plain.tex:345

  var delta2 = depth + axisHeight;
  var delta1 = height - axisHeight;
  delta1 = Math.max(delta2, delta1);
  var delta = delta1 * delimiterFactor / 500;
  delta2 = 2 * delta1 - delimiterShortfall;
  delta = Math.max(delta, delta2); // const maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);
  // const totalHeight = Math.max(
  //     // In real TeX, calculations are done using integral values which are
  //     // 65536 per pt, or 655360 per em. So, the division here truncates in
  //     // TeX but doesn't here, producing different results. If we wanted to
  //     // exactly match TeX's calculation, we could do
  //     //   Math.floor(655360 * maxDistFromAxis / 500) *
  //     //    delimiterFactor / 655360
  //     // (To see the difference, compare
  //     //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
  //     // in TeX and KaTeX)
  //     maxDistFromAxis / 500 * delimiterFactor,
  //     2 * maxDistFromAxis - delimiterShortfall);
  // Finally, we defer to `makeCustomSizedDelim` with our calculated total
  // height

  return makeCustomSizedDelim(type, delim, delta, true, context, classes);
}
/**
 *
 * @param {Context} context
 * @param {string} [type] either 'mopen', 'mclose' or null
 * @memberof module:delimiters
 * @private
 */


function makeNullFence(type, context, classes) {
  return core_span.makeSpanOfType(type, '', 'sizing' + // @todo not useful, redundant with 'nulldelimiter'
  // 'reset-' + context.size, 'size5',                 // @todo: that seems like a lot of resizing... do we need both?
  context.mathstyle.adjustTo(core_mathstyle.TEXT) + ' nulldelimiter ' // The null delimiter has a width, specified by class 'nulldelimiter'
  + (classes || ''));
} // Export the public interface for this module


/* harmony default export */ var delimiters = ({
  makeSizedDelim: makeSizedDelim,
  makeCustomSizedDelim: makeCustomSizedDelim,
  makeLeftRightDelim: makeLeftRightDelim
});
// CONCATENATED MODULE: ./packages/core/mathAtom.js
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function mathAtom_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { mathAtom_typeof = function _typeof(obj) { return typeof obj; }; } else { mathAtom_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return mathAtom_typeof(obj); }

function mathAtom_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function mathAtom_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function mathAtom_createClass(Constructor, protoProps, staticProps) { if (protoProps) mathAtom_defineProperties(Constructor.prototype, protoProps); if (staticProps) mathAtom_defineProperties(Constructor, staticProps); return Constructor; }

/**
 *
 * See also the class {@linkcode MathAtom}
 * @module core/mathatom
 * @private
 */





var mathAtom_makeSpan = core_span.makeSpan;
var mathAtom_makeOrd = core_span.makeOrd;
var mathAtom_makeInner = core_span.makeInner;
var mathAtom_makeHlist = core_span.makeHlist;
var mathAtom_makeVlist = core_span.makeVlist;
var GREEK_REGEX = /\u0393|\u0394|\u0398|\u039b|\u039E|\u03A0|\u03A3|\u03a5|\u03a6|\u03a8|\u03a9|[\u03b1-\u03c9]|\u03d1|\u03d5|\u03d6|\u03f1|\u03f5/; // TeX by default auto-italicize latin letters and lowercase greek letters

var AUTO_ITALIC_REGEX = /^([A-Za-z]|[\u03b1-\u03c9]|\u03d1|\u03d5|\u03d6|\u03f1|\u03f5)$/; // A table of size -> font size for the different sizing functions

var SIZING_MULTIPLIER = {
  size1: 0.5,
  size2: 0.7,
  size3: 0.8,
  size4: 0.9,
  size5: 1.0,
  size6: 1.2,
  size7: 1.44,
  size8: 1.73,
  size9: 2.07,
  size10: 2.49
};
/**
 * An atom is an object encapsulating an elementary mathematical unit,
 * independent of its graphical representation.
 *
 * It keeps track of the content, while the dimensions, position and style
 * are tracked by Span objects which are created by the `decompose()` functions.
 *
 * @param {string} mode
 * @param {string} type
 * @param {string|MathAtom[]} body
 * @param {Object.<string, any>} [style={}] A set of additional properties to append to
 * the atom
 * @return {MathAtom}
 * @property {string} mode `'display'`, `'command'`, etc...
 * @property {string} type - Type can be one of:
 * - `mord`: ordinary symbol, e.g. `x`, `\alpha`
 * - `textord`: ordinary characters
 * - `mop`: operators, including special functions, `\sin`, `\sum`, `\cap`.
 * - `mbin`: binary operator: `+`, `*`, etc...
 * - `mrel`: relational operator: `=`, `\ne`, etc...
 * - `mpunct`: punctuation: `,`, `:`, etc...
 * - `mopen`: opening fence: `(`, `\langle`, etc...
 * - `mclose`: closing fence: `)`, `\rangle`, etc...
 * - `minner`: special layout cases, overlap, `\left...\right`
 *
 * In addition to these basic types, which correspond to the TeX atom types,
 * some atoms represent more complex compounds, including:
 * - `space` and `spacing`: blank space between atoms
 * - `mathstyle`: to change the math style used: `display` or `text`.
 * The layout rules are different for each, the latter being more compact and
 * intended to be incorporated with surrounding non-math text.
 * - `root`: a group, which has no parent (only one per formula)
 * - `group`: a simple group of atoms, for example from a `{...}`
 * - `sizing`: set the size of the font used
 * - `rule`: draw a line, for the `\rule` command
 * - `line`: used by `\overline` and `\underline` commands
 * - `box`: a border drawn around an expression and change its background color
 * - `overlap`: display a symbol _over_ another
 * - `overunder`: displays an annotation above or below a symbol
 * - `array`: a group, which has children arranged in rows. Used
 * by environments such as `matrix`, `cases`, etc...
 * - `genfrac`: a generalized fraction: a numerator and denominator, separated
 * by an optional line, and surrounded by optional fences
 * - `surd`: a surd, aka root
 * - `leftright`: used by the `\left` and `\right` commands
 * - `delim`: some delimiter
 * - `sizeddelim`: a delimiter that can grow
 *
 * The following types are used by the editor:
 * - `command` indicate a command being entered. The text is displayed in
 * blue in the editor.
 * - `error`: indicate a command that is unknown, for example `\xyzy`. The text
 * is displayed with a wavy red underline in the editor.
 * - `placeholder`: indicate a temporary item. Placeholders are displayed
 * as a dashed square in the editor.
 * - `first`: a special, empty, atom put as the first atom in math lists in
 * order to be able to position the caret before the first element. Aside from
 * the caret, they display nothing.
 *
 * @property {string|MathAtom[]} body
 * @property {MathAtom[]} superscript
 * @property {MathAtom[]} subscript
 * @property {MathAtom[]} numer
 * @property {MathAtom[]} denom
 *
 * @property {boolean} captureSelection if true, this atom does not let its
 * children be selected. Used by the `\enclose` annotations, for example.
 *
 * @property {boolean} skipBoundary if true, when the caret reaches the
 * first position in this element's body, it automatically moves to the
 * outside of the element. Conversely, when the caret reaches the position
 * right after this element, it automatically moves to the last position
 * inside this element.
 *
 * @class
 * @private
 */

var mathAtom_MathAtom =
/*#__PURE__*/
function () {
  /**
   *
   * @param {string} mode
   * @param {string} type
   * @param {string|Array} body
   * @param {object} style
   */
  function MathAtom(mode, type, body, style) {
    mathAtom_classCallCheck(this, MathAtom);

    this.mode = mode;
    this.type = type;
    this.body = body; // Append all the properties in extras to this
    // This can override the mode, type and body

    this.applyStyle(style);
  }

  mathAtom_createClass(MathAtom, [{
    key: "getStyle",
    value: function getStyle() {
      return {
        color: this.phantom ? 'transparent' : this.color,
        backgroundColor: this.phantom ? 'transparent' : this.backgroundColor,
        fontFamily: this.baseFontFamily || this.fontFamily || this.autoFontFamily,
        fontShape: this.fontShape,
        fontSeries: this.fontSeries,
        fontSize: this.fontSize,
        cssId: this.cssId,
        cssClass: this.cssClass
      };
    }
  }, {
    key: "applyStyle",
    value: function applyStyle(style) {
      // Always apply the style, even if null. This will also set the
      // autoFontFamily, which account for auto-italic. This code path
      // is used by \char.
      Object.assign(this, style);

      if (this.fontFamily === 'none') {
        this.fontFamily = '';
      }

      if (this.fontShape === 'auto') {
        this.fontShape = '';
      }

      if (this.fontSeries === 'auto') {
        this.fontSeries = '';
      }

      if (this.color === 'none') {
        this.color = '';
      }

      if (this.backgroundColor === 'none') {
        this.backgroundColor = '';
      }

      if (this.fontSize === 'auto') {
        this.fontSize = '';
      }

      if (this.fontSize) {
        this.maxFontSize = SIZING_MULTIPLIER[this.fontSize];
      }

      if (this.mode === 'math') {
        var symbol = typeof this.body === 'string' ? this.body : '';
        this.autoFontFamily = 'cmr';

        if (AUTO_ITALIC_REGEX.test(symbol)) {
          // Auto italicize alphabetic and lowercase greek symbols
          // in math mode (European style: American style would not
          // italicize greek letters, but it's TeX's default behavior)
          this.autoFontFamily = 'math';
        } else if (/\\imath|\\jmath|\\pounds/.test(symbol)) {
          // Some characters do not exist in the Math font,
          // use Main italic instead
          this.autoFontFamily = 'mainit';
        } else if (!GREEK_REGEX.test(symbol) && this.baseFontFamily === 'math') {
          this.autoFontFamily = 'cmr';
        }
      } else if (this.mode === 'text') {
        // A root can be in text mode (root created when creating a representation
        // of the selection, for copy/paste for example)
        if (this.type !== 'root') this.type = '';
        delete this.baseFontFamily;
        delete this.autoFontFamily;
      }
    }
  }, {
    key: "getInitialBaseElement",
    value: function getInitialBaseElement() {
      var result = this;

      if (Array.isArray(this.body) && this.body.length > 0) {
        if (this.body[0].type !== 'first') {
          result = this.body[0].getInitialBaseElement();
        } else if (this.body[1]) {
          result = this.body[1].getInitialBaseElement();
        }
      }

      return result;
    }
  }, {
    key: "getFinalBaseElement",
    value: function getFinalBaseElement() {
      if (Array.isArray(this.body) && this.body.length > 0) {
        return this.body[this.body.length - 1].getFinalBaseElement();
      }

      return this;
    }
  }, {
    key: "isCharacterBox",
    value: function isCharacterBox() {
      var base = this.getInitialBaseElement();
      return /minner|mbin|mrel|mpunct|mopen|mclose|textord/.test(base.type);
    }
  }, {
    key: "forEach",
    value: function forEach(cb) {
      cb(this);

      if (Array.isArray(this.body)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.body[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var atom = _step.value;
            if (atom) atom.forEach(cb);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else if (this.body && mathAtom_typeof(this.body) === 'object') {
        // Note: body can be null, for example 'first' or 'rule'
        // (and null is an object)
        cb(this.body);
      }

      if (this.superscript) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.superscript[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _atom = _step2.value;
            if (_atom) _atom.forEach(cb);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      if (this.subscript) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = this.subscript[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _atom2 = _step3.value;
            if (_atom2) _atom2.forEach(cb);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }

      if (this.overscript) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = this.overscript[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _atom3 = _step4.value;
            if (_atom3) _atom3.forEach(cb);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }

      if (this.underscript) {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = this.underscript[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var _atom4 = _step5.value;
            if (_atom4) _atom4.forEach(cb);
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      }

      if (this.numer) {
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = this.numer[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var _atom5 = _step6.value;
            if (_atom5) _atom5.forEach(cb);
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }
      }

      if (this.denom) {
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = this.denom[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var _atom6 = _step7.value;
            if (_atom6) _atom6.forEach(cb);
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }
      }

      if (this.index) {
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = this.index[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var _atom7 = _step8.value;
            if (_atom7) _atom7.forEach(cb);
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
              _iterator8.return();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }
      }

      if (this.array) {
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = this.array[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var row = _step9.value;
            var _iteratorNormalCompletion10 = true;
            var _didIteratorError10 = false;
            var _iteratorError10 = undefined;

            try {
              for (var _iterator10 = row[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                var cell = _step10.value;
                var _iteratorNormalCompletion11 = true;
                var _didIteratorError11 = false;
                var _iteratorError11 = undefined;

                try {
                  for (var _iterator11 = cell[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                    var _atom8 = _step11.value;

                    _atom8.forEach(cb);
                  }
                } catch (err) {
                  _didIteratorError11 = true;
                  _iteratorError11 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion11 && _iterator11.return != null) {
                      _iterator11.return();
                    }
                  } finally {
                    if (_didIteratorError11) {
                      throw _iteratorError11;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError10 = true;
              _iteratorError10 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion10 && _iterator10.return != null) {
                  _iterator10.return();
                }
              } finally {
                if (_didIteratorError10) {
                  throw _iteratorError10;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }
      }
    }
    /**
     * Iterate over all the child atoms of this atom, this included,
     * and return an array of all the atoms for which the predicate callback
     * is true.
     *
     * @return {MathAtom[]}
     * @method MathAtom#filter
     * @private
     */

  }, {
    key: "filter",
    value: function filter(cb) {
      var result = [];
      if (cb(this)) result.push(this);

      for (var _i = 0, _arr = ['body', 'superscript', 'subscript', 'overscript', 'underscript', 'numer', 'denom', 'index']; _i < _arr.length; _i++) {
        var relation = _arr[_i];

        if (Array.isArray(this[relation])) {
          var _iteratorNormalCompletion14 = true;
          var _didIteratorError14 = false;
          var _iteratorError14 = undefined;

          try {
            for (var _iterator14 = this[relation][Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
              var atom = _step14.value;
              if (atom) result = result.concat(atom.filter(cb));
            }
          } catch (err) {
            _didIteratorError14 = true;
            _iteratorError14 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion14 && _iterator14.return != null) {
                _iterator14.return();
              }
            } finally {
              if (_didIteratorError14) {
                throw _iteratorError14;
              }
            }
          }
        }
      }

      if (Array.isArray(this.array)) {
        var _iteratorNormalCompletion12 = true;
        var _didIteratorError12 = false;
        var _iteratorError12 = undefined;

        try {
          for (var _iterator12 = this.array[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
            var row = _step12.value;
            var _iteratorNormalCompletion13 = true;
            var _didIteratorError13 = false;
            var _iteratorError13 = undefined;

            try {
              for (var _iterator13 = row[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                var cell = _step13.value;
                if (cell) result = result.concat(cell.filter(cb));
              }
            } catch (err) {
              _didIteratorError13 = true;
              _iteratorError13 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion13 && _iterator13.return != null) {
                  _iterator13.return();
                }
              } finally {
                if (_didIteratorError13) {
                  throw _iteratorError13;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError12 = true;
          _iteratorError12 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion12 && _iterator12.return != null) {
              _iterator12.return();
            }
          } finally {
            if (_didIteratorError12) {
              throw _iteratorError12;
            }
          }
        }
      }

      return result;
    }
  }, {
    key: "decomposeGroup",
    value: function decomposeGroup(context) {
      // The scope of the context is this group, so clone it
      // so that any changes to it will be discarded when finished
      // with this group.
      // Note that the mathstyle property is optional and could be undefined
      // If that's the case, clone() returns a clone of the
      // context with the same mathstyle.
      var localContext = context.clone({
        mathstyle: this.mathstyle
      });
      var span = mathAtom_makeOrd(_decompose(localContext, this.body));
      if (this.cssId) span.cssId = this.cssId;
      span.applyStyle({
        backgroundColor: this.backgroundColor,
        cssClass: this.cssClass
      });
      return span;
    }
  }, {
    key: "decomposeArray",
    value: function decomposeArray(context) {
      // See http://tug.ctan.org/macros/latex/base/ltfsstrc.dtx
      // and http://tug.ctan.org/macros/latex/base/lttab.dtx
      var colFormat = this.colFormat;

      if (colFormat && colFormat.length === 0) {
        colFormat = [{
          align: 'l'
        }];
      }

      if (!colFormat) {
        colFormat = [{
          align: 'l'
        }, {
          align: 'l'
        }, {
          align: 'l'
        }, {
          align: 'l'
        }, {
          align: 'l'
        }, {
          align: 'l'
        }, {
          align: 'l'
        }, {
          align: 'l'
        }, {
          align: 'l'
        }, {
          align: 'l'
        }];
      } // Fold the array so that there are no more columns of content than
      // there are columns prescribed by the column format.


      var array = [];
      var colMax = 0; // Maximum number of columns of content

      var _iteratorNormalCompletion15 = true;
      var _didIteratorError15 = false;
      var _iteratorError15 = undefined;

      try {
        for (var _iterator15 = colFormat[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
          var colSpec = _step15.value;
          if (colSpec.align) colMax++;
        }
      } catch (err) {
        _didIteratorError15 = true;
        _iteratorError15 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion15 && _iterator15.return != null) {
            _iterator15.return();
          }
        } finally {
          if (_didIteratorError15) {
            throw _iteratorError15;
          }
        }
      }

      var _iteratorNormalCompletion16 = true;
      var _didIteratorError16 = false;
      var _iteratorError16 = undefined;

      try {
        for (var _iterator16 = this.array[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
          var _row = _step16.value;
          var _colIndex = 0;

          while (_colIndex < _row.length) {
            var newRow = [];
            var lastCol = Math.min(_row.length, _colIndex + colMax);

            while (_colIndex < lastCol) {
              newRow.push(_row[_colIndex++]);
            }

            array.push(newRow);
          }
        } // If the last row is empty, ignore it.

      } catch (err) {
        _didIteratorError16 = true;
        _iteratorError16 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion16 && _iterator16.return != null) {
            _iterator16.return();
          }
        } finally {
          if (_didIteratorError16) {
            throw _iteratorError16;
          }
        }
      }

      if (array[array.length - 1].length === 1 && array[array.length - 1][0].length === 0) {
        array.pop();
      }

      var mathstyle = core_mathstyle.toMathstyle(this.mathstyle) || context.mathstyle; // Row spacing
      // Default \arraystretch from lttab.dtx

      var arraystretch = this.arraystretch || 1;
      var arrayskip = arraystretch * METRICS.baselineskip;
      var arstrutHeight = 0.7 * arrayskip;
      var arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx

      var totalHeight = 0;
      var nc = 0;
      var body = [];
      var nr = array.length;

      for (var r = 0; r < nr; ++r) {
        var inrow = array[r];
        nc = Math.max(nc, inrow.length);
        var height = arstrutHeight; // \@array adds an \@arstrut

        var depth = arstrutDepth; // to each row (via the template)

        var outrow = [];

        for (var c = 0; c < inrow.length; ++c) {
          var localContext = context.clone({
            mathstyle: this.mathstyle
          });
          var cell = _decompose(localContext, inrow[c]) || [];
          var elt = [mathAtom_makeOrd(null)].concat(cell);
          depth = Math.max(depth, core_span.depth(elt));
          height = Math.max(height, core_span.height(elt));
          outrow.push(elt);
        }

        var jot = r === nr - 1 ? 0 : this.jot || 0;

        if (this.rowGaps && this.rowGaps[r]) {
          jot = this.rowGaps[r];

          if (jot > 0) {
            // \@argarraycr
            jot += arstrutDepth;

            if (depth < jot) {
              depth = jot; // \@xargarraycr
            }

            jot = 0;
          }
        }

        outrow.height = height;
        outrow.depth = depth;
        totalHeight += height;
        outrow.pos = totalHeight;
        totalHeight += depth + jot; // \@yargarraycr

        body.push(outrow);
      }

      var offset = totalHeight / 2 + mathstyle.metrics.axisHeight;
      var contentCols = [];

      for (var colIndex = 0; colIndex < nc; colIndex++) {
        var col = [];
        var _iteratorNormalCompletion17 = true;
        var _didIteratorError17 = false;
        var _iteratorError17 = undefined;

        try {
          for (var _iterator17 = body[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
            var row = _step17.value;
            var elem = row[colIndex];

            if (!elem) {
              continue;
            }

            elem.depth = row.depth;
            elem.height = row.height;
            col.push(elem);
            col.push(row.pos - offset);
          }
        } catch (err) {
          _didIteratorError17 = true;
          _iteratorError17 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion17 && _iterator17.return != null) {
              _iterator17.return();
            }
          } finally {
            if (_didIteratorError17) {
              throw _iteratorError17;
            }
          }
        }

        if (col.length > 0) {
          contentCols.push(mathAtom_makeVlist(context, col, 'individualShift'));
        }
      } // Iterate over each column description.
      // Each `colDesc` will indicate whether to insert a gap, a rule or
      // a column from 'contentCols'


      var cols = [];
      var prevColContent = false;
      var prevColRule = false;
      var currentContentCol = 0;
      var firstColumn = !this.lFence;
      var _iteratorNormalCompletion18 = true;
      var _didIteratorError18 = false;
      var _iteratorError18 = undefined;

      try {
        for (var _iterator18 = colFormat[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
          var colDesc = _step18.value;

          if (colDesc.align && currentContentCol >= contentCols.length) {
            break;
          } else if (colDesc.align && currentContentCol < contentCols.length) {
            // If an alignment is specified, insert a column of content
            if (prevColContent) {
              // If no gap was provided, insert a default gap between
              // consecutive columns of content
              cols.push(makeColGap(2 * METRICS.arraycolsep));
            } else if (prevColRule || firstColumn) {
              // If the previous column was a rule or this is the first column
              // add a smaller gap
              cols.push(makeColGap(METRICS.arraycolsep));
            }

            cols.push(mathAtom_makeSpan(contentCols[currentContentCol], 'col-align-' + colDesc.align));
            currentContentCol++;
            prevColContent = true;
            prevColRule = false;
            firstColumn = false;
          } else if (typeof colDesc.gap !== 'undefined') {
            // Something to insert in between columns of content
            if (typeof colDesc.gap === 'number') {
              // It's a number, indicating how much space, in em,
              // to leave in between columns
              cols.push(makeColGap(colDesc.gap));
            } else {
              // It's a mathlist
              // Create a column made up of the mathlist
              // as many times as there are rows.
              cols.push(makeColOfRepeatingElements(context, body, offset, colDesc.gap));
            }

            prevColContent = false;
            prevColRule = false;
            firstColumn = false;
          } else if (colDesc.rule) {
            // It's a rule.
            var separator = mathAtom_makeSpan(null, 'vertical-separator');
            separator.setStyle('height', totalHeight, 'em'); // result.setTop((1 - context.mathstyle.sizeMultiplier) *
            //     context.mathstyle.metrics.axisHeight);

            separator.setStyle('margin-top', 3 * context.mathstyle.metrics.axisHeight - offset, 'em');
            separator.setStyle('vertical-align', 'top'); // separator.setStyle('display', 'inline-block');

            var gap = 0;

            if (prevColRule) {
              gap = METRICS.doubleRuleSep - METRICS.arrayrulewidth;
            } else if (prevColContent) {
              gap = METRICS.arraycolsep - METRICS.arrayrulewidth;
            }

            separator.setLeft(gap, 'em');
            cols.push(separator);
            prevColContent = false;
            prevColRule = true;
            firstColumn = false;
          }
        }
      } catch (err) {
        _didIteratorError18 = true;
        _iteratorError18 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion18 && _iterator18.return != null) {
            _iterator18.return();
          }
        } finally {
          if (_didIteratorError18) {
            throw _iteratorError18;
          }
        }
      }

      if (prevColContent && !this.rFence) {
        // If the last column was content, add a small gap
        cols.push(makeColGap(METRICS.arraycolsep));
      }

      if ((!this.lFence || this.lFence === '.') && (!this.rFence || this.rFence === '.')) {
        // There are no delimiters around the array, just return what
        // we've built so far.
        return mathAtom_makeOrd(cols, 'mtable');
      } // There is at least one delimiter. Wrap the core of the array with
      // appropriate left and right delimiters
      // const inner = makeSpan(makeSpan(cols, 'mtable'), 'mord');


      var inner = mathAtom_makeSpan(cols, 'mtable');
      var innerHeight = core_span.height(inner);
      var innerDepth = core_span.depth(inner);
      return mathAtom_makeOrd([this.bind(context, delimiters.makeLeftRightDelim('mopen', this.lFence, innerHeight, innerDepth, context)), inner, this.bind(context, delimiters.makeLeftRightDelim('mclose', this.rFence, innerHeight, innerDepth, context))]);
    }
    /**
     * Gengrac -- Generalized fraction
     *
     * Decompose fractions, binomials, and in general anything made
     * of two expressions on top of each other, optionally separated by a bar,
     * and optionally surrounded by fences (parentheses, brackets, etc...)
     *
     * Depending on the type of fraction the mathstyle is either
     * display math or inline math (which is indicated by 'textstyle'). This value can
     * also be set to 'auto', which indicates it should use the current mathstyle
     *
     * @method MathAtom#decomposeGenfrac
     * @private
     */

  }, {
    key: "decomposeGenfrac",
    value: function decomposeGenfrac(context) {
      var mathstyle = this.mathstyle === 'auto' ? context.mathstyle : core_mathstyle.toMathstyle(this.mathstyle);
      var newContext = context.clone({
        mathstyle: mathstyle
      });
      var numer = [];

      if (this.numerPrefix) {
        numer.push(mathAtom_makeOrd(this.numerPrefix));
      }

      var numeratorStyle = this.continuousFraction ? mathstyle : mathstyle.fracNum();
      numer = numer.concat(_decompose(newContext.clone({
        mathstyle: numeratorStyle
      }), this.numer));
      var numerReset = mathAtom_makeHlist(numer, context.mathstyle.adjustTo(numeratorStyle));
      var denom = [];

      if (this.denomPrefix) {
        denom.push(mathAtom_makeOrd(this.denomPrefix));
      }

      var denominatorStyle = this.continuousFraction ? mathstyle : mathstyle.fracDen();
      denom = denom.concat(_decompose(newContext.clone({
        mathstyle: denominatorStyle
      }), this.denom));
      var denomReset = mathAtom_makeHlist(denom, context.mathstyle.adjustTo(denominatorStyle));
      var ruleWidth = !this.hasBarLine ? 0 : METRICS.defaultRuleThickness / mathstyle.sizeMultiplier; // Rule 15b from Appendix G

      var numShift;
      var clearance;
      var denomShift;

      if (mathstyle.size === core_mathstyle.DISPLAY.size) {
        numShift = mathstyle.metrics.num1;

        if (ruleWidth > 0) {
          clearance = 3 * ruleWidth;
        } else {
          clearance = 7 * METRICS.defaultRuleThickness;
        }

        denomShift = mathstyle.metrics.denom1;
      } else {
        if (ruleWidth > 0) {
          numShift = mathstyle.metrics.num2;
          clearance = ruleWidth;
        } else {
          numShift = mathstyle.metrics.num3;
          clearance = 3 * METRICS.defaultRuleThickness;
        }

        denomShift = mathstyle.metrics.denom2;
      }

      var numerDepth = numerReset ? numerReset.depth : 0;
      var denomHeight = denomReset ? denomReset.height : 0;
      var frac;

      if (ruleWidth === 0) {
        // Rule 15c from Appendix G
        // No bar line between numerator and denominator
        var candidateClearance = numShift - numerDepth - (denomHeight - denomShift);

        if (candidateClearance < clearance) {
          numShift += 0.5 * (clearance - candidateClearance);
          denomShift += 0.5 * (clearance - candidateClearance);
        }

        frac = mathAtom_makeVlist(newContext, [numerReset, -numShift, denomReset, denomShift], 'individualShift');
      } else {
        // Rule 15d from Appendix G
        // There is a bar line between the numerator and the denominator
        var axisHeight = mathstyle.metrics.axisHeight;

        if (numShift - numerDepth - (axisHeight + 0.5 * ruleWidth) < clearance) {
          numShift += clearance - (numShift - numerDepth - (axisHeight + 0.5 * ruleWidth));
        }

        if (axisHeight - 0.5 * ruleWidth - (denomHeight - denomShift) < clearance) {
          denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomHeight - denomShift));
        }

        var mid = mathAtom_makeSpan(null,
        /* newContext.mathstyle.adjustTo(Mathstyle.TEXT) + */
        ' frac-line');
        mid.applyStyle(this.getStyle()); // @todo: do we really need to reset the size?
        // Manually set the height of the line because its height is
        // created in CSS

        mid.height = ruleWidth;
        var elements = [];

        if (numerReset) {
          elements.push(numerReset);
          elements.push(-numShift);
        }

        elements.push(mid);
        elements.push(ruleWidth / 2 - axisHeight);

        if (denomReset) {
          elements.push(denomReset);
          elements.push(denomShift);
        }

        frac = mathAtom_makeVlist(newContext, elements, 'individualShift');
      } // Add a 'mfrac' class to provide proper context for
      // other css selectors (such as 'frac-line')


      frac.classes += ' mfrac'; // Since we manually change the style sometimes (with \dfrac or \tfrac),
      // account for the possible size change here.

      frac.height *= mathstyle.sizeMultiplier / context.mathstyle.sizeMultiplier;
      frac.depth *= mathstyle.sizeMultiplier / context.mathstyle.sizeMultiplier; // if (!this.leftDelim && !this.rightDelim) {
      //     return makeOrd(frac,
      //         context.parentMathstyle.adjustTo(mathstyle) +
      //         ((context.parentSize !== context.size) ?
      //             (' sizing reset-' + context.parentSize + ' ' + context.size) : ''));
      // }
      // Rule 15e of Appendix G

      var delimSize = mathstyle.size === core_mathstyle.DISPLAY.size ? mathstyle.metrics.delim1 : mathstyle.metrics.delim2; // Optional delimiters

      var leftDelim = this.bind(context, delimiters.makeCustomSizedDelim('mopen', this.leftDelim, delimSize, true, context.clone({
        mathstyle: mathstyle
      })));
      var rightDelim = this.bind(context, delimiters.makeCustomSizedDelim('mclose', this.rightDelim, delimSize, true, context.clone({
        mathstyle: mathstyle
      })));
      leftDelim.applyStyle(this.getStyle());
      rightDelim.applyStyle(this.getStyle());
      var result = mathAtom_makeOrd([leftDelim, frac, rightDelim], context.parentSize !== context.size ? 'sizing reset-' + context.parentSize + ' ' + context.size : '');
      return this.bind(context, result);
    }
    /**
      *  \left....\right
      *
      * Note that we can encounter malformed \left...\right, for example
      * a \left without a matching \right or vice versa. In that case, the
      * leftDelim (resp. rightDelim) will be undefined. We still need to handle
      * those cases.
      *
      * @method MathAtom#decomposeLeftright
      * @private
      */

  }, {
    key: "decomposeLeftright",
    value: function decomposeLeftright(context) {
      if (!this.body) {
        // No body, only a delimiter
        if (this.leftDelim) {
          return new MathAtom('math', 'mopen', this.leftDelim).decompose(context);
        }

        if (this.rightDelim) {
          return new MathAtom('math', 'mclose', this.rightDelim).decompose(context);
        }

        return null;
      } // The scope of the context is this group, so make a copy of it
      // so that any changes to it will be discarded when finished
      // with this group.


      var localContext = context.clone();

      var inner = _decompose(localContext, this.body);

      var mathstyle = localContext.mathstyle;
      var innerHeight = 0;
      var innerDepth = 0;
      var result = []; // Calculate its height and depth
      // The size of delimiters is the same, regardless of what mathstyle we are
      // in. Thus, to correctly calculate the size of delimiter we need around
      // a group, we scale down the inner size based on the size.

      innerHeight = core_span.height(inner) * mathstyle.sizeMultiplier;
      innerDepth = core_span.depth(inner) * mathstyle.sizeMultiplier; // Add the left delimiter to the beginning of the expression

      if (this.leftDelim) {
        result.push(this.bind(context, delimiters.makeLeftRightDelim('mopen', this.leftDelim, innerHeight, innerDepth, localContext)));
        result[result.length - 1].applyStyle(this.getStyle());
      }

      if (inner) {
        // Replace the delim (\middle) spans with proper ones now that we know
        // the height/depth
        for (var i = 0; i < inner.length; i++) {
          if (inner[i].delim) {
            var savedCaret = inner[i].caret;
            var savedSelected = /ML__selected/.test(inner[i].classes);
            inner[i] = this.bind(context, delimiters.makeLeftRightDelim('minner', inner[i].delim, innerHeight, innerDepth, localContext));
            inner[i].caret = savedCaret;
            inner[i].selected(savedSelected);
          }
        }

        result = result.concat(inner);
      } // Add the right delimiter to the end of the expression.


      if (this.rightDelim) {
        var delim = this.rightDelim;
        var classes;

        if (delim === '?') {
          // Use a placeholder delimiter matching the open delimiter
          delim = {
            '(': ')',
            '\\{': '\\}',
            '\\[': '\\]',
            '\\lbrace': '\\rbrace',
            '\\langle': '\\rangle',
            '\\lfloor': '\\rfloor',
            '\\lceil': '\\rceil',
            '\\vert': '\\vert',
            '\\lvert': '\\rvert',
            '\\Vert': '\\Vert',
            '\\lVert': '\\rVert',
            '\\lbrack': '\\rbrack',
            "\\ulcorner": "\\urcorner",
            '\\llcorner': '\\lrcorner',
            '\\lgroup': '\\rgroup',
            '\\lmoustache': '\\rmoustache'
          }[this.leftDelim];
          delim = delim || this.leftDelim;
          classes = 'ML__smart-fence__close';
        }

        result.push(this.bind(context, delimiters.makeLeftRightDelim('mclose', delim, innerHeight, innerDepth, localContext, classes)));
        result[result.length - 1].applyStyle(this.getStyle());
      } // If the `inner` flag is set, return the `inner` element (that's the
      // behavior for the regular `\left...\right`


      if (this.inner) return mathAtom_makeInner(result, mathstyle.cls()); // Otherwise, include a `\mathopen{}...\mathclose{}`. That's the
      // behavior for `\mleft...\mright`, which allows for tighter spacing
      // for example in `\sin\mleft(x\mright)`

      return result;
    }
  }, {
    key: "decomposeSurd",
    value: function decomposeSurd(context) {
      // See the TeXbook pg. 443, Rule 11.
      // http://www.ctex.org/documents/shredder/src/texbook.pdf
      var mathstyle = context.mathstyle; // First, we do the same steps as in overline to build the inner group
      // and line

      var inner = _decompose(context.cramp(), this.body);

      var ruleWidth = METRICS.defaultRuleThickness / mathstyle.sizeMultiplier;
      var phi = ruleWidth;

      if (mathstyle.id < core_mathstyle.TEXT.id) {
        phi = mathstyle.metrics.xHeight;
      } // Calculate the clearance between the body and line


      var lineClearance = ruleWidth + phi / 4;
      var innerTotalHeight = Math.max(2 * phi, (core_span.height(inner) + core_span.depth(inner)) * mathstyle.sizeMultiplier);
      var minDelimiterHeight = innerTotalHeight + (lineClearance + ruleWidth); // Create a \surd delimiter of the required minimum size

      var delim = mathAtom_makeSpan(delimiters.makeCustomSizedDelim('', '\\surd', minDelimiterHeight, false, context), 'sqrt-sign');
      delim.applyStyle(this.getStyle());
      var delimDepth = delim.height + delim.depth - ruleWidth; // Adjust the clearance based on the delimiter size

      if (delimDepth > core_span.height(inner) + core_span.depth(inner) + lineClearance) {
        lineClearance = (lineClearance + delimDepth - (core_span.height(inner) + core_span.depth(inner))) / 2;
      } // Shift the delimiter so that its top lines up with the top of the line


      delim.setTop(delim.height - core_span.height(inner) - (lineClearance + ruleWidth));
      var line = mathAtom_makeSpan(null, context.mathstyle.adjustTo(core_mathstyle.TEXT) + ' sqrt-line');
      line.applyStyle(this.getStyle());
      line.height = ruleWidth;
      var body = mathAtom_makeVlist(context, [inner, lineClearance, line, ruleWidth]);

      if (!this.index) {
        return this.bind(context, mathAtom_makeOrd([delim, body], 'sqrt'));
      } // Handle the optional root index
      // The index is always in scriptscript style


      var newcontext = context.clone({
        mathstyle: core_mathstyle.SCRIPTSCRIPT
      });
      var root = mathAtom_makeSpan(_decompose(newcontext, this.index), mathstyle.adjustTo(core_mathstyle.SCRIPTSCRIPT)); // Figure out the height and depth of the inner part

      var innerRootHeight = Math.max(delim.height, body.height);
      var innerRootDepth = Math.max(delim.depth, body.depth); // The amount the index is shifted by. This is taken from the TeX
      // source, in the definition of `\r@@t`.

      var toShift = 0.6 * (innerRootHeight - innerRootDepth); // Build a VList with the superscript shifted up correctly

      var rootVlist = mathAtom_makeVlist(context, [root], 'shift', -toShift); // Add a class surrounding it so we can add on the appropriate
      // kerning

      return this.bind(context, mathAtom_makeOrd([mathAtom_makeSpan(rootVlist, 'root'), delim, body], 'sqrt'));
    }
  }, {
    key: "decomposeAccent",
    value: function decomposeAccent(context) {
      // Accents are handled in the TeXbook pg. 443, rule 12.
      var mathstyle = context.mathstyle; // Build the base atom

      var base = _decompose(context.cramp(), this.body);

      if (this.superscript || this.subscript) {
        // If there is a supsub attached to the accent
        // apply it to the base.
        // Note this does not give the same result as TeX when there
        // are stacked accents, e.g. \vec{\breve{\hat{\acute{...}}}}^2
        base = this.attachSupsub(context, mathAtom_makeOrd(base), 'mord');
      } // Calculate the skew of the accent. This is based on the line "If the
      // nucleus is not a single character, let s = 0; otherwise set s to the
      // kern amount for the nucleus followed by the \skewchar of its font."
      // Note that our skew metrics are just the kern between each character
      // and the skewchar.


      var skew = 0;

      if (Array.isArray(this.body) && this.body.length === 1 && this.body[0].isCharacterBox()) {
        skew = core_span.skew(base);
      } // calculate the amount of space between the body and the accent


      var clearance = Math.min(core_span.height(base), mathstyle.metrics.xHeight); // Build the accent

      var accent = core_span.makeSymbol('Main-Regular', this.accent, 'math'); // Remove the italic correction of the accent, because it only serves to
      // shift the accent over to a place we don't want.

      accent.italic = 0; // The \vec character that the fonts use is a combining character, and
      // thus shows up much too far to the left. To account for this, we add a
      // specific class which shifts the accent over to where we want it.

      var vecClass = this.accent === "\u20D7" ? ' accent-vec' : '';
      var accentBody = mathAtom_makeSpan(mathAtom_makeSpan(accent), 'accent-body' + vecClass);
      accentBody = mathAtom_makeVlist(context, [base, -clearance, accentBody]); // Shift the accent over by the skew. Note we shift by twice the skew
      // because we are centering the accent, so by adding 2*skew to the left,
      // we shift it to the right by 1*skew.

      accentBody.children[1].setLeft(2 * skew);
      return mathAtom_makeOrd(accentBody, 'accent');
    }
    /**
     * \overline and \underline
     *
     * @method MathAtom#decomposeLine
     * @private
     */

  }, {
    key: "decomposeLine",
    value: function decomposeLine(context) {
      var mathstyle = context.mathstyle; // TeXBook:443. Rule 9 and 10

      var inner = _decompose(context.cramp(), this.body);

      var ruleWidth = METRICS.defaultRuleThickness / mathstyle.sizeMultiplier;
      var line = mathAtom_makeSpan(null, context.mathstyle.adjustTo(core_mathstyle.TEXT) + ' ' + this.position + '-line');
      line.height = ruleWidth;
      line.maxFontSize = 1.0;
      var vlist;

      if (this.position === 'overline') {
        vlist = mathAtom_makeVlist(context, [inner, 3 * ruleWidth, line, ruleWidth]);
      } else {
        var innerSpan = mathAtom_makeSpan(inner);
        vlist = mathAtom_makeVlist(context, [ruleWidth, line, 3 * ruleWidth, innerSpan], 'top', core_span.height(innerSpan));
      }

      return mathAtom_makeOrd(vlist, this.position);
    }
  }, {
    key: "decomposeOverunder",
    value: function decomposeOverunder(context) {
      var base = _decompose(context, this.body);

      var annotationStyle = context.clone({
        mathstyle: 'scriptstyle'
      });
      var above = this.overscript ? mathAtom_makeSpan(_decompose(annotationStyle, this.overscript), context.mathstyle.adjustTo(annotationStyle.mathstyle)) : null;
      var below = this.underscript ? mathAtom_makeSpan(_decompose(annotationStyle, this.underscript), context.mathstyle.adjustTo(annotationStyle.mathstyle)) : null;
      return makeStack(context, base, 0, 0, above, below, this.mathtype || 'mrel');
    }
  }, {
    key: "decomposeOverlap",
    value: function decomposeOverlap(context) {
      var inner = mathAtom_makeSpan(_decompose(context, this.body), 'inner');
      return mathAtom_makeOrd([inner, mathAtom_makeSpan(null, 'fix')], this.align === 'left' ? 'llap' : 'rlap');
    }
    /**
     * \rule
     * @memberof MathAtom
     * @instance
     * @private
     */

  }, {
    key: "decomposeRule",
    value: function decomposeRule(context) {
      var mathstyle = context.mathstyle;
      var result = mathAtom_makeOrd('', 'rule');
      var shift = this.shift && !isNaN(this.shift) ? this.shift : 0;
      shift = shift / mathstyle.sizeMultiplier;
      var width = this.width / mathstyle.sizeMultiplier;
      var height = this.height / mathstyle.sizeMultiplier;
      result.setStyle('border-right-width', width, 'em');
      result.setStyle('border-top-width', height, 'em');
      result.setStyle('margin-top', -(height - shift), 'em');
      result.setStyle('border-color', context.color);
      result.width = width;
      result.height = height + shift;
      result.depth = -shift;
      return result;
    }
  }, {
    key: "decomposeOp",
    value: function decomposeOp(context) {
      // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
      var mathstyle = context.mathstyle;
      var large = false;

      if (mathstyle.size === core_mathstyle.DISPLAY.size && typeof this.body === 'string' && this.body !== '\\smallint') {
        // Most symbol operators get larger in displaystyle (rule 13)
        large = true;
      }

      var base;
      var baseShift = 0;
      var slant = 0;

      if (this.symbol) {
        // If this is a symbol, create the symbol.
        var fontName = large ? 'Size2-Regular' : 'Size1-Regular';
        base = core_span.makeSymbol(fontName, this.body, 'op-symbol ' + (large ? 'large-op' : 'small-op'));
        base.type = 'mop'; // Shift the symbol so its center lies on the axis (rule 13). It
        // appears that our fonts have the centers of the symbols already
        // almost on the axis, so these numbers are very small. Note we
        // don't actually apply this here, but instead it is used either in
        // the vlist creation or separately when there are no limits.

        baseShift = (base.height - base.depth) / 2 - mathstyle.metrics.axisHeight * mathstyle.sizeMultiplier; // The slant of the symbol is just its italic correction.

        slant = base.italic; // Bind the generated span and this atom so the atom can be retrieved
        // from the span later.

        this.bind(context, base);
      } else if (Array.isArray(this.body)) {
        // If this is a list, decompose that list.
        base = core_span.makeOp(_decompose(context, this.body)); // Bind the generated span and this atom so the atom can be retrieved
        // from the span later.

        this.bind(context, base);
      } else {
        // Otherwise, this is a text operator. Build the text from the
        // operator's name.
        console.assert(this.type === 'mop');
        base = this.makeSpan(context, this.body);
      }

      if (this.superscript || this.subscript) {
        var limits = this.limits || 'auto';

        if (this.alwaysHandleSupSub || limits === 'limits' || limits === 'auto' && mathstyle.size === core_mathstyle.DISPLAY.size) {
          return this.attachLimits(context, base, baseShift, slant);
        }

        return this.attachSupsub(context, base, 'mop');
      }

      if (this.symbol) base.setTop(baseShift);
      return base;
    }
  }, {
    key: "decomposeBox",
    value: function decomposeBox(context) {
      // Base is the main content "inside" the box
      var base = mathAtom_makeOrd(_decompose(context, this.body)); // This span will represent the box (background and border)
      // It's positioned to overlap the base

      var box = mathAtom_makeSpan();
      box.setStyle('position', 'absolute'); // The padding extends outside of the base

      var padding = typeof this.padding === 'number' ? this.padding : METRICS.fboxsep;
      box.setStyle('height', base.height + base.depth + 2 * padding, 'em');

      if (padding !== 0) {
        box.setStyle('width', 'calc(100% + ' + 2 * padding + 'em)');
      } else {
        box.setStyle('width', '100%');
      }

      box.setStyle('top', -padding, 'em');
      box.setStyle('left', -padding, 'em');
      box.setStyle('z-index', '-1'); // Ensure the box is *behind* the base

      if (this.backgroundcolor) box.setStyle('background-color', this.backgroundcolor);
      if (this.framecolor) box.setStyle('border', METRICS.fboxrule + 'em solid ' + this.framecolor);
      if (this.border) box.setStyle('border', this.border);
      base.setStyle('display', 'inline-block');
      base.setStyle('height', base.height + base.depth, 'em');
      base.setStyle('vertical-align', -base.depth + padding, 'em'); // The result is a span that encloses the box and the base

      var result = mathAtom_makeSpan([box, base]); // Set its position as relative so that the box can be absolute positioned
      // over the base

      result.setStyle('position', 'relative');
      result.setStyle('vertical-align', -padding + base.depth, 'em'); // The padding adds to the width and height of the pod

      result.height = base.height + padding;
      result.depth = base.depth + padding;
      result.setLeft(padding);
      result.setRight(padding);
      return result;
    }
  }, {
    key: "decomposeEnclose",
    value: function decomposeEnclose(context) {
      var base = mathAtom_makeOrd(_decompose(context, this.body));
      var result = base; // Account for the padding

      var padding = this.padding === 'auto' ? .2 : this.padding; // em

      result.setStyle('padding', padding, 'em');
      result.setStyle('display', 'inline-block');
      result.setStyle('height', result.height + result.depth, 'em');
      result.setStyle('left', -padding, 'em');

      if (this.backgroundcolor && this.backgroundcolor !== 'transparent') {
        result.setStyle('background-color', this.backgroundcolor);
      }

      var svg = '';
      if (this.notation.box) result.setStyle('border', this.borderStyle);

      if (this.notation.actuarial) {
        result.setStyle('border-top', this.borderStyle);
        result.setStyle('border-right', this.borderStyle);
      }

      if (this.notation.madruwb) {
        result.setStyle('border-bottom', this.borderStyle);
        result.setStyle('border-right', this.borderStyle);
      }

      if (this.notation.roundedbox) {
        result.setStyle('border-radius', (core_span.height(result) + core_span.depth(result)) / 2, 'em');
        result.setStyle('border', this.borderStyle);
      }

      if (this.notation.circle) {
        result.setStyle('border-radius', '50%');
        result.setStyle('border', this.borderStyle);
      }

      if (this.notation.top) result.setStyle('border-top', this.borderStyle);
      if (this.notation.left) result.setStyle('border-left', this.borderStyle);
      if (this.notation.right) result.setStyle('border-right', this.borderStyle);
      if (this.notation.bottom) result.setStyle('border-bottom', this.borderStyle);

      if (this.notation.horizontalstrike) {
        svg += '<line x1="3%"  y1="50%" x2="97%" y2="50%"';
        svg += " stroke-width=\"".concat(this.strokeWidth, "\" stroke=\"").concat(this.strokeColor, "\"");
        svg += ' stroke-linecap="round"';

        if (this.svgStrokeStyle) {
          svg += " stroke-dasharray=\"".concat(this.svgStrokeStyle, "\"");
        }

        svg += '/>';
      }

      if (this.notation.verticalstrike) {
        svg += '<line x1="50%"  y1="3%" x2="50%" y2="97%"';
        svg += " stroke-width=\"".concat(this.strokeWidth, "\" stroke=\"").concat(this.strokeColor, "\"");
        svg += ' stroke-linecap="round"';

        if (this.svgStrokeStyle) {
          svg += " stroke-dasharray=\"".concat(this.svgStrokeStyle, "\"");
        }

        svg += '/>';
      }

      if (this.notation.updiagonalstrike) {
        svg += '<line x1="3%"  y1="97%" x2="97%" y2="3%"';
        svg += " stroke-width=\"".concat(this.strokeWidth, "\" stroke=\"").concat(this.strokeColor, "\"");
        svg += ' stroke-linecap="round"';

        if (this.svgStrokeStyle) {
          svg += " stroke-dasharray=\"".concat(this.svgStrokeStyle, "\"");
        }

        svg += '/>';
      }

      if (this.notation.downdiagonalstrike) {
        svg += '<line x1="3%"  y1="3%" x2="97%" y2="97%"';
        svg += " stroke-width=\"".concat(this.strokeWidth, "\" stroke=\"").concat(this.strokeColor, "\"");
        svg += ' stroke-linecap="round"';

        if (this.svgStrokeStyle) {
          svg += " stroke-dasharray=\"".concat(this.svgStrokeStyle, "\"");
        }

        svg += '/>';
      } // if (this.notation.updiagonalarrow) {
      //     const t = 1;
      //     const length = Math.sqrt(w * w + h * h);
      //     const f = 1 / length / 0.075 * t;
      //     const wf = w * f;
      //     const hf = h * f;
      //     const x = w - t / 2;
      //     let y = t / 2;
      //     if (y + hf - .4 * wf < 0 ) y = 0.4 * wf - hf;
      //     svg += '<line ';
      //     svg += `x1="1" y1="${h - 1}px" x2="${x - .7 * wf}px" y2="${y + .7 * hf}px"`;
      //     svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}"`;
      //     svg += ' stroke-linecap="round"';
      //     if (this.svgStrokeStyle) {
      //         svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
      //     }
      //     svg += '/>';
      //     svg += '<polygon points="';
      //     svg += `${x},${y} ${x - wf - .4 * hf},${y + hf - .4 * wf} `;
      //     svg += `${x - .7 * wf},${y + .7 * hf} ${x - wf + .4 * hf},${y + hf + .4 * wf} `;
      //     svg += `${x},${y}`;
      //     svg += `" stroke='none' fill="${this.strokeColor}"`;
      //     svg += '/>';
      // }
      // if (this.notation.phasorangle) {
      //     svg += '<path d="';
      //     svg += `M ${h / 2},1 L1,${h} L${w},${h} "`;
      //     svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}" fill="none"`;
      //     if (this.svgStrokeStyle) {
      //         svg += ' stroke-linecap="round"';
      //         svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
      //     }
      //     svg += '/>';
      // }
      // if (this.notation.radical) {
      //     svg += '<path d="';
      //     svg += `M 0,${.6 * h} L1,${h} L${emToPx(padding) * 2},1 "`;
      //     svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}" fill="none"`;
      //     if (this.svgStrokeStyle) {
      //         svg += ' stroke-linecap="round"';
      //         svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
      //     }
      //     svg += '/>';
      // }
      // if (this.notation.longdiv) {
      //     svg += '<path d="';
      //     svg += `M ${w} 1 L1 1 a${emToPx(padding)} ${h / 2}, 0, 0, 1, 1 ${h} "`;
      //     svg += ` stroke-width="${this.strokeWidth}" stroke="${this.strokeColor}" fill="none"`;
      //     if (this.svgStrokeStyle) {
      //         svg += ' stroke-linecap="round"';
      //         svg += ` stroke-dasharray="${this.svgStrokeStyle}"`;
      //     }
      //     svg += '/>';
      // }


      if (svg) {
        var svgStyle;

        if (this.shadow !== 'none') {
          if (this.shadow === 'auto') {
            svgStyle = 'filter: drop-shadow(0 0 .5px rgba(255, 255, 255, .7)) drop-shadow(1px 1px 2px #333)';
          } else {
            svgStyle = 'filter: drop-shadow(' + this.shadow + ')';
          }
        }

        return core_span.makeSVG(result, svg, svgStyle);
      }

      return result;
    }
    /**
     * Return a representation of this, but decomposed in an array of Spans
     *
     * @param {Context} context Font variant, size, color, etc...
     * @param {Span[]} [phantomBase=null] If not null, the spans to use to
     * calculate the placement of the supsub
     * @return {Span[]}
     * @method MathAtom#decompose
     * @private
     */

  }, {
    key: "decompose",
    value: function decompose(context, phantomBase) {
      console.assert(context instanceof core_context.Context);
      var result = null;

      if (!this.type || /mord|minner|mbin|mrel|mpunct|mopen|mclose|textord/.test(this.type)) {
        // The body of these atom types is *often* a string, but it can
        // be a atom list (for example a command inside a \text{})
        if (typeof this.body === 'string') {
          result = this.makeSpan(context, this.body);
        } else {
          result = this.makeSpan(context, _decompose(context, this.body));
        }

        result.type = this.type;
      } else if (this.type === 'group' || this.type === 'root') {
        result = this.decomposeGroup(context);
      } else if (this.type === 'array') {
        result = this.decomposeArray(context);
      } else if (this.type === 'genfrac') {
        result = this.decomposeGenfrac(context);
      } else if (this.type === 'surd') {
        result = this.decomposeSurd(context);
      } else if (this.type === 'accent') {
        result = this.decomposeAccent(context);
      } else if (this.type === 'leftright') {
        result = this.decomposeLeftright(context);
      } else if (this.type === 'delim') {
        result = mathAtom_makeSpan(null, '');
        result.delim = this.delim;
      } else if (this.type === 'sizeddelim') {
        result = this.bind(context, delimiters.makeSizedDelim(this.cls, this.delim, this.size, context));
      } else if (this.type === 'line') {
        result = this.decomposeLine(context);
      } else if (this.type === 'overunder') {
        result = this.decomposeOverunder(context);
      } else if (this.type === 'overlap') {
        // For llap (18), rlap (270), clap (0)
        // smash (common), mathllap (0), mathrlap (0), mathclap (0)
        // See https://www.tug.org/TUGboat/tb22-4/tb72perlS.pdf
        // and https://tex.stackexchange.com/questions/98785/what-are-the-different-kinds-of-vertical-spacing-and-horizontal-spacing-commands
        result = this.decomposeOverlap(context);
      } else if (this.type === 'rule') {
        result = this.decomposeRule(context);
      } else if (this.type === 'styling') {//
        // STYLING
        //
      } else if (this.type === 'msubsup') {
        // The caret for this atom type is handled by its elements
        result = mathAtom_makeOrd("\u200B");

        if (phantomBase) {
          result.height = phantomBase[0].height;
          result.depth = phantomBase[0].depth;
        }
      } else if (this.type === 'mop') {
        result = this.decomposeOp(context);
      } else if (this.type === 'space') {
        // A space literal
        result = this.makeSpan(context, ' ');
      } else if (this.type === 'spacing') {
        // A spacing command (\quad, etc...)
        if (this.body === "\u200B") {
          // ZERO-WIDTH SPACE
          result = this.makeSpan(context, "\u200B");
        } else if (this.body === "\xA0") {
          if (this.mode === 'math') {
            result = this.makeSpan(context, ' ');
          } else {
            result = this.makeSpan(context, "\xA0");
          }
        } else if (this.width) {
          result = mathAtom_makeSpan("\u200B", 'mspace ');

          if (this.width > 0) {
            result.setWidth(this.width);
          } else {
            result.setStyle('margin-left', this.width, 'em');
          }
        } else {
          var spacingCls = {
            'qquad': 'qquad',
            'quad': 'quad',
            'enspace': 'enspace',
            ';': 'thickspace',
            ':': 'mediumspace',
            ',': 'thinspace',
            '!': 'negativethinspace'
          }[this.body] || 'quad';
          result = mathAtom_makeSpan("\u200B", 'mspace ' + spacingCls);
        }
      } else if (this.type === 'mathstyle') {
        context.setMathstyle(this.mathstyle);
      } else if (this.type === 'box') {
        result = this.decomposeBox(context);
      } else if (this.type === 'enclose') {
        result = this.decomposeEnclose(context);
      } else if (this.type === 'command' || this.type === 'error') {
        result = this.makeSpan(context, this.body);
        result.classes = ''; // Override fonts and other attributes.

        if (this.error) {
          result.classes += ' ML__error';
        }

        if (this.suggestion) {
          result.classes += ' ML__suggestion';
        }
      } else if (this.type === 'placeholder') {
        result = this.makeSpan(context, '⬚');
      } else if (this.type === 'first') {
        // the `first` pseudo-type is used as a placeholder as
        // the first element in a children list. This makes
        // managing the list, and the caret selection, easier.
        // ZERO-WIDTH SPACE
        result = this.makeSpan(context, "\u200B");
      } else {
        //
        // DEFAULT
        //
        console.assert(false, 'Unknown MathAtom type: "' + this.type + '"');
      }

      if (!result) return result;

      if (this.caret && this.type !== 'styling' && this.type !== 'msubsup' && this.type !== 'command' && this.type !== 'placeholder' && this.type !== 'first') {
        if (Array.isArray(result)) {
          result[result.length - 1].caret = this.caret;
        } else {
          result.caret = this.caret;
        }
      } // Finally, attach any necessary superscript, subscripts


      if (!this.limits && (this.superscript || this.subscript)) {
        // If limits is set, the attachment of sup/sub was handled
        // in the atom decomposition (e.g. decomposeOp, decomposeAccent)
        if (Array.isArray(result)) {
          var lastSpan = result[result.length - 1];
          result[result.length - 1] = this.attachSupsub(context, lastSpan, lastSpan.type);
        } else {
          result = [this.attachSupsub(context, result, result.type)];
        }
      }

      return Array.isArray(result) ? result : [result];
    }
  }, {
    key: "attachSupsub",
    value: function attachSupsub(context, nucleus, type) {
      // If no superscript or subscript, nothing to do.
      if (!this.superscript && !this.subscript) return nucleus; // Superscript and subscripts are discussed in the TeXbook
      // on page 445-446, rules 18(a-f).
      // TeX:14859-14945

      var mathstyle = context.mathstyle;
      var supmid = null;
      var submid = null;

      if (this.superscript) {
        var sup = _decompose(context.sup(), this.superscript);

        supmid = mathAtom_makeSpan(sup, mathstyle.adjustTo(mathstyle.sup()));
      }

      if (this.subscript) {
        var sub = _decompose(context.sub(), this.subscript);

        submid = mathAtom_makeSpan(sub, mathstyle.adjustTo(mathstyle.sub()));
      } // Rule 18a


      var supShift = 0;
      var subShift = 0;

      if (!this.isCharacterBox()) {
        supShift = core_span.height(nucleus) - mathstyle.metrics.supDrop;
        subShift = core_span.depth(nucleus) + mathstyle.metrics.subDrop;
      } // Rule 18c


      var minSupShift;

      if (mathstyle === core_mathstyle.DISPLAY) {
        minSupShift = mathstyle.metrics.sup1;
      } else if (mathstyle.cramped) {
        minSupShift = mathstyle.metrics.sup3;
      } else {
        minSupShift = mathstyle.metrics.sup2;
      } // scriptspace is a font-size-independent size, so scale it
      // appropriately


      var multiplier = core_mathstyle.TEXT.sizeMultiplier * mathstyle.sizeMultiplier;
      var scriptspace = 0.5 / METRICS.ptPerEm / multiplier;
      var supsub = null;

      if (submid && supmid) {
        // Rule 18e
        supShift = Math.max(supShift, minSupShift, supmid.depth + 0.25 * mathstyle.metrics.xHeight);
        subShift = Math.max(subShift, mathstyle.metrics.sub2);
        var ruleWidth = METRICS.defaultRuleThickness;

        if (supShift - core_span.depth(supmid) - (core_span.height(submid) - subShift) < 4 * ruleWidth) {
          subShift = 4 * ruleWidth - (supShift - supmid.depth) + core_span.height(submid);
          var psi = 0.8 * mathstyle.metrics.xHeight - (supShift - core_span.depth(supmid));

          if (psi > 0) {
            supShift += psi;
            subShift -= psi;
          }
        }

        supsub = mathAtom_makeVlist(context, [submid, subShift, supmid, -supShift], 'individualShift'); // Subscripts shouldn't be shifted by the nucleus' italic correction.
        // Account for that by shifting the subscript back the appropriate
        // amount. Note we only do this when the nucleus is a single symbol.

        if (this.symbol) {
          supsub.children[0].setLeft(-core_span.italic(nucleus));
        }
      } else if (submid && !supmid) {
        // Rule 18b
        subShift = Math.max(subShift, mathstyle.metrics.sub1, core_span.height(submid) - 0.8 * mathstyle.metrics.xHeight);
        supsub = mathAtom_makeVlist(context, [submid], 'shift', subShift);
        supsub.children[0].setRight(scriptspace);

        if (this.isCharacterBox()) {
          supsub.children[0].setLeft(-core_span.italic(nucleus));
        }
      } else if (!submid && supmid) {
        // Rule 18c, d
        supShift = Math.max(supShift, minSupShift, supmid.depth + 0.25 * mathstyle.metrics.xHeight);
        supsub = mathAtom_makeVlist(context, [supmid], 'shift', -supShift);
        supsub.children[0].setRight(scriptspace);
      } // Display the caret *following* the superscript and subscript,
      // so attach the caret to the 'msubsup' element.


      var supsubContainer = mathAtom_makeSpan(supsub, 'msubsup');

      if (this.caret) {
        supsubContainer.caret = this.caret;
      }

      return core_span.makeSpanOfType(type, [nucleus, supsubContainer]);
    }
  }, {
    key: "attachLimits",
    value: function attachLimits(context, nucleus, nucleusShift, slant) {
      var limitAbove = this.superscript ? mathAtom_makeSpan(_decompose(context.sup(), this.superscript), context.mathstyle.adjustTo(context.mathstyle.sup())) : null;
      var limitBelow = this.subscript ? mathAtom_makeSpan(_decompose(context.sub(), this.subscript), context.mathstyle.adjustTo(context.mathstyle.sub())) : null;
      return makeStack(context, nucleus, nucleusShift, slant, limitAbove, limitBelow, 'mop');
    }
    /**
     * Add an ID attribute to both the span and this atom so that the atom
     * can be retrieved from the span later on (e.g. when the span is clicked on)
     * @param {Context} context
     * @param {Span} span
     * @method MathAtom#bind
     * @private
     */

  }, {
    key: "bind",
    value: function bind(context, span) {
      if (this.type !== 'first' && this.body !== "\u200B") {
        this.id = makeID(context);

        if (this.id) {
          if (!span.attributes) span.attributes = {};
          span.attributes['data-atom-id'] = this.id;
        }
      }

      return span;
    }
    /**
     * Create a span with the specified body and with a class attribute
     * equal to the type ('mbin', 'inner', 'spacing', etc...)
     *
     * @param {Context} context
     * @param {(string|Span[])} body
     * @return {Span}
     * @method MathAtom#makeSpan
     * @private
     */

  }, {
    key: "makeSpan",
    value: function makeSpan(context, body) {
      var type = this.type === 'textord' ? 'mord' : this.type;
      var result = core_span.makeSpanOfType(type, body); // The font family is determined by:
      // - the base font family associated with this atom (optional). For example,
      // some atoms such as some functions ('\sin', '\cos', etc...) or some
      // symbols ('\Z') have an explicit font family. This overrides any
      // other font family
      // - the user-specified font family that has been explicitly applied to
      // this atom
      // - the font family automatically determined in math mode, for example
      // which italicizes some characters, but which can be overridden

      var style = this.getStyle();
      result.applyStyle(style); // Apply size correction

      var size = style && style.fontSize ? style.fontSize : 'size5';

      if (size !== context.parentSize) {
        result.classes += ' sizing reset-' + context.parentSize;
        result.classes += ' ' + size;
      } else if (context.parentSize !== context.size) {
        result.classes += ' sizing reset-' + context.parentSize;
        result.classes += ' ' + context.size;
      }

      result.maxFontSize = Math.max(result.maxFontSize, context.sizeMultiplier || 1.0); // Set other attributes

      if (this.mode === 'text') result.classes += ' ML__text';
      if (context.mathstyle.isTight()) result.isTight = true; // The italic correction applies only in math mode

      if (this.mode !== 'math') result.italic = 0;
      result.setRight(result.italic); // Italic correction

      if (typeof context.opacity === 'number') result.setStyle('opacity', context.opacity); // To retrieve the atom from a span, for example when the span is clicked
      // on, attach a randomly generated ID to the span and associate it
      // with the atom.

      this.bind(context, result);

      if (this.caret) {
        // If this has a super/subscript, the caret will be attached
        // to the 'msubsup' atom, so no need to have it here.
        if (!this.superscript && !this.subscript) {
          result.caret = this.caret;
          if (context.mathstyle.isTight()) result.isTight = true;
        }
      }

      return result;
    }
  }]);

  return MathAtom;
}();
/**
 * Used in `decomposeArray` to create a column separator span.
 *
 * @param {number} width
 * @memberof module:mathAtom
 * @private
 */


function makeColGap(width) {
  var separator = mathAtom_makeSpan("\u200B", 'arraycolsep');
  separator.setWidth(width, 'em');
  return separator;
}
/**
 * Used in decomposeArray to create a column of repeating elements.
 * @memberof module:mathAtom
 * @private
 */


function makeColOfRepeatingElements(context, body, offset, elem) {
  var col = [];
  var _iteratorNormalCompletion19 = true;
  var _didIteratorError19 = false;
  var _iteratorError19 = undefined;

  try {
    for (var _iterator19 = body[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
      var row = _step19.value;
      var cell = mathAtom_makeSpan(_decompose(context, elem));
      cell.depth = row.depth;
      cell.height = row.height;
      col.push(cell);
      col.push(row.pos - offset);
    }
  } catch (err) {
    _didIteratorError19 = true;
    _iteratorError19 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion19 && _iterator19.return != null) {
        _iterator19.return();
      }
    } finally {
      if (_didIteratorError19) {
        throw _iteratorError19;
      }
    }
  }

  return mathAtom_makeVlist(context, col, 'individualShift');
}

function makeID(context) {
  var result;

  if (typeof context.generateID === 'boolean' && context.generateID) {
    result = Date.now().toString(36).slice(-2) + Math.floor(Math.random() * 0x186a0).toString(36);
  } else if (mathAtom_typeof(context.generateID) === 'object') {
    if (context.generateID.overrideID) {
      result = context.generateID.overrideID;
    } else {
      result = context.generateID.seed.toString(36);
      context.generateID.seed += 1;
    }
  }

  return result;
} ////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/**
 * Combine a nucleus with an atom above and an atom below. Used to form
 * limits and used by \stackrel.
 *
 * @param {Context} context
 * @param {Span} nucleus The base over and under which the atoms will
 * be placed.
 * @param {number} nucleusShift The vertical shift of the nucleus from
 * the baseline.
 * @param {number} slant For operators that have a slant, such as \int,
 * indicate by how much to horizontally offset the above and below atoms
 * @param {Span} above
 * @param {Span} below
 * @param {string} type The type ('mop', 'mrel', etc...) of the result
 * @return {Span}
 * @memberof module:mathAtom
 * @private
 */


function makeStack(context, nucleus, nucleusShift, slant, above, below, type) {
  // If nothing above and nothing below, nothing to do.
  if (!above && !below) return nucleus; // IE 8 clips \int if it is in a display: inline-block. We wrap it
  // in a new span so it is an inline, and works.
  // @todo: revisit

  nucleus = mathAtom_makeSpan(nucleus);
  var aboveShift = 0;
  var belowShift = 0;

  if (above) {
    aboveShift = Math.max(METRICS.bigOpSpacing1, METRICS.bigOpSpacing3 - above.depth);
  }

  if (below) {
    belowShift = Math.max(METRICS.bigOpSpacing2, METRICS.bigOpSpacing4 - below.height);
  }

  var result = null;

  if (below && above) {
    var bottom = METRICS.bigOpSpacing5 + core_span.height(below) + core_span.depth(below) + belowShift + core_span.depth(nucleus) + nucleusShift;
    result = mathAtom_makeVlist(context, [METRICS.bigOpSpacing5, below, belowShift, nucleus, aboveShift, above, METRICS.bigOpSpacing5], 'bottom', bottom); // Here, we shift the limits by the slant of the symbol. Note
    // that we are supposed to shift the limits by 1/2 of the slant,
    // but since we are centering the limits adding a full slant of
    // margin will shift by 1/2 that.

    result.children[0].setLeft(-slant);
    result.children[2].setLeft(slant);
  } else if (below && !above) {
    var top = core_span.height(nucleus) - nucleusShift;
    result = mathAtom_makeVlist(context, [METRICS.bigOpSpacing5, below, belowShift, nucleus], 'top', top); // See comment above about slants

    result.children[0].setLeft(-slant);
  } else if (!below && above) {
    var _bottom = core_span.depth(nucleus) + nucleusShift;

    result = mathAtom_makeVlist(context, [nucleus, aboveShift, above, METRICS.bigOpSpacing5], 'bottom', _bottom); // See comment above about slants

    result.children[1].setLeft(slant);
  }

  return core_span.makeSpanOfType(type, result, 'op-limits');
}
/**
 * Return a list of spans equivalent to atoms.
 * A span is the most elementary type possible, for example 'text'
 * or 'vlist', while the input atoms may be more abstract and complex,
 * such as 'genfrac'
 *
 * @param {Context} context Font family, variant, size, color, etc...
 * @param {(MathAtom|MathAtom[])} atoms
 * @return {Span[]}
 * @memberof module:core/mathatom
 * @private
 */


function _decompose(context, atoms) {
  if (!(context instanceof core_context.Context)) {
    // We can be passed either a Context object, or
    // a simple object with some properties set.
    context = new core_context.Context(context);
  } // In most cases we want to display selection,
  // except if the generateID.groupNumbers flag is set which is used for
  // read aloud.


  var displaySelection = !context.generateID || !context.generateID.groupNumbers;
  var result = [];

  if (Array.isArray(atoms)) {
    if (atoms.length === 0) {
      return result;
    } else if (atoms.length === 1) {
      result = atoms[0].decompose(context);

      if (result && displaySelection && atoms[0].isSelected) {
        result.forEach(function (x) {
          return x.selected(true);
        });
      }

      console.assert(!result || Array.isArray(result));
    } else {
      var previousType = 'none';
      var nextType = atoms[1].type;
      var selection = [];
      var digitStringID = null;
      var phantomBase = null;

      for (var i = 0; i < atoms.length; i++) {
        // Is this a binary operator ('+', '-', etc...) that potentially
        // needs to be adjusted to a unary operator?
        //
        // When preceded by a mbin, mopen, mrel, mpunct, mop or
        // when followed by a mrel, mclose or mpunct
        // or if preceded or followed by no sibling, a 'mbin' becomes a
        // 'mord'
        if (atoms[i].type === 'mbin') {
          if (/first|none|mrel|mpunct|mopen|mbin|mop/.test(previousType) || /none|mrel|mpunct|mclose/.test(nextType)) {
            atoms[i].type = 'mord';
          }
        } // If this is a scaffolding supsub, we'll use the
        // phantomBase from the previous atom to position the supsub.
        // Otherwise, no need for the phantomBase


        if (atoms[i].body !== "\u200B" || !atoms[i].superscript && !atoms[i].subscript) {
          phantomBase = null;
        }

        if (context.generateID.groupNumbers && digitStringID && atoms[i].type === 'mord' && /[0-9,.]/.test(atoms[i].latex)) {
          context.generateID.overrideID = digitStringID;
        }

        var span = atoms[i].decompose(context, phantomBase);

        if (context.generateID) {
          context.generateID.overrideID = null;
        }

        if (span) {
          // The result from decompose is always an array
          // Flatten it (i.e. [[a1, a2], b1, b2] -> [a1, a2, b1, b2]
          var flat = [].concat.apply([], span);
          phantomBase = flat; // If this is a digit, keep track of it

          if (context.generateID && context.generateID.groupNumbers) {
            if (atoms[i].type === 'mord' && /[0-9,.]/.test(atoms[i].latex)) {
              if (!digitStringID) {
                digitStringID = atoms[i].id;
              }
            }

            if ((atoms[i].type !== 'mord' || /[0-9,.]/.test(atoms[i].latex) || atoms[i].superscript || atoms[i].subscript) && digitStringID) {
              // Done with digits
              digitStringID = null;
            }
          }

          if (displaySelection && atoms[i].isSelected) {
            selection = selection.concat(flat);
            selection.forEach(function (x) {
              return x.selected(true);
            });
          } else {
            if (selection.length > 0) {
              // There was a selection, but we're out of it now
              // Append the selection
              result = [].concat(_toConsumableArray(result), _toConsumableArray(selection));
              selection = [];
            }

            result = result.concat(flat);
          }
        } // Since the next atom (and this atom!) could have children
        // use getFinal...() and getInitial...() to get the closest
        // atom linearly.


        previousType = atoms[i].getFinalBaseElement().type;
        nextType = atoms[i + 1] ? atoms[i + 1].getInitialBaseElement().type : 'none';
      } // Is there a leftover selection?


      if (selection.length > 0) {
        result = [].concat(_toConsumableArray(result), _toConsumableArray(selection));
        selection = [];
      }
    }
  } else if (atoms) {
    // This is a single atom, decompose it
    result = atoms.decompose(context);

    if (result && displaySelection && atoms.isSelected) {
      result.forEach(function (x) {
        return x.selected(true);
      });
    }
  }

  if (!result || result.length === 0) return null;
  console.assert(Array.isArray(result) && result.length > 0); // If the mathstyle changed between the parent and the current atom,
  // account for the size difference

  if (context.mathstyle !== context.parentMathstyle) {
    var factor = context.mathstyle.sizeMultiplier / context.parentMathstyle.sizeMultiplier;
    var _iteratorNormalCompletion20 = true;
    var _didIteratorError20 = false;
    var _iteratorError20 = undefined;

    try {
      for (var _iterator20 = result[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
        var _span = _step20.value;
        console.assert(!Array.isArray(_span));
        console.assert(typeof _span.height === 'number' && isFinite(_span.height));
        _span.height *= factor;
        _span.depth *= factor;
      }
    } catch (err) {
      _didIteratorError20 = true;
      _iteratorError20 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion20 && _iterator20.return != null) {
          _iterator20.return();
        }
      } finally {
        if (_didIteratorError20) {
          throw _iteratorError20;
        }
      }
    }
  } // If the size changed between the parent and the current group,
  // account for the size difference


  if (context.size !== context.parentSize) {
    var _factor = SIZING_MULTIPLIER[context.size] / SIZING_MULTIPLIER[context.parentSize];

    var _iteratorNormalCompletion21 = true;
    var _didIteratorError21 = false;
    var _iteratorError21 = undefined;

    try {
      for (var _iterator21 = result[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
        var _span2 = _step21.value;
        console.assert(!Array.isArray(_span2));
        console.assert(typeof _span2.height === 'number' && isFinite(_span2.height));
        _span2.height *= _factor;
        _span2.depth *= _factor;
      }
    } catch (err) {
      _didIteratorError21 = true;
      _iteratorError21 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion21 && _iterator21.return != null) {
          _iterator21.return();
        }
      } finally {
        if (_didIteratorError21) {
          throw _iteratorError21;
        }
      }
    }
  }

  return result;
}
/**
 * Return an atom suitable for use as the root of a formula.
 *
 * @param {string} parseMode
 * @param {MathAtom[]} body
 * @return {MathAtom[]}
 * @memberof module:core/mathatom
 * @private
 */


function makeRoot(parseMode, body) {
  parseMode = parseMode || 'math';
  var result = new mathAtom_MathAtom(parseMode, 'root', body || []);

  if (result.body.length === 0 || result.body[0].type !== 'first') {
    result.body.unshift(new mathAtom_MathAtom('', 'first'));
  }

  return result;
} // Export the public interface for this module


/* harmony default export */ var mathAtom = ({
  MathAtom: mathAtom_MathAtom,
  decompose: _decompose,
  makeRoot: makeRoot,
  GREEK_REGEX: GREEK_REGEX
});
// CONCATENATED MODULE: ./packages/core/color.js
/**
 * This module contains some color dictionaries and algorithms to
 * parse a string into a hex RGB color value.s
 * @summary   Parsing of color strings.
 * @module core/color
 * @private
 */

/*
{\color{apricot}\blacksquare}{\color{aquamarine}\blacksquare}{\color{bittersweet}\blacksquare}{\color{black}\blacksquare}{\color{blue}\blacksquare}{\color{blueGreen}\blacksquare}{\color{blueviolet}\blacksquare}{\color{brickred}\blacksquare}{\color{brown}\blacksquare}{\color{burntorange}\blacksquare}{\color{cadetblue}\blacksquare}{\color{carnationpink}\blacksquare}{\color{cerulean}\blacksquare}{\color{cornflowerblue}\blacksquare}{\color{cyan}\blacksquare}{\color{dandelion}\blacksquare}{\color{darkorchid}\blacksquare}{\color{emerald}\blacksquare}{\color{forestgreen}\blacksquare}{\color{fuchsia}\blacksquare}{\color{goldenrod}\blacksquare}{\color{gray}\blacksquare}{\color{green}\blacksquare}{\color{greenyellow}\blacksquare}{\color{junglegreen}\blacksquare}{\color{lavender}\blacksquare}{\color{limegreen}\blacksquare}{\color{magenta}\blacksquare}{\color{mahogany}\blacksquare}{\color{maroon}\blacksquare}{\color{melon}\blacksquare}{\color{midnightblue}\blacksquare}{\color{mulberry}\blacksquare}{\color{navyblue}\blacksquare}{\color{olivegreen}\blacksquare}{\color{orange}\blacksquare}{\color{orangered}\blacksquare}{\color{orchid}\blacksquare}{\color{peach}\blacksquare}{\color{periwinkle}\blacksquare}{\color{pinegreen}\blacksquare}{\color{plum}\blacksquare}{\color{processblue}\blacksquare}{\color{purple}\blacksquare}{\color{rawsienna}\blacksquare}{\color{red}\blacksquare}{\color{redorange}\blacksquare}{\color{redviolet}\blacksquare}{\color{rhodamine}\blacksquare}{\color{royalblue}\blacksquare}{\color{royalpurple}\blacksquare}{\color{rubinered}\blacksquare}{\color{salmon}\blacksquare}{\color{seagreen}\blacksquare}{\color{sepia}\blacksquare}{\color{skyblue}\blacksquare}{\color{springgreen}\blacksquare}{\color{tan}\blacksquare}{\color{tealblue}\blacksquare}{\color{thistle}\blacksquare}{\color{turquoise}\blacksquare}{\color{violet}\blacksquare}{\color{violetred}\blacksquare}{\color{white}\blacksquare}{\color{wildstrawberry}\blacksquare}{\color{yellow}\blacksquare}{\color{yellowgreen}\blacksquare}{\color{yelloworange}\blacksquare}
*/

/**
 * First 10 predefined colors used for plotting by Mathematica.
 *
 * Also known as _indexed color scheme #97_.
 * @constant
 * @type {Object.<string, string>}
 * @memberof module:color
 * @private
 */
var MATHEMATICA_COLORS = {
  'm0': '#3f3d99',
  // strong blue
  'm1': '#993d71',
  // strong cerise
  'm2': '#998b3d',
  // strong gold
  'm3': '#3d9956',
  // malachite green
  'm4': '#3d5a99',
  // strong cobalt blue
  'm5': '#993d90',
  // strong orchid
  'm6': '#996d3d',
  // strong orange
  'm7': '#43993d',
  // strong sap green
  'm8': '#3d7999',
  // cornflower blue
  'm9': '#843d99' // mulberry

}; // ColorData97 (Mathematica standard lines)
// rgb(0.368417, 0.506779, 0.709798),       #5e81b5
// rgb(0.880722, 0.611041, 0.142051),
// rgb(0.560181, 0.691569, 0.194885),
// rgb(0.922526, 0.385626, 0.209179),
// rgb(0.528488, 0.470624, 0.701351),
// rgb(0.772079, 0.431554, 0.102387),
// rgb(0.363898, 0.618501, 0.782349),
// rgb(1, 0.75, 0),
// rgb(0.647624, 0.37816, 0.614037),
// rgb(0.571589, 0.586483, 0.),
// rgb(0.915, 0.3325, 0.2125),
// rgb(0.40082222609352647, 0.5220066643438841, 0.85),
// rgb(0.9728288904374106, 0.621644452187053, 0.07336199581899142),
// rgb(0.736782672705901, 0.358, 0.5030266573755369),
// rgb(0.28026441037696703, 0.715, 0.4292089322474965)
// MathLab colors
// '#0072bd' // [0, 0.4470, 0.7410]             blue
// '#d95319' // [0.8500, 0.3250, 0.0980]        orange
// '#edb120', // [0.9290, 0.6940, 0.1250]       yellow
// '#7e2f8e', // [0.4940, 0.1840, 0.5560]       purple
// '#77ac30', // [0.4660, 0.6740, 0.1880]       green
// '#4dbeee', // [0.3010, 0.7450, 0.9330]       cyan
// '#a2142f' // [0.6350, 0.0780, 0.1840]	    dark red

/* Area colors are most appropriate to color a large area */

var AREA_COLORS = ['#d35d60', // red
'#7293cb', // cobalt blue
'#e1974d', // orange
'#84bb5d', // pistachio
'#9066a7', // purple
'#aD6a58', // vermilion
'#f5a4ce', // pale rose
'#fff590', // pale gold
'#212121', // Black
'#818787', // dark grey
'#d4d5d2', // light grey
'#ffffff' // white
];
/* Line colors are most appropriate to color as a stroke color */

var LINE_COLORS = ['#cc2428', // red
'#3769b1', // cobalt blue
'#da7e30', // orange
'#409852', // malachite green
'#6b4c9a', // blue violet
'#922426', // red
'#e7298a', // brilliant rose
'#ffe907', // vivid gold
'#000000', '#525055', '#adafaa', '#ffffff'];
/**
 * 68 colors (+ white) known to dvips used in LaTeX.
 *
 * The color names are based on the names of the _Crayola Crayon_ box of
 * 64 crayons.
 *
 * See:
 * - {@link http://mirror.jmu.edu/pub/CTAN/systems/knuth/local/lib/colordvi.tex|ColorDVI.tex}
 * - {@link https://en.wikibooks.org/w/index.php?title=LaTeX/Colors|Wikibooks:LaTeX/Colors}
 * @constant NAMED_COLORS
 * @memberof module:color
 * @type {Object.<string, string>}
 * @private
 */

var NAMED_COLORS = {
  'apricot': '#FBB982',
  'aquamarine': '#00B5BE',
  'bittersweet': '#C04F17',
  'black': '#221E1F',
  // Indeed.
  'blue': '#2D2F92',
  'bluegreen': '#00B3B8',
  'blueviolet': '#473992',
  'brickred': '#B6321C',
  'brown': '#792500',
  'burntorange': '#F7921D',
  'cadetblue': '#74729A',
  'carnationpink': '#F282B4',
  'cerulean': '#00A2E3',
  'cornflowerblue': '#41B0E4',
  'cyan': '#00AEEF',
  'dandelion': '#FDBC42',
  'darkorchid': '#A4538A',
  'emerald': '#00A99D',
  'forestgreen': '#009B55',
  'fuchsia': '#8C368C',
  'goldenrod': '#FFDF42',
  'gray': '#949698',
  'green': '#00A64F',
  'greenyellow': '#DFE674',
  'junglegreen': '#00A99A',
  'lavender': '#F49EC4',
  'limegreen': '#8DC73E',
  'magenta': '#EC008C',
  'mahogany': '#A9341F',
  'maroon': '#AF3235',
  'melon': '#F89E7B',
  'midnightblue': '#006795',
  'mulberry': '#A93C93',
  'navyblue': '#006EB8',
  'olivegreen': '#3C8031',
  'orange': '#F58137',
  'orangered': '#ED135A',
  'orchid': '#AF72B0',
  'peach': '#F7965A',
  'periwinkle': '#7977B8',
  'pinegreen': '#008B72',
  'plum': '#92268F',
  'processblue': '#00B0F0',
  'purple': '#99479B',
  'rawsienna': '#974006',
  'red': '#ED1B23',
  'redorange': '#F26035',
  'redviolet': '#A1246B',
  'rhodamine': '#EF559F',
  'royalblue': '#0071BC',
  'royalpurple': '#613F99',
  'rubinered': '#ED017D',
  'salmon': '#F69289',
  'seagreen': '#3FBC9D',
  'sepia': '#671800',
  'skyblue': '#46C5DD',
  'springgreen': '#C6DC67',
  'tan': '#DA9D76',
  'tealblue': '#00AEB3',
  'thistle': '#D883B7',
  'turquoise': '#00B4CE',
  'violet': '#58429B',
  'violetred': '#EF58A0',
  'white': '#FFFFFF',
  'wildstrawberry': '#EE2967',
  'yellow': '#FFF200',
  'yellowgreen': '#98CC70',
  'yelloworange': '#FAA21A'
}; // Other color lists: SVG colors, x11 colors

/*
aliceblue	rgb(240, 248, 255)
antiquewhite	rgb(250, 235, 215)
aqua	rgb( 0, 255, 255)
aquamarine	rgb(127, 255, 212)
azure	rgb(240, 255, 255)
beige	rgb(245, 245, 220)
bisque	rgb(255, 228, 196)
black	rgb( 0, 0, 0)
blanchedalmond	rgb(255, 235, 205)
blue	rgb( 0, 0, 255)
blueviolet	rgb(138, 43, 226)
brown	rgb(165, 42, 42)
burlywood	rgb(222, 184, 135)
cadetblue	rgb( 95, 158, 160)
chartreuse	rgb(127, 255, 0)
chocolate	rgb(210, 105, 30)
coral	rgb(255, 127, 80)
cornflowerblue	rgb(100, 149, 237)
cornsilk	rgb(255, 248, 220)
crimson	rgb(220, 20, 60)
cyan	rgb( 0, 255, 255)
darkblue	rgb( 0, 0, 139)
darkcyan	rgb( 0, 139, 139)
darkgoldenrod	rgb(184, 134, 11)
darkgray	rgb(169, 169, 169)
darkgreen	rgb( 0, 100, 0)
darkgrey	rgb(169, 169, 169)
darkkhaki	rgb(189, 183, 107)
darkmagenta	rgb(139, 0, 139)
darkolivegreen	rgb( 85, 107, 47)
darkorange	rgb(255, 140, 0)
darkorchid	rgb(153, 50, 204)
darkred	rgb(139, 0, 0)
darksalmon	rgb(233, 150, 122)
darkseagreen	rgb(143, 188, 143)
darkslateblue	rgb( 72, 61, 139)
darkslategray	rgb( 47, 79, 79)
darkslategrey	rgb( 47, 79, 79)
darkturquoise	rgb( 0, 206, 209)
darkviolet	rgb(148, 0, 211)
deeppink	rgb(255, 20, 147)
deepskyblue	rgb( 0, 191, 255)
dimgray	rgb(105, 105, 105)
dimgrey	rgb(105, 105, 105)
dodgerblue	rgb( 30, 144, 255)
firebrick	rgb(178, 34, 34)
floralwhite	rgb(255, 250, 240)
forestgreen	rgb( 34, 139, 34)
fuchsia	rgb(255, 0, 255)
gainsboro	rgb(220, 220, 220)
ghostwhite	rgb(248, 248, 255)
gold	rgb(255, 215, 0)
goldenrod	rgb(218, 165, 32)
gray	rgb(128, 128, 128)
grey	rgb(128, 128, 128)
green	rgb( 0, 128, 0)
greenyellow	rgb(173, 255, 47)
honeydew	rgb(240, 255, 240)
hotpink	rgb(255, 105, 180)
indianred	rgb(205, 92, 92)
indigo	rgb( 75, 0, 130)
ivory	rgb(255, 255, 240)
khaki	rgb(240, 230, 140)
lavender	rgb(230, 230, 250)
lavenderblush	rgb(255, 240, 245)
lawngreen	rgb(124, 252, 0)
lemonchiffon	rgb(255, 250, 205)
lightblue	rgb(173, 216, 230)
lightcoral	rgb(240, 128, 128)
lightcyan	rgb(224, 255, 255)
lightgoldenrodyellow	rgb(250, 250, 210)
lightgray	rgb(211, 211, 211)
lightgreen	rgb(144, 238, 144)
lightgrey	rgb(211, 211, 211)
lightpink	rgb(255, 182, 193)
lightsalmon	rgb(255, 160, 122)
lightseagreen	rgb( 32, 178, 170)
lightskyblue	rgb(135, 206, 250)
lightslategray	rgb(119, 136, 153)
lightslategrey	rgb(119, 136, 153)
lightsteelblue	rgb(176, 196, 222)
lightyellow	rgb(255, 255, 224)
lime	rgb( 0, 255, 0)
limegreen	rgb( 50, 205, 50)
linen	rgb(250, 240, 230)
magenta	rgb(255, 0, 255)
maroon	rgb(128, 0, 0)
mediumaquamarine	rgb(102, 205, 170)
mediumblue	rgb( 0, 0, 205)
mediumorchid	rgb(186, 85, 211)
mediumpurple	rgb(147, 112, 219)
mediumseagreen	rgb( 60, 179, 113)
mediumslateblue	rgb(123, 104, 238)
mediumspringgreen	rgb( 0, 250, 154)
mediumturquoise	rgb( 72, 209, 204)
mediumvioletred	rgb(199, 21, 133)
midnightblue	rgb( 25, 25, 112)
mintcream	rgb(245, 255, 250)
mistyrose	rgb(255, 228, 225)
moccasin	rgb(255, 228, 181)
navajowhite	rgb(255, 222, 173)
navy	rgb( 0, 0, 128)
oldlace	rgb(253, 245, 230)
olive	rgb(128, 128, 0)
olivedrab	rgb(107, 142, 35)
orange	rgb(255, 165, 0)
orangered	rgb(255, 69, 0)
orchid	rgb(218, 112, 214)
palegoldenrod	rgb(238, 232, 170)
palegreen	rgb(152, 251, 152)
paleturquoise	rgb(175, 238, 238)
palevioletred	rgb(219, 112, 147)
papayawhip	rgb(255, 239, 213)
peachpuff	rgb(255, 218, 185)
peru	rgb(205, 133, 63)
pink	rgb(255, 192, 203)
plum	rgb(221, 160, 221)
powderblue	rgb(176, 224, 230)
purple	rgb(128, 0, 128)
red	rgb(255, 0, 0)
rosybrown	rgb(188, 143, 143)
royalblue	rgb( 65, 105, 225)
saddlebrown	rgb(139, 69, 19)
salmon	rgb(250, 128, 114)
sandybrown	rgb(244, 164, 96)
seagreen	rgb( 46, 139, 87)
seashell	rgb(255, 245, 238)
sienna	rgb(160, 82, 45)
silver	rgb(192, 192, 192)
skyblue	rgb(135, 206, 235)
slateblue	rgb(106, 90, 205)
slategray	rgb(112, 128, 144)
slategrey	rgb(112, 128, 144)
snow	rgb(255, 250, 250)
springgreen	rgb( 0, 255, 127)
steelblue	rgb( 70, 130, 180)
tan	rgb(210, 180, 140)
teal	rgb( 0, 128, 128)
thistle	rgb(216, 191, 216)
tomato	rgb(255, 99, 71)
turquoise	rgb( 64, 224, 208)
violet	rgb(238, 130, 238)
wheat	rgb(245, 222, 179)
white	rgb(255, 255, 255)
whitesmoke	rgb(245, 245, 245)
yellow	rgb(255, 255, 0)
yellowgreen	rgb(154, 205, 50)
 	 
*/

/**
 * Return a CSS color (#rrggbb) from a string.
 *
 * Possible formats include:
 * - named colors from the DVI color set: 'Yellow', 'red'... Case insensitive.
 * - colors from the Mathematica set: 'm1'...'m9'
 * - 3-digit hex: `'#d50'`
 * - 6-digit hex: `'#dd5500'`
 * - RGB functional: `'rgb(240, 20, 10)'`
 *
 * In addition, colors can be mixed using the following syntax:
 * `<mix> = <color>![<value>][!<mix>]`
 * For example:
 * - `'blue!20'`  = 20% blue + 80% white
 * - `'blue!20!black'` = 20% + 80% black
 * - `'blue!20!black!30!green'` = (20% + 80% black) * 30 % + 70% green
 *
 * If the input string is prefixed with a dash, the complementary color
 * of the expression is returned.
 *
 * This creative syntax is defined by the {@link http://mirror.jmu.edu/pub/CTAN/macros/latex/contrib/xcolor/xcolor.pdf|`xcolor` LaTeX package}.
 *
 * @param {string} s - An expression representing a color value
 * @return {string} An RGB color expressed as a hex-triplet preceded by `#`
 * @memberof module:color
 * @private
 */

function stringToColor(s) {
  var colorSpec = s.toLowerCase().split('!');
  var baseRed;
  var baseGreen;
  var baseBlue;
  var red = 255;
  var green = 255;
  var blue = 255;
  var mix = -1; // If the string is prefixed with a '-', use the complementary color

  var complementary = colorSpec.length > 0 && colorSpec[0].charAt(0) === '-';
  if (complementary) colorSpec[0] = colorSpec[0].slice(1);

  for (var i = 0; i < colorSpec.length; i++) {
    baseRed = red;
    baseGreen = green;
    baseBlue = blue;
    var colorName = colorSpec[i].match(/([a-z0-9]*)/);
    if (colorName) colorName = colorName[1];
    var color = NAMED_COLORS[colorName] || MATHEMATICA_COLORS[colorName];
    if (!color) color = colorSpec[i];
    var m = color.match(/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i);

    if (m && m[1] && m[2] && m[3]) {
      // It's a six-digit hex number
      red = Math.max(0, Math.min(255, parseInt(m[1], 16)));
      green = Math.max(0, Math.min(255, parseInt(m[2], 16)));
      blue = Math.max(0, Math.min(255, parseInt(m[3], 16)));
    } else {
      m = color.match(/^#([0-9a-f]{3})$/i);

      if (m && m[1]) {
        // It's a three-digit hex number
        var r1 = parseInt(m[1][0], 16);
        var g1 = parseInt(m[1][1], 16);
        var b1 = parseInt(m[1][2], 16);
        red = Math.max(0, Math.min(255, r1 * 16 + r1));
        green = Math.max(0, Math.min(255, g1 * 16 + g1));
        blue = Math.max(0, Math.min(255, b1 * 16 + b1));
      } else {
        // It's a rgb functional
        m = color.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);

        if (m && m[1] && m[2] && m[3]) {
          red = Math.max(0, Math.min(255, parseInt(m[1])));
          green = Math.max(0, Math.min(255, parseInt(m[2])));
          blue = Math.max(0, Math.min(255, parseInt(m[3])));
        } else {
          return null;
        }
      }
    }

    if (mix >= 0) {
      red = (1.0 - mix) * red + mix * baseRed;
      green = (1.0 - mix) * green + mix * baseGreen;
      blue = (1.0 - mix) * blue + mix * baseBlue;
      mix = -1;
    }

    if (i + 1 < colorSpec.length) {
      mix = Math.max(0, Math.min(100, parseInt(colorSpec[++i]))) / 100.0;
    }
  }

  if (mix >= 0) {
    red = mix * red + (1.0 - mix) * baseRed;
    green = mix * green + (1.0 - mix) * baseGreen;
    blue = mix * blue + (1.0 - mix) * baseBlue;
  }

  if (complementary) {
    red = 255 - red;
    green = 255 - green;
    blue = 255 - blue;
  }

  return '#' + ('00' + Math.round(red).toString(16)).slice(-2) + ('00' + Math.round(green).toString(16)).slice(-2) + ('00' + Math.round(blue).toString(16)).slice(-2);
}

function colorToString(color) {
  var result = color.toUpperCase();

  for (var c in NAMED_COLORS) {
    if (NAMED_COLORS[c] === result) {
      result = c;
      break;
    }
  }

  for (var _c in MATHEMATICA_COLORS) {
    if (MATHEMATICA_COLORS[_c] === result) {
      result = _c;
      break;
    }
  }

  return result;
} // Export the public interface for this module


/* harmony default export */ var core_color = ({
  stringToColor: stringToColor,
  colorToString: colorToString,
  AREA_COLORS: AREA_COLORS,
  LINE_COLORS: LINE_COLORS
});
// CONCATENATED MODULE: ./packages/core/parser.js
function parser_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function parser_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { parser_ownKeys(Object(source), true).forEach(function (key) { parser_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { parser_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function parser_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function parser_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function parser_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function parser_createClass(Constructor, protoProps, staticProps) { if (protoProps) parser_defineProperties(Constructor.prototype, protoProps); if (staticProps) parser_defineProperties(Constructor, staticProps); return Constructor; }

/**
 * @module core/parser
 * @private
 */





var parser_MathAtom = mathAtom.MathAtom;
/**
 * A parser transforms a list of tokens into a list of MathAtom.
 *
 * @param {Token[]} tokens - An array of tokens generated by the lexer.
 * @param {Object.<string>} [args] - An optional list of arguments. `#n` tokens will be
 * substituted with the corresponding element in the args object. This is used
 * when parsing macros.
 * @class module:core/parser#Parser
 * @property {Object.<string, string>} [macros] - Optional macro definitions.
 * @property {Token[]} tokens - An array of tokens generated by the lexer.
 * @property {Object.<string>} args - Optional arguments to substitute the `#` token.
 * @property {Object.<string, string>} macros - A dictionary of objects, index by the name of
 * the macro, with the following keys:
 *    * args: an integer, the number of arguments, default 0. They can be referenced as #0,
 *       #1, #2... inside the definition of the macro
 *    * def: a string, the definition of the macro, which can reference other macros
 * @property {number} index - The current token to be parsed: index in `this.tokens`
 * @property {MathAtom[]} mathList - Accumulated result of the parsing by
 * `parseAtom()`
 * @property {object} style - The font, weight, color, etc. to apply to the
 * upcoming tokens
 * @property {string} parseMode - The parse mode indicates the syntax rules to
 * use to parse the upcoming tokens.
 *  Valid values include:
 *  - `'math'`: spaces are ignored, math functions are allowed
 *  - `'text'`: spaces are accounted for, math functions are ignored
 *  - `'string'`
 *  - `'color'`: color name, hex value: `'#fff'`, `'#a0a0a0'`
 *  - `'number'`: `+/-12.56`
 *  - `'dimen'`: `'25mu'`, `'2pt'`
 *  - `'skip'`: `'25mu plus 2em minus fiLll'`, `'2pt'`
 *  - `'colspec'`: formating of a column in tabular environment, e.g. `'r@{.}l'`
 * @property {boolean} tabularMode - When in tabular mode, `'&'` is interpreted as
 *  a column separator and `'\'` as a row separator. Used for matrixes, etc...
 * @property {number} endCount - Counter to prevent deadlock. If `end()` is
 * called too many times (1,000) in a row for the same token, bail.
 * @private
 */

var parser_Parser =
/*#__PURE__*/
function () {
  function Parser(tokens, args, macros) {
    parser_classCallCheck(this, Parser);

    this.tokens = tokens;
    this.index = 0;
    this.args = args;
    this.macros = macros;
    this.mathList = [];
    this.style = {};
    this.parseMode = 'math';
    this.tabularMode = false;
    this.endCount = 0;
  }

  parser_createClass(Parser, [{
    key: "swapMathList",
    value: function swapMathList(newMathList) {
      var result = this.mathList;
      this.mathList = newMathList || [];
      return result;
    }
  }, {
    key: "swapParseMode",
    value: function swapParseMode(mode) {
      var result = this.parseMode;
      this.parseMode = mode;
      return result;
    }
    /**
     * True if we've reached the end of the token stream.
     * @method module:core/parser#Parser#end
     * @private
     */

  }, {
    key: "end",
    value: function end() {
      // To prevent a deadlock, count how many times end() is called without the
      // index advancing. If it happens more than 1,000 times in a row,
      // assume something is broken and pretend the stream is finished.
      this.endCount++;
      return this.index >= this.tokens.length || this.endCount > 1000;
    }
  }, {
    key: "get",
    value: function get() {
      this.endCount = 0;
      return this.index < this.tokens.length ? this.tokens[this.index++] : null;
    }
  }, {
    key: "peek",
    value: function peek(offset) {
      var index = this.index + (offset ? offset : 0);
      return index < this.tokens.length ? this.tokens[index] : null;
    }
    /**
     * Return the last atom of the math list
     * If there isn't one, insert a `msubsup` and return it.
     * @method module:core/parser#Parser#lastMathAtom
     * @private
     */

  }, {
    key: "lastMathAtom",
    value: function lastMathAtom() {
      var lastType = this.mathList.length === 0 ? 'none' : this.mathList[this.mathList.length - 1].type;

      if (lastType !== 'mop' && lastType !== 'msubsup') {
        // ZERO WIDTH SPACE
        var lastAtom = new parser_MathAtom(this.parseMode, 'msubsup', "\u200B");
        lastAtom.attributes = {
          'aria-hidden': true
        };
        this.mathList.push(lastAtom);
      }

      return this.mathList[this.mathList.length - 1];
    }
    /**
     * @param {string} type
     * @return {boolean} True if the next token is of the specified type
     * @method module:core/parser#Parser#hasToken
     * @private
     */

  }, {
    key: "hasToken",
    value: function hasToken(type) {
      var index = this.index;
      return index < this.tokens.length ? this.tokens[index].type === type : false;
    }
    /**
     * @param {string} [value]
     * @return {boolean} True if the next token is of type `'literal` and has the
     * specified value. If `value` is empty, return true if the token is of type
     * `'literal'`
     * @method Parser#hasLiteral
     * @private
     */

  }, {
    key: "hasLiteral",
    value: function hasLiteral(value) {
      var index = this.index;
      return index < this.tokens.length ? this.tokens[index].type === 'literal' && (!value || this.tokens[index].value === value) : false;
    }
    /**
     * @param {RegEx} pattern
     * @return {boolean} True if the next token is of type `'literal` and matches
     * the specified regular expression pattern.
     * @method module:core/parser#Parser#hasLiteralPattern
     * @private
     */

  }, {
    key: "hasLiteralPattern",
    value: function hasLiteralPattern(pattern) {
      return this.hasToken('literal') && pattern.test(this.tokens[this.index].value);
    }
  }, {
    key: "hasCommand",
    value: function hasCommand(command) {
      console.assert(command === '\\' || command.charAt(0) !== '\\', 'hasCommand() does not require a \\');
      var index = this.index;
      return index < this.tokens.length ? this.tokens[index].type === 'command' && this.tokens[index].value === command : false;
    }
  }, {
    key: "hasInfixCommand",
    value: function hasInfixCommand() {
      var index = this.index;

      if (index < this.tokens.length && this.tokens[index].type === 'command') {
        var info = definitions.getInfo('\\' + this.tokens[index].value, this.parseMode, this.macros);
        return info && info.infix;
      }

      return false;
    }
  }, {
    key: "hasColumnSeparator",
    value: function hasColumnSeparator() {
      var index = this.index;
      return this.tabularMode && index < this.tokens.length ? this.tokens[index].type === 'literal' && this.tokens[index].value === '&' : false;
    }
  }, {
    key: "hasRowSeparator",
    value: function hasRowSeparator() {
      var index = this.index;
      return this.tabularMode && index < this.tokens.length ? this.tokens[index].type === 'command' && (this.tokens[index].value === '\\' || this.tokens[index].value === 'cr') : false;
    }
  }, {
    key: "parseColumnSeparator",
    value: function parseColumnSeparator() {
      if (this.hasColumnSeparator()) {
        this.index++;
        return true;
      }

      return false;
    }
    /*
     * Return the appropriate value for a placeholder, either a default
     * one, or if a value was provided for #? via args, that value.
     */

  }, {
    key: "placeholder",
    value: function placeholder() {
      if (this.args && typeof this.args['?'] === 'string') {
        // If there is a specific value defined for the placeholder,
        // use it.
        return parseTokens(lexer.tokenize(this.args['?']), this.parseMode, null, this.macros);
      } // U+2753 = BLACK QUESTION MARK ORNAMENT


      var result = new parser_MathAtom(this.parseMode, 'placeholder', '?', this.style);
      result.captureSelection = true;
      return [result];
    }
  }, {
    key: "hasImplicitCommand",
    value: function hasImplicitCommand(commands) {
      if (this.index < this.tokens.length) {
        var token = this.tokens[this.index];

        if (token.type === 'command') {
          return commands.includes(token.value);
        }
      }

      return false;
    }
  }, {
    key: "parseRowSeparator",
    value: function parseRowSeparator() {
      if (this.hasRowSeparator()) {
        this.index++;
        return true;
      }

      return false;
    }
    /**
     * @param {string} type
     * @method module:core/parser#Parser#parseToken
     * @private
     */

  }, {
    key: "parseToken",
    value: function parseToken(type) {
      if (this.hasToken(type)) {
        this.index++;
        return true;
      }

      return false;
    }
  }, {
    key: "skipWhitespace",
    value: function skipWhitespace() {
      var found = false;

      while (this.hasToken('space')) {
        this.index++;
        found = true;
      }

      return found;
    }
  }, {
    key: "skipUntilToken",
    value: function skipUntilToken(type) {
      while (!this.end() && !this.parseToken(type)) {
        this.get();
      }
    }
  }, {
    key: "parseCommand",
    value: function parseCommand(command) {
      if (this.hasCommand(command)) {
        this.index++;
        return true;
      }

      return false;
    }
  }, {
    key: "parseLiteral",
    value: function parseLiteral(literal) {
      if (this.hasLiteral(literal)) {
        this.index++;
        return true;
      }

      return false;
    }
  }, {
    key: "parseFiller",
    value: function parseFiller() {
      var skipped = false;
      var done = false;

      do {
        var skippedSpace = this.skipWhitespace();
        var skippedRelax = this.parseCommand('relax');
        skipped = skipped || skippedSpace || skippedRelax;
        done = !skippedSpace && !skippedRelax;
      } while (!done);

      return skipped;
    }
    /**
     * Keywords are used to specify dimensions, and for various other
     * syntactic constructs. Unlike commands, they are not case sensitive.
     * There are 25 keywords:
     * at by bp cc cm dd depth em ex fil fill filll height in minus
     * mm mu pc plus pt sp spread to true width
     *
     * TeX: 8212
     * @param {string} keyword
     * @return {boolean} true if the expected keyword is present
     * @method module:core/parser#Parser#parseKeyword
     * @private
     */

  }, {
    key: "parseKeyword",
    value: function parseKeyword(keyword) {
      var savedIndex = this.index;
      var done = this.end();
      var value = '';

      while (!done) {
        var token = this.get();

        if (token.type === 'literal') {
          value += token.value;
        }

        done = this.end() || token.type !== 'literal' || value.length >= keyword.length;
      }

      var hasKeyword = keyword.toUpperCase() === value.toUpperCase();

      if (!hasKeyword) {
        this.index = savedIndex;
      }

      return hasKeyword;
    }
    /**
     * Return a sequence of characters as a string.
     * i.e. 'abcd' returns 'abcd'.
     * Terminates on the first non-character encountered
     * e.g. '{', '}' etc...
     * Will also terminate on ']'
     * @return {string}
     * @method module:core/parser#Parser#scanString
     * @private
     */

  }, {
    key: "scanString",
    value: function scanString() {
      var result = '';
      var done = this.end();

      while (!done) {
        if (this.hasLiteral(']')) {
          done = true;
        } else if (this.hasToken('literal')) {
          result += this.get().value;
        } else if (this.skipWhitespace()) {
          result += ' ';
        } else if (this.hasToken('command')) {
          var token = this.get();

          if (token.value === 'space') {
            // The 'space' command is the ~
            // which can be used for example in operator names, i.e.
            // \operatorname{lim~inf}. It's interpreted as a nbs
            result += "\xA0"; // NO-BREAK SPACE
          } else {
            // TeX will give a 'Missing \endcsname inserted' error
            // if it encounters any command when expecting a string.
            // We're a bit more lax.
            result += token.value;
          }
        } else {
          done = true;
        }

        done = done || this.end();
      }

      return result;
    }
    /**
     * Return a CSS color (#rrggbb)
     * @method module:core/parser#Parser#scanColor
     * @private
     */

  }, {
    key: "scanColor",
    value: function scanColor() {
      return core_color.stringToColor(this.scanString());
    }
    /**
     * Return as a number a group of characters representing a
     * numerical quantity.
     *
     * From TeX:8695 (scan_int):
     * An integer number can be preceded by any number of spaces and `\.+' or
     * `\.-' signs. Then comes either a decimal constant (i.e., radix 10), an
     * octal constant (i.e., radix 8, preceded by~\.\'), a hexadecimal constant
     * (radix 16, preceded by~\."), an alphabetic constant (preceded by~\.\`), or
     * an internal variable.
     * @return {number}
     * @method Parser#scanNumber
     * @private
     */

  }, {
    key: "scanNumber",
    value: function scanNumber(isInteger) {
      var negative = this.parseLiteral('-'); // Optional (ignorable) '+' sign

      if (!negative) this.parseLiteral('+');
      this.skipWhitespace();
      isInteger = !!isInteger;
      var radix = 10;
      var digits = /[0-9]/;

      if (this.parseLiteral("'")) {
        // Apostrophe indicates an octal value
        radix = 8;
        digits = /[0-7]/;
        isInteger = true;
      } else if (this.parseLiteral('"') || this.parseLiteral('x')) {
        // Double-quote indicates a hex value
        // The 'x' prefix notation for the hexadecimal numbers is a MathJax extension.
        // For example: 'x3a'
        radix = 16; // Hex digits have to be upper-case

        digits = /[0-9A-F]/;
        isInteger = true;
      }

      var value = '';

      while (this.hasLiteralPattern(digits)) {
        value += this.get().value;
      } // Parse the fractional part, if applicable


      if (!isInteger && (this.parseLiteral('.') || this.parseLiteral(','))) {
        value += '.';

        while (this.hasLiteralPattern(digits)) {
          value += this.get().value;
        }
      }

      var result = isInteger ? parseInt(value, radix) : parseFloat(value);
      return negative ? -result : result;
    }
    /**
     * Return as a floating point number a dimension in pt (1 em = 10 pt)
     *
     * See TeX:8831
     * @todo: note that some units depend on the font (em, ex). So it might be
     * better to return a dimen struct with the value + unit and resolve
     * later when we have a font context....
     * @return {number}
     * @method module:core/parser#Parser#scanDimen
     * @private
     */

  }, {
    key: "scanDimen",
    value: function scanDimen() {
      var value = this.scanNumber(false);
      this.skipWhitespace();
      var result;

      if (this.parseKeyword('pt')) {
        result = fontMetrics.toEm(value, 'pt');
      } else if (this.parseKeyword('mm')) {
        result = fontMetrics.toEm(value, 'mm');
      } else if (this.parseKeyword('cm')) {
        result = fontMetrics.toEm(value, 'cm');
      } else if (this.parseKeyword('ex')) {
        result = fontMetrics.toEm(value, 'ex');
      } else if (this.parseKeyword('px')) {
        result = fontMetrics.toEm(value, 'px');
      } else if (this.parseKeyword('em')) {
        result = fontMetrics.toEm(value, 'em');
      } else if (this.parseKeyword('bp')) {
        result = fontMetrics.toEm(value, 'bp');
      } else if (this.parseKeyword('dd')) {
        result = fontMetrics.toEm(value, 'dd');
      } else if (this.parseKeyword('pc')) {
        result = fontMetrics.toEm(value, 'pc');
      } else if (this.parseKeyword('in')) {
        result = fontMetrics.toEm(value, 'in');
      } else if (this.parseKeyword('mu')) {
        result = fontMetrics.toEm(value, 'mu');
      } else {
        // If the units are missing, TeX assumes 'pt'
        result = fontMetrics.toEm(value, 'pt');
      }

      return result;
    }
  }, {
    key: "scanSkip",
    value: function scanSkip() {
      var result = this.scanDimen(); // We parse, but ignore the optional 'plus' and 'minus'
      // arguments.

      this.skipWhitespace(); // 'plus', optionally followed by 'minus'
      // ('minus' cannot come before 'plus')
      // dimen or 'hfill'

      if (this.parseKeyword('plus')) {
        // @todo there could also be a \hFilLlL command here
        this.scanDimen();
      }

      this.skipWhitespace();

      if (this.parseKeyword('minus')) {
        // @todo there could also be a \hFilLlL command here
        this.scanDimen();
      }

      return result;
    }
  }, {
    key: "scanColspec",
    value: function scanColspec() {
      this.skipWhitespace();
      var result = [];

      while (!this.end() && !(this.hasToken('}') || this.hasLiteral(']'))) {
        if (this.hasLiteral()) {
          var literal = this.get().value;

          if ('lcr'.includes(literal)) {
            result.push({
              align: literal
            });
          } else if (literal === '|') {
            result.push({
              rule: true
            });
          } else if (literal === '@') {
            if (this.parseToken('{')) {
              var savedParsemode = this.swapParseMode('math');
              result.push({
                gap: this.scanImplicitGroup(function (token) {
                  return token.type === '}';
                })
              });
              this.swapParseMode(savedParsemode);
            }

            this.parseToken('}');
          }
        }
      }

      return result;
    }
    /**
     * Parse a `\(...\)` or `\[...\]` sequence
     * @return {MathAtom} group for the sequence or null
     * @method module:core/parser#Parser#scanModeSet
     * @private
     */

  }, {
    key: "scanModeSet",
    value: function scanModeSet() {
      var _final;

      if (this.parseCommand('(')) _final = ')';
      if (!_final && this.parseCommand('[')) _final = ']';
      if (!_final) return null;
      var savedParsemode = this.swapParseMode('math');
      var result = new parser_MathAtom('math', 'group');
      result.mathstyle = _final === ')' ? 'textstyle' : 'displaystyle';
      result.body = this.scanImplicitGroup(function (token) {
        return token.type === 'command' && token.value === _final;
      });
      this.parseCommand(_final);
      this.swapParseMode(savedParsemode);
      if (!result.body || result.body.length === 0) return null;
      return result;
    }
    /**
     * Parse a `$...$` or `$$...$$` sequence
     * @method Parser#scanModeShift
     * @private
     */

  }, {
    key: "scanModeShift",
    value: function scanModeShift() {
      if (!this.hasToken('$') && !this.hasToken('$$')) return null;
      var _final2 = this.get().type;
      var result = new parser_MathAtom('math', 'group');
      result.mathstyle = _final2 === '$' ? 'textstyle' : 'displaystyle';
      result.latexOpen = result.mathstyle === 'textstyle' ? '$' : '$$';
      result.latexClose = result.latexOpen;
      var savedParsemode = this.swapParseMode('math');
      result.body = this.scanImplicitGroup(function (token) {
        return token.type === _final2;
      });
      this.parseToken(_final2);
      this.swapParseMode(savedParsemode);
      if (!result.body || result.body.length === 0) return null;
      return result;
    }
    /**
     * Parse a \begin{env}...\end{end} sequence
     * @method module:core/parser#Parser#scanEnvironment
     * @private
     */

  }, {
    key: "scanEnvironment",
    value: function scanEnvironment() {
      // An environment starts with a \begin command
      if (!this.parseCommand('begin')) return null; // The \begin command is immediately followed by the environment
      // name, as a string argument

      var envName = this.scanArg('string');
      var env = definitions.getEnvironmentInfo(envName); // If the environment has some arguments, parse them

      var args = [];

      if (env && env.params) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = env.params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var param = _step.value;

            // Parse an argument
            if (param.optional) {
              // If it's not present, return the default argument value
              var arg = this.scanOptionalArg(param.type); // args.push(arg ? arg : param.defaultValue); @todo defaultvalue

              args.push(arg);
            } else {
              // If it's not present, scanArg returns null,
              // but push it on the list of arguments anyway.
              // The null value will be interpreted as unspecified
              // optional value by the command parse function.
              args.push(this.scanArg(param.type));
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } // Some environments change the mode


      var savedMode = this.parseMode;
      var savedTabularMode = this.tabularMode;
      var savedMathList = this.swapMathList([]); // @todo: since calling scanImplicitGroup(), may not need to save/restore the mathlist

      this.tabularMode = env.tabular;
      var array = [];
      var rowGaps = [];
      var row = [];
      var done = false;

      do {
        done = this.end();

        if (!done && this.parseCommand('end')) {
          done = this.scanArg('string') === envName;
        }

        if (!done) {
          if (this.parseColumnSeparator()) {
            row.push(this.swapMathList([]));
          } else if (this.parseRowSeparator()) {
            row.push(this.swapMathList([]));
            var gap = 0;
            this.skipWhitespace();

            if (this.parseLiteral('[')) {
              gap = this.scanDimen();
              this.skipWhitespace();
              this.parseLiteral(']');
            }

            rowGaps.push(gap || 0);
            array.push(row);
            row = [];
          } else {
            this.mathList = this.mathList.concat(this.scanImplicitGroup());
          }
        }
      } while (!done);

      row.push(this.swapMathList([]));
      if (row.length > 0) array.push(row);
      var newMathList = this.swapMathList(savedMathList); // If we're in tabular mode, we should end up with an empty mathlist

      console.assert(!this.tabularMode || newMathList.length === 0, 'Leftover atoms in tabular mode');
      this.parseMode = savedMode;
      this.tabularMode = savedTabularMode;
      if (!env.tabular && newMathList.length === 0) return null;
      if (env.tabular && array.length === 0) return null;
      var result = new parser_MathAtom(this.parseMode, 'array', newMathList, env.parser ? env.parser(envName, args, array) : {});
      result.array = array;
      result.rowGaps = rowGaps;
      result.env = parser_objectSpread({}, env);
      result.env.name = envName;
      return result;
    }
    /**
     * Parse a sequence terminated with a group end marker, such as
     * `}`, `\end`, `&`, etc...
     *
     * Returns an array of atoms or an empty array if the sequence
     * terminates right away.
     *
     * @param {function(Token):boolean} [done] A predicate indicating if a
     * token signals the end of an implicit group
     * @return {MathAtom[]}
     * @method module:core/parser#Parser#scanImplicitGroup
     * @private
     */

  }, {
    key: "scanImplicitGroup",
    value: function scanImplicitGroup(done) {
      // An implicit group is a sequence of atoms that terminates with
      // a `'}'`, `'&'`, `'\'`, `'\cr'` or `'\end'` or the end of the stream
      var savedStyle = this.style;

      if (!done) {
        done = function done(token) {
          return token.type === '}' || token.type === 'literal' && token.value === '&' || token.type === 'command' && /^(end|cr|\\)$/.test(token.value);
        };
      } // To handle infix operators, we'll keep track of their prefix
      // (tokens coming before them)


      var infix = null; // A token

      var prefix = null; // A mathlist

      var savedMathlist = this.swapMathList([]); // if (this.index >= this.tokens.length) return true;
      // const token = this.tokens[this.index];

      while (!this.end() && !done(this.peek())) {
        if (this.hasImplicitCommand(['displaystyle', 'textstyle', 'scriptstyle', 'scriptscriptstyle'])) {
          // Implicit math style commands such as \displaystyle, \textstyle...
          // Note these commands switch to math mode and a specific size
          // \textsize is the mathstyle used for inlinemath, not for text
          this.parseMode = 'math';
          var atom = new parser_MathAtom('math', 'mathstyle');
          atom.mathstyle = this.get().value;
          this.mathList.push(atom);
        } else if (this.hasInfixCommand() && !infix) {
          // The next token is an infix and we have not seen one yet
          // (there can be only one infix command per implicit group).
          infix = this.get(); // Save the math list so far and start a new one

          prefix = this.swapMathList([]);
        } else {
          this.parseAtom();
        }
      }

      var result;

      if (infix) {
        var suffix = this.swapMathList(savedMathlist); // The current parseMode, this.parseMode, may no longer have the value
        // it had when we encountered the infix. However, since all infix are
        // only defined in 'math' mode, we can use the 'math' constant
        // for the parseMode

        var info = definitions.getInfo('\\' + infix.value, 'math', this.macros);

        if (info) {
          result = [new parser_MathAtom(this.parseMode, info.type, info.value || infix.value, // Functions don't have
          info.parse ? info.parse('\\' + infix.value, [prefix, suffix]) : null)];
        } else {
          result = [new parser_MathAtom(this.parseMode, 'mop', infix.value)];
        }
      } else {
        result = this.swapMathList(savedMathlist);
      }

      this.style = savedStyle;
      return result;
    }
    /**
     * Parse a group enclosed in a pair of braces: `{...}`.
     *
     * Return either a group MathAtom or null if not a group.
     *
     * Return a group MathAtom with an empty body if an empty
     * group (i.e. `{}`).
     * @return {MathAtom}
     * @method module:core/parser#Parser#scanGroup
     * @private
     */

  }, {
    key: "scanGroup",
    value: function scanGroup() {
      if (!this.parseToken('{')) return null;
      var result = new parser_MathAtom(this.parseMode, 'group');
      result.body = this.scanImplicitGroup(function (token) {
        return token.type === '}';
      });
      this.parseToken('}');
      result.latexOpen = '{';
      result.latexClose = '}';
      return result;
    }
  }, {
    key: "scanSmartFence",
    value: function scanSmartFence() {
      this.skipWhitespace();
      if (!this.parseLiteral('(')) return null; // We've found an open paren... Convert to a `\mleft...\mright`

      var result = new parser_MathAtom(this.parseMode, 'leftright');
      result.leftDelim = '(';
      result.inner = false; // It's a `\mleft`, not a `\left`

      var savedMathList = this.swapMathList([]);
      var nestLevel = 1;

      while (!this.end() && nestLevel !== 0) {
        if (this.hasLiteral('(')) nestLevel += 1;
        if (this.hasLiteral(')')) nestLevel -= 1;
        if (nestLevel !== 0) this.parseAtom();
      }

      if (nestLevel === 0) this.parseLiteral(')');
      result.rightDelim = nestLevel === 0 ? ')' : '?';
      result.body = this.swapMathList(savedMathList);
      return result;
    }
    /**
     * Scan a delimiter, e.g. '(', '|', '\vert', '\ulcorner'
     *
     * @return {string} The delimiter (as a character or command) or null
     * @memberof Parser
     * @method module:core/parser#Parser#scanDelim
     * @private
     */

  }, {
    key: "scanDelim",
    value: function scanDelim() {
      this.skipWhitespace();
      var token = this.get();
      if (!token) return null;
      var delim = '.';

      if (token.type === 'command') {
        delim = '\\' + token.value;
      } else if (token.type === 'literal') {
        delim = token.value;
      }

      var info = definitions.getInfo(delim, 'math', this.macros);
      if (!info) return null;

      if (info.type === 'mopen' || info.type === 'mclose') {
        return delim;
      } // Some symbols are not of type mopen/mclose, but are still
      // valid delimiters...
      // '?' is a special delimiter used as a 'placeholder'
      // (when the closing delimiter is displayed greyed out)


      if (/^(\?|\||<|>|\\vert|\\Vert|\\\||\\surd|\\uparrow|\\downarrow|\\Uparrow|\\Downarrow|\\updownarrow|\\Updownarrow|\\mid|\\mvert|\\mVert)$/.test(delim)) {
        return delim;
      }

      return null;
    }
    /**
     * Parse a `/left.../right` sequence.
     *
     * Note: the `/middle` command can occur multiple times inside a
     * `/left.../right` sequence, and is handled separately.
     *
     * Return either an atom of type `'leftright'` or null
     * @return {MathAtom}
     * @method module:core/parser#Parser#scanLeftRight
     * @private
     */

  }, {
    key: "scanLeftRight",
    value: function scanLeftRight() {
      if (this.parseCommand('right') || this.parseCommand('mright')) {
        // We have an unbalanced left/right (there's a \right, but no \left)
        var _result = new parser_MathAtom(this.parseMode, 'leftright');

        _result.rightDelim = this.scanDelim() || ''; // 去除点
        // result.rightDelim = this.scanDelim() || '.';

        return _result;
      }

      var savedStyle = this.style;
      var close = 'right';

      if (!this.parseCommand('left')) {
        if (!this.parseCommand('mleft')) return null;
        close = 'mright';
      } // 去除点
      // const leftDelim = this.scanDelim() || '.';


      var leftDelim = this.scanDelim() || '';
      var savedMathList = this.swapMathList([]);

      while (!this.end() && !this.parseCommand(close)) {
        this.parseAtom();
      }

      this.style = savedStyle; // If we've reached the end and there was no `\right` or
      // there isn't a valid delimiter after `\right`, we'll
      // consider the `\right` missing and set the `rightDelim` to undefined

      var rightDelim = this.scanDelim();
      var result = new parser_MathAtom(this.parseMode, 'leftright');
      result.leftDelim = leftDelim;
      result.rightDelim = rightDelim;
      result.inner = close === 'right';
      result.body = this.swapMathList(savedMathList);
      return result;
    }
    /**
     * Parse a subscript/superscript: `^` and `_`.
     *
     * Modify the last atom accordingly.
     *
     * @return {MathAtom}
     * @method module:core/parser#Parser#parseSupSub
     * @private
     */

  }, {
    key: "parseSupSub",
    value: function parseSupSub() {
      // No sup/sub in text or command mode.
      if (this.parseMode !== 'math') return false; // Apply the subscript/superscript to the last render atom.
      // If none is present (beginning of the mathlist, i.e. `{^2}`,
      // an empty atom will be created, equivalent to `{{}^2}`

      var result = false;

      while (this.hasLiteral('^') || this.hasLiteral('_') || this.hasLiteral("'")) {
        var supsub = void 0;

        if (this.hasLiteral('^')) {
          supsub = 'superscript';
        } else if (this.hasLiteral('_')) {
          supsub = 'subscript';
        }

        if (this.parseLiteral('^') || this.parseLiteral('_')) {
          var arg = this.scanArg();

          if (arg) {
            var atom = this.lastMathAtom();
            atom[supsub] = atom[supsub] || [];
            atom[supsub] = atom[supsub].concat(arg);
            result = true;
          }
        } else if (this.parseLiteral("'")) {
          // A single quote (prime) is actually equivalent to a
          // '^{\prime}'
          var _atom = this.lastMathAtom();

          _atom.superscript = _atom.superscript || [];

          _atom.superscript.push(new parser_MathAtom(_atom.parseMode, 'mord', "\u2032"));

          result = true;
        }
      }

      return result;
    }
    /**
     * Parse a `\limits` or `\nolimits` command.
     *
     * This will change the placement of limits to be either above or below
     * (if `\limits`) or in the superscript/subscript position (if `\nolimits`).
     *
     * This overrides the calculation made for the placement, which is usually
     * dependent on the displaystyle (`inlinemath` prefers `\nolimits`, while
     * `displaymath` prefers `\limits`).
     * @method module:core/parser#Parser#parseLimits
     * @private
     */

  }, {
    key: "parseLimits",
    value: function parseLimits() {
      // Note: technically, \limits and \nolimits are only applicable
      // after an operator. However, we apply them in all cases. They
      // will simply be ignored when not applicable (i.e. on a literal)
      // which is actually consistent with TeX.
      if (this.parseCommand('limits')) {
        var lastAtom = this.lastMathAtom();
        lastAtom.limits = 'limits'; // Record that the limits was set through an explicit command
        // so we can generate the appropriate LaTeX later

        lastAtom.explicitLimits = true;
        return true;
      }

      if (this.parseCommand('nolimits')) {
        var _lastAtom = this.lastMathAtom();

        _lastAtom.limits = 'nolimits'; // Record that the limits was set through an explicit command
        // so we can generate the appropriate LaTeX later

        _lastAtom.explicitLimits = true;
        return true;
      }

      return false;
    }
  }, {
    key: "scanOptionalArg",
    value: function scanOptionalArg(parseMode) {
      parseMode = !parseMode || parseMode === 'auto' ? this.parseMode : parseMode;
      this.skipWhitespace();
      if (!this.parseLiteral('[')) return null;
      var savedParseMode = this.parseMode;
      this.parseMode = parseMode;
      var savedMathlist = this.swapMathList();
      var result;

      while (!this.end() && !this.parseLiteral(']')) {
        if (parseMode === 'string') {
          result = this.scanString();
        } else if (parseMode === 'number') {
          result = this.scanNumber();
        } else if (parseMode === 'dimen') {
          result = this.scanDimen();
        } else if (parseMode === 'skip') {
          result = this.scanSkip();
        } else if (parseMode === 'colspec') {
          result = this.scanColspec();
        } else if (parseMode === 'color') {
          result = this.scanColor() || '#ffffff';
        } else if (parseMode === 'bbox') {
          // The \bbox command takes a very particular argument:
          // a comma delimited list of up to three arguments:
          // a color, a dimension and a string.
          // Split the string by comma delimited sub-strings, ignoring commas
          // that may be inside (). For example"x, rgb(a, b, c)" would return
          // ['x', 'rgb(a, b, c)']
          var list = this.scanString().toLowerCase().trim().split(/,(?![^(]*\)(?:(?:[^(]*\)){2})*[^"]*$)/);
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var elem = _step2.value;
              var color = core_color.stringToColor(elem);

              if (color) {
                result = result || {};
                result.backgroundcolor = color;
              } else {
                var m = elem.match(/^\s*([0-9.]+)\s*([a-z][a-z])/);

                if (m) {
                  result = result || {};
                  result.padding = fontMetrics.toEm(m[1], m[2]);
                } else {
                  var _m = elem.match(/^\s*border\s*:\s*(.*)/);

                  if (_m) {
                    result = result || {};
                    result.border = _m[1];
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        } else {
          console.assert(parseMode === 'math', 'Unexpected parse mode: "' + parseMode + '"');
          this.mathList = this.mathList.concat(this.scanImplicitGroup(function (token) {
            return token.type === 'literal' && token.value === ']';
          }));
        }
      }

      this.parseMode = savedParseMode;
      var mathList = this.swapMathList(savedMathlist);
      return result ? result : mathList;
    }
    /**
     * Parse a math field, an argument to a function.
     *
     * An argument can either be a single atom or
     * a sequence of atoms enclosed in braces.
     *
     * @param {string} [parseMode] Temporarily overrides the parser parsemode. For
     * example: `'dimension'`, `'color'`, `'text'`, etc...
     * @method module:core/parser#Parser#scanArg
     * @private
     */

  }, {
    key: "scanArg",
    value: function scanArg(parseMode) {
      parseMode = !parseMode || parseMode === 'auto' ? this.parseMode : parseMode;
      this.parseFiller();
      var result; // An argument (which is called a 'math field' in TeX)
      // could be a single character or symbol, as in `\frac12`
      // Note that ``\frac\sqrt{-1}\alpha\beta`` is equivalent to
      // ``\frac{\sqrt}{-1}{\beta}``

      if (!this.parseToken('{')) {
        if (parseMode === 'delim') {
          return this.scanDelim() || '.';
        } else if (/^(math|text)$/.test(parseMode)) {
          // Parse a single atom.
          var _savedParseMode = this.parseMode;
          this.parseMode = parseMode;
          var atom = this.scanToken();
          this.parseMode = _savedParseMode;
          if (Array.isArray(atom)) return atom;
          return atom ? [atom] : null;
        }
      } // If this is a param token, substitute it with the
      // (optional) argument passed to the parser


      if (this.hasToken('#')) {
        var paramToken = this.get();
        this.skipUntilToken('}');

        if (paramToken.value === '?') {
          return this.placeholder();
        }

        if (this.args) {
          if (this.args[paramToken.value] === undefined && this.args['?'] !== undefined) {
            return this.placeholder();
          }

          return this.args[paramToken.value] || null;
        }

        return null;
      }

      var savedParseMode = this.parseMode;
      this.parseMode = parseMode;
      var savedMathList = this.swapMathList([]);

      if (parseMode === 'string') {
        result = this.scanString();
        this.skipUntilToken('}');
      } else if (parseMode === 'number') {
        result = this.scanNumber();
        this.skipUntilToken('}');
      } else if (parseMode === 'dimen') {
        result = this.scanDimen();
        this.skipUntilToken('}');
      } else if (parseMode === 'skip') {
        result = this.scanSkip();
        this.skipUntilToken('}');
      } else if (parseMode === 'colspec') {
        result = this.scanColspec();
        this.skipUntilToken('}');
      } else if (parseMode === 'color') {
        result = this.scanColor() || '#ffffff';
        this.skipUntilToken('}');
      } else if (parseMode === 'delim') {
        result = this.scanDelim() || '.';
        this.skipUntilToken('}');
      } else {
        console.assert(/^(math|text)$/.test(parseMode), 'Unexpected parse mode: "' + parseMode + '"');

        do {
          this.mathList = this.mathList.concat(this.scanImplicitGroup());
        } while (!this.parseToken('}') && !this.end());
      }

      this.parseMode = savedParseMode;
      var mathList = this.swapMathList(savedMathList);
      return result ? result : mathList;
    }
    /**
     * @return {MathAtom[]|MathAtom}
     * @method module:core/parser#Parser#scanToken
     * @private
     */

  }, {
    key: "scanToken",
    value: function scanToken() {
      var token = this.get();
      if (!token) return null;
      var result = null;

      if (token.type === 'space') {
        if (this.parseMode === 'text') {
          result = new parser_MathAtom('text', '', ' ', this.style);
        }
      } else if (token.type === 'placeholder') {
        // RENDER PLACEHOLDER
        result = new parser_MathAtom(this.parseMode, 'placeholder', token.value);
        result.captureSelection = true;
      } else if (token.type === 'command') {
        // RENDER COMMAND
        if (token.value === 'placeholder') {
          result = new parser_MathAtom(this.parseMode, 'placeholder', this.scanArg('string'), this.style);
          result.captureSelection = true;
        } else if (token.value === 'char') {
          // \char has a special syntax and requires a non-braced integer
          // argument
          var codepoint = Math.floor(this.scanNumber(true));

          if (!isFinite(codepoint) || codepoint < 0 || codepoint > 0x10FFFF) {
            codepoint = 0x2753; // BLACK QUESTION MARK
          }

          result = new parser_MathAtom(this.parseMode, this.parseMode === 'math' ? 'mord' : '', String.fromCodePoint(codepoint));
          result.latex = '{\\char"' + ('000000' + codepoint.toString(16)).toUpperCase().substr(-6) + '}';
        } else if (token.value === 'hskip' || token.value === 'kern') {
          // \hskip and \kern have a special syntax and requires a non-braced
          // 'skip' argument
          var width = this.scanSkip();

          if (isFinite(width)) {
            result = new parser_MathAtom(this.parseMode, 'spacing', null, this.style);
            result.width = width;
          }

          result.latex = '\\' + token.value;
        } else {
          result = this.scanMacro(token.value);

          if (!result) {
            var info = definitions.getInfo('\\' + token.value, this.parseMode, this.macros);
            var args = [];
            var argString = ''; // Parse the arguments
            // let mandatoryParamsCount = 0;
            // If explicitGroup is not empty, an explicit group is expected
            // to follow the command and will be parsed *after* the
            // command has been processed.
            // This is used for commands such as \textcolor{color}{content}
            // that need to apply the color to the content *after* the
            // style has been changed.
            // In definitions, this is indicated with a parameter type
            // of 'auto*'

            var explicitGroup = '';

            if (info && info.params) {
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = info.params[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var param = _step3.value;

                  // Parse an argument
                  if (param.optional) {
                    // If it's not present, return the default argument value
                    var arg = this.scanOptionalArg(param.type); // args.push(arg ? arg : param.defaultValue); @todo defaultvalue

                    args.push(arg);
                  } else if (param.type.endsWith('*')) {
                    explicitGroup = param.type.slice(0, -1);
                  } else {
                    // mandatoryParamsCount += 1;
                    // If it's not present, scanArg returns null.
                    // Add a placeholder instead.
                    var _arg = this.scanArg(param.type);

                    if (_arg && _arg.length === 1 && _arg[0].type === 'placeholder' && param.placeholder) {
                      _arg[0].value = param.placeholder;
                    }

                    if (_arg) {
                      args.push(_arg);
                    } else if (param.placeholder) {
                      var placeholder = new parser_MathAtom(this.parseMode, 'placeholder', param.placeholder);
                      placeholder.captureSelection = true;
                      args.push([placeholder]);
                    } else {
                      args.push(this.placeholder());
                    }

                    if (param.type !== 'math' && typeof _arg === 'string') {
                      argString += _arg;
                    }
                  }
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }
            }

            if (info && !info.infix) {
              // Infix commands should be handled in scanImplicitGroup
              // If we find an infix command here, it's a syntax error
              // (second infix command in an implicit group) and should be ignored.
              // Create the MathAtom.
              // If a parse function is present, invoke it with the arguments,
              // and pass the result to be appended by the constructor.
              if (info.parse) {
                var attributes = info.parse('\\' + token.value, args);

                if (!attributes.type) {
                  // No type provided -> the parse function will modify
                  // the current style rather than create a new Atom.
                  var savedMode = this.parseMode;

                  if (attributes.mode) {
                    // Change to 'text' (or 'math') mode if necessary
                    this.parseMode = attributes.mode;
                    delete attributes.mode;
                  } // If an explicit group is expected, process it now


                  if (explicitGroup) {
                    // Create a temporary style
                    var saveStyle = this.style;
                    this.style = parser_objectSpread({}, this.style, {}, attributes);
                    result = this.scanArg(explicitGroup);
                    this.style = saveStyle;
                  } else {
                    // Merge the new style info with the current style
                    this.style = parser_objectSpread({}, this.style, {}, attributes);
                  }

                  this.parseMode = savedMode;
                } else {
                  result = new parser_MathAtom(this.parseMode, info.type, explicitGroup ? this.scanArg(explicitGroup) : null, parser_objectSpread({}, this.style, {}, attributes));
                }
              } else {
                var style = parser_objectSpread({}, this.style);

                if (info.baseFontFamily) style.baseFontFamily = info.baseFontFamily;
                result = new parser_MathAtom(this.parseMode, info.type || 'mop', info.value || token.value, style);

                if (info.skipBoundary) {
                  result.skipBoundary = true;
                }
              }

              if (result && !/^(llap|rlap|class|cssId)$/.test(token.value)) {
                result.latex = '\\' + token.value;

                if (argString
                /*|| mandatoryParamsCount > 0*/
                ) {
                    result.latex += '{' + argString + '}';
                  }

                if (result.isFunction && this.smartFence) {
                  // The atom was a function that may be followed by
                  // an argument, like `\sin(`
                  var smartFence = this.scanSmartFence();

                  if (smartFence) {
                    result = [result, smartFence];
                  }
                }
              }
            }

            if (!info) {
              // An unknown command
              result = new parser_MathAtom(this.parseMode, 'error', '\\' + token.value);
              result.latex = '\\' + token.value;
            }
          }
        }
      } else if (token.type === 'literal') {
        var _info = definitions.getInfo(token.value, this.parseMode, this.macros);

        if (_info) {
          var _style = parser_objectSpread({}, this.style);

          if (_info.baseFontFamily) _style.baseFontFamily = _info.baseFontFamily;
          result = new parser_MathAtom(this.parseMode, _info.type, _info.value || token.value, _style);

          if (_info.isFunction) {
            result.isFunction = true;
          }
        } else {
          result = new parser_MathAtom(this.parseMode, this.parseMode === 'math' ? 'mord' : '', token.value, this.style);
        }

        result.latex = definitions.matchCodepoint(this.parseMode, token.value.codePointAt(0));

        if (_info && _info.isFunction && this.smartFence) {
          // The atom was a function that may be followed by
          // an argument, like `f(`.
          var _smartFence = this.scanSmartFence();

          if (_smartFence) {
            result = [result, _smartFence];
          }
        }
      } else if (token.type === '#') {
        // Parameter token in an implicit group (not as a parameter)
        if (token.value === '?') {
          // '#?' indicates that a placeholder should be used
          result = this.placeholder();
        } else if (this.args) {
          result = this.args[token.value] || null;

          if (Array.isArray(result) && result.length === 1) {
            result = result[0];
          } else if (Array.isArray(result)) {
            var group = new parser_MathAtom(this.parseMode, 'group');
            group.body = result;
            result = group;
          } else {
            // If there is no argument value specified, use a placeholder
            result = this.placeholder();
          }
        }
      } else {
        console.warn('Unexpected token type "' + token.type + '", value ="' + token.value + '"');
      }

      return result;
    }
    /*
     * Attempt to scan the macro name and return an atom list if successful.
     * Otherwise, it wasn't a macro.
     */

  }, {
    key: "scanMacro",
    value: function scanMacro(macro) {
      if (!this.macros || !this.macros[macro]) return null;
      var args = {};
      var def;
      var argCount = 0;

      if (typeof this.macros[macro] === 'string') {
        def = this.macros[macro]; // Let's see if there are arguments in the definition.

        if (/(^|[^\\])#1/.test(def)) argCount = 1;
        if (/(^|[^\\])#2/.test(def)) argCount = 2;
        if (/(^|[^\\])#3/.test(def)) argCount = 3;
        if (/(^|[^\\])#4/.test(def)) argCount = 4;
        if (/(^|[^\\])#5/.test(def)) argCount = 5;
        if (/(^|[^\\])#6/.test(def)) argCount = 6;
        if (/(^|[^\\])#7/.test(def)) argCount = 7;
        if (/(^|[^\\])#8/.test(def)) argCount = 8;
        if (/(^|[^\\])#9/.test(def)) argCount = 9;
      } else {
        def = this.macros[macro].def;
        argCount = this.macros[macro].args || 0;
      }

      for (var i = 1; i <= argCount; i++) {
        args[i] = this.scanArg();
      } // Carry forward the placeholder argument, if any.


      if (this.args && typeof this.args['?'] === 'string') {
        args['?'] = this.args['?'];
      } // Group the result of the macro expansion, and set the
      // captureSelection attribute so that it is handled as an unbreakable
      // unit


      var atom = new parser_MathAtom(this.parseMode, 'group', parseTokens(lexer.tokenize(def), this.parseMode, args, this.macros));
      atom.captureSelection = true;
      atom.latex = '\\' + macro;
      var argString = '';

      for (var _i = 1; _i <= argCount; _i++) {
        argString += '{';

        if (Array.isArray(args[_i])) {
          for (var j = 0; j < args[_i].length; j++) {
            argString += args[_i][j].latex;
          }
        }

        argString += '}';
      }

      atom.latex += argString ? argString : '';
      return atom;
    }
    /**
     * Make a MathAtom for the current token or token group and
     * add it to the parser's current mathList
     * @method module:core/parser#Parser#parseAtom
     * @private
     */

  }, {
    key: "parseAtom",
    value: function parseAtom() {
      var result = this.scanEnvironment() || this.scanModeShift() || this.scanModeSet() || this.scanGroup() || this.scanLeftRight();
      if (!result && (this.parseSupSub() || this.parseLimits())) return true;
      if (!result) result = this.scanToken(); // If we have an atom to add, push it at the end of the current math list
      // We could have no atom for tokens that were skipped, a ' ' in mathmode
      // for example

      if (Array.isArray(result)) {
        this.mathList = this.mathList.concat(result);
      } else if (result) {
        this.mathList.push(result);
      }

      return result !== null;
    }
  }]);

  return Parser;
}();
/**
 * Given an array of tokens returned by the lexer, return a corresponding
 * math list (array of atoms).
 * @param {object[]} tokens
 * @param {string} [parseMode='math']
 * @param {string[]} [args={}] - If there are any placeholder tokens, e.g.
 * `#0`, `#1`, etc... they will be replaced by the value provided by `args`.
 * @param {object} [macro={}] Dictionary defining macros
 * @param {boolean} [smartFence=false] If true, promote plain fences, e.g. `(`,
 * as `\left...\right` or `\mleft...\mright`
 * @return {object[]} An array of MathAtom
 * @method module:core/parser#parseTokens
 * @private
 */


function parseTokens(tokens, parseMode, args, macros, smartFence) {
  var mathlist = [];
  var parser = new parser_Parser(tokens, args, macros);
  parser.parseMode = parseMode || 'math'; // other possible values: 'text', 'color', etc...

  if (smartFence) parser.smartFence = true;

  while (!parser.end()) {
    mathlist = mathlist.concat(parser.scanImplicitGroup());
  }

  return mathlist;
} // Export the public interface for this module


/* harmony default export */ var parser = ({
  Parser: parser_Parser,
  parseTokens: parseTokens
});
// CONCATENATED MODULE: ./packages/editor/editor-mathpath.js
/**
 * @module editor/mathpath
 * @private
 */

/**
 *
 * @memberof module:editor/mathpath
 * @param {object} path
 * @param {number} extent
 * @return {string}
 * @private
 */
function pathToString(path, extent) {
  var result = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = path[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var segment = _step.value;
      result += segment.relation + ':' + segment.offset + '/';
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (extent) {
    result += '#' + extent;
  }

  return result;
}
/**
 *
 * @memberof module:editor/mathpath
 * @param {string} string
 * @return {object}
 * @private
 */


function pathFromString(string) {
  // Reset the path
  var result = {
    path: [],
    extent: 0
  }; // Parse the selection extent, if present

  var components = string.split('#');

  if (components.length > 1) {
    result.extent = parseInt(components[1]);
  } // Parse the segments


  var segments = components[0].split('/');
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = segments[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var segment = _step2.value;
      var m2 = segment.match(/([^:]*):(.*)/);

      if (m2) {
        result.path.push({
          relation: m2[1],
          offset: parseInt(m2[2])
        });
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return result;
}
/**
 * Given two paths, return a path representing their common ancestor.
 *
 * @param {Array.<string>} p
 * @param {Array.<string>} q
 * @return {Array.<string>}
 * @memberof module:editor/mathpath
 * @private
 */


function pathCommonAncestor(p, q) {
  var result = [];
  var maxIndex = Math.min(p.length - 1, q.length - 1);
  var i = 0;

  while (i <= maxIndex && p[i].relation === q[i].relation && p[i].offset === q[i].offset) {
    result.push(p[i]);
    i += 1;
  }

  return result;
}
/**
 *
 * @param {Array.<string>} p
 * @param {Array.<string>} q
 * @return {number} 0 if the paths are identical
 *  - 1 if they are siblings
 *  - >1 if they are not siblings
 * @memberof module:editor/mathpath
 * @private
 */


function pathDistance(p, q) {
  var result = 0;
  var i = -1;
  var done = false;

  while (!done) {
    i += 1;
    done = i >= p.length || i >= q.length;
    done = done || !(p[i].relation === q[i].relation && p[i].offset === q[i].offset);
  }

  if (i === p.length && i === q.length) {
    // They're identical
    result = 0;
  } else if (i + 1 === p.length && i + 1 === q.length && p[i].relation === q[i].relation) {
    // They're siblings
    result = 1;
  } else {
    result = 2;
  }

  return result;
}

function editor_mathpath_clone(path) {
  return pathFromString(pathToString(path)).path;
}

/* harmony default export */ var editor_mathpath = ({
  pathFromString: pathFromString,
  pathToString: pathToString,
  pathDistance: pathDistance,
  pathCommonAncestor: pathCommonAncestor,
  clone: editor_mathpath_clone
});
// CONCATENATED MODULE: ./packages/editor/editor-shortcuts.js
/**
 * @private
 */

/**
 * The index of this array is a keystroke combination as returned by the key
 * field of a JavaScript keyboard event as documented here:
 * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
 * except for:
 * - `Escape`         → `Esc`
 * - `LeftArrow`...   → `Left/Right/Up/Down`
 * - `Delete`         → `Del`
 * - `Escape`         → `Esc`
 * - ' '              → `Spacebar`
 *
 * The modifiers are specified before the main key, in the following order:
 * 1. `Ctrl`
 * 2. `Meta`: Command key on Mac OS. On Windows this is the Windows key,
 * but the system intercepts those key combinations so they are never received
 * 3. `Alt`: Option key on Mac OS
 * 4. `Shift`
 *
 * The keys can be preceded by a context to restrict when the shortcut is
 * applicable. For example, "math:Ctrl-KeyA" will restrict this shortcut
 * to only apply in the "math" context (parseMode). Other valid context include
 * "text" and "command".
 *
 * The value of the entries represent the command to perform.
 * This can be either a single selector, or an array of a selector followed
 * by its arguments.
 * Selectors uses the following naming conventions:
 * - a 'char' is a math atom (a letter, digit, symbol or compound atom)
 * - a 'word' is a sequence of math atoms of the same type
 * - a 'group' is a sequence of sibling atoms, for example a numerator or
 * a superscript
 * - the 'MathField' is the entire expression being edited
 * - a 'placeholder' is either an actual placeholder atom or an empty child
 * list, for example an empty numerator
 * - 'move' changes the position of the insertion point (and collapses the
 * selection range if necessary)
 * - 'extend' keeps the anchor of the  selection, but moves the focus (extends,
 * or shrinks, the range of selected items)
 *
 * @type {Object<string,string>}
 * @private
 */

var KEYBOARD_SHORTCUTS = {
  'Left': 'moveToPreviousChar',
  'Right': 'moveToNextChar',
  'Up': 'moveUp',
  'Down': 'moveDown',
  'Shift-Left': 'extendToPreviousChar',
  'Shift-Right': 'extendToNextChar',
  'Shift-Up': 'extendUp',
  'Shift-Down': 'extendDown',
  'Backspace': 'deletePreviousChar',
  'Alt-Del': 'deletePreviousChar',
  'Del': 'deleteNextChar',
  'Alt-Backspace': 'deleteNextChar',
  'Alt-Left': 'moveToPreviousWord',
  'Alt-Right': 'moveToNextWord',
  'Alt-Shift-Left': 'extendToPreviousWord',
  'Alt-Shift-Right': 'extendToNextWord',
  'Ctrl-Left': 'moveToGroupStart',
  'Ctrl-Right': 'moveToGroupEnd',
  'Ctrl-Shift-Left': 'extendToGroupStart',
  'Ctrl-Shift-Right': 'extendToGroupEnd',
  'math:Spacebar': 'moveAfterParent',
  'math:Shift-Spacebar': 'moveBeforeParent',
  'Home': 'moveToMathFieldStart',
  'mac:Meta-Left': 'moveToMathFieldStart',
  'Shift-Home': 'extendToMathFieldStart',
  'mac:Meta-Shift-Left': 'extendToMathFieldStart',
  'End': 'moveToMathFieldEnd',
  'mac:Meta-Right': 'moveToMathFieldEnd',
  'Shift-End': 'extendToMathFieldEnd',
  'mac:Meta-Shift-Right': 'extendToMathFieldEnd',
  'PageUp': 'moveToGroupStart',
  'PageDown': 'moveToGroupEnd',
  'math:Tab': 'moveToNextPlaceholder',
  'math:F8': 'moveToNextPlaceholder',
  // Visual Studio
  'math:Shift-Tab': 'moveToPreviousPlaceholder',
  'math:Shift-F8': 'moveToPreviousPlaceholder',
  // Visual Studio
  'text:Tab': 'moveToNextPlaceholder',
  'text:F8': 'moveToNextPlaceholder',
  // Visual Studio
  'text:Shift-Tab': 'moveToPreviousPlaceholder',
  'text:Shift-F8': 'moveToPreviousPlaceholder',
  // Visual Studio
  'math:Esc': ['switch-mode', 'command'],
  'math:Backslash': ['switch-mode', 'command'],
  'math:IntlBackslash': ['switch-mode', 'command'],
  'math:Alt-Equal': ['apply-style', {
    mode: 'text'
  }],
  'text:Alt-Equal': ['apply-style', {
    mode: 'math'
  }],
  'command:Esc': ['complete', {
    discard: true
  }],
  // discard the command, insert nothing
  'command:Tab': ['complete', {
    acceptSuggestion: true
  }],
  // complete the suggestion
  'command:Return': 'complete',
  'command:Enter': 'complete',
  'command:Shift-Esc': ['complete', {
    discard: true
  }],
  // Some keyboards can't generate
  // this combination, for example in 60% keyboards it is mapped to ~
  'command:Down': 'nextSuggestion',
  'ios:command:Tab': 'nextSuggestion',
  'command:Up': 'previousSuggestion',
  '!mac:Ctrl-KeyA': 'selectAll',
  'mac:Meta-KeyA': 'selectAll',
  // Rare keys on some extended keyboards
  'Cut': 'cut',
  'Copy': 'copy',
  'Paste': 'paste',
  'Clear': 'delete',
  '!mac:Ctrl-KeyZ': 'undo',
  'mac:Meta-KeyZ': 'undo',
  'Undo': 'undo',
  '!mac:Ctrl-KeyY': 'redo',
  // ARIA recommendation
  'mac:Meta-Shift-KeyY': 'redo',
  '!mac:Ctrl-Shift-KeyZ': 'redo',
  'mac:Meta-Shift-KeyZ': 'redo',
  'Redo': 'redo',
  'EraseEof': 'deleteToGroupEnd',
  // EMACS/MACOS BINDINGS
  'mac:Ctrl-KeyB': 'moveToPreviousChar',
  'mac:Ctrl-KeyF': 'moveToNextChar',
  'mac:Ctrl-KeyP': 'moveUp',
  'mac:Ctrl-KeyN': 'moveDown',
  'mac:Ctrl-KeyA': 'moveToMathFieldStart',
  'mac:Ctrl-KeyE': 'moveToMathFieldEnd',
  'mac:Ctrl-Shift-KeyB': 'extendToPreviousChar',
  'mac:Ctrl-Shift-KeyF': 'extendToNextChar',
  'mac:Ctrl-Shift-KeyP': 'extendUp',
  'mac:Ctrl-Shift-KeyN': 'extendDown',
  'mac:Ctrl-Shift-KeyA': 'extendToMathFieldStart',
  'mac:Ctrl-Shift-KeyE': 'extendToMathFieldEnd',
  'mac:Ctrl-Alt-KeyB': 'moveToPreviousWord',
  'mac:Ctrl-Alt-KeyF': 'moveToNextWord',
  'mac:Ctrl-Shift-Alt-KeyB': 'extendToPreviousWord',
  'mac:Ctrl-Shift-Alt-KeyF': 'extendToNextWord',
  'mac:Ctrl-KeyH': 'deletePreviousChar',
  'mac:Ctrl-KeyD': 'deleteNextChar',
  'mac:Ctrl-KeyL': 'scrollIntoView',
  'mac:Ctrl-KeyT': 'transpose',
  'math:Shift-Quote': ['switch-mode', 'text', '', '“'],
  'text:Shift-Quote': ['switch-mode', 'math', '”', ''],
  // WOLFRAM MATHEMATICA BINDINGS
  'math:Ctrl-Digit2': ['insert', '\\sqrt{#0}'],
  'math:Ctrl-Digit5': 'moveToOpposite',
  'math:Ctrl-Digit6': 'moveToSuperscript',
  'math:Ctrl-Minus': 'moveToSubscript',
  'math:Alt-BracketLeft': ['insert', '\\left\\lbrack #0 \\right\\rbrack'],
  'math:Alt-Shift-BracketLeft': ['insert', '\\left\\lbrace #0 \\right\\rbrace'],
  'math:Return': 'addRowAfter',
  'math:Enter': 'addRowAfter',
  'math:Ctrl-Comma': 'addColumnAfter',
  // Excel shortcuts:
  // Shift-space: select entire row, ctrl+space: select an entire column
  // ctrl+shift++ or ctrl+numpad+
  // ctrl+- to delete a row or columns
  // MATHLIVE BINDINGS
  'math:Alt-KeyQ': ['insert', '\\theta'],
  'math:Alt-KeyP': ['insert', '\\pi'],
  'math:Alt-KeyV': ['insert', '\\sqrt{#0}'],
  'math:Alt-KeyW': ['insert', '\\sum_{i=#?}^{#?}'],
  'math:Alt-KeyB': ['insert', '\\int_{#?}^{#?}'],
  'math:Alt-KeyU': ['insert', '\\cup'],
  'math:Alt-KeyN': ['insert', '\\cap'],
  'math:Alt-KeyO': ['insert', '\\emptyset'],
  'math:Alt-KeyD': ['insert', '\\differentialD'],
  'math:Alt-Shift-KeyO': ['insert', '\\varnothing'],
  'math:Alt-Shift-KeyD': ['insert', '\\partial'],
  'math:Alt-Shift-KeyP': ['insert', '\\prod_{i=#?}^{#?}'],
  'math:Alt-Shift-KeyU': ['insert', '\\bigcup'],
  'math:Alt-Shift-KeyN': ['insert', '\\bigcap'],
  'math:Alt-Shift-KeyA': ['insert', '\\forall'],
  'math:Alt-Shift-KeyE': ['insert', '\\exists'],
  'math:Alt-Digit5': ['insert', '\\infty'],
  // "%" key
  'math:Alt-Digit6': ['insert', '\\wedge'],
  // "^" key
  'math:Alt-Shift-Digit6': ['insert', '\\vee'],
  // "^" key
  'math:Alt-Digit9': ['insert', '('],
  // "(" key, override smartFence
  'math:Alt-Digit0': ['insert', ')'],
  // ")" key, override smartFence
  'math:Alt-Shift-Backslash': ['insert', '|'],
  // "|" key, override smartFence
  'math:Alt-Backslash': ['insert', '\\backslash'],
  // "|" key, override command mode
  'math:Slash': ['insert', '\\frac{#@}{#?}'],
  'math:Alt-Slash': ['insert', '\\frac{#?}{#@}'],
  'math:NumpadDivide': ['insert', '\\frac{#@}{#?}'],
  'math:Alt-NumpadDivide': ['insert', '\\frac{#?}{#@}'],
  'math:Shift-Backquote': ['insert', '\\~'],
  'math:Alt-Shift-Slash': ['insert', '\\/'],
  // Accessibility
  'Alt-Shift-KeyK': 'toggleKeystrokeCaption',
  'Alt-Space': 'toggleVirtualKeyboard',
  // Note: On Mac OS (as of 10.12), there is a bug/behavior that causes
  // a beep to be generated with certain command+control key combinations.
  // The workaround is to create a default binding file to silence them.
  // In ~/Library/KeyBindings/DefaultKeyBinding.dict add these entries:

  /*
  {
     "^@\UF701" = "noop:";
     "^@\UF702" = "noop:";
     "^@\UF703" = "noop:";
  }
  */
  'mac:Ctrl-Meta-Up': ['speak', 'parent', {
    withHighlighting: false
  }],
  '!mac:Ctrl-Alt-Up': ['speak', 'parent', {
    withHighlighting: false
  }],
  'mac:Ctrl-Meta-Down': ['speak', 'all', {
    withHighlighting: false
  }],
  '!mac:Ctrl-Alt-Down': ['speak', 'all', {
    withHighlighting: false
  }],
  'mac:Ctrl-Meta-Left': ['speak', 'left', {
    withHighlighting: false
  }],
  '!mac:Ctrl-Alt-Left': ['speak', 'left', {
    withHighlighting: false
  }],
  'mac:Ctrl-Meta-Right': ['speak', 'right', {
    withHighlighting: false
  }],
  '!mac:Ctrl-Alt-Right': ['speak', 'right', {
    withHighlighting: false
  }],
  '!mac:Ctrl-Alt-Period': ['speak', 'selection', {
    withHighlighting: false
  }],
  'mac:Ctrl-Meta-Period': ['speak', 'selection', {
    withHighlighting: false
  }],
  'mac:Ctrl-Meta-Shift-Up': ['speak', 'parent', {
    withHighlighting: true
  }],
  '!mac:Ctrl-Alt-Shift-Up': ['speak', 'parent', {
    withHighlighting: true
  }],
  'mac:Ctrl-Meta-Shift-Down': ['speak', 'all', {
    withHighlighting: true
  }],
  '!mac:Ctrl-Alt-Shift-Down': ['speak', 'all', {
    withHighlighting: true
  }],
  'mac:Ctrl-Meta-Shift-Left': ['speak', 'left', {
    withHighlighting: true
  }],
  '!mac:Ctrl-Alt-Shift-Left': ['speak', 'left', {
    withHighlighting: true
  }],
  'mac:Ctrl-Meta-Shift-Right': ['speak', 'right', {
    withHighlighting: true
  }],
  '!mac:Ctrl-Alt-Shift-Right': ['speak', 'right', {
    withHighlighting: true
  }],
  '!mac:Ctrl-Alt-Shift-Period': ['speak', 'selection', {
    withHighlighting: true
  }],
  'mac:Ctrl-Meta-Shift-Period': ['speak', 'selection', {
    withHighlighting: true
  }] // '!mac:Ctrl-Alt-Shift-Home': ['speak', 'start', {withHighlighting: true}],
  // 'mac:Ctrl-Alt-Shift-Home':  ['speak', 'start', {withHighlighting: true}],
  // '!mac:Ctrl-Alt-Shift-End':  ['speak', 'end', {withHighlighting: true}],
  // 'mac:Ctrl-Alt-Shift-End':   ['speak', 'end', {withHighlighting: true}],

};
/**
 * Most commands can be associated to their keyboard shortcuts from the
 * KEYBOARD_SHORTCUTS table above, for example 'speakSelection' -> 'Ctrl-KeyR'
 * However, those that contain complex commands are more ambiguous.
 * For example, '\sqrt' -> 'math:Alt-KeyV'. This table provides the reverse
 * mapping for those more complex commands. It is used when displaying
 * keyboard shortcuts for specific commands in the popover.
 * @type {Object<string,string>}
 * @private
 */

var REVERSE_KEYBOARD_SHORTCUTS = {
  '\\theta': 'Alt-KeyQ',
  '\\sqrt': ['Alt-KeyV', 'Ctrl-Digit2'],
  '\\pi': 'Alt-KeyP',
  '\\prod': 'Alt-Shift-KeyP',
  '\\sum': 'Alt-KeyW',
  '\\int': 'Alt-KeyB',
  '\\cup': 'Alt-KeyU',
  '\\cap': 'Alt-KeyN',
  '\\bigcup': 'Alt-Shift-KeyU',
  '\\bigcap': 'Alt-Shift-KeyN',
  '\\forall': 'Alt-Shift-KeyA',
  '\\exists': 'Alt-Shift-KeyE',
  '\\infty': 'Alt-Digit5',
  '\\wedge': 'Alt-Digit5',
  '\\vee': 'Alt-Shift-Digit6',
  '\\differentialD': 'Alt-keyD',
  '\\partial': 'Alt-Shift-KeyD',
  '\\frac': 'Slash',
  '\\emptyset': 'Alt-KeyO',
  '\\varnothing': 'Alt-Shift-KeyO',
  '\\~': '~'
};
/**
 * These shortcut strings are replaced with the corresponding LaTeX expression
 * without requiring an escape sequence or command.
 *
 * @type {Object.<string,string>}
 * @private
 */

var INLINE_SHORTCUTS = {
  // 检测并转换列表
  // Primes
  "''": {
    mode: 'math',
    value: '^{\\doubleprime}'
  },
  // Greek letters
  'alpha': '\\alpha',
  'delta': '\\delta',
  'Delta': '\\Delta',
  'pi': {
    mode: 'math',
    value: '\\pi'
  },
  'pi ': {
    mode: 'text',
    value: '\\pi '
  },
  'Pi': {
    mode: 'math',
    value: '\\Pi'
  },
  'theta': '\\theta',
  'Theta': '\\Theta',
  // Letter-like
  'ii': {
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\imaginaryI'
  },
  'jj': {
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\imaginaryJ'
  },
  'ee': {
    mode: 'math',
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\exponentialE'
  },
  'nabla': {
    mode: 'math',
    value: '\\nabla'
  },
  'grad': {
    mode: 'math',
    value: '\\nabla'
  },
  'del': {
    mode: 'math',
    value: '\\partial'
  },
  "\u221E": '\\infty',
  // @TODO: doesn't work
  // '&infin;': '\\infty',
  // '&#8734;': '\\infty',
  'oo': {
    mode: 'math',
    after: 'nothing+digit+frac+surd+binop+relop+punct+array+openfence+closefence+space',
    value: '\\infty'
  },
  // Big operators
  '∑': {
    mode: 'math',
    value: '\\sum'
  },
  'sum': {
    mode: 'math',
    value: '\\sum_{#?}^{#?}'
  },
  'prod': {
    mode: 'math',
    value: '\\prod_{#?}^{#?}'
  },
  'sqrt': {
    mode: 'math',
    value: '\\sqrt'
  },
  // '∫':                    '\\int',             // There's a alt-B command for this
  '∆': {
    mode: 'math',
    value: '\\differentialD'
  },
  // @TODO: is \\diffD most common?
  '∂': {
    mode: 'math',
    value: '\\differentialD'
  },
  // Functions
  'sin': {
    mode: 'math',
    value: '\\sin'
  },
  'cos': {
    mode: 'math',
    value: '\\cos'
  },
  'tan': {
    mode: 'math',
    value: '\\tan'
  },
  'tanh': {
    mode: 'math',
    value: '\\tanh'
  },
  'log': {
    mode: 'math',
    value: '\\log'
  },
  'ln': {
    mode: 'math',
    value: '\\ln'
  },
  'exp': {
    mode: 'math',
    value: '\\exp'
  },
  'lim': {
    mode: 'math',
    value: '\\lim_{#?}'
  },
  // Differentials
  // According to ISO31/XI (ISO 80000-2), differentials should be upright
  'dx': '\\differentialD x',
  'dy': '\\differentialD y',
  'dt': '\\differentialD t',
  // Logic
  'AA': {
    mode: 'math',
    value: '\\forall'
  },
  'EE': {
    mode: 'math',
    value: '\\exists'
  },
  '!EE': {
    mode: 'math',
    value: '\\nexists'
  },
  '&&': {
    mode: 'math',
    value: '\\land'
  },
  // The shortcut for the greek letter "xi" is interfering with "x in"
  'xin': {
    mode: 'math',
    after: 'nothing+text+relop+punct+openfence+space',
    value: 'x \\in'
  },
  'in': {
    mode: 'math',
    after: 'nothing+letter+closefence',
    value: '\\in'
  },
  '!in': {
    mode: 'math',
    value: '\\notin'
  },
  // Sets
  'NN': '\\N',
  // Natural numbers
  'ZZ': '\\Z',
  // Integers
  'QQ': '\\Q',
  // Rational numbers
  'RR': '\\R',
  // Real numbers
  'CC': '\\C',
  // Complex numbers
  'PP': '\\P',
  // Prime numbers
  // Operators
  // 'xx':                   '\\times', 按两次XX的转换暂停
  '+-': '\\pm',
  // Relational operators
  '!=': '\\ne',
  '>=': '\\ge',
  '<=': '\\le',
  '<<': '\\ll',
  '>>': '\\gg',
  '~~': '\\approx',
  // More operators
  '≈': '\\approx',
  '?=': '\\questeq',
  '÷': '\\div',
  '¬': '\\neg',
  ':=': '\\coloneq',
  '::': '\\Colon',
  // Fences
  '(:': '\\langle',
  ':)': '\\rangle',
  // More Greek letters
  'beta': '\\beta',
  'chi': '\\chi',
  'epsilon': '\\epsilon',
  'varepsilon': '\\varepsilon',
  'eta': {
    mode: 'math',
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\eta'
  },
  'eta ': {
    mode: 'text',
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\eta '
  },
  'gamma': '\\gamma',
  'Gamma': '\\Gamma',
  'iota': '\\iota',
  'kappa': '\\kappa',
  'lambda': '\\lambda',
  'Lambda': '\\Lambda',
  'mu': {
    mode: 'math',
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\mu'
  },
  'mu ': {
    mode: 'text',
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\mu '
  },
  'nu': {
    mode: 'math',
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\nu'
  },
  'nu ': {
    mode: 'text',
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\nu '
  },
  'µ': '\\mu',
  // @TODO: or micro?
  'phi': {
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\phi'
  },
  'Phi': {
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\Phi'
  },
  'varphi': '\\varphi',
  'psi': {
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\psi'
  },
  'Psi': {
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\Psi'
  },
  'rho': {
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\rho'
  },
  'sigma': '\\sigma',
  'Sigma': '\\Sigma',
  'tau': {
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\tau'
  },
  'vartheta': '\\vartheta',
  'upsilon': "\\upsilon",
  'xi': {
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\xi'
  },
  'Xi': {
    after: 'nothing+digit+function+frac+surd+binop+relop+punct+array+openfence+closefence+space+text',
    value: '\\Xi'
  },
  'zeta': '\\zeta',
  'omega': '\\omega',
  'Omega': '\\Omega',
  'Ω': '\\omega',
  // @TODO: or ohm?
  // More Logic
  'forall': '\\forall',
  'exists': {
    mode: 'math',
    value: '\\exists'
  },
  '!exists': {
    mode: 'math',
    value: '\\nexists'
  },
  ':.': {
    mode: 'math',
    value: '\\therefore'
  },
  // MORE FUNCTIONS
  // 'arg': '\\arg',
  'liminf': '\\operatorname*{lim~inf}_{#?}',
  'limsup': '\\operatorname*{lim~sup}_{#?}',
  'argmin': '\\operatorname*{arg~min}_{#?}',
  'argmax': '\\operatorname*{arg~max}_{#?}',
  'det': '\\det',
  'mod': {
    mode: 'math',
    value: '\\mod'
  },
  'max': {
    mode: 'math',
    value: '\\max'
  },
  'min': {
    mode: 'math',
    value: '\\min'
  },
  'erf': '\\operatorname{erf}',
  'erfc': '\\operatorname{erfc}',
  'bessel': {
    mode: 'math',
    value: '\\operatorname{bessel}'
  },
  'mean': {
    mode: 'math',
    value: '\\operatorname{mean}'
  },
  'median': {
    mode: 'math',
    value: '\\operatorname{median}'
  },
  'fft': {
    mode: 'math',
    value: '\\operatorname{fft}'
  },
  'lcm': {
    mode: 'math',
    value: '\\operatorname{lcm}'
  },
  'gcd': {
    mode: 'math',
    value: '\\operatorname{gcd}'
  },
  'randomReal': '\\operatorname{randomReal}',
  'randomInteger': '\\operatorname{randomInteger}',
  'Re': {
    mode: 'math',
    value: '\\operatorname{Re}'
  },
  'Im': {
    mode: 'math',
    value: '\\operatorname{Im}'
  },
  // UNITS
  'mm': {
    mode: 'math',
    after: 'nothing+digit',
    value: '\\operatorname{mm}' // millimeter

  },
  'cm': {
    mode: 'math',
    after: 'nothing+digit',
    value: '\\operatorname{cm}' // centimeter

  },
  'km': {
    mode: 'math',
    after: 'nothing+digit',
    value: '\\operatorname{km}' // kilometer

  },
  'kg': {
    mode: 'math',
    after: 'nothing+digit',
    value: '\\operatorname{kg}' // kilogram

  },
  // '||':                   '\\lor',
  '...': '\\ldots',
  // In general, use \ldots
  '+...': '+\\cdots',
  // ... but use \cdots after + ...
  '-...': '-\\cdots',
  // ... - and ...
  '->...': '\\to\\cdots',
  // ->
  '->': '\\to',
  '|->': '\\mapsto',
  '-->': '\\longrightarrow',
  //    '<-':                   '\\leftarrow',
  '<--': '\\longleftarrow',
  '=>': '\\Rightarrow',
  '==>': '\\Longrightarrow',
  // '<=': '\\Leftarrow',     // CONFLICTS WITH LESS THAN OR EQUAL
  '<=>': '\\Leftrightarrow',
  '<->': '\\leftrightarrow',
  '(.)': '\\odot',
  '(+)': '\\oplus',
  '(/)': '\\oslash',
  '(*)': '\\otimes',
  '(-)': '\\ominus',
  // '(-)':                  '\\circleddash',
  '||': '\\Vert',
  '{': '\\{',
  '}': '\\}',
  '*': '\\cdot'
  /*
      //
      // ASCIIIMath
      //
      // Binary operation symbols
      '**':                   '\\ast',
      '***':                  '\\star',
      '//':                   '\\slash',
      '\\\\':                 '\\backslash',
      'setminus':             '\\backslash',
      '|><':                  '\\ltimes',
      '><|':                  '\\rtimes',
      '|><|':                 '\\bowtie',
      '-:':                   '\\div',
      'divide':               '\\div',
      '@':                    '\\circ',
      'o+':                   '\\oplus',
      'ox':                   '\\otimes',
      'o.':                   '\\odot',
      '^^':                   '\\wedge',
      '^^^':                  '\\bigwedge',
      'vv':                   '\\vee',
      'vvv':                  '\\bigvee',
      'nn':                   '\\cap',
      'nnn':                  '\\bigcap',
      'uu':                   '\\cup',
      'uuu':                  '\\bigcup',
  
      // Binary relation symbols
      '-=':                   '\\equiv',
      '~=':                   '\\cong',
      'lt':                   '<',
      'lt=':                  '\\leq',
      'gt':                   '>',
      'gt=':                  '\\geq',
      '-<':                   '\\prec',
      '-lt':                  '\\prec',
      '-<=':                  '\\preceq',
      // '>-':                   '\\succ',
      '>-=':                  '\\succeq',
      'prop':                 '\\propto',
      'diamond':              '\\diamond',
      'square':               '\\square',
      'iff':                  '\\iff',
  
      'sub':                  '\\subset',
      'sup':                  '\\supset',
      'sube':                 '\\subseteq',
      'supe':                 '\\supseteq',
      'uarr':                 '\\uparrow',
      'darr':                 '\\downarrow',
      'rarr':                 '\\rightarrow',
      'rArr':                 '\\Rightarrow',
      'larr':                 '\\leftarrow',
      'lArr':                 '\\Leftarrow',
      'harr':                 '\\leftrightarrow',
      'hArr':                 '\\Leftrightarrow',
      'aleph':                '\\aleph',
  
      // Logic
      'and':                  '\\land',
      'or':                   '\\lor',
      'not':                  '\\neg',
      '_|_':                   '\\bot',
      'TT':                   '\\top',
      '|--':                  '\\vdash',
      '|==':                  '\\models',
      
      // Other functions
      '|__':                  '\\lfloor',
      '__|':                  '\\rfloor',
  
      '|~':                   '\\lceil',
      '~|':                   '\\rceil',
  
      // Arrows
      '>->':                   '\\rightarrowtail',
      '->>':                   '\\twoheadrightarrow',
      '>->>':                  '\\twoheadrightarrowtail'
  */

};
/**
 * Return an array of potential shortcuts
 * @param {string} s
 * @param {object} config
 * @return {string[]}
 * @private
 */

function startsWithString(s, config) {
  var result = [];

  var _loop = function _loop(i) {
    var s2 = s.substring(i);
    var skipDefaultShortcuts = config && config.overrideDefaultInlineShortcuts;

    if (!skipDefaultShortcuts) {
      Object.keys(INLINE_SHORTCUTS).forEach(function (key) {
        if (key.startsWith(s2) && !result.includes(key)) {
          result.push(key);
        }
      });
    }

    var customInlineShortcuts = config && config.inlineShortcuts ? config.inlineShortcuts : null;

    if (customInlineShortcuts) {
      Object.keys(customInlineShortcuts).forEach(function (key) {
        if (key.startsWith(s2)) {
          result.push(key);
        }
      });
    }
  };

  for (var i = 0; i <= s.length - 1; i++) {
    _loop(i);
  }

  return result;
}
/**
 *
 * @param {string} mode
 * @param {object[]} siblings atoms preceding this potential shortcut
 * @param {string} shortcut
 * @private
 */


function validateShortcut(mode, siblings, shortcut) {
  if (!shortcut) return shortcut; // If it's a simple shortcut (no conditional), it's valid

  if (typeof shortcut === 'string') return shortcut;
  if (typeof shortcut.mode === 'string' && shortcut.mode !== mode) return null; // If we have no context, we assume all the shortcuts are valid

  if (!siblings) return shortcut ? shortcut.value : undefined;
  var nothing = false;
  var letter = false;
  var digit = false;
  var isFunction = false;
  var frac = false;
  var surd = false;
  var binop = false;
  var relop = false;
  var punct = false;
  var array = false;
  var openfence = false;
  var closefence = false;
  var text = false;
  var space = false;
  var sibling = siblings[siblings.length - 1];
  var index = siblings.length - 1;

  while (sibling && /msubsup|placeholder/.test(sibling.type)) {
    index -= 1;
    sibling = siblings[index];
  }

  nothing = !sibling || sibling.type === 'first'; // start of a group

  if (sibling) {
    text = sibling.mode === 'text';
    letter = !text && sibling.type === 'mord' && definitions.LETTER.test(sibling.body);
    digit = !text && sibling.type === 'mord' && /[0-9]+$/.test(sibling.body);
    isFunction = !text && sibling.isFunction;
    frac = sibling.type === 'genfrac';
    surd = sibling.type === 'surd';
    binop = sibling.type === 'mbin';
    relop = sibling.type === 'mrel';
    punct = sibling.type === 'mpunct' || sibling.type === 'minner';
    array = sibling.array;
    openfence = sibling.type === 'mopen';
    closefence = sibling.type === 'mclose' || sibling.type === 'leftright';
    space = sibling.type === 'space';
  }

  if (typeof shortcut.after !== 'undefined') {
    // If this is a conditional shortcut, consider the conditions now
    if (/nothing/.test(shortcut.after) && nothing || /letter/.test(shortcut.after) && letter || /digit/.test(shortcut.after) && digit || /function/.test(shortcut.after) && isFunction || /frac/.test(shortcut.after) && frac || /surd/.test(shortcut.after) && surd || /binop/.test(shortcut.after) && binop || /relop/.test(shortcut.after) && relop || /punct/.test(shortcut.after) && punct || /array/.test(shortcut.after) && array || /openfence/.test(shortcut.after) && openfence || /closefence/.test(shortcut.after) && closefence || /text/.test(shortcut.after) && text || /space/.test(shortcut.after) && space) {
      return shortcut.value;
    }

    return null;
  }

  return shortcut.value;
}
/**
 * This function is used to resolve inline shortcuts.
 *
 * @param {string} mode
 * @param {string} context - atoms preceding the candidate, potentially used
 * to reduce which shortcuts are applicable. If 'null', no restrictions are
 * applied.
 * @param {string} s - candidate inline shortcuts (e.g. `'pi'`)
 * @param {object} config
 * @return {string} - A replacement string matching the shortcut (e.g. `'\pi'`)
 * @memberof module:editor/shortcuts
 * @private
 */


function forString(mode, context, s, config) {
  var result = '';
  var skipDefaultShortcuts = config && config.overrideDefaultInlineShortcuts;

  if (!skipDefaultShortcuts) {
    result = validateShortcut(mode, context, INLINE_SHORTCUTS[s]);
  }

  var customInlineShortcuts = config && config.inlineShortcuts ? config.inlineShortcuts : null;
  var customResult;

  if (customInlineShortcuts) {
    customResult = validateShortcut(mode, context, customInlineShortcuts[s]);
  }

  return customResult || result;
}
/**
 * Return `p`, the platform name if `p` is the current platform, otherwise
 * return `!p`. For example, when running on Windows, `platform('mac')` returns
 * `'!mac'`.
 * The valid values for `p` are:
 * - `'mac'`
 * - `'win'`
 * - `'android`'
 * - `'ios'`
 * - `'chromeos'`
 * - `'other'` (Linux, etc...)
 * @param {string} p The platform to test against.
 * @return {string} if we are running on the candidate platform, return it.
 * Otherwise, return "!" + candidate.
 * @memberof module:editor/shortcuts
 * @private
 */


function platform(p) {
  var result = 'other';

  if (navigator && navigator.platform && navigator.userAgent) {
    if (/^(mac)/i.test(navigator.platform)) {
      result = 'mac';
    } else if (/^(win)/i.test(navigator.platform)) {
      result = 'win';
    } else if (/(android)/i.test(navigator.userAgent)) {
      result = 'android';
    } else if (/(iphone)/i.test(navigator.userAgent) || /(ipod)/i.test(navigator.userAgent) || /(ipad)/i.test(navigator.userAgent)) {
      result = 'ios';
    } else if (/\bCrOS\b/i.test(navigator.userAgent)) {
      result = 'chromeos';
    }
  }

  return result === p ? p : '!' + p;
}
/**
 * Return the selector matching the keystroke.
 *
 * @param {string} mode
 * @param {string} keystroke
 * @return {string}
 * @memberof module:editor/shortcuts
 * @private
 */


function selectorForKeystroke(mode, keystroke) {
  for (var _i = 0, _arr = [platform('mac') + ':' + mode + ':' + keystroke, platform('win') + ':' + mode + ':' + keystroke, platform('ios') + ':' + mode + ':' + keystroke, platform('android') + ':' + mode + ':' + keystroke, platform('chromeos') + ':' + mode + ':' + keystroke, platform('other') + ':' + mode + ':' + keystroke, platform('mac') + ':' + keystroke, platform('win') + ':' + keystroke, platform('ios') + ':' + keystroke, platform('android') + ':' + keystroke, platform('chromeos') + ':' + keystroke, mode + ':' + keystroke, keystroke]; _i < _arr.length; _i++) {
    var c = _arr[_i];

    if (KEYBOARD_SHORTCUTS[c]) {
      return KEYBOARD_SHORTCUTS[c];
    }
  }

  return '';
}

function commandToString(command) {
  var result = command;

  if (Array.isArray(result) && result.length > 0) {
    result = result[0] + '(' + result.slice(1).join('') + ')';
  }

  return result;
}

function forCommand(command) {
  var result = [];

  if (typeof command === 'string') {
    var candidate = REVERSE_KEYBOARD_SHORTCUTS[command];

    if (Array.isArray(candidate)) {
      result = candidate.slice();
    } else if (candidate) {
      result.push(candidate);
    }
  } // A command can be either a simple selector, or a selector
  // with arguments. Normalize it to a string


  command = commandToString(command);
  var regex = new RegExp('^' + command.replace('\\', '\\\\').replace('|', '\\|').replace('*', '\\*').replace('$', '\\$').replace('^', '\\^') + '([^*a-zA-Z]|$)');
  Object.keys(KEYBOARD_SHORTCUTS).forEach(function (shortcut) {
    if (regex.test(commandToString(KEYBOARD_SHORTCUTS[shortcut]))) {
      var m = shortcut.match(/:([^:]*)$/);
      if (m) result.push(m[1]);
    }
  });
  return stringify(result);
}
/**
 * Return a human readable representation of an array of shortcut strings
 * @param {Object<string,string>} shortcuts
 * @param {?string} join - optional, string in between each shortcut representation
 * @memberof module:editor/shortcuts
 * @private
 */


function stringify(shortcuts, join) {
  var result = '';
  if (!Array.isArray(shortcuts)) shortcuts = [shortcuts];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = shortcuts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var shortcut = _step.value;
      var keyboardShortcut = void 0;
      var platMatch = shortcut.match(/(^[^:]*):/);
      var plat = platMatch ? platMatch[1] : '';

      if (plat === platform('mac') || plat === platform('win') || plat === platform('ios') || plat === platform('android') || plat === platform('chromeos') || plat === platform('other')) {
        var m = shortcut.match(/:([^:]*)$/);
        keyboardShortcut = m ? m[1] : shortcut;
      } else if (!['mac', '!mac', 'win', '!win', 'ios', '!ios', 'android', '!android', 'chromeos', '!chromeos', 'other', '!other'].includes(plat)) {
        var _m = shortcut.match(/:([^:]*)$/);

        keyboardShortcut = _m ? _m[1] : shortcut;
      }

      if (keyboardShortcut) {
        var useSymbol = platform('mac') === 'mac' || platform('ios') === 'ios';
        var modifiers = keyboardShortcut.length > 1 ? keyboardShortcut.split('-') : [keyboardShortcut];
        var shortcutString = '';
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = modifiers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var modifier = _step2.value;

            if (!useSymbol && shortcutString.length > 0) {
              shortcutString += '<span class="ML__shortcut-join">+</span>';
            }

            if (modifier.substr(0, 3) === 'Key') {
              shortcutString += modifier.substr(3, 1);
            } else if (modifier.substr(0, 5) === 'Digit') {
              shortcutString += modifier.substr(5, 1);
            } else {
              shortcutString += {
                'Meta': useSymbol ? "\u2318" : 'command',
                'Shift': useSymbol ? "\u21E7" : 'shift',
                'Alt': useSymbol ? "\u2325" : 'alt',
                'Ctrl': useSymbol ? "\u2303" : 'control',
                '\n': useSymbol ? "\u23CE" : 'return',
                'Return': useSymbol ? "\u23CE" : 'return',
                'Enter': useSymbol ? "\u2324" : 'enter',
                'Tab': useSymbol ? "\u21E5" : 'tab',
                // 'Esc':          useSymbol ? '\u238b' : 'esc',
                'Esc': 'esc',
                'Backspace': useSymbol ? "\u232B" : 'backspace',
                'Del': useSymbol ? "\u2326" : 'del',
                'PageUp': useSymbol ? "\u21DE" : 'page up',
                'PageDown': useSymbol ? "\u21DF" : 'page down',
                'Home': useSymbol ? "\u2912" : 'home',
                'End': useSymbol ? "\u2913" : 'end',
                'Spacebar': 'space',
                'Semicolon': ';',
                'Period': '.',
                'Comma': ',',
                'Minus': '-',
                'Equal': '=',
                'Quote': '\'',
                'BracketLeft': '[',
                'BracketRight': ']',
                'Backslash': '\\',
                'IntlBackslash': '\\',
                'Backquote': '`',
                'Slash': '/',
                'NumpadMultiply': '* &#128290;',
                'NumpadDivide': '/ &#128290;',
                // Numeric keypad
                'NumpadSubtract': '- &#128290;',
                'NumpadAdd': '+ &#128290;',
                'NumpadDecimal': '. &#128290;',
                'NumpadComma': ', &#128290;',
                'Help': 'help',
                'Left': "\u21E0",
                'Up': "\u21E1",
                'Right': "\u21E2",
                'Down': "\u21E3"
              }[modifier] || modifier;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        if (result.length > 0) {
          result += join || ' or ';
        } // if (shortcutString.length === 1) {
        //     shortcutString = shortcutString + ' (U+' +
        //         ('0000' + shortcutString.codePointAt(0).toString(16)).substr(-4) +
        //         ')';
        // }


        result += shortcutString;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

/* harmony default export */ var editor_shortcuts = ({
  KEYBOARD_SHORTCUTS: KEYBOARD_SHORTCUTS,
  INLINE_SHORTCUTS: INLINE_SHORTCUTS,
  stringify: stringify,
  startsWithString: startsWithString,
  forString: forString,
  selectorForKeystroke: selectorForKeystroke,
  forCommand: forCommand
});
// CONCATENATED MODULE: ./packages/editor/editor-editableMathlist.js
function editor_editableMathlist_toConsumableArray(arr) { return editor_editableMathlist_arrayWithoutHoles(arr) || editor_editableMathlist_iterableToArray(arr) || editor_editableMathlist_nonIterableSpread(); }

function editor_editableMathlist_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function editor_editableMathlist_iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function editor_editableMathlist_arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function editor_editableMathlist_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { editor_editableMathlist_typeof = function _typeof(obj) { return typeof obj; }; } else { editor_editableMathlist_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return editor_editableMathlist_typeof(obj); }

function editor_editableMathlist_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function editor_editableMathlist_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { editor_editableMathlist_ownKeys(Object(source), true).forEach(function (key) { editor_editableMathlist_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { editor_editableMathlist_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function editor_editableMathlist_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * This module contains the definition of a data structure representing a list
 * of math atoms that can be edited. It is an in-memory representation of a
 * mathematical expression whose elements, math atoms, can be removed,
 * inserted or re-arranged. In addition, the data structure keeps track
 * of a selection, which can be either an insertion point — the selection is
 * then said to be _collapsed_ — or a range of atoms.
 *
 * See {@linkcode EditableMathlist}
 *
 * @module editor/editableMathlist
 * @private
 */







function isEmptyMathlist(mathlist) {
  return mathlist.length === 0 || mathlist.length === 1 && mathlist[0].type === "first";
}
/**
 *
 * **Note**
 * - Method names that _begin with_ an underbar `_` are private and meant
 * to be used only by the implementation of the class.
 * - Method names that _end with_ an underbar `_` are selectors. They can
 * be invoked by calling [`MathField.$perform()`]{@link MathField#$perform}.
 * They will be dispatched to an instance of `MathEditableList` as necessary.
 * Note that the selector name does not include the underbar.
 *
 * For example:
 * ```
 *    mf.$perform('selectAll');
 * ```
 *
 * @param {Object.<string, any>} config
 * @param {HTMLElement} target - A target object passed as the first argument of
 * callback functions. Typically, a MathField.
 * @property {MathAtom[]} root - The root element of the math expression.
 * @property {Object[]} path - The path to the element that is the
 * anchor for the selection.
 * @property {number} extent - Number of atoms in the selection. `0` if the
 * selection is collapsed.
 * @property {Object.<string, any>} config
 * @property {boolean} suppressChangeNotifications - If true,
 * the handlers for notification change won't be called.
 * @class
 * @global
 * @private
 * @memberof module:editor/editableMathlist
 */


function EditableMathlist(config, target) {
  this.root = mathAtom.makeRoot();
  this.path = [{
    relation: "body",
    offset: 0
  }];
  this.extent = 0;
  this.config = config ? editor_editableMathlist_objectSpread({}, config) : {};
  this.target = target;
  this.suppressChangeNotifications = false;
}

function editor_editableMathlist_clone(mathlist) {
  var result = Object.assign(new EditableMathlist(mathlist.config, mathlist.target), mathlist);
  result.path = editor_mathpath.clone(mathlist.path);
  return result;
}

EditableMathlist.prototype._announce = function (command, mathlist, atoms) {
  if (typeof this.config.onAnnounce === "function") {
    this.config.onAnnounce(this.target, command, mathlist, atoms);
  }
};
/**
 * Iterate over each atom in the expression, starting with the focus.
 *
 * Return an array of all the paths for which the callback predicate
 * returned true.
 *
 * @param {function} cb - A predicate being passed a path and the atom at this
 * path. Return true to include the designated atom in the result.
 * @param {number} dir - `+1` to iterate forward, `-1` to iterate backward.
 * @return {MathAtom[]} The atoms for which the predicate is true
 * @method EditableMathlist#filter
 * @private
 */


EditableMathlist.prototype.filter = function (cb, dir) {
  dir = dir < 0 ? -1 : +1;
  var result = [];
  var iter = new EditableMathlist();
  iter.path = editor_mathpath.clone(this.path);
  iter.extent = this.extent;
  iter.root = this.root;

  if (dir >= 0) {
    iter.collapseForward();
  } else {
    iter.collapseBackward();
    iter.move(1);
  }

  var initialAnchor = iter.anchor();

  do {
    if (cb.bind(iter)(iter.path, iter.anchor())) {
      result.push(iter.toString());
    }

    if (dir >= 0) {
      iter.next({
        iterateAll: true
      });
    } else {
      iter.previous({
        iterateAll: true
      });
    }
  } while (initialAnchor !== iter.anchor());

  return result;
};
/**
 * Enumerator
 * @param {function} cb - A callback called for each atom in the mathlist.
 * @method EditableMathlist#forEach
 * @private
 */


EditableMathlist.prototype.forEach = function (cb) {
  this.root.forEach(cb);
};
/**
 *
 * @param {function} cb - A callback called for each selected atom in the
 * mathlist.
 * @method EditableMathlist#forEachSelected
 * @private
 */


EditableMathlist.prototype.forEachSelected = function (cb, options) {
  options = options || {};
  options.recursive = typeof options.recursive !== "undefined" ? options.recursive : false;
  var siblings = this.siblings();
  var firstOffset = this.startOffset() + 1;
  var lastOffset = this.endOffset() + 1;

  if (options.recursive) {
    for (var i = firstOffset; i < lastOffset; i++) {
      if (siblings[i] && siblings[i].type !== "first") {
        siblings[i].forEach(cb);
      }
    }
  } else {
    for (var _i = firstOffset; _i < lastOffset; _i++) {
      if (siblings[_i] && siblings[_i].type !== "first") {
        cb(siblings[_i]);
      }
    }
  }
};
/**
 * Return a string representation of the selection.
 * @todo This is a bad name for this function, since it doesn't return
 * a representation of the content, which one might expect...
 *
 * @return {string}
 * @method EditableMathlist#toString
 * @private
 */


EditableMathlist.prototype.toString = function () {
  return editor_mathpath.pathToString(this.path, this.extent);
};
/**
 * When changing the selection, if the former selection is an empty list,
 * insert a placeholder if necessary. For example, if in an empty numerator.
 * @private
 */


EditableMathlist.prototype.adjustPlaceholder = function () {
  // Should we insert a placeholder?
  // Check if we're an empty list that is the child of a fraction
  var siblings = this.siblings();

  if (siblings && siblings.length <= 1) {
    var placeholder;
    var relation = this.relation();

    if (relation === "numer") {
      placeholder = "numerator";
    } else if (relation === "denom") {
      placeholder = "denominator";
    } else if (this.parent().type === "surd" && relation === "body") {
      // Surd (roots)
      placeholder = "radicand";
    } else if (this.parent().type === "overunder" && relation === "body") {
      placeholder = "base";
    } else if (relation === "underscript" || relation === "overscript") {
      placeholder = "annotation";
    }

    if (placeholder) {
      // ◌ ⬚
      var placeholderAtom = [new mathAtom.MathAtom("math", "placeholder", "⬚", this.anchorStyle())];
      Array.prototype.splice.apply(siblings, [1, 0].concat(placeholderAtom));
    }
  }
};

EditableMathlist.prototype.selectionWillChange = function () {
  if (typeof this.config.onSelectionWillChange === "function" && !this.suppressChangeNotifications) {
    this.config.onSelectionWillChange(this.target);
  }
};

EditableMathlist.prototype.selectionDidChange = function () {
  if (typeof this.config.onSelectionDidChange === "function" && !this.suppressChangeNotifications) {
    this.config.onSelectionDidChange(this.target);
  }
};

EditableMathlist.prototype.contentWillChange = function () {
  if (typeof this.config.onContentWillChange === "function" && !this.suppressChangeNotifications) {
    this.config.onContentWillChange(this.target);
  }
};

EditableMathlist.prototype.contentDidChange = function () {
  if (typeof this.config.onContentDidChange === "function" && !this.suppressChangeNotifications) {
    this.config.onContentDidChange(this.target);
  }
};
/**
 *
 * @param {string|Array} selection
 * @param {number} extent the length of the selection
 * @return {boolean} true if the path has actually changed
 * @method EditableMathlist#setPath
 * @private
 */


EditableMathlist.prototype.setPath = function (selection, extent) {
  // Convert to a path array if necessary
  if (typeof selection === "string") {
    selection = editor_mathpath.pathFromString(selection);
  } else if (Array.isArray(selection)) {
    // need to temporarily change the path of this to use 'sibling()'
    var newPath = editor_mathpath.clone(selection);
    var oldPath = this.path;
    this.path = newPath;

    if (extent === 0 && this.anchor().type === "placeholder") {
      // select the placeholder
      newPath[newPath.length - 1].offset = 0;
      extent = 1;
    }

    selection = {
      path: newPath,
      extent: extent || 0
    };
    this.path = oldPath;
  }

  var pathChanged = editor_mathpath.pathDistance(this.path, selection.path) !== 0;
  var extentChanged = selection.extent !== this.extent;

  if (pathChanged || extentChanged) {
    if (pathChanged) {
      this.adjustPlaceholder();
    }

    this.selectionWillChange();
    this.path = editor_mathpath.clone(selection.path);

    if (this.siblings().length < this.anchorOffset()) {
      // The new path is out of bounds.
      // Reset the path to something valid
      console.warn("Invalid selection: " + this.toString() + ' in "' + this.root.toLatex() + '"');
      this.path = [{
        relation: "body",
        offset: 0
      }];
      this.extent = 0;
    } else {
      this.setExtent(selection.extent);
    }

    this.selectionDidChange();
  }

  return pathChanged || extentChanged;
};

EditableMathlist.prototype.wordBoundary = function (path, dir) {
  dir = dir < 0 ? -1 : +1;
  var iter = new EditableMathlist();
  iter.path = editor_mathpath.clone(path);
  iter.root = this.root;
  var i = 0;

  while (iter.sibling(i) && iter.sibling(i).mode === "text" && definitions.LETTER_AND_DIGITS.test(iter.sibling(i).body)) {
    i += dir;
  }

  if (!iter.sibling(i)) i -= dir;
  iter.path[iter.path.length - 1].offset += i;
  return iter.path;
};
/*
 * Calculates the offset of the "next word".
 * This is inspired by the behavior of text editors on macOS, namely:
    blue   yellow
      ^-
         ^-------
 * That is:

 * (1) If starts with an alphanumerical character, find the first alphanumerical
 * character which is followed by a non-alphanumerical character
 *
 * The behavior regarding non-alphanumeric characters is less consistent.
 * Here's the behavior we use:
 *
 *   +=-()_:”     blue
 * ^---------
 *   +=-()_:”     blue
 *      ^---------
 *   +=-()_:”blue
 *      ^--------
 *
 * (2) If starts in whitespace, skip whitespace, then find first non-whitespace*
 *    followed by whitespace
 * (*) Pages actually uses the character class of the first non-whitespace
 * encountered.
 *
 * (3) If starts in a non-whitespace, non alphanumerical character, find the first
 *      whitespace
 *
 */


EditableMathlist.prototype.wordBoundaryOffset = function (offset, dir) {
  dir = dir < 0 ? -1 : +1;
  var siblings = this.siblings();
  if (!siblings[offset]) return offset;
  if (siblings[offset].mode !== "text") return offset;
  var result;

  if (definitions.LETTER_AND_DIGITS.test(siblings[offset].body)) {
    // (1) We start with an alphanumerical character
    var i = offset;
    var match;

    do {
      match = siblings[i].mode === "text" && definitions.LETTER_AND_DIGITS.test(siblings[i].body);
      i += dir;
    } while (siblings[i] && match);

    result = siblings[i] ? i - 2 * dir : i - dir;
  } else if (/\s/.test(siblings[offset].body)) {
    // (2) We start with whitespace
    // Skip whitespace
    var _i2 = offset;

    while (siblings[_i2] && siblings[_i2].mode === "text" && /\s/.test(siblings[_i2].body)) {
      _i2 += dir;
    }

    if (!siblings[_i2]) {
      // We've reached the end
      result = _i2 - dir;
    } else {
      var _match = true;

      do {
        _match = siblings[_i2].mode === "text" && !/\s/.test(siblings[_i2].body);
        _i2 += dir;
      } while (siblings[_i2] && _match);

      result = siblings[_i2] ? _i2 - 2 * dir : _i2 - dir;
    }
  } else {
    // (3)
    var _i3 = offset; // Skip non-whitespace

    while (siblings[_i3] && siblings[_i3].mode === "text" && !/\s/.test(siblings[_i3].body)) {
      _i3 += dir;
    }

    result = siblings[_i3] ? _i3 : _i3 - dir;
    var _match2 = true;

    while (siblings[_i3] && _match2) {
      _match2 = siblings[_i3].mode === "text" && /\s/.test(siblings[_i3].body);
      if (_match2) result = _i3;
      _i3 += dir;
    }

    result = siblings[_i3] ? _i3 - 2 * dir : _i3 - dir;
  }

  return result - (dir > 0 ? 0 : 1);
};
/**
 * Extend the selection between `from` and `to` nodes
 *
 * @param {string[]} from
 * @param {string[]} to
 * @param {object} options
 * - options.extendToWordBoundary
 * @method EditableMathlist#setRange
 * @return {boolean} true if the range was actually changed
 * @private
 */


EditableMathlist.prototype.setRange = function (from, to, options) {
  options = options || {}; // Measure the 'distance' between `from` and `to`

  var distance = editor_mathpath.pathDistance(from, to);

  if (distance === 0) {
    // `from` and `to` are equal.
    if (options.extendToWordBoundary) {
      from = this.wordBoundary(from, -1);
      to = this.wordBoundary(to, +1);
      return this.setRange(from, to);
    } // Set the path to a collapsed insertion point


    return this.setPath(editor_mathpath.clone(from), 0);
  }

  if (distance === 1) {
    var _extent = to[to.length - 1].offset - from[from.length - 1].offset;

    if (options.extendToWordBoundary) {
      from = this.wordBoundary(from, _extent < 0 ? +1 : -1);
      to = this.wordBoundary(to, _extent < 0 ? -1 : +1);
      return this.setRange(from, to);
    } // They're siblings, set an extent


    return this.setPath(editor_mathpath.clone(from), _extent);
  } // They're neither identical, not siblings.
  // Find the common ancestor between the nodes


  var commonAncestor = editor_mathpath.pathCommonAncestor(from, to);
  var ancestorDepth = commonAncestor.length;

  if (from.length === ancestorDepth || to.length === ancestorDepth || from[ancestorDepth].relation !== to[ancestorDepth].relation) {
    return this.setPath(commonAncestor, -1);
  }

  commonAncestor.push(from[ancestorDepth]);
  commonAncestor = editor_mathpath.clone(commonAncestor);
  var extent = to[ancestorDepth].offset - from[ancestorDepth].offset + 1;

  if (extent <= 0) {
    if (to.length > ancestorDepth + 1) {
      // axb/c+y -> select from y to x
      commonAncestor[ancestorDepth].relation = to[ancestorDepth].relation;
      commonAncestor[ancestorDepth].offset = to[ancestorDepth].offset;
      commonAncestor[commonAncestor.length - 1].offset -= 1;
      extent = -extent + 2;
    } else {
      // x+(ayb/c) -> select from y to x
      commonAncestor[ancestorDepth].relation = to[ancestorDepth].relation;
      commonAncestor[ancestorDepth].offset = to[ancestorDepth].offset;
      extent = -extent + 1;
    }
  } else if (to.length <= from.length) {
    // axb/c+y -> select from x to y
    commonAncestor[commonAncestor.length - 1].offset -= 1;
  } else if (to.length > from.length) {
    commonAncestor[ancestorDepth].offset -= 1;
  }

  return this.setPath(commonAncestor, extent);
};
/**
 * Convert an array row/col into an array index.
 * @param {MathAtom[][]} array
 * @param {object} rowCol
 * @return {number}
 * @private
 */


function arrayIndex(array, rowCol) {
  var result = 0;

  for (var i = 0; i < rowCol.row; i++) {
    for (var j = 0; j < array[i].length; j++) {
      result += 1;
    }
  }

  result += rowCol.col;
  return result;
}
/**
 * Convert an array index (scalar) to an array row/col.
 * @param {MathAtom[][]} array
 * @param {number|string} index
 * @return {object}
 * - row: number
 * - col: number
 * @private
 */


function arrayColRow(array, index) {
  if (typeof index === "string") {
    var m = index.match(/cell([0-9]*)$/);
    if (m) index = parseInt(m[1]);
  }

  var result = {
    row: 0,
    col: 0
  };

  while (index > 0) {
    result.col += 1;

    if (!array[result.row] || result.col >= array[result.row].length) {
      result.col = 0;
      result.row += 1;
    }

    index -= 1;
  }

  return result;
}
/**
 * Return the array cell corresponding to colrow or null (for example in
 * a sparse array)
 *
 * @param {MathAtom[][]} array
 * @param {number|string|object} colrow
 * @private
 */


function arrayCell(array, colrow) {
  if (editor_editableMathlist_typeof(colrow) !== "object") colrow = arrayColRow(array, colrow);
  var result;

  if (Array.isArray(array[colrow.row])) {
    result = array[colrow.row][colrow.col] || null;
  } // If the 'first' math atom is missing, insert it


  if (result && (result.length === 0 || result[0].type !== "first")) {
    result.unshift(makeFirstAtom());
  }

  return result;
}
/**
 * Total numbers of cells (include sparse cells) in the array.
 * @param {MathAtom[][]} array
 * @private
 */


function arrayCellCount(array) {
  var result = 0;
  var numRows = 0;
  var numCols = 1;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = array[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var row = _step.value;
      numRows += 1;
      if (row.length > numCols) numCols = row.length;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  result = numRows * numCols;
  return result;
}
/**
 * Join all the cells at the indicated row into a single mathlist
 * @param {MathAtom[]} row
 * @param {string} separator
 * @param {object} style
 * @return {MathAtom[]}
 * @private
 */


function arrayJoinColumns(row, separator, style) {
  if (!row) return [];
  if (!separator) separator = ",";
  var result = [];
  var sep;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = row[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var cell = _step2.value;

      if (cell && cell.length > 0 && cell[0].type === "first") {
        // Remove the 'first' atom, if present
        cell = cell.slice(1);
      }

      if (cell && cell.length > 0) {
        if (sep) {
          result.push(sep);
        } else {
          sep = new mathAtom.MathAtom("math", "mpunct", separator, style);
        }

        result = result.concat(cell);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return result;
}
/**
 * Join all the rows into a single atom list
 * @param {MathAtom} array
 * @param {strings} separators
 * @param {object} style
 * @return {MathAtom[]}
 * @private
 */


function arrayJoinRows(array, separators, style) {
  if (!separators) separators = [";", ","];
  var result = [];
  var sep;
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = array[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var row = _step3.value;

      if (sep) {
        result.push(sep);
      } else {
        sep = new mathAtom.MathAtom("math", "mpunct", separators[0], style);
      }

      result = result.concat(arrayJoinColumns(row, separators[1]));
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return result;
}
/**
 * Return the number of non-empty cells in that column
 * @param {MathAtom} array
 * @param {number} col
 * @return {number}
 * @private
 */


function arrayColumnCellCount(array, col) {
  var result = 0;
  var colRow = {
    col: col,
    row: 0
  };

  while (colRow.row < array.length) {
    var cell = arrayCell(array, colRow);

    if (cell && cell.length > 0) {
      var cellLen = cell.length;
      if (cell[0].type === "first") cellLen -= 1;

      if (cellLen > 0) {
        result += 1;
      }
    }

    colRow.row += 1;
  }

  return result;
}
/**
 * Remove the indicated column from the array
 * @param {MathAtom} array
 * @param {number} col
 * @private
 */


function arrayRemoveColumn(array, col) {
  var row = 0;

  while (row < array.length) {
    if (array[row][col]) {
      array[row].splice(col, 1);
    }

    row += 1;
  }
}
/**
 * Remove the indicated row from the array
 * @param {MathAtom} atom
 * @param {number} row
 * @private
 */


function arrayRemoveRow(array, row) {
  array.splice(row, 1);
}
/**
 * Return the first non-empty cell, row by row
 * @param {MathAtom[][]} array
 * @return {string}
 * @private
 */


function arrayFirstCellByRow(array) {
  var colRow = {
    col: 0,
    row: 0
  };

  while (colRow.row < array.length && !arrayCell(array, colRow)) {
    colRow.row += 1;
  }

  return arrayCell(array, colRow) ? "cell" + arrayIndex(array, colRow) : "";
}
/**
 * Adjust colRow to point to the next/previous available row
 * If no more rows, go to the next/previous column
 * If no more columns, return null
 * @param {MathAtom[][]} array
 * @param {object} colRow
 * @param {number} dir
 * @private
 */


function arrayAdjustRow(array, colRow, dir) {
  var result = editor_editableMathlist_objectSpread({}, colRow);

  result.row += dir;

  if (result.row < 0) {
    result.col += dir;
    result.row = array.length - 1;
    if (result.col < 0) return null;

    while (result.row >= 0 && !arrayCell(array, result)) {
      result.row -= 1;
    }

    if (result.row < 0) return null;
  } else if (result.row >= array.length) {
    result.col += dir;
    result.row = 0;

    while (result.row < array.length && !arrayCell(array, result)) {
      result.row += 1;
    }

    if (result.row > array.length - 1) return null;
  }

  return result;
}
/**
 * @param {number} ancestor distance from self to ancestor.
 * - `ancestor` = 0: self
 * - `ancestor` = 1: parent
 * - `ancestor` = 2: grand-parent
 * - etc...
 * @return {MathAtom}
 * @method EditableMathlist#ancestor
 * @private
 */


EditableMathlist.prototype.ancestor = function (ancestor) {
  // If the requested ancestor goes beyond what's available,
  // return null
  if (ancestor > this.path.length) return null; // Start with the root

  var result = this.root; // Iterate over the path segments, selecting the appropriate

  for (var i = 0; i < this.path.length - ancestor; i++) {
    var segment = this.path[i];

    if (result.array) {
      result = arrayCell(result.array, segment.relation)[segment.offset];
    } else if (!result[segment.relation]) {
      // There is no such relation... (the path got out of sync with the tree)
      return null;
    } else {
      // Make sure the 'first' atom has been inserted, otherwise
      // the segment.offset might be invalid
      if (result[segment.relation].length === 0 || result[segment.relation][0].type !== "first") {
        // debugger
        if (editor_editableMathlist_typeof(result[segment.relation]) === 'object') {
          result[segment.relation].unshift(makeFirstAtom());
        }
      }

      var offset = Math.min(segment.offset, result[segment.relation].length - 1);
      result = result[segment.relation][offset];
    }
  }

  return result;
};
/**
 * The atom where the selection starts. When the selection is extended
 * the anchor remains fixed. The anchor could be either before or
 * after the focus.
 *
 * @method EditableMathlist#anchor
 * @private
 */


EditableMathlist.prototype.anchor = function () {
  if (this.parent().array) {
    return arrayCell(this.parent().array, this.relation())[this.anchorOffset()];
  }

  var siblings = this.siblings();
  return siblings[Math.min(siblings.length - 1, this.anchorOffset())];
};

EditableMathlist.prototype.parent = function () {
  return this.ancestor(1);
};

EditableMathlist.prototype.relation = function () {
  return this.path.length > 0 ? this.path[this.path.length - 1].relation : "";
};

EditableMathlist.prototype.anchorOffset = function () {
  return this.path.length > 0 ? this.path[this.path.length - 1].offset : 0;
};

EditableMathlist.prototype.focusOffset = function () {
  return this.path.length > 0 ? this.path[this.path.length - 1].offset + this.extent : 0;
};
/**
 * Offset of the first atom included in the selection
 * i.e. `=1` => selection starts with and includes first atom
 * With expression _x=_ and atoms :
 * - 0: _<first>_
 * - 1: _x_
 * - 2: _=_
 *
 * - if caret is before _x_:  `start` = 0, `end` = 0
 * - if caret is after _x_:   `start` = 1, `end` = 1
 * - if _x_ is selected:      `start` = 1, `end` = 2
 * - if _x=_ is selected:   `start` = 1, `end` = 3
 * @method EditableMathlist#startOffset
 * @private
 */


EditableMathlist.prototype.startOffset = function () {
  return Math.min(this.focusOffset(), this.anchorOffset());
};
/**
 * Offset of the first atom not included in the selection
 * i.e. max value of `siblings.length`
 * `endOffset - startOffset = extent`
 * @method EditableMathlist#endOffset
 * @private
 */


EditableMathlist.prototype.endOffset = function () {
  return Math.max(this.focusOffset(), this.anchorOffset());
};
/**
 * If necessary, insert a `first` atom in the sibling list.
 * If there's already a `first` atom, do nothing.
 * The `first` atom is used as a 'placeholder' to hold the blinking caret when
 * the caret is positioned at the very beginning of the mathlist.
 * @method EditableMathlist#insertFirstAtom
 * @private
 */


EditableMathlist.prototype.insertFirstAtom = function () {
  this.siblings();
};
/**
 * @return {MathAtom[]} array of children of the parent
 * @method EditableMathlist#siblings
 * @private
 */


EditableMathlist.prototype.siblings = function () {
  if (this.path.length === 0) return [];
  var siblings;

  if (this.parent().array) {
    siblings = arrayCell(this.parent().array, this.relation());
  } else {
    siblings = this.parent()[this.relation()] || [];
    if (typeof siblings === "string") siblings = [];
  } // If the 'first' math atom is missing, insert it


  if (siblings.length === 0 || siblings[0].type !== "first") {
    siblings.unshift(makeFirstAtom());
  }

  return siblings;
};
/**
 * Sibling, relative to `anchor`
 * `sibling(0)` = start of selection
 * `sibling(-1)` = sibling immediately left of start offset
 * @return {MathAtom}
 * @method EditableMathlist#sibling
 * @private
 */


EditableMathlist.prototype.sibling = function (offset) {
  return this.siblings()[this.startOffset() + offset];
};
/**
 * @return {boolean} True if the selection is an insertion point.
 * @method EditableMathlist#isCollapsed
 * @private
 */


EditableMathlist.prototype.isCollapsed = function () {
  return this.extent === 0;
};
/**
 * @param {number} extent
 * @method EditableMathlist#setExtent
 * @private
 */


EditableMathlist.prototype.setExtent = function (extent) {
  this.extent = extent;
};

EditableMathlist.prototype.collapseForward = function () {
  if (this.extent === 0) return false;
  this.setSelection(this.endOffset());
  return true;
};

EditableMathlist.prototype.collapseBackward = function () {
  if (this.extent === 0) return false;
  this.setSelection(this.startOffset());
  return true;
};
/**
 * Return true if the atom could be a part of a number
 * i.e. "-12354.568"
 * @param {object} atom
 * @private
 */


function isNumber(atom) {
  if (!atom) return false;
  return atom.type === "mord" && /[0-9.]/.test(atom.body) || atom.type === "mpunct" && atom.body === ",";
}
/**
 * Select all the atoms in the current group, that is all the siblings.
 * When the selection is in a numerator, the group is the numerator. When
 * the selection is a superscript or subscript, the group is the supsub.
 * When the selection is in a text zone, the "group" is a word.
 * @method EditableMathlist#selectGroup_
 * @private
 */


EditableMathlist.prototype.selectGroup_ = function () {
  var siblings = this.siblings();

  if (this.anchorMode() === "text") {
    var start = this.startOffset();
    var end = this.endOffset(); //

    while (siblings[start] && siblings[start].mode === "text" && definitions.LETTER_AND_DIGITS.test(siblings[start].body)) {
      start -= 1;
    }

    while (siblings[end] && siblings[end].mode === "text" && definitions.LETTER_AND_DIGITS.test(siblings[end].body)) {
      end += 1;
    }

    end -= 1;

    if (start >= end) {
      // No word found. Select a single character
      this.setSelection(this.endOffset() - 1, 1);
      return;
    }

    this.setSelection(start, end - start);
  } else {
    // In a math zone, select all the sibling nodes
    if (this.sibling(0).type === "mord" && /[0-9,.]/.test(this.sibling(0).body)) {
      // In a number, select all the digits
      var _start = this.startOffset();

      var _end = this.endOffset(); //


      while (isNumber(siblings[_start])) {
        _start -= 1;
      }

      while (isNumber(siblings[_end])) {
        _end += 1;
      }

      _end -= 1;
      this.setSelection(_start, _end - _start);
    } else {
      this.setSelection(0, "end");
    }
  }
};
/**
 * Select all the atoms in the mathfield.
 * @method EditableMathlist#selectAll_
 * @private
 */


EditableMathlist.prototype.selectAll_ = function () {
  this.path = [{
    relation: "body",
    offset: 0
  }];
  this.setSelection(0, "end");
};
/**
 * Delete everything in the field
 * @method EditableMathlist#deleteAll_
 * @private
 */


EditableMathlist.prototype.deleteAll_ = function () {
  this.selectAll_();
  this.delete_();
};
/**
 *
 * @param {MathAtom} atom
 * @param {MathAtom} target
 * @return {boolean} True if  `atom` is the target, or if one of the
 * children of `atom` contains the target
 * @function atomContains
 * @private
 */


function atomContains(atom, target) {
  if (!atom) return false;

  if (Array.isArray(atom)) {
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = atom[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var child = _step4.value;
        if (atomContains(child, target)) return true;
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  } else {
    if (atom === target) return true;
    if (["body", "numer", "denom", "index", "subscript", "superscript", "underscript", "overscript"].some(function (value) {
      return value === target || atomContains(atom[value], target);
    })) return true;

    if (atom.array) {
      for (var i = arrayCellCount(atom.array); i >= 0; i--) {
        if (atomContains(arrayCell(atom.array, i), target)) {
          return true;
        }
      }
    }
  }

  return false;
}
/**
 * @param {MathAtom} atom
 * @return {boolean} True if `atom` is within the selection range
 * @todo: poorly named, since this is specific to the selection, not the math
 * field
 * @method EditableMathlist#contains
 * @private
 */


EditableMathlist.prototype.contains = function (atom) {
  if (this.isCollapsed()) return false;
  var siblings = this.siblings();
  var firstOffset = this.startOffset();
  var lastOffset = this.endOffset();

  for (var i = firstOffset; i < lastOffset; i++) {
    if (atomContains(siblings[i], atom)) return true;
  }

  return false;
};
/**
 * @return {MathAtom[]} The currently selected atoms, or `null` if the
 * selection is collapsed
 * @method EditableMathlist#getSelectedAtoms
 * @private
 */


EditableMathlist.prototype.getSelectedAtoms = function () {
  if (this.isCollapsed()) return null;
  var result = [];
  var siblings = this.siblings();
  var firstOffset = this.startOffset() + 1;
  var lastOffset = this.endOffset() + 1;

  for (var i = firstOffset; i < lastOffset; i++) {
    if (siblings[i] && siblings[i].type !== "first") result.push(siblings[i]);
  }

  return result;
};
/**
 * Return a `{start:, end:}` for the offsets of the command around the insertion
 * point, or null.
 * - `start` is the first atom which is of type `command`
 * - `end` is after the last atom of type `command`
 * @return {object}
 * @method EditableMathlist#commandOffsets
 * @private
 */


EditableMathlist.prototype.commandOffsets = function () {
  var siblings = this.siblings();
  if (siblings.length <= 1) return null;
  var start = Math.min(this.endOffset(), siblings.length - 1); // let start = Math.max(0, this.endOffset());

  if (siblings[start].type !== "command") return null;

  while (start > 0 && siblings[start].type === "command") {
    start -= 1;
  }

  var end = this.startOffset() + 1;

  while (end <= siblings.length - 1 && siblings[end].type === "command") {
    end += 1;
  }

  if (end > start) {
    return {
      start: start + 1,
      end: end
    };
  }

  return null;
};
/**
 * @return {string}
 * @method EditableMathlist#extractCommandStringAroundInsertionPoint
 * @private
 */


EditableMathlist.prototype.extractCommandStringAroundInsertionPoint = function (beforeInsertionPointOnly) {
  var result = "";
  var command = this.commandOffsets();

  if (command) {
    var end = beforeInsertionPointOnly ? this.anchorOffset() + 1 : command.end;
    var siblings = this.siblings();

    for (var i = command.start; i < end; i++) {
      // All these atoms are 'command' atom with a body that's
      // a single character
      result += siblings[i].body || "";
    }
  }

  return result;
};
/**
 * @param {boolean} value If true, decorate the command string around the
 * insertion point with an error indicator (red dotted underline). If false,
 * remove it.
 * @method EditableMathlist#decorateCommandStringAroundInsertionPoint
 * @private
 */


EditableMathlist.prototype.decorateCommandStringAroundInsertionPoint = function (value) {
  var command = this.commandOffsets();

  if (command) {
    var siblings = this.siblings();

    for (var i = command.start; i < command.end; i++) {
      siblings[i].error = value;
    }
  }
};
/**
 * @return {string}
 * @method EditableMathlist#commitCommandStringBeforeInsertionPoint
 * @private
 */


EditableMathlist.prototype.commitCommandStringBeforeInsertionPoint = function () {
  var command = this.commandOffsets();

  if (command) {
    var siblings = this.siblings();
    var anchorOffset = this.anchorOffset() + 1;

    for (var i = command.start; i < anchorOffset; i++) {
      if (siblings[i]) {
        siblings[i].suggestion = false;
      }
    }
  }
};

EditableMathlist.prototype.spliceCommandStringAroundInsertionPoint = function (mathlist) {
  var command = this.commandOffsets();

  if (command) {
    // Dispatch notifications
    this.contentWillChange();

    if (!mathlist) {
      this.siblings().splice(command.start, command.end - command.start);
      this.setSelection(command.start - 1, 0);
    } else {
      Array.prototype.splice.apply(this.siblings(), [command.start, command.end - command.start].concat(mathlist));
      var newPlaceholders = [];
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = mathlist[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var atom = _step5.value;
          newPlaceholders = newPlaceholders.concat(atom.filter(function (atom) {
            return atom.type === "placeholder";
          }));
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      this.setExtent(0); // Set the anchor offset to a reasonable value that can be used by
      // leap(). In particular, the current offset value may be invalid
      // if the length of the mathlist is shorter than the name of the command

      this.path[this.path.length - 1].offset = command.start - 1;

      if (newPlaceholders.length === 0 || !this.leap(+1, false)) {
        this.setSelection(command.start + mathlist.length - 1);
      }
    } // Dispatch notifications


    this.contentDidChange();
  }
};

function removeCommandStringFromAtom(atom) {
  if (!atom) return;

  if (Array.isArray(atom)) {
    for (var i = atom.length - 1; i >= 0; i--) {
      if (atom[i].type === "command") {
        atom.splice(i, 1); // i += 1;
      } else {
        removeCommandStringFromAtom(atom[i]);
      }
    }

    return;
  }

  removeCommandStringFromAtom(atom.body);
  removeCommandStringFromAtom(atom.superscript);
  removeCommandStringFromAtom(atom.subscript);
  removeCommandStringFromAtom(atom.underscript);
  removeCommandStringFromAtom(atom.overscript);
  removeCommandStringFromAtom(atom.numer);
  removeCommandStringFromAtom(atom.denom);
  removeCommandStringFromAtom(atom.index);

  if (atom.array) {
    for (var j = arrayCellCount(atom.array); j >= 0; j--) {
      removeCommandStringFromAtom(arrayCell(atom.array, j));
    }
  }
}

EditableMathlist.prototype.removeCommandString = function () {
  this.contentWillChange();
  var contentWasChanging = this.suppressChangeNotifications;
  this.suppressChangeNotifications = true;
  removeCommandStringFromAtom(this.root.body);
  this.suppressChangeNotifications = contentWasChanging;
  this.contentDidChange();
};
/**
 * @return {string}
 * @method EditableMathlist#extractArgBeforeInsertionPoint
 * @private
 */


EditableMathlist.prototype.extractArgBeforeInsertionPoint = function () {
  var siblings = this.siblings();
  if (siblings.length <= 1) return [];
  var result = [];
  var i = this.startOffset();

  if (siblings[i].mode === "text") {
    while (i >= 1 && siblings[i].mode === "text") {
      result.unshift(siblings[i]);
      i--;
    }
  } else {
    while (i >= 1 && /^(mord|surd|msubsup|leftright|mop)$/.test(siblings[i].type)) {
      result.unshift(siblings[i]);
      i--;
    }
  }

  return result;
}; // 3 + 4(sin(x) > 3 + 4[sin(x)]/[ __ ]
// Add a frac inside a partial leftright: remove leftright
// When smartfence, add paren at end of expr
// a+3x=1 insert after + => paren before =

/**
 * @param {number} offset
 * - &gt;0: index of the child in the group where the selection will start from
 * - <0: index counting from the end of the group
 * @param {number|string} [extent=0] Number of items in the selection:
 * - 0: collapsed selection, single insertion point
 * - &gt;0: selection extending _after_ the offset
 * - <0: selection extending _before_ the offset
 * - `'end'`: selection extending to the end of the group
 * - `'start'`: selection extending to the beginning of the group
 * @param {string} relation e.g. `'body'`, `'superscript'`, etc...
 * @return {boolean} False if the relation is invalid (no such children)
 * @method EditableMathlist#setSelection
 * @private
 */


EditableMathlist.prototype.setSelection = function (offset, extent, relation) {
  offset = offset || 0;
  extent = extent || 0; // If no relation ("children", "superscript", etc...) is specified
  // keep the current relation

  var oldRelation = this.path[this.path.length - 1].relation;
  if (!relation) relation = oldRelation; // If the relation is invalid, exit and return false

  var parent = this.parent();
  if (!parent && relation !== "body") return false;
  var arrayRelation = relation.startsWith("cell");
  if (!arrayRelation && !parent[relation] || arrayRelation && !parent.array) return false;
  var relationChanged = relation !== oldRelation; // Temporarily set the path to the potentially new relation to get the
  // right siblings

  this.path[this.path.length - 1].relation = relation; // Invoking siblings() will have the side-effect of adding the 'first'
  // atom if necessary
  // ... and we want the siblings with the potentially new relation...

  var siblings = this.siblings();
  var siblingsCount = siblings.length; // Restore the relation

  this.path[this.path.length - 1].relation = oldRelation;
  var oldExtent = this.extent;

  if (extent === "end") {
    extent = siblingsCount - offset - 1;
  } else if (extent === "start") {
    extent = -offset;
  }

  this.setExtent(extent);
  var extentChanged = this.extent !== oldExtent;
  this.setExtent(oldExtent); // Calculate the new offset, and make sure it is in range
  // (setSelection can be called with an offset that greater than
  // the number of children, for example when doing an up from a
  // numerator to a smaller denominator, e.g. "1/(x+1)".

  if (offset < 0) {
    offset = siblingsCount + offset;
  }

  offset = Math.max(0, Math.min(offset, siblingsCount - 1));
  var oldOffset = this.path[this.path.length - 1].offset;
  var offsetChanged = oldOffset !== offset;

  if (relationChanged || offsetChanged || extentChanged) {
    if (relationChanged) {
      this.adjustPlaceholder();
    }

    this.selectionWillChange();
    this.path[this.path.length - 1].relation = relation;
    this.path[this.path.length - 1].offset = offset;
    this.setExtent(extent);
    this.selectionDidChange();
  }

  return true;
};
/**
 * Move the anchor to the next permissible atom
 * @method EditableMathlist#next
 * @private
 */


EditableMathlist.prototype.next = function (options) {
  options = options || {};
  var NEXT_RELATION = {
    body: "numer",
    numer: "denom",
    denom: "index",
    index: "overscript",
    overscript: "underscript",
    underscript: "subscript",
    subscript: "superscript"
  };

  if (this.anchorOffset() === this.siblings().length - 1) {
    this.adjustPlaceholder(); // We've reached the end of this list.
    // Is there another list to consider?

    var relation = NEXT_RELATION[this.relation()];
    var parent = this.parent();

    while (relation && !parent[relation]) {
      relation = NEXT_RELATION[relation];
    } // We found a new relation/set of siblings...


    if (relation) {
      this.setSelection(0, 0, relation);
      return;
    } // No more siblings, check if we have a sibling cell in an array


    if (this.parent().array) {
      var maxCellCount = arrayCellCount(this.parent().array);
      var cellIndex = parseInt(this.relation().match(/cell([0-9]*)$/)[1]) + 1;

      while (cellIndex < maxCellCount) {
        var cell = arrayCell(this.parent().array, cellIndex); // Some cells could be null (sparse array), so skip them

        if (cell && this.setSelection(0, 0, "cell" + cellIndex)) {
          this.selectionDidChange();
          return;
        }

        cellIndex += 1;
      }
    } // No more siblings, go up to the parent.


    if (this.path.length === 1) {
      // Invoke handler and perform default if they return true.
      if (this.suppressChangeNotifications || !this.config.onMoveOutOf || this.config.onMoveOutOf(this, "forward")) {
        // We're at the root, so loop back
        this.path[0].offset = 0;
      }
    } else {
      // We've reached the end of the siblings. If we're a group
      // with skipBoundary, when exiting, move one past the next atom
      var skip = !options.iterateAll && this.parent().skipBoundary;
      this.path.pop();

      if (skip) {
        this.next(options);
      }
    }

    this.selectionDidChange();
    return;
  } // Still some siblings to go through. Move on to the next one.


  this.setSelection(this.anchorOffset() + 1);
  var anchor = this.anchor(); // Dive into its components, if the new anchor is a compound atom,
  // and allows capture of the selection by its sub-elements

  if (anchor && !anchor.captureSelection) {
    var _relation;

    if (anchor.array) {
      // Find the first non-empty cell in this array
      var _cellIndex = 0;
      _relation = "";

      var _maxCellCount = arrayCellCount(anchor.array);

      while (!_relation && _cellIndex < _maxCellCount) {
        // Some cells could be null (sparse array), so skip them
        if (arrayCell(anchor.array, _cellIndex)) {
          _relation = "cell" + _cellIndex.toString();
        }

        _cellIndex += 1;
      }

      console.assert(_relation);
      this.path.push({
        relation: _relation,
        offset: 0
      });
      this.setSelection(0, 0, _relation);
      return;
    }

    _relation = "body";

    while (_relation) {
      if (Array.isArray(anchor[_relation])) {
        this.path.push({
          relation: _relation,
          offset: 0
        });
        this.insertFirstAtom();
        if (!options.iterateAll && anchor.skipBoundary) this.next(options);
        return;
      }

      _relation = NEXT_RELATION[_relation];
    }
  }
};

EditableMathlist.prototype.previous = function (options) {
  options = options || {};
  var PREVIOUS_RELATION = {
    numer: "body",
    denom: "numer",
    index: "denom",
    overscript: "index",
    underscript: "overscript",
    subscript: "underscript",
    superscript: "subscript"
  };

  if (!options.iterateAll && this.anchorOffset() === 1 && this.parent() && this.parent().skipBoundary) {
    this.setSelection(0);
  }

  if (this.anchorOffset() < 1) {
    // We've reached the first of these siblings.
    // Is there another set of siblings to consider?
    var relation = PREVIOUS_RELATION[this.relation()];

    while (relation && !this.setSelection(-1, 0, relation)) {
      relation = PREVIOUS_RELATION[relation];
    } // Ignore the body of the subsup scaffolding and of
    // 'mop' atoms (for example, \sum): their body is not editable.


    var parentType = this.parent() ? this.parent().type : "none";

    if (relation === "body" && (parentType === "msubsup" || parentType === "mop")) {
      relation = null;
    } // We found a new relation/set of siblings...


    if (relation) return;
    this.adjustPlaceholder();
    this.selectionWillChange(); // No more siblings, check if we have a sibling cell in an array

    if (this.relation().startsWith("cell")) {
      var cellIndex = parseInt(this.relation().match(/cell([0-9]*)$/)[1]) - 1;

      while (cellIndex >= 0) {
        var cell = arrayCell(this.parent().array, cellIndex);

        if (cell && this.setSelection(-1, 0, "cell" + cellIndex)) {
          this.selectionDidChange();
          return;
        }

        cellIndex -= 1;
      }
    } // No more siblings, go up to the parent.


    if (this.path.length === 1) {
      // Invoke handler and perform default if they return true.
      if (this.suppressChangeNotifications || !this.config.onMoveOutOf || this.config.onMoveOutOf.bind(this)(-1)) {
        // We're at the root, so loop back
        this.path[0].offset = this.root.body.length - 1;
      }
    } else {
      this.path.pop();
      this.setSelection(this.anchorOffset() - 1);
    }

    this.selectionDidChange();
    return;
  } // If the new anchor is a compound atom, dive into its components


  var anchor = this.anchor(); // Only dive in if the atom allows capture of the selection by
  // its sub-elements

  if (!anchor.captureSelection) {
    var _relation2;

    if (anchor.array) {
      _relation2 = "";
      var maxCellCount = arrayCellCount(anchor.array);

      var _cellIndex2 = maxCellCount - 1;

      while (!_relation2 && _cellIndex2 < maxCellCount) {
        // Some cells could be null (sparse array), so skip them
        if (arrayCell(anchor.array, _cellIndex2)) {
          _relation2 = "cell" + _cellIndex2.toString();
        }

        _cellIndex2 -= 1;
      }

      _cellIndex2 += 1;
      console.assert(_relation2);
      this.path.push({
        relation: _relation2,
        offset: arrayCell(anchor.array, _cellIndex2).length - 1
      });
      this.setSelection(-1, 0, _relation2);
      return;
    }

    _relation2 = "superscript";

    while (_relation2) {
      if (Array.isArray(anchor[_relation2])) {
        this.path.push({
          relation: _relation2,
          offset: anchor[_relation2].length - 1
        });
        this.setSelection(-1, 0, _relation2);
        return;
      }

      _relation2 = PREVIOUS_RELATION[_relation2];
    }
  } // There wasn't a component to navigate to, so...
  // Still some siblings to go through: move on to the previous one.


  this.setSelection(this.anchorOffset() - 1);

  if (!options.iterateAll && this.sibling(0) && this.sibling(0).skipBoundary) {
    this.previous(options);
  }
};

EditableMathlist.prototype.move = function (dist, options) {
  options = options || {
    extend: false
  };
  var extend = options.extend || false;
  this.removeSuggestion();

  if (extend) {
    this.extend(dist, options);
  } else {
    var oldPath = editor_editableMathlist_clone(this); // const previousParent = this.parent();
    // const previousRelation = this.relation();
    // const previousSiblings = this.siblings();

    if (dist > 0) {
      if (this.collapseForward()) dist--;

      while (dist > 0) {
        this.next();
        dist--;
      }
    } else if (dist < 0) {
      if (this.collapseBackward()) dist++;

      while (dist !== 0) {
        this.previous();
        dist++;
      }
    } // ** @todo: can't do that without updating the path.
    // If the siblings list we left was empty, remove the relation
    // if (previousSiblings.length <= 1) {
    //     if (['superscript', 'subscript', 'index'].includes(previousRelation)) {
    //         previousParent[previousRelation] = null;
    //     }
    // }


    this._announce("move", oldPath);
  }
};

EditableMathlist.prototype.up = function (options) {
  options = options || {
    extend: false
  };
  var extend = options.extend || false;
  this.collapseBackward();
  var relation = this.relation();

  if (relation === "denom") {
    if (extend) {
      this.selectionWillChange();
      this.path.pop();
      this.path[this.path.length - 1].offset -= 1;
      this.setExtent(1);
      this.selectionDidChange();
    } else {
      this.setSelection(this.anchorOffset(), 0, "numer");
    }

    this._announce("moveUp");
  } else if (this.parent().array) {
    // In an array
    var colRow = arrayColRow(this.parent().array, relation);
    colRow = arrayAdjustRow(this.parent().array, colRow, -1);

    if (colRow && arrayCell(colRow)) {
      this.path[this.path.length - 1].relation = "cell" + arrayIndex(this.parent().array, colRow);
      this.setSelection(this.anchorOffset());

      this._announce("moveUp");
    } else {
      this.move(-1, options);
    }
  } else {
    this._announce("line");
  }
};

EditableMathlist.prototype.down = function (options) {
  options = options || {
    extend: false
  };
  var extend = options.extend || false;
  this.collapseForward();
  var relation = this.relation();

  if (relation === "numer") {
    if (extend) {
      this.selectionWillChange();
      this.path.pop();
      this.path[this.path.length - 1].offset -= 1;
      this.setExtent(1);
      this.selectionDidChange();
    } else {
      this.setSelection(this.anchorOffset(), 0, "denom");
    }

    this._announce("moveDown");
  } else if (this.parent().array) {
    // In an array
    var colRow = arrayColRow(this.parent().array, relation);
    colRow = arrayAdjustRow(this.parent().array, colRow, +1);

    if (colRow && arrayCell(colRow)) {
      this.path[this.path.length - 1].relation = "cell" + arrayIndex(this.parent().array, colRow);
      this.setSelection(this.anchorOffset());

      this._announce("moveDown");
    } else {
      this.move(+1, options);
    }
  } else {
    this._announce("line");
  }
};
/**
 * Change the range of the selection
 *
 * @param {number} dist - The change (positive or negative) to the extent
 * of the selection. The anchor point does not move.
 * @method EditableMathlist#extend
 * @private
 */


EditableMathlist.prototype.extend = function (dist) {
  var offset = this.path[this.path.length - 1].offset;
  var extent = 0;
  var oldPath = editor_editableMathlist_clone(this);
  extent = this.extent + dist;
  var newFocusOffset = offset + extent;

  if (newFocusOffset < 0 && extent !== 0) {
    // We're trying to extend beyond the first element.
    // Go up to the parent.
    if (this.path.length > 1) {
      this.selectionWillChange();
      this.path.pop(); // this.path[this.path.length - 1].offset -= 1;

      this.setExtent(-1);
      this.selectionDidChange();

      this._announce("move", oldPath);

      return;
    } // @todo exit left extend
    // If we're at the very beginning, nothing to do.


    offset = this.path[this.path.length - 1].offset;
    extent = this.extent;
  } else if (newFocusOffset >= this.siblings().length) {
    // We're trying to extend beyond the last element.
    // Go up to the parent
    if (this.path.length > 1) {
      this.selectionWillChange();
      this.path.pop();
      this.path[this.path.length - 1].offset -= 1;
      this.setExtent(1);
      this.selectionDidChange();

      this._announce("move", oldPath);

      return;
    } // @todo exit right extend


    if (this.isCollapsed()) {
      offset -= 1;
    }

    extent -= 1;
  }

  this.setSelection(offset, extent);

  this._announce("move", oldPath);
};
/**
 * Move the selection focus to the next/previous point of interest.
 * A point of interest is an atom of a different type (mbin, mord, etc...)
 * than the current focus.
 * If `extend` is true, the selection will be extended. Otherwise, it is
 * collapsed, then moved.
 * @param {number} dir +1 to skip forward, -1 to skip back
 * @param {Object.<string, any>} options
 * @method EditableMathlist#skip
 * @private
 */


EditableMathlist.prototype.skip = function (dir, options) {
  options = options || {
    extend: false
  };
  var extend = options.extend || false;
  dir = dir < 0 ? -1 : +1;
  var oldPath = editor_editableMathlist_clone(this);
  var siblings = this.siblings();
  var focus = this.focusOffset();
  var offset = focus + dir;
  if (extend) offset = Math.min(Math.max(0, offset), siblings.length - 1);

  if (offset < 0 || offset >= siblings.length) {
    // If we've reached the end, just move out of the list
    this.move(dir, options);
    return;
  }

  if (siblings[offset] && siblings[offset].mode === "text") {
    // We're in a text zone, skip word by word
    offset = this.wordBoundaryOffset(offset, dir);

    if (offset < 0 && !extend) {
      this.setSelection(0);
      return;
    }

    if (offset > siblings.length) {
      this.setSelection(siblings.length - 1);
      this.move(dir, options);
      return;
    }
  } else {
    var type = siblings[offset] ? siblings[offset].type : "";

    if (type === "mopen" && dir > 0 || type === "mclose" && dir < 0) {
      // We're right before (or after) an opening (or closing)
      // fence. Skip to the balanced element (in level, but not necessarily in
      // fence symbol).
      var level = type === "mopen" ? 1 : -1;
      offset += dir > 0 ? 1 : -1;

      while (offset >= 0 && offset < siblings.length && level !== 0) {
        if (siblings[offset].type === "mopen") {
          level += 1;
        } else if (siblings[offset].type === "mclose") {
          level -= 1;
        }

        offset += dir;
      }

      if (level !== 0) {
        // We did not find a balanced element. Just move a little.
        offset = focus + dir;
      }

      if (dir > 0) offset = offset - 1;
    } else {
      while (siblings[offset] && siblings[offset].mode === "math" && siblings[offset].type === type) {
        offset += dir;
      }

      offset -= dir > 0 ? 1 : 0;
    }
  }

  if (extend) {
    var anchor = this.anchorOffset();
    this.setSelection(anchor, offset - anchor);
  } else {
    this.setSelection(offset);
  }

  this._announce("move", oldPath);
};
/**
 * Move to the next/previous expression boundary
 * @method EditableMathlist#jump
 * @private
 */


EditableMathlist.prototype.jump = function (dir, options) {
  options = options || {
    extend: false
  };
  var extend = options.extend || false;
  dir = dir < 0 ? -1 : +1;
  var siblings = this.siblings();
  var focus = this.focusOffset();
  if (dir > 0) focus = Math.min(focus + 1, siblings.length - 1);
  var offset = dir < 0 ? 0 : siblings.length - 1;

  if (extend) {
    this.extend(offset - focus);
  } else {
    this.move(offset - focus);
  }
};

EditableMathlist.prototype.jumpToMathFieldBoundary = function (dir, options) {
  options = options || {
    extend: false
  };
  var extend = options.extend || false;
  dir = dir || +1;
  dir = dir < 0 ? -1 : +1;
  var oldPath = editor_editableMathlist_clone(this);
  var path = [{
    relation: "body",
    offset: this.path[0].offset
  }];
  var extent;

  if (!extend) {
    // Change the anchor to the end/start of the root expression
    path[0].offset = dir < 0 ? 0 : this.root.body.length - 1;
    extent = 0;
  } else {
    // Don't change the anchor, but update the extent
    if (dir < 0) {
      if (path[0].offset > 0) {
        extent = -path[0].offset;
      } else {// @todo exit left extend
      }
    } else {
      if (path[0].offset < this.siblings().length - 1) {
        extent = this.siblings().length - 1 - path[0].offset;
      } else {// @todo exit right extend
      }
    }
  }

  this.setPath(path, extent);

  this._announce("move", oldPath);
};
/**
 * Move to the next/previous placeholder or empty child list.
 * @return {boolean} False if no placeholder found and did not move
 * @method EditableMathlist#leap
 * @private
 */


EditableMathlist.prototype.leap = function (dir, callHandler) {
  var _this = this;

  dir = dir || +1;
  dir = dir < 0 ? -1 : +1;
  callHandler = callHandler || true;
  var savedSuppressChangeNotifications = this.suppressChangeNotifications;
  this.suppressChangeNotifications = true;
  var oldPath = editor_editableMathlist_clone(this);
  var oldExtent = this.extent;
  this.move(dir);

  if (this.anchor().type === "placeholder") {
    // If we're already at a placeholder, move by one more (the placeholder
    // is right after the insertion point)
    this.move(dir);
  } // Candidate placeholders are atom of type 'placeholder'
  // or empty children list (except for the root: if the root is empty,
  // it is not a valid placeholder)


  var placeholders = this.filter(function (path, atom) {
    return atom.type === "placeholder" || path.length > 1 && _this.siblings().length === 1;
  }, dir); // If no placeholders were found, call handler or move to the next focusable
  // element in the document

  if (placeholders.length === 0) {
    // Restore the selection
    this.setPath(oldPath, oldExtent);

    if (callHandler) {
      if (this.config.onTabOutOf) {
        this.config.onTabOutOf(this.target, dir > 0 ? "forward" : "backward");
      } else if (document.activeElement) {
        var focussableElements = "a[href]:not([disabled]),\n                    button:not([disabled]),\n                    textarea:not([disabled]),\n                    input[type=text]:not([disabled]),\n                    select:not([disabled]),\n                    [contentEditable=\"true\"],\n                    [tabindex]:not([disabled]):not([tabindex=\"-1\"])"; // Get all the potentially focusable elements
        // and exclude (1) those that are invisible (width and height = 0)
        // (2) not the active element
        // (3) the ancestor of the active element

        var focussable = Array.prototype.filter.call(document.querySelectorAll(focussableElements), function (element) {
          return (element.offsetWidth > 0 || element.offsetHeight > 0) && !element.contains(document.activeElement) || element === document.activeElement;
        });
        var index = focussable.indexOf(document.activeElement) + dir;
        if (index < 0) index = focussable.length - 1;
        if (index >= focussable.length) index = 0;
        focussable[index].focus();
      }
    }

    this.suppressChangeNotifications = savedSuppressChangeNotifications;
    return false;
  } // Set the selection to the next placeholder


  this.selectionWillChange();
  this.setPath(placeholders[0]);
  if (this.anchor().type === "placeholder") this.setExtent(-1);

  this._announce("move", oldPath);

  this.selectionDidChange();
  this.suppressChangeNotifications = savedSuppressChangeNotifications;
  return true;
};

EditableMathlist.prototype.anchorMode = function () {
  var anchor = this.isCollapsed() ? this.anchor() : this.sibling(1);
  var result;

  if (anchor) {
    if (anchor.type === "commandliteral" || anchor.type === "command") return "command";
    result = anchor.mode;
  }

  var i = 1;
  var ancestor = this.ancestor(i);

  while (!result && ancestor) {
    if (ancestor) result = ancestor.mode;
    i += 1;
    ancestor = this.ancestor(i);
  }

  return result;
};

EditableMathlist.prototype.anchorStyle = function () {
  var anchor = this.isCollapsed() ? this.anchor() : this.sibling(1);
  var result;

  if (anchor && anchor.type !== "first") {
    if (anchor.type === "commandliteral" || anchor.type === "command") return {};
    result = {
      color: anchor.color,
      backgroundColor: anchor.backgroundColor,
      fontFamily: anchor.fontFamily,
      fontShape: anchor.fontShape,
      fontSeries: anchor.fontSeries,
      fontSize: anchor.fontSize
    };
  }

  var i = 1;
  var ancestor = this.ancestor(i);

  while (!result && ancestor) {
    if (ancestor) {
      result = {
        color: ancestor.color,
        backgroundColor: ancestor.backgroundColor,
        fontFamily: ancestor.fontFamily,
        fontShape: ancestor.fontShape,
        fontSeries: ancestor.fontSeries,
        fontSize: ancestor.fontSize
      };
    }

    i += 1;
    ancestor = this.ancestor(i);
  }

  return result;
};

function removeParen(list) {
  if (!list) return undefined;

  if (list.length === 1 && list[0].type === "leftright" && list[0].leftDelim === "(") {
    list = list[0].body;
  }

  return list;
}
/*
 * If it's a fraction with a parenthesized numerator or denominator
 * remove the parentheses
 * */


EditableMathlist.prototype.simplifyParen = function (atoms) {
  var _this2 = this;

  if (atoms && this.config.removeExtraneousParentheses) {
    for (var i = 0; atoms[i]; i++) {
      if (atoms[i].type === "leftright" && atoms[i].leftDelim === "(") {
        if (Array.isArray(atoms[i].body)) {
          var genFracCount = 0;
          var genFracIndex = 0;
          var nonGenFracCount = 0;

          for (var j = 0; atoms[i].body[j]; j++) {
            if (atoms[i].body[j].type === "genfrac") {
              genFracCount++;
              genFracIndex = j;
            }

            if (atoms[i].body[j].type !== "first") nonGenFracCount++;
          }

          if (nonGenFracCount === 0 && genFracCount === 1) {
            // This is a single frac inside a leftright: remove the leftright
            atoms[i] = atoms[i].body[genFracIndex];
          }
        }
      }
    }

    atoms.forEach(function (atom) {
      if (atom.type === "genfrac") {
        _this2.simplifyParen(atom.numer);

        _this2.simplifyParen(atom.denom);

        atom.numer = removeParen(atom.numer);
        atom.denom = removeParen(atom.denom);
      }

      if (atom.superscript) {
        _this2.simplifyParen(atom.superscript);

        atom.superscript = removeParen(atom.superscript);
      }

      if (atom.subscript) {
        _this2.simplifyParen(atom.subscript);

        atom.subscript = removeParen(atom.subscript);
      }

      if (atom.underscript) {
        _this2.simplifyParen(atom.underscript);

        atom.underscript = removeParen(atom.underscript);
      }

      if (atom.overscript) {
        _this2.simplifyParen(atom.overscript);

        atom.overscript = removeParen(atom.overscript);
      }

      if (atom.index) {
        _this2.simplifyParen(atom.index);

        atom.index = removeParen(atom.index);
      }

      if (atom.type === "surd") {
        _this2.simplifyParen(atom.body);

        atom.body = removeParen(atom.body);
      } else if (atom.body && Array.isArray(atom.body)) {
        _this2.simplifyParen(atom.body);
      }

      if (atom.array) {
        for (var _i4 = arrayCellCount(atom.array); _i4 >= 0; _i4--) {
          _this2.simplifyParen(arrayCell(atom.array, _i4));
        }
      }
    });
  }
};

function applyStyleToUnstyledAtoms(atom, style) {
  if (!atom || !style) return;

  if (Array.isArray(atom)) {
    // Apply styling options to each atom
    atom.forEach(function (x) {
      return applyStyleToUnstyledAtoms(x, style);
    });
  } else if (editor_editableMathlist_typeof(atom) === "object") {
    if (!atom.color && !atom.backgroundColor && !atom.fontFamily && !atom.fontShape && !atom.fontSeries && !atom.fontSize) {
      atom.applyStyle(style);
      applyStyleToUnstyledAtoms(atom.body, style);
      applyStyleToUnstyledAtoms(atom.numer, style);
      applyStyleToUnstyledAtoms(atom.denom, style);
      applyStyleToUnstyledAtoms(atom.index, style);
      applyStyleToUnstyledAtoms(atom.overscript, style);
      applyStyleToUnstyledAtoms(atom.underscript, style);
      applyStyleToUnstyledAtoms(atom.subscript, style);
      applyStyleToUnstyledAtoms(atom.superscript, style);
    }
  }
}
/**
 * @param {string} s
 * @param {Object.<string, any>} options
 * @param {"replaceSelection"|"replaceAll"|"insertBefore"|"insertAfter"} options.insertionMode -
 *    * 'replaceSelection' (default)
 *    * 'replaceAll'
 *    * 'insertBefore'
 *    * 'insertAfter'
 *
 * @param {"placeholder"|"after"|"before"} options.selectionMode - Describes where the selection
 * will be after the insertion:
 *    * `'placeholder'`: the selection will be the first available placeholder
 * in the item that has been inserted) (default)
 *    * `'after'`: the selection will be an insertion point after the item that
 * has been inserted),
 *    * `'before'`: the selection will be an insertion point before
 * the item that has been inserted) or 'item' (the item that was inserted will
 * be selected).
 *
 * @param {string} options.placeholder - The placeholder string, if necessary
 *
 * @param {"auto"|"latex"} options.format - The format of the string `s`:
 *    * `'auto'`: the string is interpreted as a latex fragment or command or
 * ASCIIMath (default)
 *    * `'latex'`: the string is interpreted strictly as a latex fragment
 *
 * @param {boolean} options.smartFence - If true, promote plain fences, e.g. `(`,
 * as `\left...\right` or `\mleft...\mright`
 *
 * @param {boolean} options.suppressChangeNotifications - If true, the
 * handlers for the contentWillChange, contentDidChange, selectionWillChange and
 * selectionDidChange notifications will not be invoked. Default `false`.
 *
 * @param {object} options.style
 *
 * @method EditableMathlist#insert
 * @private
 */


EditableMathlist.prototype.insert = function (s, options) {
  options = options || {}; // Try to insert a smart fence.

  if (options.smartFence && this._insertSmartFence(s, options.style)) {
    return;
  }

  var suppressChangeNotifications = this.suppressChangeNotifications;

  if (options.suppressChangeNotifications) {
    this.suppressChangeNotifications = true;
  } // Dispatch notifications


  this.contentWillChange();
  var contentWasChanging = this.suppressChangeNotifications;
  this.suppressChangeNotifications = true;
  if (!options.insertionMode) options.insertionMode = "replaceSelection";
  if (!options.selectionMode) options.selectionMode = "placeholder";
  if (!options.format) options.format = "auto";
  options.macros = options.macros || this.config.macros;
  var anchorMode = options.mode || this.anchorMode();
  var mathlist; // Save the content of the selection, if any

  var args = [this.getSelectedAtoms()]; // If a placeholder was specified, use it

  if (options.placeholder !== undefined) {
    args["?"] = options.placeholder;
  } // Delete any selected items


  if (options.insertionMode === "replaceSelection" && !this.isCollapsed()) {
    this.delete_();
  } else if (options.insertionMode === "replaceAll") {
    // Remove all the children of root, save for the 'first' atom
    this.root.body.splice(1);
    this.path = [{
      relation: "body",
      offset: 0
    }];
    this.extent = 0;
  } else if (options.insertionMode === "insertBefore") {
    this.collapseBackward();
  } else if (options.insertionMode === "insertAfter") {
    this.collapseForward();
  } // Delete any placeholders before or after the insertion point


  var siblings = this.siblings();
  var firstOffset = this.startOffset();

  if (firstOffset + 1 < siblings.length && siblings[firstOffset + 1] && siblings[firstOffset + 1].type === "placeholder") {
    this.delete_(1);
  } else if (firstOffset > 0 && siblings[firstOffset] && siblings[firstOffset].type === "placeholder") {
    this.delete_(-1);
  }

  if (anchorMode === "math" && options.format === "ASCIIMath") {
    s = parseMathString(s, editor_editableMathlist_objectSpread({}, this.config, {
      format: "ASCIIMath"
    }));
    mathlist = parser.parseTokens(lexer.tokenize(s), "math", null, options.macros, false); // Simplify result.

    this.simplifyParen(mathlist);
  } else if (anchorMode !== "text" && options.format === "auto") {
    if (anchorMode === "command") {
      // Short-circuit the tokenizer and parser if in command mode
      mathlist = [];
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = s[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var c = _step6.value;

          if (definitions.COMMAND_MODE_CHARACTERS.test(c)) {
            mathlist.push(new mathAtom.MathAtom("command", "command", c));
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    } else if (s === "\x1B") {
      // Insert an 'esc' character triggers the command mode
      mathlist = [new mathAtom.MathAtom("command", "command", "\\")];
    } else {
      s = parseMathString(s, this.config);

      if (args[0]) {
        // There was a selection, we'll use it for #@
        s = s.replace(/(^|[^\\])#@/g, "$1#0");
      } else if (/(^|[^\\])#@/.test(s)) {
        // If we're inserting a latex fragment that includes a #@ argument
        // substitute the preceding `mord` or text mode atoms for it.
        s = s.replace(/(^|[^\\])#@/g, "$1#0");
        args[0] = this.extractArgBeforeInsertionPoint(); // Delete the implicit argument

        this._deleteAtoms(-args[0].length); // If the implicit argument was empty, remove it from the args list.


        if (Array.isArray(args[0]) && args[0].length === 0) args[0] = undefined;
      } else {
        // No selection, no 'mord' before. Let's make '#@' a placeholder.
        s = s.replace(/(^|[^\\])#@/g, "$1#?");
      }

      mathlist = parser.parseTokens(lexer.tokenize(s), anchorMode, args, options.macros, options.smartFence); // Simplify result.

      this.simplifyParen(mathlist);
    }
  } else if (options.format === "latex") {
    mathlist = parser.parseTokens(lexer.tokenize(s), anchorMode, args, options.macros, options.smartFence);
  } else if (anchorMode === "text" || options.format === "text") {
    // Map special TeX characters to alternatives
    // Must do this one first, since other replacements include backslash
    s = s.replace(/\\/g, "\\textbackslash ");
    s = s.replace(/#/g, "\\#");
    s = s.replace(/\$/g, "\\$");
    s = s.replace(/%/g, "\\%");
    s = s.replace(/&/g, "\\&"); // s = s.replace(/:/g, '\\colon');     // text colon?
    // s = s.replace(/\[/g, '\\lbrack');
    // s = s.replace(/]/g, '\\rbrack');

    s = s.replace(/_/g, "\\_");
    s = s.replace(/{/g, "\\textbraceleft ");
    s = s.replace(/}/g, "\\textbraceright ");
    s = s.replace(/\^/g, "\\textasciicircum ");
    s = s.replace(/~/g, "\\textasciitilde ");
    s = s.replace(/£/g, "\\textsterling ");
    mathlist = parser.parseTokens(lexer.tokenize(s), "text", args, options.macros, false);
  } // Some atoms may already have a style (for example if there was an
  // argument, i.e. the selection, that this was applied to).
  // So, don't apply style to atoms that are already styled, but *do*
  // apply it to newly created atoms that have no style yet.


  applyStyleToUnstyledAtoms(mathlist, options.style); // Insert the mathlist at the position following the anchor

  var parent = this.parent();

  if (this.config.removeExtraneousParentheses && parent && parent.type === "leftright" && parent.leftDelim === "(" && isEmptyMathlist(parent.body) && mathlist && mathlist.length === 1 && mathlist[0].type === "genfrac") {
    // If the insert is fraction inside a lefright, remove the leftright
    this.path.pop();
    this.siblings()[this.anchorOffset()] = mathlist[0];
  } else {
    Array.prototype.splice.apply(this.siblings(), [this.anchorOffset() + 1, 0].concat(mathlist));
  } // If needed, make sure there's a first atom in the siblings list


  this.insertFirstAtom(); // Prepare to dispatch notifications
  // (for selection changes, then content change)

  this.suppressChangeNotifications = contentWasChanging; // Update the anchor's location

  if (options.selectionMode === "placeholder") {
    // Move to the next placeholder
    var newPlaceholders = [];
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
      for (var _iterator7 = mathlist[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
        var atom = _step7.value;
        newPlaceholders = newPlaceholders.concat(atom.filter(function (atom) {
          return atom.type === "placeholder";
        }));
      }
    } catch (err) {
      _didIteratorError7 = true;
      _iteratorError7 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
          _iterator7.return();
        }
      } finally {
        if (_didIteratorError7) {
          throw _iteratorError7;
        }
      }
    }

    if (newPlaceholders.length === 0 || !this.leap(+1, false)) {
      // No placeholder found, move to right after what we just inserted
      this.setSelection(this.anchorOffset() + mathlist.length); // this.path[this.path.length - 1].offset += mathlist.length;
    } else {
      this._announce("move"); // should have placeholder selected

    }
  } else if (options.selectionMode === "before") {// Do nothing: don't change the anchorOffset.
  } else if (options.selectionMode === "after") {
    this.setSelection(this.anchorOffset() + mathlist.length);
  } else if (options.selectionMode === "item") {
    this.setSelection(this.anchorOffset(), mathlist.length);
  }

  this.contentDidChange();
  this.suppressChangeNotifications = suppressChangeNotifications;
};
/**
 * Insert a smart fence '(', '{', '[', etc...
 * If not handled (because `fence` wasn't a fence), return false.
 * @param {string} fence
 * @param {object} style
 * @return {boolean}
 * @private
 */


EditableMathlist.prototype._insertSmartFence = function (fence, style) {
  var parent = this.parent(); // We're inserting a middle punctuation, for example as in {...|...}

  if (parent.type === "leftright" && parent.leftDelim !== "|") {
    if (/\||\\vert|\\Vert|\\mvert|\\mid/.test(fence)) {
      this.insert("\\,\\middle" + fence + "\\, ", {
        mode: "math",
        format: "latex",
        style: style
      });
      return true;
    }
  }

  if (fence === "{" || fence === "\\{") fence = "\\lbrace";
  if (fence === "}" || fence === "\\}") fence = "\\rbrace";
  if (fence === "[" || fence === "\\[") fence = "\\lbrack";
  if (fence === "]" || fence === "\\]") fence = "\\rbrack";
  var rDelim = definitions.RIGHT_DELIM[fence];

  if (rDelim && !(parent.type === "leftright" && parent.leftDelim === "|")) {
    // We have a valid open fence as input
    var s = "";
    var collapsed = this.isCollapsed() || this.anchor().type === "placeholder";

    if (this.sibling(0).isFunction) {
      // We're before a function (e.g. `\sin`, or 'f'):  this is an
      // argument list.
      // Use `\mleft...\mright'.
      s = "\\mleft" + fence + "\\mright";
    } else {
      s = "\\left" + fence + "\\right";
    }

    s += collapsed ? "?" : rDelim;
    var content = [];

    if (collapsed) {
      // content = this.siblings().slice(this.anchorOffset() + 1);
      content = this.siblings().splice(this.anchorOffset() + 1, this.siblings().length);
    }

    this.insert(s, {
      mode: "math",
      format: "latex",
      style: style
    });

    if (collapsed) {
      // Move everything that was after the anchor into the leftright
      this.sibling(0).body = content;
      this.move(-1);
    }

    return true;
  } // We did not have a valid open fence. Maybe it's a close fence?


  var lDelim;
  Object.keys(definitions.RIGHT_DELIM).forEach(function (delim) {
    if (fence === definitions.RIGHT_DELIM[delim]) lDelim = delim;
  });

  if (lDelim) {
    // We found the matching open fence, so it was a valid close fence.
    // Note that `lDelim` may not match `fence`. That's OK.
    // If we're the last atom inside a 'leftright',
    // update the parent
    if (parent && parent.type === "leftright" && this.endOffset() === this.siblings().length - 1) {
      this.contentWillChange();
      parent.rightDelim = fence;
      this.move(+1);
      this.contentDidChange();
      return true;
    } // If we have a 'leftright' sibling to our left
    // with an indeterminate right fence,
    // move what's between us and the 'leftright' inside the leftright


    var siblings = this.siblings();
    var i;

    for (i = this.endOffset(); i >= 0; i--) {
      if (siblings[i].type === "leftright" && siblings[i].rightDelim === "?") break;
    }

    if (i >= 0) {
      this.contentWillChange();
      siblings[i].rightDelim = fence;
      siblings[i].body = siblings[i].body.concat(siblings.slice(i + 1, this.endOffset() + 1));
      siblings.splice(i + 1, this.endOffset() - i);
      this.setSelection(i);
      this.contentDidChange();
      return true;
    } // If we're inside a 'leftright', but not the last atom,
    // and the 'leftright' right delim is indeterminate
    // adjust the body (put everything after the insertion point outside)


    if (parent && parent.type === "leftright" && parent.rightDelim === "?") {
      this.contentWillChange();
      parent.rightDelim = fence;
      var tail = siblings.slice(this.endOffset() + 1);
      siblings.splice(this.endOffset() + 1);
      this.path.pop();
      Array.prototype.splice.apply(this.siblings(), [this.endOffset() + 1, 0].concat(tail));
      this.contentDidChange();
      return true;
    } // Is our grand-parent a 'leftright'?
    // If `\left(\frac{1}{x|}\right?` with the caret at `|`
    // go up to the 'leftright' and apply it there instead


    var grandparent = this.ancestor(2);

    if (grandparent && grandparent.type === "leftright" && grandparent.rightDelim === "?" && this.endOffset() === siblings.length - 1) {
      this.move(1);
      return this._insertSmartFence(fence, style);
    } // Meh... We couldn't find a matching open fence. Just insert the
    // closing fence as a regular character


    this.insert(fence, {
      mode: "math",
      format: "latex",
      style: style
    });
    return true;
  }

  return false;
};

EditableMathlist.prototype.positionInsertionPointAfterCommitedCommand = function () {
  var siblings = this.siblings();
  var command = this.commandOffsets();
  var i = command.start;

  while (i < command.end && !siblings[i].suggestion) {
    i++;
  }

  this.setSelection(i - 1);
};

EditableMathlist.prototype.removeSuggestion = function () {
  var siblings = this.siblings(); // Remove all `suggestion` atoms

  for (var i = siblings.length - 1; i >= 0; i--) {
    if (siblings[i].suggestion) {
      siblings.splice(i, 1);
    }
  }
};

EditableMathlist.prototype.insertSuggestion = function (s, l) {
  this.removeSuggestion();
  var mathlist = []; // Make a mathlist from the string argument with the `suggestion` property set

  var subs = s.substr(l);
  var _iteratorNormalCompletion8 = true;
  var _didIteratorError8 = false;
  var _iteratorError8 = undefined;

  try {
    for (var _iterator8 = subs[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
      var c = _step8.value;
      var atom = new mathAtom.MathAtom("command", "command", c);
      atom.suggestion = true;
      mathlist.push(atom);
    } // Splice in the mathlist after the insertion point, but don't change the
    // insertion point

  } catch (err) {
    _didIteratorError8 = true;
    _iteratorError8 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
        _iterator8.return();
      }
    } finally {
      if (_didIteratorError8) {
        throw _iteratorError8;
      }
    }
  }

  Array.prototype.splice.apply(this.siblings(), [this.anchorOffset() + 1, 0].concat(mathlist));
};
/**
 * Delete sibling atoms
 * @method EditableMathlist#_deleteAtoms
 * @private
 */


EditableMathlist.prototype._deleteAtoms = function (count) {
  if (count > 0) {
    this.siblings().splice(this.anchorOffset() + 1, count);
  } else {
    this.siblings().splice(this.anchorOffset() + count + 1, -count);
    this.setSelection(this.anchorOffset() + count);
  }
};
/**
 * Delete multiple characters
 * @method EditableMathlist#delete
 * @private
 */


EditableMathlist.prototype.delete = function (count) {
  count = count || 0;

  if (count === 0) {
    this.delete_(0);
  } else if (count > 0) {
    while (count > 0) {
      this.delete_(+1);
      count--;
    }
  } else {
    while (count < 0) {
      this.delete_(-1);
      count++;
    }
  }
};
/**
 * @param {number} dir If the selection is not collapsed, and dir is
 * negative, delete backwards, starting with the anchor atom.
 * That is, delete(-1) will delete only the anchor atom.
 * If dir = 0, delete only if the selection is not collapsed
 * @method EditableMathlist#delete_
 * @instance
 * @private
 */


EditableMathlist.prototype.delete_ = function (dir) {
  // Dispatch notifications
  this.contentWillChange();
  this.selectionWillChange();
  var contentWasChanging = this.suppressChangeNotifications;
  this.suppressChangeNotifications = true;
  dir = dir || 0;
  dir = dir < 0 ? -1 : dir > 0 ? +1 : dir;
  this.removeSuggestion();

  if (this.parent().array) {
    if (dir < 0 && this.startOffset() === 0) {
      var array = this.parent().array;

      if (arrayFirstCellByRow(array) === this.relation()) {
        var _this$siblings;

        // (1) First cell:
        // delete array, replace it with linearized content
        var atoms = arrayJoinRows(array);
        this.path.pop();

        (_this$siblings = this.siblings()).splice.apply(_this$siblings, [this.anchorOffset(), 1].concat(editor_editableMathlist_toConsumableArray(atoms)));

        this.setSelection(this.anchorOffset() - 1, atoms.length);
      } else {
        var colRow = arrayColRow(array, this.relation());

        if (colRow.col === 0) {
          // (2) First (non-empty) column (but not first row):
          // Move to the end of the last cell of the previous row
          var dest = arrayAdjustRow(array, colRow, -1);
          dest.col = array[dest.row].length - 1;
          this.path[this.path.length - 1].relation = "cell" + arrayIndex(array, dest);
          var destLength = array[dest.row][dest.col].length; // (2.1) Linearize it and merge it with last cell of previous row
          // (note that atoms could be empty if there are no non-empty
          // cells left in the row)

          var _atoms = arrayJoinColumns(array[colRow.row]);

          array[dest.row][dest.col] = array[dest.row][dest.col].concat(_atoms);
          this.setSelection(destLength - 1, _atoms.length); // (2.2) Remove row

          arrayRemoveRow(array, colRow.row);
        } else {
          // (3) Non-first column
          // (3.1) If column is empty, remove it
          if (arrayColumnCellCount(array, colRow.col) === 0) {
            arrayRemoveColumn(array, colRow.col);
            colRow.col -= 1;
            this.path[this.path.length - 1].relation = "cell" + arrayIndex(array, colRow);
            var destCell = array[colRow.row][colRow.col];
            this.setSelection(destCell.length - 1, 0);
          } // (3.2) merge cell with cell in previous column

        }
      } // Dispatch notifications


      this.suppressChangeNotifications = contentWasChanging;
      this.selectionDidChange();
      this.contentDidChange();
      return;
    }
  }

  var siblings = this.siblings();

  if (!this.isCollapsed()) {
    // There is a selection extent. Delete all the atoms within it.
    var first = this.startOffset() + 1;
    var last = this.endOffset() + 1;

    this._announce("deleted", null, siblings.slice(first, last));

    siblings.splice(first, last - first); // Adjust the anchor

    this.setSelection(first - 1);
  } else {
    var anchorOffset = this.anchorOffset();

    if (dir < 0) {
      if (anchorOffset !== 0) {
        // We're not at the begining of the sibling list.
        // If the previous sibling is a compound (fractions, group),
        // just move into it, otherwise delete it
        var sibling = this.sibling(0);

        if (sibling.type === "leftright") {
          sibling.rightDelim = "?";
          this.move(-1);
        } else if (!sibling.captureSelection && /^(group|array|genfrac|surd|leftright|overlap|overunder|box|mathstyle|sizing)$/.test(sibling.type)) {
          this.move(-1);
        } else {
          this._announce("delete", null, siblings.slice(anchorOffset, anchorOffset + 1));

          siblings.splice(anchorOffset, 1);
          this.setSelection(anchorOffset - 1);
        }
      } else {
        // We're at the beginning of the sibling list.
        // Delete what comes before
        var relation = this.relation();

        if (relation === "superscript" || relation === "subscript") {
          var supsub = this.parent()[relation].filter(function (atom) {
            return atom.type !== "placeholder" && atom.type !== "first";
          });
          this.parent()[relation] = null;
          this.path.pop();
          Array.prototype.splice.apply(this.siblings(), [this.anchorOffset(), 0].concat(supsub));
          this.setSelection(this.anchorOffset() - 1);

          this._announce("deleted: " + relation);
        } else if (relation === "denom") {
          // Fraction denominator
          var numer = this.parent().numer.filter(function (atom) {
            return atom.type !== "placeholder" && atom.type !== "first";
          });
          var denom = this.parent().denom.filter(function (atom) {
            return atom.type !== "placeholder" && atom.type !== "first";
          });
          this.path.pop();
          Array.prototype.splice.apply(this.siblings(), [this.anchorOffset(), 1].concat(denom));
          Array.prototype.splice.apply(this.siblings(), [this.anchorOffset(), 0].concat(numer));
          this.setSelection(this.anchorOffset() + numer.length - 1);

          this._announce("deleted: denominator");
        } else if (relation === "body") {
          var body = this.siblings().filter(function (atom) {
            return atom.type !== "placeholder";
          });

          if (this.path.length > 1) {
            body.shift(); // Remove the 'first' atom

            this.path.pop();
            Array.prototype.splice.apply(this.siblings(), [this.anchorOffset(), 1].concat(body));
            this.setSelection(this.anchorOffset() - 1);

            this._announce("deleted: root");
          }
        } else {
          this.move(-1);
          this.delete(-1);
        }
      }
    } else if (dir > 0) {
      if (anchorOffset !== siblings.length - 1) {
        if (/^(group|array|genfrac|surd|leftright|overlap|overunder|box|mathstyle|sizing)$/.test(this.sibling(1).type)) {
          this.move(+1);
        } else {
          this._announce("delete", null, siblings.slice(anchorOffset + 1, anchorOffset + 2));

          siblings.splice(anchorOffset + 1, 1);
        }
      } else {
        // We're at the end of the sibling list, delete what comes next
        var _relation3 = this.relation();

        if (_relation3 === "numer") {
          var _numer = this.parent().numer.filter(function (atom) {
            return atom.type !== "placeholder" && atom.type !== "first";
          });

          var _denom = this.parent().denom.filter(function (atom) {
            return atom.type !== "placeholder" && atom.type !== "first";
          });

          this.path.pop();
          Array.prototype.splice.apply(this.siblings(), [this.anchorOffset(), 1].concat(_denom));
          Array.prototype.splice.apply(this.siblings(), [this.anchorOffset(), 0].concat(_numer));
          this.setSelection(this.anchorOffset() + _numer.length - 1);

          this._announce("deleted: numerator");
        } else {
          this.move(1);
          this.delete(-1);
        }
      }
    }
  } // Dispatch notifications


  this.suppressChangeNotifications = contentWasChanging;
  this.selectionDidChange();
  this.contentDidChange();
};
/**
 * @method EditableMathlist#moveToNextPlaceholder_
 * @private
 */


EditableMathlist.prototype.moveToNextPlaceholder_ = function () {
  this.leap(+1);
};
/**
 * @method EditableMathlist#moveToPreviousPlaceholder_
 * @private
 */


EditableMathlist.prototype.moveToPreviousPlaceholder_ = function () {
  this.leap(-1);
};
/**
 * @method EditableMathlist#moveToNextChar_
 * @private
 */


EditableMathlist.prototype.moveToNextChar_ = function () {
  this.move(+1);
};
/**
 * @method EditableMathlist#moveToPreviousChar_
 * @private
 */


EditableMathlist.prototype.moveToPreviousChar_ = function () {
  this.move(-1);
};
/**
 * @method EditableMathlist#moveUp_
 * @private
 */


EditableMathlist.prototype.moveUp_ = function () {
  this.up();
};
/**
 * @method EditableMathlist#moveDown_
 * @private
 */


EditableMathlist.prototype.moveDown_ = function () {
  this.down();
};
/**
 * @method EditableMathlist#moveToNextWord_
 * @private
 */


EditableMathlist.prototype.moveToNextWord_ = function () {
  this.skip(+1);
};
/**
 * @method EditableMathlist#moveToPreviousWord_
 * @private
 */


EditableMathlist.prototype.moveToPreviousWord_ = function () {
  this.skip(-1);
};
/**
 * @method EditableMathlist#moveToGroupStart_
 * @private
 */


EditableMathlist.prototype.moveToGroupStart_ = function () {
  this.setSelection(0);
};
/**
 * @method EditableMathlist#moveToGroupEnd_
 * @private
 */


EditableMathlist.prototype.moveToGroupEnd_ = function () {
  this.setSelection(-1);
};
/**
 * @method EditableMathlist#moveToMathFieldStart_
 * @private
 */


EditableMathlist.prototype.moveToMathFieldStart_ = function () {
  this.jumpToMathFieldBoundary(-1);
};
/**
 * @method EditableMathlist#moveToMathFieldEnd_
 * @private
 */


EditableMathlist.prototype.moveToMathFieldEnd_ = function () {
  this.jumpToMathFieldBoundary(+1);
};
/**
 * @method EditableMathlist#deleteNextChar_
 * @private
 */


EditableMathlist.prototype.deleteNextChar_ = function () {
  this.delete_(+1);
};
/**
 * @method EditableMathlist#deletePreviousChar_
 * @private
 */


EditableMathlist.prototype.deletePreviousChar_ = function () {
  this.delete_(-1);
};
/**
 * @method EditableMathlist#deleteNextWord_
 * @private
 */


EditableMathlist.prototype.deleteNextWord_ = function () {
  this.extendToNextBoundary();
  this.delete_();
};
/**
 * @method EditableMathlist#deletePreviousWord_
 * @private
 */


EditableMathlist.prototype.deletePreviousWord_ = function () {
  this.extendToPreviousBoundary();
  this.delete_();
};
/**
 * @method EditableMathlist#deleteToGroupStart_
 * @private
 */


EditableMathlist.prototype.deleteToGroupStart_ = function () {
  this.extendToGroupStart();
  this.delete_();
};
/**
 * @method EditableMathlist#deleteToGroupEnd_
 * @private
 */


EditableMathlist.prototype.deleteToGroupEnd_ = function () {
  this.extendToMathFieldStart();
  this.delete_();
};
/**
 * @method EditableMathlist#deleteToMathFieldEnd_
 * @private
 * @private
 */


EditableMathlist.prototype.deleteToMathFieldEnd_ = function () {
  this.extendToMathFieldEnd();
  this.delete_();
};
/**
 * Swap the characters to either side of the insertion point and advances
 * the insertion point past both of them. Does nothing to a selected range of
 * text.
 * @method EditableMathlist#transpose_
 * @private
 */


EditableMathlist.prototype.transpose_ = function () {// @todo
};
/**
 * @method EditableMathlist#extendToNextChar_
 * @private
 */


EditableMathlist.prototype.extendToNextChar_ = function () {
  this.extend(+1);
};
/**
 * @method EditableMathlist#extendToPreviousChar_
 * @private
 */


EditableMathlist.prototype.extendToPreviousChar_ = function () {
  this.extend(-1);
};
/**
 * @method EditableMathlist#extendToNextWord_
 * @private
 */


EditableMathlist.prototype.extendToNextWord_ = function () {
  this.skip(+1, {
    extend: true
  });
};
/**
 * @method EditableMathlist#extendToPreviousWord_
 * @private
 */


EditableMathlist.prototype.extendToPreviousWord_ = function () {
  this.skip(-1, {
    extend: true
  });
};
/**
 * If the selection is in a denominator, the selection will be extended to
 * include the numerator.
 * @method EditableMathlist#extendUp_
 * @private
 */


EditableMathlist.prototype.extendUp_ = function () {
  this.up({
    extend: true
  });
};
/**
 * If the selection is in a numerator, the selection will be extended to
 * include the denominator.
 * @method EditableMathlist#extendDown_
 * @private
 */


EditableMathlist.prototype.extendDown_ = function () {
  this.down({
    extend: true
  });
};
/**
 * Extend the selection until the next boundary is reached. A boundary
 * is defined by an atom of a different type (mbin, mord, etc...)
 * than the current focus. For example, in "1234+x=y", if the focus is between
 * "1" and "2", invoking `extendToNextBoundary_` would extend the selection
 * to "234".
 * @method EditableMathlist#extendToNextBoundary_
 * @private
 */


EditableMathlist.prototype.extendToNextBoundary_ = function () {
  this.skip(+1, {
    extend: true
  });
};
/**
 * Extend the selection until the previous boundary is reached. A boundary
 * is defined by an atom of a different type (mbin, mord, etc...)
 * than the current focus. For example, in "1+23456", if the focus is between
 * "5" and "6", invoking `extendToPreviousBoundary` would extend the selection
 * to "2345".
 * @method EditableMathlist#extendToPreviousBoundary_
 * @private
 */


EditableMathlist.prototype.extendToPreviousBoundary_ = function () {
  this.skip(-1, {
    extend: true
  });
};
/**
 * @method EditableMathlist#extendToGroupStart_
 * @private
 */


EditableMathlist.prototype.extendToGroupStart_ = function () {
  this.setExtent(-this.anchorOffset());
};
/**
 * @method EditableMathlist#extendToGroupEnd_
 * @private
 */


EditableMathlist.prototype.extendToGroupEnd_ = function () {
  this.setExtent(this.siblings().length - this.anchorOffset());
};
/**
 * @method EditableMathlist#extendToMathFieldStart_
 * @private
 */


EditableMathlist.prototype.extendToMathFieldStart_ = function () {
  this.jumpToMathFieldBoundary(-1, {
    extend: true
  });
};
/**
 * Extend the selection to the end of the mathfield.
 * @method EditableMathlist#extendToMathFieldEnd_
 * @private
 */


EditableMathlist.prototype.extendToMathFieldEnd_ = function () {
  this.jumpToMathFieldBoundary(+1, {
    extend: true
  });
};
/**
 * Switch the cursor to the superscript and select it. If there is no subscript
 * yet, create one.
 * @method EditableMathlist#moveToSuperscript_
 * @private
 */


EditableMathlist.prototype.moveToSuperscript_ = function () {
  this.collapseForward();

  if (!this.anchor().superscript) {
    if (this.anchor().subscript) {
      this.anchor().superscript = [makeFirstAtom()];
    } else {
      var sibling = this.sibling(1);

      if (sibling && sibling.superscript) {
        this.path[this.path.length - 1].offset += 1; //            this.setSelection(this.anchorOffset() + 1);
      } else if (sibling && sibling.subscript) {
        this.path[this.path.length - 1].offset += 1; //            this.setSelection(this.anchorOffset() + 1);

        this.anchor().superscript = [makeFirstAtom()];
      } else {
        if (this.anchor().limits !== "limits") {
          this.siblings().splice(this.anchorOffset() + 1, 0, new mathAtom.MathAtom(this.parent().anchorMode, "msubsup", "\u200B", this.anchorStyle()));
          this.path[this.path.length - 1].offset += 1; //            this.setSelection(this.anchorOffset() + 1);
        }

        this.anchor().superscript = [makeFirstAtom()];
      }
    }
  }

  this.path.push({
    relation: "superscript",
    offset: 0
  });
  this.selectGroup_();
};
/**
 * Switch the cursor to the subscript and select it. If there is no subscript
 * yet, create one.
 * @method EditableMathlist#moveToSubscript_
 * @private
 */


EditableMathlist.prototype.moveToSubscript_ = function () {
  this.collapseForward();

  if (!this.anchor().subscript) {
    if (this.anchor().superscript) {
      this.anchor().subscript = [makeFirstAtom()];
    } else {
      var sibling = this.sibling(1);

      if (sibling && sibling.subscript) {
        this.path[this.path.length - 1].offset += 1; // this.setSelection(this.anchorOffset() + 1);
      } else if (sibling && sibling.superscript) {
        this.path[this.path.length - 1].offset += 1; // this.setSelection(this.anchorOffset() + 1);

        this.anchor().subscript = [makeFirstAtom()];
      } else {
        if (this.anchor().limits !== "limits") {
          this.siblings().splice(this.anchorOffset() + 1, 0, new mathAtom.MathAtom(this.parent().anchorMode, "msubsup", "\u200B", this.anchorStyle()));
          this.path[this.path.length - 1].offset += 1; // this.setSelection(this.anchorOffset() + 1);
        }

        this.anchor().subscript = [makeFirstAtom()];
      }
    }
  }

  this.path.push({
    relation: "subscript",
    offset: 0
  });
  this.selectGroup_();
};
/**
 * If cursor is currently in:
 * - superscript: move to subscript, creating it if necessary
 * - subscript: move to superscript, creating it if necessary
 * - numerator: move to denominator
 * - denominator: move to numerator
 * - otherwise: move to superscript
 * @method EditableMathlist#moveToOpposite_
 * @private
 */


EditableMathlist.prototype.moveToOpposite_ = function () {
  var OPPOSITE_RELATIONS = {
    superscript: "subscript",
    subscript: "superscript",
    denom: "numer",
    numer: "denom"
  };
  var oppositeRelation = OPPOSITE_RELATIONS[this.relation()];

  if (!oppositeRelation) {
    this.moveToSuperscript_();
  }

  if (!this.parent()[oppositeRelation]) {
    // Don't have children of the opposite relation yet
    // Add them
    this.parent()[oppositeRelation] = [makeFirstAtom()];
  }

  this.setSelection(0, "end", oppositeRelation);
};
/**
 * @method EditableMathlist#moveBeforeParent_
 * @private
 */


EditableMathlist.prototype.moveBeforeParent_ = function () {
  if (this.path.length > 1) {
    this.path.pop();
    this.setSelection(this.anchorOffset() - 1);
  } else {
    this._announce("plonk");
  }
};
/**
 * @method EditableMathlist#moveAfterParent_
 * @private
 */


EditableMathlist.prototype.moveAfterParent_ = function () {
  if (this.path.length > 1) {
    var oldPath = editor_editableMathlist_clone(this);
    this.path.pop();
    this.setExtent(0);

    this._announce("move", oldPath);
  } else {
    this._announce("plonk");
  }
};
/**
 * Internal primitive to add a column/row in a matrix
 * @method EditableMathlist#_addCell
 * @private
 */


EditableMathlist.prototype._addCell = function (where) {
  // This command is only applicable if we're in an array
  var parent = this.parent();

  if (parent && parent.type === "array" && Array.isArray(parent.array)) {
    var relation = this.relation();

    if (parent.array) {
      var colRow = arrayColRow(parent.array, relation);

      if (where === "after row" || where === "before row") {
        // Insert a row
        colRow.col = 0;
        colRow.row = colRow.row + (where === "after row" ? 1 : 0);
        parent.array.splice(colRow.row, 0, [[]]);
      } else {
        // Insert a column
        colRow.col += where === "after column" ? 1 : 0;
        parent.array[colRow.row].splice(colRow.col, 0, []);
      }

      var cellIndex = arrayIndex(parent.array, colRow);
      this.path.pop();
      this.path.push({
        relation: "cell" + cellIndex.toString(),
        offset: 0
      });
      this.insertFirstAtom();
    }
  }
};

EditableMathlist.prototype.convertParentToArray = function () {
  var parent = this.parent();

  if (parent.type === "leftright") {
    parent.type = "array";
    var envName = {
      "(": "pmatrix",
      "\\lbrack": "bmatrix",
      "\\lbrace": "cases"
    }[parent.leftDelim] || "matrix";
    var env = definitions.getEnvironmentInfo(envName);
    var array = [[parent.body]];

    if (env.parser) {
      Object.assign(parent, env.parser(envName, [], array));
    }

    parent.tabularMode = env.tabular;
    parent.parseMode = this.anchorMode();
    parent.env = editor_editableMathlist_objectSpread({}, env);
    parent.env.name = envName;
    parent.array = array;
    parent.rowGaps = [0];
    delete parent.body;
    this.path[this.path.length - 1].relation = "cell0";
  } // Note: could also be a group, or we could be a subscript or an
  // underscript (for multi-valued conditions on a \sum, for example)
  // Or if at root, this could be a 'align*' environment

};
/**
 * @method EditableMathlist#addRowAfter_
 * @private
 */


EditableMathlist.prototype.addRowAfter_ = function () {
  this.contentWillChange();
  this.convertParentToArray();

  this._addCell("after row");

  this.contentDidChange();
};
/**
 * @method EditableMathlist#addRowBefore_
 * @private
 */


EditableMathlist.prototype.addRowBefore_ = function () {
  this.contentWillChange();
  this.convertParentToArray();

  this._addCell("before row");

  this.contentDidChange();
};
/**
 * @method EditableMathlist#addColumnAfter_
 * @private
 */


EditableMathlist.prototype.addColumnAfter_ = function () {
  this.contentWillChange();
  this.convertParentToArray();

  this._addCell("after column");

  this.contentDidChange();
};
/**
 * @method EditableMathlist#addColumnBefore_
 * @private
 */


EditableMathlist.prototype.addColumnBefore_ = function () {
  this.contentWillChange();
  this.convertParentToArray();

  this._addCell("before column");

  this.contentDidChange();
};
/**
 * Apply a style (color, background) to the selection.
 *
 * If the style is already applied to the selection, remove it. If the selection
 * has the style partially applied (i.e. only some sections), remove it from
 * those sections, and apply it to the entire selection.
 *
 * @method EditableMathlist#applyStyle
 * @private
 */


EditableMathlist.prototype._applyStyle = function (style) {
  // No selection, nothing to do.
  if (this.isCollapsed()) return;
  var that = this;

  function everyStyle(property, value) {
    var result = true;
    that.forEachSelected(function (x) {
      result = result && x[property] === value;
    }, {
      recursive: true
    });
    return result;
  }

  if (style.color && everyStyle("color", style.color)) {
    // If the selection already has this color, turn it off
    style.color = "none";
  }

  if (style.backgroundColor && everyStyle("backgroundColor", style.backgroundColor)) {
    // If the selection already has this color, turn it off
    style.backgroundColor = "none";
  }

  if (style.fontFamily && everyStyle("fontFamily", style.fontFamily)) {
    // If the selection already has this font family, turn it off
    style.fontFamily = "none";
  }

  if (style.series) style.fontSeries = style.series;

  if (style.fontSeries && everyStyle("fontSeries", style.fontSeries)) {
    // If the selection already has this series (weight), turn it off
    style.fontSeries = "auto";
  }

  if (style.shape) style.fontShape = style.shape;

  if (style.fontShape && everyStyle("fontShape", style.fontShape)) {
    // If the selection already has this shape (italic), turn it off
    style.fontShape = "auto";
  }

  if (style.size) style.fontSize = style.size;

  if (style.fontSize && everyStyle("fontSize", style.fontSize)) {
    // If the selection already has this size, reset it to default size
    style.fontSize = "size5";
  }

  this.contentWillChange();
  this.forEachSelected(function (x) {
    return x.applyStyle(style);
  }, {
    recursive: true
  });
  this.contentDidChange();
};
/**
 * Attempts to parse and interpret a string in an unknown format, possibly
 * ASCIIMath and return a canonical LaTeX string.
 *
 * The format recognized are one of these variations:
 * - ASCIIMath: Only supports a subset
 * (1/2x)
 * 1/2sin x                     -> \frac {1}{2}\sin x
 * 1/2sinx                      -> \frac {1}{2}\sin x
 * (1/2sin x (x^(2+1))          // Unbalanced parentheses
 * (1/2sin(x^(2+1))             -> \left(\frac {1}{2}\sin \left(x^{2+1}\right)\right)
 * alpha + (pi)/(4)             -> \alpha +\frac {\pi }{4}
 * x=(-b +- sqrt(b^2 – 4ac))/(2a)
 * alpha/beta
 * sqrt2 + sqrtx + sqrt(1+a) + sqrt(1/2)
 * f(x) = x^2 "when" x >= 0
 * AA n in QQ
 * AA x in RR "," |x| > 0
 * AA x in RR "," abs(x) > 0
 *
 * - UnicodeMath (generated by Microsoft Word): also only supports a subset
 *      - See https://www.unicode.org/notes/tn28/UTN28-PlainTextMath-v3.1.pdf
 * √(3&x+1)
 * {a+b/c}
 * [a+b/c]
 * _a^b x
 * lim_(n->\infty) n
 * \iint_(a=0)^\infty  a
 *
 * - "JavaScript Latex": a variant that is LaTeX, but with escaped backslashes
 *  \\frac{1}{2} \\sin x
 * @param {string} s
 * @private
 */


function parseMathString(s, config) {
  if (!s) return ""; // Nothing to do if a single character

  if (s.length <= 1) return s; // Replace double-backslash (coming from JavaScript) to a single one

  if (!config || config.format !== "ASCIIMath") {
    s = s.replace(/\\\\([^\s\n])/g, "\\$1");
  }

  if ((!config || config.format !== "ASCIIMath") && /\\/.test(s)) {
    // If the string includes a '\' and a '{' or a '}'
    // it's probably a LaTeX string
    // (that's not completely true, it could be a UnicodeMath string, since
    // UnicodeMath supports some LaTeX commands. However, we need to pick
    // one in order to correctly interpret {} (which are argument delimiters
    // in LaTeX, and are fences in UnicodeMath)
    return s;
  }

  s = s.replace(/\u2061/g, ""); // Remove function application

  s = s.replace(/\u3016/g, "{"); // WHITE LENTICULAR BRACKET (grouping)

  s = s.replace(/\u3017/g, "}"); // WHITE LENTICULAR BRACKET (grouping)

  s = s.replace(/([^\\])sinx/g, "$1\\sin x"); // common typo

  s = s.replace(/([^\\])cosx/g, "$1\\cos x "); // common typo

  s = s.replace(/\u2013/g, "-"); // EN-DASH, sometimes used as a minus sign

  return parseMathExpression(s, config);
}

function parseMathExpression(s, config) {
  if (!s) return "";
  var done = false;
  var m;

  if (!done && (s[0] === "^" || s[0] === "_")) {
    // Superscript and subscript
    m = parseMathArgument(s.substr(1), editor_editableMathlist_objectSpread({}, config, {
      noWrap: true
    }));
    s = s[0] + "{" + m.match + "}";
    s += parseMathExpression(m.rest, config);
    done = true;
  }

  if (!done) {
    m = s.match(/^(sqrt|\u221a)(.*)/);

    if (m) {
      // Square root
      m = parseMathArgument(m[2], editor_editableMathlist_objectSpread({}, config, {
        noWrap: true
      }));
      s = "\\sqrt{" + m.match + "}";
      s += parseMathExpression(m.rest, config);
      done = true;
    }
  }

  if (!done) {
    m = s.match(/^(\\cbrt|\u221b)(.*)/);

    if (m) {
      // Cube root
      m = parseMathArgument(m[2], editor_editableMathlist_objectSpread({}, config, {
        noWrap: true
      }));
      s = "\\sqrt[3]{" + m.match + "}";
      s += parseMathExpression(m.rest, config);
      done = true;
    }
  }

  if (!done) {
    m = s.match(/^abs(.*)/);

    if (m) {
      // Absolute value
      m = parseMathArgument(m[1], editor_editableMathlist_objectSpread({}, config, {
        noWrap: true
      }));
      s = "\\left|" + m.match + "\\right|";
      s += parseMathExpression(m.rest, config);
      done = true;
    }
  }

  if (!done) {
    m = s.match(/^["”“](.*?)["”“](.*)/);

    if (m) {
      // Quoted text
      s = "\\text{" + m[1] + "}";
      s += parseMathExpression(m[2], config);
      done = true;
    }
  }

  if (!done) {
    m = s.match(/^([^a-zA-Z({[_^\\\s"]+)(.*)/); // A string of symbols...
    // Could be a binary or relational operator, etc...

    if (m) {
      s = paddedShortcut(m[1], config);
      s += parseMathExpression(m[2], config);
      done = true;
    }
  }

  if (!done && /^(f|g|h)[^a-zA-Z]/.test(s)) {
    // This could be a function...
    m = parseMathArgument(s.substring(1), config);
    s = s[0];
    s += m.match;
    s += parseMathExpression(m.rest, config);
    done = true;
  }

  if (!done) {
    m = s.match(/^([a-zA-Z]+)(.*)/);

    if (m) {
      // Some alphabetical string...
      // Could be a function name (sin) or symbol name (alpha)
      s = paddedShortcut(m[1], config);
      s += parseMathExpression(m[2], config);
      done = true;
    }
  }

  if (!done) {
    m = parseMathArgument(s, editor_editableMathlist_objectSpread({}, config, {
      noWrap: true
    }));

    if (m.match && m.rest[0] === "/") {
      // Fraction
      var m2 = parseMathArgument(m.rest.substr(1), editor_editableMathlist_objectSpread({}, config, {
        noWrap: true
      }));

      if (m2.match) {
        s = "\\frac{" + m.match + "}{" + m2.match + "}" + parseMathExpression(m2.rest, config);
      }

      done = true;
    } else if (m.match && /^(\(|\{|\[)$/.test(s[0])) {
      // A group
      s = "\\left" + s[0] + m.match + "\\right" + {
        "(": ")",
        "{": "}",
        "[": "]"
      }[s[0]] + parseMathExpression(m.rest, config);
      done = true;
    } else if (m.match) {
      s = m.match;
      s += parseMathExpression(m.rest, config);
      done = true;
    }
  }

  if (!done) {
    m = s.match(/^(\s+)(.*)$/); // Whitespace

    if (m) {
      s = " " + parseMathExpression(m[2], config);
      done = true;
    }
  }

  return s;
}
/**
 * Parse a math argument, as defined by ASCIIMath and UnicodeMath:
 * - Either an expression fenced in (), {} or []
 * - a number (- sign, digits, decimal point, digits)
 * - a single [a-zA-Z] letter (an identifier)
 * - a multi-letter shortcut (e.g., pi)
 * - a LaTeX command (\pi) (for UnicodeMath)
 * @param {string} s
 * @return {object}
 * - match: the parsed (and converted) portion of the string that is an argument
 * - rest: the raw, unconverted, rest of the string
 * @private
 */


function parseMathArgument(s, config) {
  var match = "";
  s = s.trim();
  var rest = s;
  var lFence = s.charAt(0);
  var rFence = {
    "(": ")",
    "{": "}",
    "[": "]"
  }[lFence];

  if (rFence) {
    // It's a fence
    var level = 1;
    var i = 1;

    while (i < s.length && level > 0) {
      if (s[i] === lFence) level++;
      if (s[i] === rFence) level--;
      i++;
    }

    if (level === 0) {
      // We've found the matching closing fence
      if (config.noWrap && lFence === "(" && rFence === ")") {
        match = parseMathExpression(s.substring(1, i - 1), config);
      } else {
        match = "\\mleft" + lFence + parseMathExpression(s.substring(1, i - 1), config) + "\\mright" + rFence;
      }

      rest = s.substring(i);
    } else {
      // Unbalanced fence...
      match = s.substring(1, i);
      rest = "";
    }
  } else {
    var m = s.match(/^([a-zA-Z]+)/);

    if (m) {
      // It's a string of letter, maybe a shortcut
      var shortcut = editor_shortcuts.forString("math", null, s, config);

      if (shortcut) {
        shortcut = shortcut.replace("_{#?}", "");
        shortcut = shortcut.replace("^{#?}", "");
        return {
          match: shortcut,
          rest: s.substring(shortcut.length)
        };
      }
    }

    m = s.match(/^([a-zA-Z])/);

    if (m) {
      // It's a single letter
      return {
        match: m[1],
        rest: s.substring(1)
      };
    }

    m = s.match(/^(-)?\d+(\.\d*)?/);

    if (m) {
      // It's a number
      return {
        match: m[0],
        rest: s.substring(m[0].length)
      };
    }

    if (!/^\\(left|right)/.test(s)) {
      // It's a LaTeX command (but not a \left\right)
      m = s.match(/^(\\[a-zA-Z]+)/);

      if (m) {
        rest = s.substring(m[1].length);
        match = m[1];
      }
    }
  }

  return {
    match: match,
    rest: rest
  };
}

function paddedShortcut(s, config) {
  var result = editor_shortcuts.forString("math", null, s, config);

  if (result) {
    result = result.replace("_{#?}", "");
    result = result.replace("^{#?}", "");
    result += " ";
  } else {
    result = s;
  }

  return result;
}

function makeFirstAtom() {
  return new mathAtom.MathAtom("", "first");
}

/* harmony default export */ var editor_editableMathlist = ({
  EditableMathlist: EditableMathlist,
  parseMathString: parseMathString
});
// CONCATENATED MODULE: ./packages/editor/editor-keyboard.js
/**
 * This modules handles low-level keyboard events and normalize them across
 * browsers.
 * @module editor/keyboard
 * @private
 */
// These keys on international (non-US QWERTY) keyboards should
// be mapped to the coresponding virtual keys (they could be shifted keys on
// international keyboards)
var INTL_KEY = {
  '#': '#',
  '|': '|',
  '[': 'BracketLeft',
  ']': 'BracketRight',
  '-': 'Minus',
  '+': 'Plus',
  '=': 'Equal',
  '/': 'Slash',
  '\\': 'Backslash'
};
var KEY_NAMES = {
  'Space': 'Spacebar',
  ' ': 'Spacebar',
  'Escape': 'Esc',
  'ArrowLeft': 'Left',
  'ArrowUp': 'Up',
  'ArrowRight': 'Right',
  'ArrowDown': 'Down',
  'Delete': 'Del'
};
var VIRTUAL_KEY_NAMES = {
  'q': 'KeyQ',
  'w': 'KeyW',
  'e': 'KeyE',
  'r': 'KeyR',
  't': 'KeyT',
  'y': 'KeyY',
  'u': 'KeyU',
  'i': 'KeyI',
  'o': 'KeyO',
  'p': 'KeyP',
  'a': 'KeyA',
  's': 'KeyS',
  'd': 'KeyD',
  'f': 'KeyF',
  'g': 'KeyG',
  'h': 'KeyH',
  'j': 'KeyJ',
  'k': 'KeyK',
  'l': 'KeyL',
  'z': 'KeyZ',
  'x': 'KeyX',
  'c': 'KeyC',
  'v': 'KeyV',
  'b': 'KeyB',
  'n': 'KeyN',
  'm': 'KeyM',
  '1': 'Digit1',
  '2': 'Digit2',
  '3': 'Digit3',
  '4': 'Digit4',
  '5': 'Digit5',
  '6': 'Digit6',
  '7': 'Digit7',
  '8': 'Digit8',
  '9': 'Digit9',
  '0': 'Digit0',
  '!': 'Shift-Digit1',
  '@': 'Shift-Digit2',
  '#': 'Shift-Digit3',
  '$': 'Shift-Digit4',
  '%': 'Shift-Digit5',
  '^': 'Shift-Digit6',
  '&': 'Shift-Digit7',
  '*': 'Shift-Digit8',
  '(': 'Shift-Digit9',
  ')': 'Shift-Digit0',
  '-': 'Minus',
  '_': 'Shift-Minus',
  '/': 'Slash',
  '\\': 'Backslash',
  // Some virtual keyboards (iOS) return '\' as the event.key
  // with no evt.code
  '|': 'Shift-Backslash',
  '?': 'Shift-Slash',
  ' ': 'Spacebar'
};
/**
 *
 * Create a normalized string representation of the key combo,
 * i.e., key code and modifier keys. For example:
 * - `Ctrl-Shift-Alt-KeyF`
 * - `Alt-Space`
 * - `Shift-Digit6`
 * @todo See https://github.com/madrobby/keymaster/blob/master/keymaster.js
 * - Doesn't work very well for command-<key>
 * - Returns "Alt-Alt" when only the Alt key is pressed
 * @memberof module:editor/keyboard
 * @param {Event} evt
 * @private
 */

function keyboardEventToString(evt) {
  var keyname;
  var useModifiers = true;

  if (evt.key === 'Unidentified') {
    // On Android, the evt.key seems to always be Unidentified.
    // Get the value entered in the event target
    if (evt.target) {
      keyname = VIRTUAL_KEY_NAMES[evt.target.value] || evt.target.value;
    }
  }

  if (!keyname) {
    if (INTL_KEY[evt.key]) {
      keyname = INTL_KEY[evt.key];
      useModifiers = false;
    } else {
      keyname = KEY_NAMES[evt.key];
    } // For virtual keyboards (iOS, Android) and Microsoft Edge (!)
    // the `evt.code`, which represents the physical key pressed, is set
    // to undefined. In that case, map the virtual key ("q") to a
    // pseudo-hardware key ("KeyQ")


    if (!keyname) {
      keyname = VIRTUAL_KEY_NAMES[evt.key.toLowerCase()] || evt.key;
    }
  }

  if (!keyname && evt.code) {
    keyname = KEY_NAMES[evt.code] || evt.code;
  }

  var modifiers = [];
  if (evt.ctrlKey) modifiers.push('Ctrl');
  if (evt.metaKey) modifiers.push('Meta');
  if (useModifiers && evt.altKey) modifiers.push('Alt');
  if (useModifiers && evt.shiftKey) modifiers.push('Shift'); // If no modifiers, simply return the key name

  if (modifiers.length === 0) return keyname;
  modifiers.push(keyname);
  return modifiers.join('-');
}
/**
 * Setup to capture the keyboard events from a `TextArea` and redispatch them to
 * handlers.
 *
 * In general, commands (arrows, delete, etc..) should be handled
 * in the `keystroke()` handler while text input should be handled in
 * `typedtext()`.
 *
 * @param {HTMLElement} textarea A `TextArea` element that will capture the keyboard
 * events. While this element will usually be a `TextArea`, it could be any
 * element that is focusable and can receive keyboard events.
 * @param {Object.<string, any>} handlers
 * @param {HTMLElement} [handlers.container]
 * @param {function} handlers.keystroke invoked on a key down event, including
 * for special keys such as ESC, arrow keys, tab, etc... and their variants
 * with modifiers.
 * @param {function} handlers.typedtext invoked on a keypress or other events
 * when a key corresponding to a character has been pressed. This include `a-z`,
 * `0-9`, `{}`, `^_()`, etc...
 * This does not include arrow keys, tab, etc... but does include 'space'
 * When a 'character' key is pressed, both `keystroke()` and `typedtext()` will
 * be invoked. When a control/function key is pressed, only `keystroke()` will
 * be invoked. In some cases, for example when using input methods or entering
 * emoji, only `typedtext()` will be invoked.
 * @param {function} handlers.paste(text) Invoked in response to a paste
 * command. Not all browsers support this (Chrome doesn't), so typedtext()
 * will be invoked instead.
 * @param {function} handlers.cut
 * @param {function} handlers.copy
 * @memberof module:editor/keyboard
 * @private
 */


function delegateKeyboardEvents(textarea, handlers) {
  var keydownEvent = null;
  var keypressEvent = null;
  var compositionInProgress = false;
  var deadKey = false; // This callback is invoked after a keyboard event has been processed
  // by the textarea

  var callbackTimeoutID;

  function defer(cb) {
    clearTimeout(callbackTimeoutID);
    callbackTimeoutID = setTimeout(function () {
      clearTimeout(callbackTimeoutID);
      cb();
    });
  }

  function handleTypedText() {
    // Some browsers (Firefox, Opera) fire a keypress event for commands
    // such as command-C where there might be a non-empty selection.
    // We need to ignore these.
    if (hasSelection(textarea)) return;
    var text = textarea.value;
    textarea.value = '';
    if (text.length > 0) handlers.typedText(text);
  }

  function onKeydown(e) {
    var allowDeadKey = typeof handlers.allowDeadKey === 'function' && handlers.allowDeadKey();

    if (!allowDeadKey && (e.key === 'Dead' || e.key === 'Unidentified' || e.keyCode === 229)) {
      deadKey = true;
      compositionInProgress = false; // This sequence seems to cancel dead keys
      // but don't call our blur/focus handlers

      var savedBlur = handlers.blur;
      var savedFocus = handlers.focus;
      handlers.blur = null;
      handlers.focus = null;
      textarea.blur();
      textarea.focus();
      handlers.blur = savedBlur;
      handlers.focus = savedFocus;
    } else {
      deadKey = false;
    }

    if (!compositionInProgress && e.code !== 'CapsLock' && !/(Control|Meta|Alt|Shift)(Right|Left)/.test(e.code)) {
      keydownEvent = e;
      keypressEvent = null;
      return handlers.keystroke(keyboardEventToString(e), e);
    }

    return true;
  }

  function onKeypress(e) {
    // If this is not the first keypress after a keydown, that is,
    // if this is a repeated keystroke, call the keystroke handler.
    if (!compositionInProgress) {
      if (keydownEvent && keypressEvent) {
        handlers.keystroke(keyboardEventToString(keydownEvent), keydownEvent);
      }

      keypressEvent = e;
      defer(handleTypedText);
    }
  }

  function onKeyup() {
    // If we've received a keydown, but no keypress, check what's in the
    // textarea field.
    if (!compositionInProgress && keydownEvent && !keypressEvent) {
      handleTypedText();
    }
  }

  function onPaste() {
    // In some cases (Linux browsers), the text area might not be focused
    // when doing a middle-click paste command.
    textarea.focus();
    var text = textarea.value;
    textarea.value = '';
    if (text.length > 0) handlers.paste(text);
  }

  function onCopy(e) {
    if (handlers.copy) handlers.copy(e);
  }

  function onCut(e) {
    if (handlers.cut) handlers.cut(e);
  }

  function onBlur() {
    keydownEvent = null;
    keypressEvent = null;
    if (handlers.blur) handlers.blur();
  }

  function onFocus() {
    if (handlers.focus) {
      handlers.focus();
    }
  }

  var target = textarea || handlers.container;
  target.addEventListener('keydown', onKeydown, true);
  target.addEventListener('keypress', onKeypress, true);
  target.addEventListener('keyup', onKeyup, true);
  target.addEventListener('paste', onPaste, true);
  target.addEventListener('copy', onCopy, true);
  target.addEventListener('cut', onCut, true);
  target.addEventListener('blur', onBlur, true);
  target.addEventListener('focus', onFocus, true);
  target.addEventListener('compositionstart', function () {
    compositionInProgress = true;
  }, true);
  target.addEventListener('compositionend', function () {
    compositionInProgress = false;
    defer(handleTypedText);
  }, true); // The `input` handler gets called when the field is changed, for example
  // with input methods or emoji input...

  target.addEventListener('input', function () {
    if (deadKey) {
      var savedBlur = handlers.blur;
      var savedFocus = handlers.focus;
      handlers.blur = null;
      handlers.focus = null;
      textarea.blur();
      textarea.focus();
      handlers.blur = savedBlur;
      handlers.focus = savedFocus;
      deadKey = false;
      compositionInProgress = false;
      defer(handleTypedText);
    } else if (!compositionInProgress) {
      defer(handleTypedText);
    }
  });
}

function hasSelection(textarea) {
  return textarea.selectionStart !== textarea.selectionEnd;
}

function eventToChar(evt) {
  if (!evt) return '';
  var result;

  if (evt.key === 'Unidentified') {
    // On Android, the evt.key seems to always be 'Unidentified'.
    // Get the value entered in the event target
    if (evt.target) {
      result = evt.target.value;
    }
  }

  result = result || evt.key || evt.code;

  if (/^(Return|Enter|Tab|Escape|Delete|PageUp|PageDown|Home|End|Help|ArrowLeft|ArrowRight|ArrowUp|ArrowDown)$/.test(result)) {
    result = '';
  }

  return result;
}

function charToEvent(c) {
  var result = {
    key: c,
    metaKey: false,
    ctrlKey: false,
    altKey: false,
    shiftKey: false
  };
  return result;
}

/* harmony default export */ var editor_keyboard = ({
  delegateKeyboardEvents: delegateKeyboardEvents,
  select: delegateKeyboardEvents.select,
  keyboardEventToString: keyboardEventToString,
  eventToChar: eventToChar,
  charToEvent: charToEvent
});
// CONCATENATED MODULE: ./packages/editor/editor-undo.js
function editor_undo_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function editor_undo_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { editor_undo_ownKeys(Object(source), true).forEach(function (key) { editor_undo_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { editor_undo_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function editor_undo_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function editor_undo_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function editor_undo_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function editor_undo_createClass(Constructor, protoProps, staticProps) { if (protoProps) editor_undo_defineProperties(Constructor.prototype, protoProps); if (staticProps) editor_undo_defineProperties(Constructor, staticProps); return Constructor; }

/**
 *
 * @class UndoManager
 * @property {MathAtom[]} mathlist
 * @property {object[]} stack Stack of undo/redo states
 * @property {number} index Index pointing to the undo/redo stack
 * @property {number} maximumDepth Maximum number of undo/redo states
 * @global
 * @private
 */
var UndoManager =
/*#__PURE__*/
function () {
  function UndoManager(mathlist) {
    editor_undo_classCallCheck(this, UndoManager);

    this.mathlist = mathlist;
    this.maximumDepth = 1000;
    this.record = false;
    this.canCoalesce = false;
    this.reset();
  }

  editor_undo_createClass(UndoManager, [{
    key: "reset",
    value: function reset() {
      this.stack = [];
      this.index = -1;
    }
  }, {
    key: "startRecording",
    value: function startRecording() {
      this.record = true;
    }
    /**
     *
     * @return {boolean}
     * @memberof UndoManager
     * @instance
     * @private
     */

  }, {
    key: "canUndo",
    value: function canUndo() {
      return this.index > 0;
    }
    /**
     *
     * @return {boolean}
     * @memberof UndoManager
     * @instance
     * @private
     */

  }, {
    key: "canRedo",
    value: function canRedo() {
      return this.index !== this.stack.length - 1;
    }
    /**
     *
     * @memberof UndoManager
     * @instance
     * @private
     */

  }, {
    key: "undo",
    value: function undo(options) {
      if (this.canUndo()) {
        if (options && typeof options.onUndoStateWillChange === 'function') {
          options.onUndoStateWillChange(this.mathlist.target, 'undo');
        }

        this.restore(this.stack[this.index - 1], options);
        this.index -= 1;

        if (options && typeof options.onUndoStateDidChange === 'function') {
          options.onUndoStateDidChange(this.mathlist.target, 'undo');
        }

        this.canCoalesce = false;
      }
    }
    /**
     *
     * @memberof UndoManager
     * @instance
     * @private
     */

  }, {
    key: "redo",
    value: function redo(options) {
      if (this.canRedo()) {
        if (options && options.onUndoStateWillChange === 'function') {
          options.onUndoStateWillChange(this.mathlist.target, 'redo');
        }

        this.index += 1;
        this.restore(this.stack[this.index], options);

        if (options && typeof options.onUndoStateDidChange === 'function') {
          options.onUndoStateDidChange(this.mathlist.target, 'redo');
        }

        this.canCoalesce = false;
      }
    }
    /**
     *
     * @memberof UndoManager
     * @instance
     * @private
     */

  }, {
    key: "pop",
    value: function pop() {
      if (this.canUndo()) {
        this.index -= 1;
        this.stack.pop();
      }
    }
    /**
     * Push a snapshot of the content and selection of the mathfield onto the
     * undo stack so that it can potentially be reverted to later.
     * @memberof UndoManager
     * @instance
     * @private
     */

  }, {
    key: "snapshot",
    value: function snapshot(options) {
      if (!this.record) return;

      if (options && options.onUndoStateWillChange === 'function') {
        options.onUndoStateWillChange(this.mathlist.target, 'snapshot');
      } // Drop any entries that are part of the redo stack


      this.stack.splice(this.index + 1, this.stack.length - this.index - 1); // Add a new entry

      this.stack.push({
        latex: this.mathlist.root.toLatex(),
        selection: this.mathlist.toString()
      });
      this.index++; // If we've reached the maximum number of undo operations, forget the
      // oldest one.

      if (this.stack.length > this.maximumDepth) {
        this.stack.shift();
      }

      if (options && typeof options.onUndoStateDidChange === 'function') {
        options.onUndoStateDidChange(this.mathlist.target, 'snapshot');
      }

      this.canCoalesce = false;
    }
    /**
     *
     * @param {Object.<any>} options
     * @instance
     * @memberof UndoManager
     * @private
     */

  }, {
    key: "snapshotAndCoalesce",
    value: function snapshotAndCoalesce(options) {
      if (this.canCoalesce) {
        this.pop();
      }

      this.snapshot(options);
      this.canCoalesce = true;
    }
    /**
     * Return an object capturing the state of the content and selection of the
     * mathfield. Pass this object to restore() to reset the value of the math
     * field to this saved value. This does not affect the undo stack.
     * @instance
     * @memberof UndoManager
     * @private
    */

  }, {
    key: "save",
    value: function save() {
      return {
        latex: this.mathlist.root.toLatex(),
        selection: this.mathlist.toString()
      };
    }
    /**
     * Set the content and selection of the mathfield to a value previously
     * captured with save() or stored in the undo stack.
     * This does not affect the undo stack.
     * @instance
     * @memberof UndoManager
     * @private
    */

  }, {
    key: "restore",
    value: function restore(state, options) {
      var wasSuppressing = this.mathlist.suppressChangeNotifications;

      if (options.suppressChangeNotifications !== undefined) {
        this.mathlist.suppressChangeNotifications = options.suppressChangeNotifications;
      } // Restore the content


      this.mathlist.insert(state ? state.latex : '', editor_undo_objectSpread({
        mode: 'math',
        insertionMode: 'replaceAll',
        selectionMode: 'after',
        format: 'latex'
      }, options)); // Restore the selection

      this.mathlist.setPath(state ? state.selection : [{
        relation: 'body',
        offset: 0
      }]);
      this.mathlist.suppressChangeNotifications = wasSuppressing;
    }
  }]);

  return UndoManager;
}();

/* harmony default export */ var editor_undo = ({
  UndoManager: UndoManager
});
// CONCATENATED MODULE: ./packages/editor/editor-popover.js





var SAMPLES = {
  '\\mathrm': '\\mathrm{x=+3.14, x\\in A}',
  '\\mathbf': '\\mathbf{x=+3.14, x\\in A}',
  '\\bf': '\\bf{x=+3.14, x\\in A}',
  '\\bm': '\\bm{x=+3.14, x\\in A}',
  '\\bold': '\\bold{x=+3.14, x\\in A}',
  '\\mathit': '\\mathbb{x=+3.14}',
  '\\mathbb': '\\mathbb{ABCD}',
  '\\Bbb': '\\mathbb{ABCD}',
  '\\frak': '\\frak{ABCD}',
  '\\mathfrak': '\\mathfrak{ABCD}',
  '\\mathscr': '\\mathscr{ABCD}',
  '\\mathsf': '\\mathsf{ABab01}',
  '\\mathtt': '\\mathtt{x=+3.14, x\\in A}',
  '\\mathcal': '\\mathcal{ABCD}',
  '\\boldsymbol': '\\boldsymbol{ABab01+=}',
  '\\text': '\\text{ABC abc}',
  '\\textrm': '\\textrm{ABC abc}',
  '\\textnormal': '\\textnormal{ABC abc}',
  '\\textit': '\\textit{ABC abc}',
  '\\textbf': '\\textbf{ABC abc}',
  '\\texttt': '\\texttt{ABC abc}',
  '\\textsf': '\\textsf{ABC abc}',
  '\\textcolor': "{\\textcolor{m0}A}{\\textcolor{m1}B}{\\textcolor{m2}C }{\\textcolor{m3}a}{\\textcolor{m4}b}{\\textcolor{m5}c}{\\textcolor{m6}8}",
  '\\color': "{\\color{m0}A}{\\color{m1}B}{\\color{m2}C}{\\color{m3}a}{\\color{m4}b}{\\color{m5}c}{\\color{m6}8}",
  "\\underline": "\\underline{\\unicode{\"2B1A}}",
  '\\overline': "\\overline{\\unicode{\"2B1A}}",
  '\\vec': "\\vec{\\unicode{\"25CC}}",
  '\\check': "\\check{\\unicode{\"25CC}}",
  '\\acute': "\\acute{\\unicode{\"25CC}}",
  '\\breve': "\\breve{\\unicode{\"25CC}}",
  '\\tilde': "\\tilde{\\unicode{\"25CC}}",
  '\\hat': "\\hat{\\unicode{\"25CC}}",
  '\\ddot': "\\ddot{\\unicode{\"25CC}}",
  '\\dot': "\\dot{\\unicode{\"25CC}}",
  '\\bar': "\\bar{\\unicode{\"25CC}}",
  '\\!': "\\unicode{\"203A}\\!\\unicode{\"2039}",
  '\\,': "\\unicode{\"203A}\\,\\unicode{\"2039}",
  '\\:': "\\unicode{\"203A}\\:\\unicode{\"2039}",
  '\\;': "\\unicode{\"203A}\\;\\unicode{\"2039}",
  '\\quad': "\\unicode{\"203A}\\quad\\unicode{\"2039}",
  '\\qquad': "\\unicode{\"203A}\\qquad\\unicode{\"2039}",
  '\\enskip': "\\unicode{\"203A}\\enskip\\unicode{\"2039}",
  '\\space': "\\unicode{\"203A}\\space\\unicode{\"2039}",
  '\\frac': "\\frac{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  '\\dfrac': "\\dfrac{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  '\\cfrac': "\\cfrac{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  '\\tfrac': "\\tfrac{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  '\\dbinom': "\\dbinom{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  '\\tbinom': "\\tbinom{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  '\\binom': "\\binom{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  '\\pdiff': "\\pdiff{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  '\\in': 'n\\in\\N',
  '\\notin': 'n\\notin\\N',
  '\\not': 'B \\not A',
  '\\ni': 'N\\in n',
  '\\owns': 'N\\owns n',
  '\\subset': 'A\\subset B',
  '\\supset': 'B\\supset A',
  '\\subseteq': 'A\\subseteq B',
  '\\supseteq': 'B\\supseteq A',
  '\\nsubseteq': 'A\\nsubseteq B',
  '\\nsupseteq': 'B\\nsupseteq A',
  '\\subsetneq': 'A\\subsetneq B',
  '\\supsetneq': 'B\\supsetneq A',
  '\\varsubsetneq': 'A\\varsubsetneq B',
  '\\varsupsetneq': 'B\\varsupsetneq A',
  '\\nsubseteqq': 'A\\varsupsetneq B',
  '\\subsetneqq': 'A\\subsetneqq B',
  '\\varsubsetneqq': 'A\\varsubsetneqq B',
  '\\nsubset': 'A\\nsubset B',
  '\\nsupset': 'B\\nsupset A',
  '\\complement': 'A^\\complement',
  '\\bigcup': "\\bigcup_{\\unicode{\"2B1A}}",
  '\\bigcap': "\\bigcap_{\\unicode{\"2B1A}}",
  '\\sqrt': "\\sqrt{\\unicode{\"2B1A}}",
  '\\prod': "\\prod_{\\unicode{\"2B1A}}^{\\unicode{\"2B1A}}",
  '\\sum': "\\sum_{\\unicode{\"2B1A}}^{\\unicode{\"2B1A}}",
  '\\int': "\\int_{\\unicode{\"2B1A}}^{\\unicode{\"2B1A}}",
  '\\stackrel': "\\stackrel{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  '\\stackbin': "\\stackbin{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  "\\underset": "\\underset{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  '\\overset': "\\overset{\\unicode{\"2B1A}}{\\unicode{\"2B1A}}",
  '\\prime': "\\unicode{\"2B1A}^{\\prime}",
  '\\boxed': "\\boxed{\\unicode{\"2B1A}}",
  '\\colorbox': "\\colorbox{#fbc0bd}{\\unicode{\"2B1A}}",
  '\\bbox': "\\bbox[#ffd400, solid 2px #ffd400]{\\unicode{\"2B1A}}",
  '\\enclose': '\\enclose{updiagonalstrike,roundedbox}[1px solid red, mathbackground="#fbc0bd"]{23+45}',
  '\\fcolorbox': "\\fcolorbox{#cd0030}{#ffd400}{\\unicode{\"2B1A}}",
  '\\ ': '\\char"2423',
  // OPEN BOX
  '\\top': '{\\color{red}P}\\top',
  '\\bot': '{\\color{#0F0}P}\\bot',
  '\\mid': 'P(p\\mid q)',
  '\\rlap': '\\rlap{x}o',
  '\\llap': 'o\\llap{/}'
}; // A textual description of a LaTeX command.
// The value can be either a single string, or an array of string
// in order to provide alternatives or additional context.
// In that case, the first string in the array should be appropriate
// to be spoken for accessibility.

var NOTES = {
  '\\text': 'roman text',
  '\\textrm': 'roman text',
  '\\textnormal': 'roman text',
  '\\textit': 'italic text',
  '\\textbf': 'bold text',
  '\\texttt': 'monospaced text',
  '\\textsf': 'sans-serif text',
  '\\mathrm': ['roman', '(upright)'],
  '\\mathbf': 'bold',
  '\\bf': 'bold',
  '\\bold': 'bold',
  '\\mathit': 'italic',
  '\\mathbb': 'blackboard',
  '\\Bbb': 'blackboard',
  '\\mathscr': 'script',
  '\\mathtt': ['typewriter', '(monospaced)'],
  '\\mathsf': 'sans-serif',
  '\\mathcal': 'caligraphic',
  '\\frak': ['fraktur', '(gothic)'],
  '\\mathfrak': ['fraktur', '(gothic)'],
  '\\textcolor': 'text color',
  '\\color': 'color',
  '\\forall': 'for all',
  '\\exists': 'there exists',
  '\\nexists': 'there does not exist',
  '\\frac': 'fraction',
  '\\dfrac': 'display fraction',
  '\\cfrac': 'continuous fraction',
  '\\tfrac': 'text fraction',
  '\\binom': 'binomial coefficient',
  '\\dbinom': 'display binomial coefficient',
  '\\tbinom': 'text binomial coefficient',
  '\\pdiff': 'partial differential',
  '\\vec': 'vector',
  '\\check': 'caron',
  '\\acute': 'acute',
  '\\breve': 'breve',
  '\\tilde': 'tilde',
  '\\dot': 'dot',
  '\\hat': ['hat', 'circumflex'],
  '\\ddot': 'double dot',
  '\\bar': 'bar',
  '\\prime': 'prime',
  '\\doubleprime': 'double prime',
  '\\varnothing': 'empty set',
  '\\emptyset': 'empty set',
  '\\subseteq': 'subset of or <br>equal to',
  '\\supseteq': 'superset of or <br>equal to',
  '\\supset': 'superset of',
  '\\subset': 'subset of',
  '\\partial': 'partial derivative',
  '\\bigcup': 'union',
  '\\bigcap': 'intersection',
  '\\approx': 'approximately equal to',
  '\\notin': 'not an element of',
  '\\in': ['element of', 'included in'],
  '\\infty': 'infinity',
  '\\land': 'logical and',
  '\\sqrt': 'square root',
  '\\prod': 'product',
  '\\sum': 'summation',
  '\\amalg': ['amalgamation', 'coproduct', 'free product', 'disjoint union'],
  '\\cup': 'union with',
  '\\cap': 'intersection with',
  '\\int': 'integral',
  '\\iint': 'surface integral',
  '\\oint': 'curve integral',
  '\\iiint': 'volume integral',
  '\\iff': 'if and only if',
  '\\ln': 'natural logarithm',
  '\\boldsymbol': 'bold',
  '\\setminus': 'set subtraction',
  '\\stackrel': 'relation with symbol above',
  '\\stackbin': 'operator with symbol above',
  "\\underset": 'symbol with annotation below',
  '\\overset': 'symbol with annotation above',
  '\\hslash': ['h-bar', 'Planck constant'],
  '\\gtrsim': 'greater than or <br>similar to',
  '\\propto': 'proportional to',
  '\\equiv': 'equivalent to',
  '\\!': ['negative thin space', '(-3 mu)'],
  '\\ ': ['space', '(6 mu)'],
  '\\,': ['thin space', '(3 mu)'],
  '\\:': ['medium space', '(4 mu)'],
  '\\;': ['thick space', '(5 mu)'],
  '\\quad': ['1 em space', '(18 mu)'],
  '\\qquad': ['2 em space', '(36 mu)'],
  '\\enskip': ['&#189; em space', '(9 mu)'],
  '\\mp': 'minus or plus',
  '\\pm': 'plus or minus',
  '\\Im': 'Imaginary part of',
  '\\Re': 'Real part of',
  '\\gothicCapitalR': 'Real part of',
  '\\gothicCapitalI': 'Imaginary part part of',
  '\\differentialD': 'differential d',
  '\\aleph': ['aleph', 'infinite cardinal', '<a target="_blank" href="https://en.wikipedia.org/wiki/Cardinal_number">Wikipedia <big>&#x203A;</big></a>'],
  '\\beth': ['beth', 'beth number', '<a target="_blank" href="https://en.wikipedia.org/wiki/Beth_number">Wikipedia <big>&#x203A;</big></a>'],
  '\\gimel': ['gimel', 'gimel function', '<a target="_blank" href="https://en.wikipedia.org/wiki/Gimel_function">Wikipedia <big>&#x203A;</big></a>'],
  '\\O': 'empty set',
  '\\N': 'set of <br>natural numbers',
  '\\Z': 'set of <br>integers',
  '\\Q': 'set of <br>rational numbers',
  '\\C': 'set of <br>complex numbers',
  '\\R': 'set of <br>real numbers',
  '\\P': 'set of <br>prime numbers',
  '\\lesseqqgtr': 'less than, equal to or<br> greater than',
  '\\gnapprox': 'greater than and <br>not approximately',
  '\\lnapprox': 'lesser than and <br>not approximately',
  '\\j': 'dotless j',
  '\\i': 'dotless i',
  '\\cdot': 'centered dot',
  '\\lmoustache': 'left moustache',
  '\\rmoustache': 'right moustache',
  '\\nabla': ['nabla', 'del', 'differential vector operator'],
  '\\square': ['square', 'd’Alembert operator', '<a target="_blank" href="https://en.wikipedia.org/wiki/D%27Alembert_operator">Wikipedia <big>&#x203A;</big></a>'],
  '\\blacksquare': ['black square', 'end of proof', 'tombstone', 'Halmos symbol'],
  '\\Box': 'end of proof',
  '\\colon': ['such that', 'ratio'],
  '\\coloneq': ['is defined by', 'is assigned'],
  '\\Colon': ['is defined by', 'as'],
  '\\_': ['underbar', 'underscore'],
  '\\ll': 'much less than',
  '\\gg': 'much greater than',
  '\\doteq': 'approximately equal to',
  '\\Doteq': 'approximately equal to',
  '\\doteqdot': 'approximately equal to',
  '\\cong': ['isomorphism of', '(for algebras, modules...)'],
  '\\det': ['determinant of', '(of a matrix)'],
  '\\dotplus': 'Cartesian product algebra',
  '\\otimes': ['tensor product', '(of algebras)', 'Kronecker product', '(of matrices)'],
  '\\oplus': ['direct sum', '(of modules)'],
  '\\lb': 'base-2 logarithm',
  '\\lg': 'base-10 logarithm',
  '\\wp': ['Weierstrass P', '<a target="_blank" href="https://en.wikipedia.org/wiki/Weierstrass%27s_elliptic_functions">Wikipedia <big>&#x203A;</big></a>'],
  '\\wr': ['wreath product', '<a target="_blank" href="https://en.wikipedia.org/wiki/Wreath_product">Wikipedia <big>&#x203A;</big></a>'],
  '\\top': ['tautology', 'Proposition P is universally true'],
  '\\bot': ['contradiction', 'Proposition P is contradictory'],
  '\\mid': ['probability', 'of event A given B'],
  '\\mho': ['Siemens', 'electrical conductance in SI unit', '<a target="_blank" href="https://en.wikipedia.org/wiki/Siemens_(unit)">Wikipedia <big>&#x203A;</big></a>'],
  '\\Longrightarrow': 'implies',
  '\\Longleftrightarrow': 'if, and only if,',
  '\\prec': 'precedes',
  '\\preceq': 'precedes or is equal to',
  '\\succ': 'succeedes',
  '\\succeq': 'succeedes or is equal to',
  '\\perp': ['is perpendicular to', 'is independent of'],
  '\\models': ['entails', 'double-turnstyle, models', 'is a semantic consequence of', '<a target="_blank" href="https://en.wikipedia.org/wiki/Double_turnstile">Wikipedia <big>&#x203A;</big></a>'],
  '\\vdash': ['satisfies', 'turnstyle, assertion sign', 'syntactic inference', '<a target="_blank" href="https://en.wikipedia.org/wiki/Turnstile_(symbol)">Wikipedia <big>&#x203A;</big></a>'],
  '\\implies': ['implies', 'logical consequence'],
  '\\impliedby': ['implied by', 'logical consequence'],
  '\\surd': ['surd', 'root of', 'checkmark'],
  '\\ltimes': ['semi direct product', '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>'],
  '\\rtimes': ['semi direct product', '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>'],
  '\\leftthreetimes': ['semi direct product', '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>'],
  '\\rightthreetimes': ['semi direct product', '<a target="_blank" href="https://en.wikipedia.org/wiki/Semidirect_product">Wikipedia <big>&#x203A;</big></a>'],
  '\\divideontimes': ['divide on times'],
  '\\curlywedge': 'nor',
  '\\curlyvee': 'nand',
  '\\simeq': 'is group isomorphic with',
  '\\vartriangleleft': ['is a normal subgroup of', 'is an ideal ring of'],
  '\\circ': ['circle', 'ring', 'function composition'],
  '\\rlap': ['overlap right', '\\rlap{x}o'],
  '\\llap': ['overlap left', 'o\\llap{/}'],
  '\\colorbox': ['color box', '\\colorbox{#fbc0bd}{...}'],
  '\\ast': ['asterisk', 'reflexive closure (as a superscript)'],
  '\\bullet': 'bullet',
  '\\lim': 'limit'
};

function getNote(symbol) {
  var result = NOTES[symbol] || '';

  if (Array.isArray(result)) {
    result = result.join('<br>');
  }

  return result;
}

function latexToMarkup(latex, mf) {
  var parse = parser.parseTokens(lexer.tokenize(latex), 'math', null, mf.config.macros);
  var spans = mathAtom.decompose({
    mathstyle: 'displaystyle',
    macros: mf.config.macros
  }, parse);
  var base = core_span.makeSpan(spans, 'ML__base');
  var topStrut = core_span.makeSpan('', 'ML__strut');
  topStrut.setStyle('height', base.height, 'em');
  var bottomStrut = core_span.makeSpan('', 'ML__strut--bottom');
  bottomStrut.setStyle('height', base.height + base.depth, 'em');
  bottomStrut.setStyle('vertical-align', -base.depth, 'em');
  var wrapper = core_span.makeSpan([topStrut, bottomStrut, base], 'ML__mathlive');
  return wrapper.toMarkup();
}

function showPopoverWithLatex(mf, latex, displayArrows) {
  if (!latex || latex.length === 0) {
    hidePopover(mf);
    return;
  }

  var command = latex;
  var command_markup = latexToMarkup(SAMPLES[command] || latex, mf);
  var command_note = getNote(command);
  var command_shortcuts = editor_shortcuts.forCommand(command);
  var template = displayArrows ? '<div class="ML__popover__prev-shortcut" role="button" aria-label="Previous suggestion"><span><span>&#x25B2;</span></span></div>' : '';
  template += '<span class="ML__popover__content" role="button">';
  template += '<div class="ML__popover__command">' + command_markup + '</div>';

  if (command_note) {
    template += '<div class="ML__popover__note">' + command_note + '</div>';
  }

  if (command_shortcuts) {
    template += '<div class="ML__popover__shortcut">' + command_shortcuts + '</div>';
  }

  template += '</span>';
  template += displayArrows ? '<div class="ML__popover__next-shortcut" role="button" aria-label="Next suggestion"><span><span>&#x25BC;</span></span></div>' : '';
  showPopover(mf, template);
  var el = mf.popover.getElementsByClassName('ML__popover__content');

  if (el && el.length > 0) {
    mf._attachButtonHandlers(el[0], ['complete', {
      acceptSuggestion: true
    }]);
  }

  el = mf.popover.getElementsByClassName('ML__popover__prev-shortcut');

  if (el && el.length > 0) {
    mf._attachButtonHandlers(el[0], 'previousSuggestion');
  }

  el = mf.popover.getElementsByClassName('ML__popover__next-shortcut');

  if (el && el.length > 0) {
    mf._attachButtonHandlers(el[0], 'nextSuggestion');
  }
}

function updatePopoverPosition(mf, options) {
  // Check that the mathfield is still valid
  // (we're calling ourselves from requestAnimationFrame() and the mathfield
  // could have gotten destroyed
  if (!mf.element || mf.element.mathfield !== mf) return; // If the popover pane is visible...

  if (mf.popover.classList.contains('is-visible')) {
    if (options && options.deferred) {
      // Call ourselves again later, typically after the
      // rendering/layout of the DOM has been completed
      window.requestAnimationFrame(function () {
        return updatePopoverPosition(mf);
      });
    } else {
      if (!mf.mathlist.anchor() || mf.mathlist.anchor().type !== 'command') {
        hidePopover(mf);
      } else {
        // ... get the caret position
        var position = mf._getCaretPosition();

        if (position) setPopoverPosition(mf, position);
      }
    }
  }
}

function showPopover(mf, markup) {
  mf.popover.innerHTML = markup;

  var position = mf._getCaretPosition();

  if (position) setPopoverPosition(mf, position);
  mf.popover.classList.add('is-visible');
}

function setPopoverPosition(mf, position) {
  // get screen width & height (browser compatibility)
  var screen_height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
  var screen_width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; // get scrollbar size. This would be 0 in mobile device (also no needed).

  var scrollbar_width = window.innerWidth - document.documentElement.clientWidth;
  var scrollbar_height = window.innerHeight - document.documentElement.clientHeight;
  var virtualkeyboard_height = mf.virtualKeyboardVisible ? mf.virtualKeyboard.offsetHeight : 0; // prevent screen overflow horizontal.

  if (position.x + mf.popover.offsetWidth / 2 > screen_width - scrollbar_width) {
    mf.popover.style.left = screen_width - mf.popover.offsetWidth - scrollbar_width + 'px';
  } else if (position.x - mf.popover.offsetWidth / 2 < 0) {
    mf.popover.style.left = 0;
  } else {
    mf.popover.style.left = position.x - mf.popover.offsetWidth / 2 + 'px';
  } // and position the popover right below or above the caret


  if (position.y + mf.popover.offsetHeight + 5 > screen_height - scrollbar_height - virtualkeyboard_height) {
    mf.popover.classList.add('reverse-direction');
    mf.popover.style.top = position.y - position.height - mf.popover.offsetHeight - 5 + 'px';
  } else {
    mf.popover.classList.remove('reverse-direction');
    mf.popover.style.top = position.y + 5 + 'px';
  }
}

function hidePopover(mf) {
  mf.popover.classList.remove('is-visible');
}

/* harmony default export */ var editor_popover = ({
  getNote: getNote,
  SAMPLES: SAMPLES,
  NOTES: NOTES,
  showPopoverWithLatex: showPopoverWithLatex,
  showPopover: showPopover,
  hidePopover: hidePopover,
  updatePopoverPosition: updatePopoverPosition
});
// CONCATENATED MODULE: ./packages/addons/outputLatex.js
/**
 * This module outputs a formula to LaTeX.
 *
 * To use it, use the {@linkcode MathAtom#toLatex MathAtom.toLatex()}  method.
 *
 * @module addons/outputLatex
 * @private
 */



function findLongestRun(atoms, property, value) {
  var i = 0;

  if (property === 'fontFamily') {
    while (atoms[i]) {
      if (atoms[i].type !== 'mop' && (atoms[i].fontFamily || atoms[i].baseFontFamily) !== value) break;
      i++;
    }
  } else {
    while (atoms[i]) {
      if (atoms[i].type !== 'mop' && atoms[i][property] !== value) break;
      i++;
    }
  }

  return i;
}
/**
 *
 * @param {MathAtom} parent the parent or predecessor of the atom list
 * @param {MathAtom[]} atoms the list of atoms to transform to LaTeX
 * @param {boolean} expandMacro true if macros should be expanded
 * @result {string} a LaTeX string
 * @private
 */


function latexifyArray(parent, properties, atoms, expandMacro) {
  if (atoms.length === 0) return '';

  if (properties.length === 0) {
    // We've (recursively) checked:
    // all the atoms have the same properties
    return atoms.map(function (x) {
      return x.toLatex(expandMacro);
    }).join('');
  }

  var result = '';
  var prefix = '';
  var suffix = '';
  var prop = properties[0];
  var propValue = atoms[0][prop];
  if (prop === 'fontFamily') propValue = atoms[0].fontFamily || atoms[0].baseFontFamily;
  var i = findLongestRun(atoms, prop, propValue);

  if (atoms[0].mode === 'text') {
    if (prop === 'fontShape' && atoms[0].fontShape) {
      if (atoms[0].fontShape === 'it') {
        prefix = '\\textit{';
        suffix = '}';
      } else if (atoms[0].fontShape === 'sl') {
        prefix = '\\textsl{';
        suffix = '}';
      } else if (atoms[0].fontShape === 'sc') {
        prefix = '\\textsc{';
        suffix = '}';
      } else if (atoms[0].fontShape === 'n') {
        prefix = '\\textup{';
        suffix = '}';
      } else {
        prefix = '\\text{\\fontshape{' + atoms[0].fontShape + '}';
        suffix = '}';
      }
    } else if (prop === 'fontSeries' && atoms[0].fontSeries) {
      if (atoms[0].fontSeries === 'b') {
        prefix = '\\textbf{';
        suffix = '}';
      } else if (atoms[0].fontSeries === 'l') {
        prefix = '\\textlf{';
        suffix = '}';
      } else if (atoms[0].fontSeries === 'm') {
        prefix = '\\textmd{';
        suffix = '}';
      } else {
        prefix = '\\text{\\fontseries{' + atoms[0].fontSeries + '}';
        suffix = '}';
      }
    } else if (prop === 'mode') {
      var allAtomsHaveShapeOrSeriesOrFontFamily = true;

      for (var j = 0; j < i; j++) {
        if (!atoms[j].fontSeries && !atoms[j].fontShape && !atoms[j].fontFamily && !atoms[j].baseFontFamily) {
          allAtomsHaveShapeOrSeriesOrFontFamily = false;
          break;
        }
      }

      if (!allAtomsHaveShapeOrSeriesOrFontFamily) {
        // Wrap in text, only if there isn't a shape or series on
        // all the atoms, because if so, it will be wrapped in a
        // \\textbf, \\textit, etc... and the \\text would be redundant
        prefix = '\\text{';
        suffix = '}';
      }
    } else if (prop === 'fontSize' && atoms[0].fontSize) {
      var command = {
        'size1': 'tiny',
        'size2': 'scriptsize',
        'size3': 'footnotesize',
        'size4': 'small',
        'size5': 'normalsize',
        'size6': 'large',
        'size7': 'Large',
        'size8': 'LARGE',
        'size9': 'huge',
        'size10': 'Huge'
      }[atoms[0].fontSize] || '';
      prefix = '{\\' + command + ' ';
      suffix = '}';
    } else if (prop === 'fontFamily' && (atoms[0].fontFamily || atoms[0].baseFontFamily)) {
      var _command = {
        'cmr': 'textrm',
        'cmtt': 'texttt',
        'cmss': 'textsf'
      }[atoms[0].fontFamily || atoms[0].baseFontFamily] || '';

      if (!_command) {
        prefix += '{\\fontfamily{' + (atoms[0].fontFamily || atoms[0].baseFontFamily) + '}';
        suffix = '}';
      } else {
        prefix = '\\' + _command + '{';
        suffix = '}';
      }
    }
  } else if (atoms[0].mode === 'math') {
    if (prop === 'fontSeries') {
      if (atoms[0].fontSeries === 'b') {
        prefix = '\\mathbf{';
        suffix = '}';
      } else if (atoms[0].fontSeries && atoms[0].fontSeries !== 'n') {
        prefix = '{\\fontSeries{' + atoms[0].fontSeries + '}';
        suffix = '}';
      }
    } else if (prop === 'fontShape') {
      if (atoms[0].fontShape === 'it') {
        prefix = '\\mathit{';
        suffix = '}';
      } else if (atoms[0].fontShape === 'n') {
        prefix = "{\\upshape ";
        suffix = '}';
      } else if (atoms[0].fontShape && atoms[0].fontShape !== 'n') {
        prefix = '{\\fontShape{' + atoms[0].fontShape + '}';
        suffix = '}';
      }
    } else if (prop === 'fontSize' && atoms[0].fontSize) {
      var _command2 = {
        'size1': 'tiny',
        'size2': 'scriptsize',
        'size3': 'footnotesize',
        'size4': 'small',
        'size5': 'normalsize',
        'size6': 'large',
        'size7': 'Large',
        'size8': 'LARGE',
        'size9': 'huge',
        'size10': 'Huge'
      }[atoms[0].fontSize] || '';

      prefix = '{\\' + _command2 + ' ';
      suffix = '}';
    } else if (prop === 'fontFamily' && atoms[0].fontFamily) {
      if (!/^(math|main)$/.test(atoms[0].fontFamily)) {
        var _command3 = {
          'cal': 'mathcal',
          'frak': 'mathfrak',
          'bb': 'mathbb',
          'scr': 'mathscr',
          'cmr': 'mathrm',
          'cmtt': 'mathtt',
          'cmss': 'mathsf'
        }[atoms[0].fontFamily] || '';

        if (!_command3) {
          prefix += '{\\fontfamily{' + atoms[0].fontFamily + '}';
          suffix = '}';
        } else {
          if (/^\\operatorname{/.test(atoms[0].latex)) {
            return atoms[0].latex + latexifyArray(parent, properties, atoms.slice(i), expandMacro);
          }

          if (!atoms[0].isFunction) {
            prefix = '\\' + _command3 + '{';
            suffix = '}';
          } // These command have an implicit fontSeries/fontShape, so
          // we're done checking properties now.


          properties = [];
        }
      }
    } else if (prop === 'fontFamily' && atoms[0].baseFontFamily) {
      // This is a command that applied a base font to the atoms.
      if (atoms[0].latex && atoms[0].latex.startsWith('\\')) {
        prefix = '';
        suffix = '';
      } else {
        var _command4 = {
          'cal': 'mathcal',
          'frak': 'mathfrak',
          'bb': 'mathbb',
          'scr': 'mathscr',
          'cmr': 'mathrm',
          'cmtt': 'mathtt',
          'cmss': 'mathsf'
        }[atoms[0].baseFontFamily] || '';

        if (_command4) {
          prefix = '\\' + _command4 + '{';
          suffix = '}';
        }
      }
    }
  }

  if (prop === 'color' && atoms[0].color && atoms[0].color !== 'none' && (!parent || parent.color !== atoms[0].color)) {
    prefix = '\\textcolor{' + core_color.colorToString(atoms[0].color) + '}{';
    suffix = '}';
  }

  if (prop === 'backgroundColor' && atoms[0].backgroundColor && atoms[0].backgroundColor !== 'none' && (!parent || parent.backgroundColor !== atoms[0].backgroundColor)) {
    prefix = '\\colorbox{' + core_color.colorToString(atoms[0].backgroundColor) + '}{';
    suffix = '}';
  }

  result += prefix;
  result += latexifyArray(parent, properties.slice(1), atoms.slice(0, i), expandMacro);
  result += suffix; // latexify the rest

  result += latexifyArray(parent, properties, atoms.slice(i), expandMacro);
  return result;
}
/**
 * Given an atom or an array of atoms, return a LaTeX string representation
 * @return {string}
 * @param {string|MathAtom|MathAtom[]} value
 * @private
 */


function latexify(parent, value, expandMacro) {
  var result = '';

  if (Array.isArray(value) && value.length > 0) {
    if (value[0].type === 'first') {
      // Remove the 'first' atom, if present
      value = value.slice(1);
      if (value.length === 0) return '';
    }

    result = latexifyArray(parent, ['mode', 'color', 'backgroundColor', 'fontSize', 'fontFamily', 'fontShape', 'fontSeries'], value, expandMacro); // if (result.startsWith('{') && result.endsWith('}')) {
    //     result = result.slice(1, result.length - 1);
    // }
  } else if (typeof value === 'number' || typeof value === 'boolean') {
    result = value.toString();
  } else if (typeof value === 'string') {
    result = value.replace(/\s/g, '~');
  } else if (value && typeof value.toLatex === 'function') {
    result = value.toLatex(expandMacro);
  }

  return result;
}
/**
 * Return a LaTeX representation of the atom.
 *
 * @param {boolean} expandMacro - If true, macros are fully expanded. This will
 * no longer round-trip.
 *
 * @return {string}
 * @memberof module:core/mathAtom~MathAtom
 * @private
 */


mathAtom.MathAtom.prototype.toLatex = function (expandMacro) {
  expandMacro = expandMacro === undefined ? false : expandMacro;
  var result = '';
  var col,
      row = 0;
  var i = 0;
  var m = !this.latex ? null : this.latex.match(/^(\\[^{\s0-9]+)/);
  var command = m ? m[1] : null; // this.mode=='text' is handled in the switch by looking at this.type===''

  switch (this.type) {
    case 'group':
      result += this.latexOpen || (this.cssId || this.cssClass ? '' : '{');
      if (this.cssId) result += '\\cssId{' + this.cssId + '}{';

      if (this.cssClass === 'ML__emph') {
        result += '\\emph{' + latexify(this, this.body, expandMacro) + '}';
      } else {
        if (this.cssClass) result += '\\class{' + this.cssClass + '}{';
        result += expandMacro ? latexify(this, this.body, true) : this.latex || latexify(this, this.body, false);
        if (this.cssClass) result += '}';
      }

      if (this.cssId) result += '}';
      result += this.latexClose || (this.cssId || this.cssClass ? '' : '}');
      break;

    case 'array':
      result += '\\begin{' + this.env.name + '}';

      if (this.env.name === 'array') {
        result += '{';

        if (this.colFormat) {
          for (i = 0; i < this.colFormat.length; i++) {
            if (this.colFormat[i].align) {
              result += this.colFormat[i].align;
            } else if (this.colFormat[i].rule) {
              result += '|';
            }
          }
        }

        result += '}';
      }

      for (row = 0; row < this.array.length; row++) {
        for (col = 0; col < this.array[row].length; col++) {
          if (col > 0) result += ' & ';
          result += latexify(this, this.array[row][col], expandMacro);
        } // Adds a separator between rows (but not after the last row)


        if (row < this.array.length - 1) {
          result += ' \\\\ ';
        }
      }

      result += '\\end{' + this.env.name + '}';
      break;

    case 'root':
      result = latexify(this, this.body, expandMacro);
      break;

    case 'genfrac':
      if (/^(choose|atop|over)$/.test(this.body)) {
        // Infix commands.
        result += '{';
        result += latexify(this, this.numer, expandMacro);
        result += '\\' + this.body + ' ';
        result += latexify(this, this.denom, expandMacro);
        result += '}';
      } else {
        // @todo: deal with fracs delimiters
        result += command;
        result += "{".concat(latexify(this, this.numer, expandMacro), "}{").concat(latexify(this, this.denom, expandMacro), "}");
      }

      break;

    case 'surd':
      result += '\\sqrt';

      if (this.index) {
        result += '[';
        result += latexify(this, this.index, expandMacro);
        result += ']';
      }

      result += "{".concat(latexify(this, this.body, expandMacro), "}");
      break;

    case 'leftright':
      console.log(this.inner, result);

      if (this.inner) {
        result += this.leftDelim || '';
        if (this.leftDelim && this.leftDelim.length > 1) result += ' ';
        result += latexify(this, this.body, expandMacro);
        result += this.rightDelim || '';
        if (this.rightDelim && this.rightDelim.length > 1) result += ' '; // 隐藏mleft,mright,'.'等
        // result += '\\left' + (this.leftDelim || '.');
        // if (this.leftDelim && this.leftDelim.length > 1) result += ' ';
        // result += latexify(this, this.body, expandMacro);
        // result += '\\right' + (this.rightDelim || '.');
        // if (this.rightDelim && this.rightDelim.length > 1) result += ' ';
      } else {
        result += this.leftDelim || '';
        if (this.leftDelim && this.leftDelim.length > 1) result += ' ';
        result += latexify(this, this.body, expandMacro);
        result += this.rightDelim || '';
        if (this.rightDelim && this.rightDelim.length > 1) result += ' '; // 隐藏mleft,mright,'.'等
        // result += '\\mleft' + (this.leftDelim || '.');
        // if (this.leftDelim && this.leftDelim.length > 1) result += ' ';
        // result += latexify(this, this.body, expandMacro);
        // result += '\\mright' + (this.rightDelim || '.');
        // if (this.rightDelim && this.rightDelim.length > 1) result += ' ';
      }

      break;

    case 'delim':
    case 'sizeddelim':
      result += command + '{' + this.delim + '}';
      break;

    case 'rule':
      result += command;

      if (this.shift) {
        result += "[".concat(latexify(this, this.shift, expandMacro), "em]");
      }

      result += "{".concat(latexify(this, this.width, expandMacro), "em}{").concat(latexify(this, this.height, expandMacro), "em}");
      break;

    case 'line':
    case 'overlap':
    case 'accent':
      result += "".concat(command, "{").concat(latexify(this, this.body, expandMacro), "}");
      break;

    case 'overunder':
      result += "".concat(command, "{").concat(latexify(this, this.overscript || this.underscript, expandMacro), "}{").concat(latexify(parent, this.body, expandMacro), "}");
      break;

    case 'mord':
    case 'minner':
    case 'mbin':
    case 'mrel':
    case 'mpunct':
    case 'mopen':
    case 'mclose':
    case 'textord':
    case '':
      // mode = text
      if (/^\\(mathbin|mathrel|mathopen|mathclose|mathpunct|mathord|mathinner)/.test(command)) {
        result += command + '{' + latexify(this, this.body, expandMacro) + '}';
      } else if (command === '\\char"') {
        result += this.latex + ' ';
      } else if (command === "\\unicode") {
        result += "\\unicode{\"";
        result += ('000000' + this.body.charCodeAt(0).toString(16)).toUpperCase().substr(-6);
        result += '}';
      } else if (this.latex || typeof this.body === 'string') {
        // Not ZERO-WIDTH
        if (this.latex && this.latex[0] === '\\') {
          result += this.latex;

          if (/[a-zA-Z0-9]$/.test(this.latex)) {
            result += ' ';
          }
        } else if (command) {
          result += command;
        } else {
          result += this.body !== "\u200B" ? this.latex || this.body : '';
        }
      }

      break;

    case 'mop':
      if (this.body !== "\u200B") {
        // Not ZERO-WIDTH
        if (command === '\\mathop') {
          // The argument to mathop is math, therefor this.body can be an expression
          result += command + '{' + latexify(this, this.body, expandMacro) + '}';
        } else if (command === '\\operatorname') {
          // The argument to operator name is text, therefore this.body is a string
          result += command + '{' + this.body + '}';
        } else {
          if (this.latex && this.latex[0] === '\\') {
            result += this.latex;

            if (/[a-zA-Z0-9]$/.test(this.latex)) {
              result += ' ';
            }
          } else if (command) {
            result += command;
          } else {
            result += this.body !== "\u200B" ? this.latex || this.body : '';
          }
        }
      }

      if (this.explicitLimits) {
        if (this.limits === 'limits') result += '\\limits ';
        if (this.limits === 'nolimits') result += '\\nolimits ';
      }

      break;

    case 'box':
      if (command === '\\bbox') {
        result += command;

        if (isFinite(this.padding) || typeof this.border !== 'undefined' || typeof this.backgroundcolor !== 'undefined') {
          var bboxParams = [];

          if (isFinite(this.padding)) {
            bboxParams.push(Math.floor(1e2 * this.padding) / 1e2 + 'em');
          }

          if (this.border) {
            bboxParams.push('border:' + this.border);
          }

          if (this.backgroundcolor) {
            bboxParams.push(core_color.colorToString(this.backgroundcolor));
          }

          result += "[".concat(bboxParams.join(','), "]");
        }

        result += "{".concat(latexify(this, this.body, expandMacro), "}");
      } else if (command === '\\boxed') {
        result += "\\boxed{".concat(latexify(this, this.body, expandMacro), "}");
      } else {
        // \\colorbox, \\fcolorbox
        result += command;

        if (this.framecolor) {
          result += "{".concat(core_color.colorToString(this.framecolor), "}");
        }

        if (this.backgroundcolor) {
          result += "{".concat(core_color.colorToString(this.backgroundcolor), "}");
        }

        result += "{".concat(latexify(this, this.body, expandMacro), "}");
      }

      break;

    case 'spacing':
      // Three kinds of spacing commands:
      // \hskip and \kern which take one implicit parameter
      // \hspace and hspace* with take one *explicit* parameter
      // \quad, etc... which take no parameters.
      result += command;

      if (command === '\\hspace' || command === '\\hspace*') {
        result += '{';

        if (this.width) {
          result += this.width + 'em';
        } else {
          result += '0em';
        }

        result += '}';
      } else {
        result += ' ';

        if (this.width) {
          result += this.width + 'em ';
        }
      }

      break;

    case 'enclose':
      result += command;

      if (command === '\\enclose') {
        result += '{';
        var sep = '';

        for (var notation in this.notation) {
          if (Object.prototype.hasOwnProperty.call(this.notation, notation) && this.notation[notation]) {
            result += sep + notation;
            sep = ' ';
          }
        }

        result += '}'; // \enclose can have optional parameters...

        var style = '';
        sep = '';

        if (this.backgroundcolor && this.backgroundcolor !== 'transparent') {
          style += sep + 'mathbackground="' + core_color.colorToString(this.backgroundcolor) + '"';
          sep = ',';
        }

        if (this.shadow && this.shadow !== 'auto') {
          style += sep + 'shadow="' + this.shadow + '"';
          sep = ',';
        }

        if (this.strokeWidth !== 1 || this.strokeStyle !== 'solid') {
          style += sep + this.borderStyle;
          sep = ',';
        } else if (this.strokeColor && this.strokeColor !== 'currentColor') {
          style += sep + 'mathcolor="' + core_color.colorToString(this.strokeColor) + '"';
          sep = ',';
        }

        if (style) {
          result += "[".concat(style, "]");
        }
      }

      result += "{".concat(latexify(this, this.body, expandMacro), "}");
      break;

    case 'mathstyle':
      result += '\\' + this.mathstyle + ' ';
      break;

    case 'space':
      result += this.latex;
      break;

    case 'placeholder':
      result += '\\placeholder{' + (this.value || '') + '}';
      break;

    case 'first':
    case 'command':
    case 'msubsup':
      break;

    case 'error':
      result += this.latex;
      break;

    default:
      console.warn('Unexpected atom type "' + this.type + '" in "' + (this.latex || this.value) + '"');
      break;
  }

  if (this.superscript) {
    var sup = latexify(this, this.superscript, expandMacro);

    if (sup.length === 1) {
      if (sup === "\u2032") {
        // PRIME
        sup = '\\prime ';
      } else if (sup === "\u2033") {
        // DOUBLE-PRIME
        sup = '\\doubleprime ';
      }

      result += '^' + sup;
    } else {
      result += '^{' + sup + '}';
    }
  }

  if (this.subscript) {
    var sub = latexify(this, this.subscript, expandMacro);

    if (sub.length === 1) {
      result += '_' + sub;
    } else {
      result += '_{' + sub + '}';
    }
  }

  return result;
}; // Export the public interface for this module


/* harmony default export */ var outputLatex = ({});
// CONCATENATED MODULE: ./packages/editor/l10n.js
function l10n_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function l10n_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { l10n_ownKeys(Object(source), true).forEach(function (key) { l10n_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { l10n_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function l10n_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function l10n(s) {
  var language = l10n.locale.substring(0, 2);
  var result = ''; // Attempt to find a match for the current locale

  if (l10n.strings[l10n.locale]) result = l10n.strings[l10n.locale][s]; // If none is found, attempt to find a match for the language

  if (!result && l10n.strings[language]) result = l10n.strings[language][s]; // If none is found, try english

  if (!result) result = l10n.strings['en'][s]; // If that didn't work, use the key...

  if (!result) result = s;
  return result;
}

l10n.plural = function (value, s, options) {
  options = options || {};
  options.type = options.type || 'cardinal';
  var language = l10n.locale.substring(0, 2);
  var rules = options.type === 'ordinal' ? l10n.ordinal : l10n.cardinal;
  var rule = options.type === 'ordinal' ? l10n._ordinalPluralCategories.indexOf(rules.select(value)) : l10n._cardinalPluralCategories.indexOf(rules.select(value));
  var result;
  if (l10n.strings[l10n.locale]) result = l10n.strings[l10n.locale][s];
  if (!result && l10n.strings[language]) result = l10n.strings[language][s];

  if (!result) {
    result = l10n.strings['en'][s];
    if (!result) result = s;

    if (options.type === 'ordinal') {
      rule = l10n._ordinalPluralCategories.indexOf(l10n._ordinalEnglish.select(value));
    } else {
      rule = l10n._cardinalPluralCategories.indexOf(l10n._cardinalEnglish.select(value));
    }
  }

  return result.split(';')[rule] || result.split(';')[0];
};
/*
 * Two forms for this function:
 * - merge(locale, strings)
 * Merge a dictionary of keys -> values for the specified locale
 * - merge(strings)
 * Merge a dictionary of locale code -> dictionary of keys -> values
 *
 */


l10n.merge = function (locale, strings) {
  if (locale && strings) {
    var savedLocale = l10n._locale;
    l10n.locale = locale; // Load the necessary json file

    l10n.strings[locale] = l10n_objectSpread({}, l10n.strings[locale], {}, strings);
    l10n.locale = savedLocale;
  } else if (locale && !strings) {
    strings = locale;
    Object.keys(strings).forEach(function (l) {
      return l10n.merge(l, strings[l]);
    });
  }
}; // Add getter and setter for the _locale property of l10n


Object.defineProperty(l10n, 'locale', {
  set: function set(locale) {
    l10n._locale = locale;
    l10n._ordinal = null;
    l10n._cardinal = null;
  },
  get: function get() {
    // Use the browser defined language as the default language,
    // "english" if not running in a browser (node.js)
    if (!l10n._locale) {
      // Use the setter, which will load the necessary .json files.
      l10n._locale = typeof navigator === 'undefined' ? 'en' : navigator.language.slice(0, 5);
    }

    return l10n._locale;
  }
});
Object.defineProperty(l10n, 'ordinal', {
  get: function get() {
    if (!l10n._ordinal) {
      l10n._ordinalEnglish = new Intl.PluralRules('en', {
        type: 'ordinal'
      });
      l10n._ordinalEnglishPluralCategories = l10n._ordinalEnglish.resolvedOptions().pluralCategories;
      l10n._ordinal = new Intl.PluralRules(l10n.locale, {
        type: 'ordinal'
      });
      l10n._ordinalPluralCategories = l10n._ordinal.resolvedOptions().pluralCategories; //    "zero", "one", "two", "few", "many" and "other"
    }

    return l10n._ordinal;
  }
});
Object.defineProperty(l10n, 'cardinal', {
  get: function get() {
    if (!l10n._cardinal) {
      l10n._cardinalEnglish = new Intl.PluralRules('en', {
        type: 'cardinal'
      });
      l10n._cardinalEnglishPluralCategories = l10n._cardinalEnglish.resolvedOptions().pluralCategories;
      l10n._cardinal = new Intl.PluralRules(l10n.locale, {
        type: 'cardinal'
      });
      l10n._cardinaPluralCategories = l10n._ordinal.resolvedOptions().pluralCategories;
    }

    return l10n._cardinal;
  }
});
l10n.strings = {
  "en": {
    "keyboard.tooltip.functions": "Functions",
    "keyboard.tooltip.greek": "Greek Letters",
    "keyboard.tooltip.command": "LaTeX Command Mode",
    "keyboard.tooltip.numeric": "Numeric",
    "keyboard.tooltip.roman": "Symbols and Roman Letters",
    "tooltip.copy to clipboard": "Copy to Clipboard",
    "tooltip.redo": "Redo",
    "tooltip.toggle virtual keyboard": "Toggle Virtual Keyboard",
    "tooltip.undo": "Undo"
  },
  "ar": {
    "keyboard.tooltip.functions": "مهام",
    "keyboard.tooltip.greek": "حروف يونانية",
    "keyboard.tooltip.command": "حالة تلقي الأوامر اللاتك",
    "keyboard.tooltip.numeric": "الرقمية",
    "keyboard.tooltip.roman": "رموز الاحرف الرومانية",
    "tooltip.copy to clipboard": "نسخ إلى الحافظة",
    "tooltip.redo": "الإعادة",
    "tooltip.toggle virtual keyboard": "تبديل لوحة المفاتيح الإفتراضية",
    "tooltip.undo": "إلغاء"
  },
  "de": {
    "keyboard.tooltip.functions": "Funktionen",
    "keyboard.tooltip.greek": "Griechische Buchstaben",
    "keyboard.tooltip.command": "LaTeX-Befehlsmodus",
    "keyboard.tooltip.numeric": "Numerisch",
    "keyboard.tooltip.roman": "Symbole und römische Buchstaben",
    "tooltip.copy to clipboard": "In die Zwischenablage kopieren",
    "tooltip.redo": "Wiederholen",
    "tooltip.toggle virtual keyboard": "Virtuelle Tastatur umschalten",
    "tooltip.undo": "Widerrufen"
  },
  "el": {
    "keyboard.tooltip.functions": "συναρτήσεις",
    "keyboard.tooltip.greek": "ελληνικά γράμματα",
    "keyboard.tooltip.command": "Λειτουργία εντολών LaTeX",
    "keyboard.tooltip.numeric": "Αριθμητικός",
    "keyboard.tooltip.roman": "Σύμβολα και ρωμαϊκά γράμματα",
    "tooltip.copy to clipboard": "Αντιγραφή στο πρόχειρο",
    "tooltip.redo": "Ξανακάνω",
    "tooltip.toggle virtual keyboard": "Εναλλαγή εικονικού πληκτρολογίου",
    "tooltip.undo": "Ξεκάνω"
  },
  "es": {
    "keyboard.tooltip.functions": "Funciones",
    "keyboard.tooltip.greek": "Letras griegas",
    "keyboard.tooltip.command": "Modo Comando LaTeX",
    "keyboard.tooltip.numeric": "Numérico",
    "keyboard.tooltip.roman": "Símbolos y letras romanas",
    "tooltip.copy to clipboard": "Copiar al portapapeles",
    "tooltip.redo": "Rehacer",
    "tooltip.toggle virtual keyboard": "Alternar teclado virtual",
    "tooltip.undo": "Deshacer"
  },
  "fa": {
    "keyboard.tooltip.functions": "توابع",
    "keyboard.tooltip.greek": "حروف یونانی",
    "keyboard.tooltip.command": "حالت دستور لاتک",
    "keyboard.tooltip.numeric": "عددی",
    "keyboard.tooltip.roman": "علائم و حروف لاتین",
    "tooltip.copy to clipboard": "کپی به کلیپبورد",
    "tooltip.redo": "بازگشت به بعد",
    "tooltip.toggle virtual keyboard": "نمایش/نهفتن کیبورد مجازی",
    "tooltip.undo": "بازگشت به قبل"
  },
  "fr": {
    "keyboard.tooltip.functions": "Fonctions",
    "keyboard.tooltip.greek": "Lettres grecques",
    "keyboard.tooltip.command": "Mode de commandes LaTeX",
    "keyboard.tooltip.numeric": "Numérique",
    "keyboard.tooltip.roman": "Lettres et symboles romains",
    "tooltip.copy to clipboard": "Copier dans le presse-papiers",
    "tooltip.redo": "Rétablir",
    "tooltip.toggle virtual keyboard": "Afficher/Masquer le clavier virtuel",
    "tooltip.undo": "Annuler"
  },
  "it": {
    "keyboard.tooltip.functions": "Funzioni",
    "keyboard.tooltip.greek": "Lettere greche",
    "keyboard.tooltip.command": "Modalità di comando LaTeX",
    "keyboard.tooltip.numeric": "Numerico",
    "keyboard.tooltip.roman": "Simboli e lettere romane",
    "tooltip.copy to clipboard": "Copia negli appunti",
    "tooltip.redo": "Rifare",
    "tooltip.toggle virtual keyboard": "Attiva / disattiva la tastiera virtuale",
    "tooltip.undo": "Disfare"
  },
  "ja": {
    "keyboard.tooltip.functions": "関数",
    "keyboard.tooltip.greek": "ギリシャ文字",
    "keyboard.tooltip.command": "LaTeXコマンドモード",
    "keyboard.tooltip.numeric": "数値",
    "keyboard.tooltip.roman": "記号とローマ字",
    "tooltip.copy to clipboard": "クリップボードにコピー",
    "tooltip.redo": "やり直し",
    "tooltip.toggle virtual keyboard": "仮想キーボードの切り替え",
    "tooltip.undo": "元に戻す"
  },
  "pl": {
    "keyboard.tooltip.functions": "Funkcje",
    "keyboard.tooltip.greek": "Litery greckie",
    "keyboard.tooltip.command": "Tryb poleceń LaTeX",
    "keyboard.tooltip.numeric": "Numeryczne",
    "keyboard.tooltip.roman": "Symbole i litery rzymskie",
    "tooltip.copy to clipboard": "Kopiuj do Schowka",
    "tooltip.redo": "Przywróć",
    "tooltip.toggle virtual keyboard": "Przełącz wirtualną klawiaturę",
    "tooltip.undo": "Cofnij"
  },
  "ru": {
    "keyboard.tooltip.functions": "Функции",
    "keyboard.tooltip.greek": "Греческие буквы",
    "keyboard.tooltip.command": "Режим командной строки LaTeX",
    "keyboard.tooltip.numeric": "числовой",
    "keyboard.tooltip.roman": "Символы и римские буквы",
    "tooltip.copy to clipboard": "Скопировать в буфер обмена",
    "tooltip.redo": "переделывать",
    "tooltip.toggle virtual keyboard": "Переключить виртуальную клавиатуру",
    "tooltip.undo": "расстегивать"
  }
};
/* harmony default export */ var editor_l10n = ({
  l10n: l10n
});
// CONCATENATED MODULE: ./packages/editor/editor-virtualKeyboard.js
function editor_virtualKeyboard_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { editor_virtualKeyboard_typeof = function _typeof(obj) { return typeof obj; }; } else { editor_virtualKeyboard_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return editor_virtualKeyboard_typeof(obj); }

function editor_virtualKeyboard_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function editor_virtualKeyboard_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { editor_virtualKeyboard_ownKeys(Object(source), true).forEach(function (key) { editor_virtualKeyboard_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { editor_virtualKeyboard_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function editor_virtualKeyboard_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @module editor/virtualKeyboard
 * @private
 */







var KEYBOARDS = {
  'numeric': {
    tooltip: 'keyboard.tooltip.numeric',
    layer: 'math',
    label: '123',
    layers: ['math']
  },
  'roman': {
    tooltip: 'keyboard.tooltip.roman',
    layer: 'lower-roman',
    label: 'ABC',
    layers: ['lower-roman', 'upper-roman', 'symbols']
  },
  'greek': {
    tooltip: 'keyboard.tooltip.greek',
    layer: 'lower-greek',
    label: '&alpha;&beta;&gamma;',
    classes: 'tex-math',
    layers: ['lower-greek', 'upper-greek']
  },
  'functions': {
    tooltip: 'keyboard.tooltip.functions',
    layer: 'functions',
    label: '<i>f</i>&thinsp;()',
    classes: 'tex',
    layers: ['functions']
  },
  'command': {
    tooltip: 'keyboard.tooltip.command',
    // For the command keyboard, perform a command rather than
    // doing a simple layer switch, as we want to enter command mode
    // when the keyboard is activated
    command: 'enterCommandMode',
    label: "<svg><use xlink:href='#svg-command' /></svg>",
    layers: ['lower-command', 'upper-command', 'symbols-command']
  },
  'style': {
    tooltip: 'keyboard.tooltip.style',
    layer: 'style',
    label: '<b>b</b><i>i</i>𝔹'
  }
};
var SHIFTED_KEYS = {
  '\\varphi ': {
    label: '&Phi;',
    insert: '\\Phi '
  },
  '\\varsigma ': {
    label: '&Sigma;',
    insert: '\\Sigma '
  },
  '\\epsilon ': {
    label: '&#x0190;',
    insert: '{\\char"0190}'
  },
  '\\rho ': {
    label: '&#x3A1',
    insert: '{\\char"3A1}'
  },
  '\\tau ': {
    label: '&#x3A4;',
    insert: '{\\char"3A4}'
  },
  "\\upsilon ": {
    label: '&Upsilon;',
    insert: "\\Upsilon "
  },
  '\\theta ': {
    label: '&Theta;',
    insert: '\\Theta '
  },
  '\\iota ': {
    label: '&Iota;',
    insert: '{\\char"399}'
  },
  '\\omicron ': {
    label: '&#x039F;',
    insert: '{\\char"39F}'
  },
  '\\pi ': {
    label: '&Pi;',
    insert: '\\Pi '
  },
  '\\alpha ': {
    label: '&Alpha;',
    insert: '{\\char"391}'
  },
  '\\sigma ': {
    label: '&Sigma;',
    insert: '\\Sigma '
  },
  '\\delta ': {
    label: '&Delta;',
    insert: '\\Delta '
  },
  '\\phi ': {
    label: '&#x03a6;',
    insert: '\\Phi '
  },
  '\\gamma ': {
    label: '&Gamma;',
    insert: '\\Gamma '
  },
  '\\eta ': {
    label: '&Eta;',
    insert: '{\\char"397}'
  },
  '\\xi ': {
    label: '&Xi;',
    insert: '\\Xi '
  },
  '\\kappa ': {
    label: '&Kappa;',
    insert: '{\\char"39A}'
  },
  '\\lambda ': {
    label: '&Lambda;',
    insert: '\\Lambda '
  },
  '\\zeta ': {
    label: '&Zeta;',
    insert: '{\\char"396}'
  },
  '\\chi ': {
    label: '&Chi;',
    insert: '{\\char"3A7}'
  },
  '\\psi ': {
    label: '&Psi;',
    insert: '\\Psi '
  },
  '\\omega ': {
    label: '&Omega;',
    insert: '\\Omega '
  },
  '\\beta ': {
    label: '&Beta;',
    insert: '{\\char"392}'
  },
  '\\nu ': {
    label: '&Nu;',
    insert: '{\\char"39D}'
  },
  '\\mu ': {
    label: '&Mu;',
    insert: '{\\char"39C}'
  }
}; // const FUNCTIONS = [
//     'Basic',
//         ['\\sin', '\\cos', '\\tan', '\\min', '\\max', '\\gcd', '\\lcm', '\\repeat', 'encapsulate', 'recognize'],
//     'Operators',
//         ['\\sum', '\\prod', '\\bigcup_x']
// ]

var ALT_KEYS_BASE = {
  '0': ['\\emptyset', '\\varnothing', '\\infty', {
    latex: '#?_0',
    insert: '#@_0'
  }, '\\circ', '\\bigcirc', '\\bullet'],
  '2': ['\\frac{1}{2}', {
    latex: '#?^2',
    insert: '#@^2'
  }],
  '3': ['\\frac{1}{3}', {
    latex: '#?^3',
    insert: '#@^3'
  }],
  '.': [',', ';', '\\colon', {
    latex: ':',
    aside: 'ratio'
  }, {
    latex: '\\cdotp',
    aside: 'center dot',
    classes: 'box'
  }, {
    latex: '\\cdots',
    aside: 'center ellipsis',
    classes: 'box'
  }, {
    latex: '\\ldotp',
    aside: 'low dot',
    classes: 'box'
  }, {
    latex: '\\ldots',
    aside: 'low ellipsis',
    classes: 'box'
  }, {
    latex: '\\vdots',
    aside: '',
    classes: 'box'
  }, {
    latex: '\\ddots',
    aside: '',
    classes: 'box'
  }, '\\odot', '\\oslash', '\\circledcirc'],
  '*': ['\\cdot', '\\ast', '\\star', '\\bigstar', '\\ltimes', '\\rtimes', '\\rightthreetimes', '\\leftthreetimes', '\\intercal', '\\prod', {
    latex: '\\prod_{n\\mathop=0}^{\\infty}',
    classes: 'small'
  }],
  '+': ['\\pm', '\\mp', '\\sum', {
    latex: '\\sum_{n\\mathop=0}^{\\infty}',
    classes: 'small'
  }, '\\dotplus', '\\oplus'],
  '-': ['\\pm', '\\mp', '\\ominus', '\\vert #0  \\vert'],
  '/': ['\\divideontimes', '/', '\\div'],
  '(': ['\\left( #0\\right)', '\\left[ #0\\right]', '\\left\\{ #0\\right\\}', '\\left\\langle #0\\right\\rangle', '\\lfloor', '\\llcorner', '(', '\\lbrack', '\\lvert', '\\lVert', '\\lgroup', '\\langle', '\\lceil', "\\ulcorner", '\\lmoustache', '\\lbrace'],
  ')': ['\\rfloor', '\\lrcorner', ')', '\\rbrack', '\\rvert', '\\rVert', '\\rgroup', '\\rangle', '\\rceil', "\\urcorner", '\\rmoustache', '\\rbrace'],
  '=': ['\\cong', '\\asymp', '\\equiv', '\\differencedelta', '\\varpropto', '\\thickapprox', '\\approxeq', '\\thicksim', '\\backsim', '\\eqsim', '\\simeq', '\\Bumpeq', '\\bumpeq', '\\doteq', '\\Doteq', '\\fallingdotseq', '\\risingdotseq', '\\coloneq', '\\eqcirc', '\\circeq', '\\triangleq', '\\between'],
  '!=': ['\\neq', '\\ncong', '', '\\nsim'],
  '<': ['\\leq', '\\leqq', '\\lneqq', '\\ll', '\\nless', '\\nleq', '\\precsim', '\\lesssim', '\\lessgtr', '\\prec', '\\preccurlyeq', '\\lessdot', '\\nprec'],
  '>': ['\\geq', '\\geqq', '\\gneqq', '\\gg', '\\ngtr', '\\ngeq', '\\succsim', '\\gtrsim', '\\gtrless', '\\succ', '\\succcurlyeq', '\\gtrdot', '\\nsucc'],
  'set': ['\\in', '\\owns', '\\subset', '\\nsubset', '\\supset', '\\nsupset'],
  '!set': ['\\notin', '\\backepsilon'],
  'subset': [],
  'supset': [],
  'infinity': ['\\aleph_0', '\\aleph_1', '\\omega', '\\mathfrak{m}'],
  'numeric-pi': ['\\prod', '\\theta', '\\rho', '\\sin', '\\cos', '\\tan'],
  'ee': ['\\times 10^{#?}', '\\ln', '\\ln_{10}', '\\log'],
  '^': ['_{#?}'],
  // Integrals
  'int': [{
    latex: '\\int_{#?}^{#?}',
    classes: 'small'
  }, {
    latex: '\\int',
    classes: 'small'
  }, {
    latex: '\\smallint',
    classes: 'small'
  }, {
    latex: '\\iint',
    classes: 'small'
  }, {
    latex: '\\iiint',
    classes: 'small'
  }, {
    latex: '\\oint',
    classes: 'small'
  }, {
    latex: '\\dfrac{\\rd}{\\rd x}',
    classes: 'small'
  }, {
    latex: '\\frac{\\partial}{\\partial x}',
    classes: 'small'
  }, '\\capitalDifferentialD', '\\rd', '\\partial'],
  'nabla': ['\\nabla\\times', '\\nabla\\cdot', '\\nabla^{2}'],
  '!': ['!!', '\\Gamma', '\\Pi'],
  'accents': ['\\bar{#@}', '\\vec{#@}', '\\hat{#@}', '\\check{#@}', '\\dot{#@}', '\\ddot{#@}', '\\mathring{#@}', '\\breve{#@}', '\\acute{#@}', '\\tilde{#@}', '\\grave{#@}'],
  // 'absnorm': [{latex:'\\lVert #@ \\rVert', aside:'norm'},
  //     {latex:'\\lvert #@ \\rvert', aside:'determinant'},
  //     {latex:'\\begin{cardinality} #@ \\end{cardinality}', aside:'cardinality'},
  //     {latex:'\\lvert #@ \\rvert', aside:'length'},
  //     {latex:'\\lvert #@ \\rvert', aside:'order'},
  // ],
  'A': [{
    latex: '\\aleph',
    aside: 'aleph'
  }, {
    latex: '\\forall',
    aside: 'for all'
  }],
  'a': [{
    latex: '\\aleph',
    aside: 'aleph'
  }, {
    latex: '\\forall',
    aside: 'for all'
  }],
  'b': [{
    latex: '\\beth',
    aside: 'beth'
  }],
  'B': [{
    latex: '\\beth',
    aside: 'beth'
  }],
  'c': [{
    latex: '\\C',
    aside: 'set of complex numbers'
  }],
  'd': [{
    latex: '\\daleth',
    aside: 'daleth'
  }],
  'D': [{
    latex: '\\daleth',
    aside: 'daleth'
  }],
  'e': [{
    latex: '\\exponentialE',
    aside: 'exponential e'
  }, {
    latex: '\\exists',
    aside: 'there is'
  }, {
    latex: '\\nexists',
    aside: 'there isn’t'
  }],
  'g': [{
    latex: '\\gimel',
    aside: 'gimel'
  }],
  'G': [{
    latex: '\\gimel',
    aside: 'gimel'
  }],
  'h': [{
    latex: '\\hbar',
    aside: 'h bar'
  }, {
    latex: '\\hslash',
    aside: 'h slash'
  }],
  'i': [{
    latex: '\\imaginaryI',
    aside: 'imaginary i'
  }],
  'j': [{
    latex: '\\imaginaryJ',
    aside: 'imaginary j'
  }],
  'l': [{
    latex: '\\ell',
    aside: 'ell'
  }],
  'n': [{
    latex: '\\N',
    aside: 'set of natural numbers'
  }],
  'p': [{
    latex: '\\P',
    aside: 'set of primes'
  }],
  'q': [{
    latex: '\\Q',
    aside: 'set of rational numbers'
  }],
  'r': [{
    latex: '\\R',
    aside: 'set of real numbers'
  }],
  'z': [{
    latex: '\\Z',
    aside: 'set of integers'
  }],
  'x-var': ['y', 'z', 't', 'r', {
    latex: 'f(#?)',
    classes: 'small'
  }, {
    latex: 'g(#?)',
    classes: 'small'
  }, 'x^2', 'x^n', 'x_n', 'x_{n+1}', 'x_i', 'x_{i+1}'],
  'n-var': ['i', 'j', 'p', 'k', 'a', 'u'],
  'ii': ['\\Re', '\\Im', '\\imaginaryJ', '\\Vert #0 \\Vert'],
  'logic': [{
    latex: '\\exists',
    aside: 'there is'
  }, {
    latex: '\\nexists',
    aside: 'there isn’t'
  }, {
    latex: '\\ni',
    aside: 'such that'
  }, {
    latex: '\\Colon',
    aside: 'such that'
  }, {
    latex: '\\implies',
    aside: 'implies'
  }, {
    latex: '\\impliedby',
    aside: 'implied by'
  }, {
    latex: '\\iff',
    aside: 'if and only if'
  }, {
    latex: '\\land',
    aside: 'and'
  }, {
    latex: '\\lor',
    aside: 'or'
  }, {
    latex: '\\oplus',
    aside: 'xor'
  }, {
    latex: '\\lnot',
    aside: 'not'
  }, {
    latex: '\\downarrow',
    aside: 'nor'
  }, {
    latex: "\\uparrow",
    aside: 'nand'
  }, {
    latex: '\\curlywedge',
    aside: 'nor'
  }, {
    latex: '\\bar\\curlywedge',
    aside: 'nand'
  }, // {latex:'\\barwedge', aside:'bar wedge'},
  // {latex:'\\curlyvee', aside:'curly vee'},
  // {latex:'\\veebar', aside:'vee bar'},
  {
    latex: '\\therefore',
    aside: 'therefore'
  }, {
    latex: '\\because',
    aside: 'because'
  }, {
    latex: '^\\biconditional',
    aside: 'biconditional'
  }, '\\leftrightarrow', '\\Leftrightarrow', '\\to', '\\models', '\\vdash', '\\gets', '\\dashv', '\\roundimplies'],
  'set-operators': ['\\cap', '\\cup', '\\setminus', '\\smallsetminus', '\\complement'],
  'set-relations': ['\\in', '\\notin', '\\ni', '\\owns', '\\subset', '\\supset', '\\subseteq', '\\supseteq', '\\subsetneq', '\\supsetneq', '\\varsubsetneq', '\\subsetneqq', '\\nsubset', '\\nsupset', '\\nsubseteq', '\\nsupseteq'],
  'space': [{
    latex: '\\char"203A\\!\\char"2039',
    insert: '\\!',
    aside: 'negative thin space<br>⁻³⧸₁₈ em'
  }, {
    latex: "\\unicode{\"203A}\\,\\unicode{\"2039}",
    insert: '\\,',
    aside: 'thin space<br>³⧸₁₈ em'
  }, {
    latex: "\\unicode{\"203A}\\:\\unicode{\"2039}",
    insert: '\\:',
    aside: 'medium space<br>⁴⧸₁₈ em'
  }, {
    latex: "\\unicode{\"203A}\\;\\unicode{\"2039}",
    insert: '\\;',
    aside: 'thick space<br>⁵⧸₁₈ em'
  }, {
    latex: "\\unicode{\"203A}\\ \\unicode{\"2039}",
    insert: '\\ ',
    aside: '⅓ em'
  }, {
    latex: "\\unicode{\"203A}\\enspace\\unicode{\"2039}",
    insert: '\\enspace',
    aside: '½ em'
  }, {
    latex: "\\unicode{\"203A}\\quad\\unicode{\"2039}",
    insert: '\\quad',
    aside: '1 em'
  }, {
    latex: "\\unicode{\"203A}\\qquad\\unicode{\"2039}",
    insert: '\\qquad',
    aside: '2 em'
  }],
  // @todo could also delete to end
  'delete': [{
    label: '<span class="warning"><svg><use xlink:href="#svg-trash" /></svg></span>',
    command: '"deleteAll"'
  }],
  // @todo Tab: could turn on speech, visible keyboard...
  '->|': []
};
var ALT_KEYS = {
  // 自定义alt key长按按钮
  'key0': [// 正负号
  '\\div', '\\times', '\\ne', '\\approx', '\\backsim'],
  'key1': [// 分数
  '\\frac{1}{2}', '\\frac{1}{3}', '\\frac{2}{3}', '\\frac{1}{4}', '\\frac{\\sqrt{2}}{2}', '\\frac{\\sqrt{3}}{2}'],
  'key2': [// 括号
  '\\left[ {#2} \\right]', '\\left|{#2}\\right|', '\\left( {#2} \\right)'],
  'key3': [// 度
  '^\\prime', '^\\prime^\\prime', '\\parallel', '\\bot', '\\angle', '\\overset\\frown{#2}'],
  'key4': [// 根号
  '\\sqrt{2}', '\\sqrt[3]', '\\sqrt{5}', '\\sqrt{7}', '2\\sqrt{2}', '\\sqrt{3}', '2\\sqrt{3}'],
  'key5': [// sin
  'cos', 'tan', '\\alpha', '\\beta', '\\theta'],
  'key6': [// 指数
  'x^2', 'y^2', 'a^2', 'm^2', '10^{#2}', 'x^3'],
  'key7': [// 字母
  'y', 'z', 'a', 'b', 'c', 'm', 'n', 'k'],
  'key8': [// 字母
  '一', '二', '三', '四', '上', '下', '和', '且']
};
var LAYERS = {
  'math': "\n        <div class='rows'>\n            <ul>\n                <li class='keycap tex' data-alt-keys='x-var'><i>x</i></li>\n                <li class='keycap tex' data-alt-keys='n-var'><i>n</i></li>\n                <li class='separator w5'></li>\n                <row name='numpad-1'/>\n                <li class='separator w5'></li>\n                <li class='keycap tex' data-key='ee' data-alt-keys='ee'>e</li>\n                <li class='keycap tex' data-key='ii' data-alt-keys='ii'>i</li>\n                <li class='keycap tex' data-latex='\\pi' data-alt-keys='numeric-pi'></li>\n            </ul>\n            <ul>\n                <li class='keycap tex' data-key='<' data-alt-keys='<'>&lt;</li>\n                <li class='keycap tex' data-key='>' data-alt-keys='>'>&gt;</li>\n                <li class='separator w5'></li>\n                <row name='numpad-2'/>\n                <li class='separator w5'></li>\n                <li class='keycap tex' data-alt-keys='x2' data-insert='#@^{2}'><span><i>x</i>&thinsp;\xB2</span></li>\n                <li class='keycap tex' data-alt-keys='^' data-insert='#@^{#?}'><span><i>x</i><sup>&thinsp;<small>&#x2b1a;</small></sup></span></li>\n                <li class='keycap tex' data-alt-keys='sqrt' data-insert='\\sqrt{#0}' data-latex='\\sqrt{#0}'></li>\n            </ul>\n            <ul>\n                <li class='keycap tex' data-alt-keys='(' >(</li>\n                <li class='keycap tex' data-alt-keys=')' >)</li>\n                <li class='separator w5'></li>\n                <row name='numpad-3'/>\n                <li class='separator w5'></li>\n                <li class='keycap tex small' data-alt-keys='int' data-latex='\\int_0^\\infty'><span></span></li>\n                <li class='keycap tex' data-latex='\\forall' data-alt-keys='logic' ></li>\n                <li class='action font-glyph bottom right' data-alt-keys='delete' data-command='[\"performWithFeedback\",\"deletePreviousChar\"]'>&#x232b;</li></ul>\n            </ul>\n            <ul>\n                <li class='keycap' data-alt-keys='foreground-color' data-command='[\"applyStyle\",{\"color\":\"#cc2428\"}]'><span style='border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428; box-sizing: border-box'></span></li>\n                <li class='keycap' data-alt-keys='background-color' data-command='[\"applyStyle\",{\"backgroundColor\":\"#fff590\"}]'><span style='border-radius: 50%;width:22px;height:22px; background:#fff590; box-sizing: border-box'></span></li>\n                <li class='separator w5'></li>\n                <row name='numpad-4'/>\n                <li class='separator w5'></li>\n                <arrows/>\n            </ul>\n        </div>\n    ",
  'lower-roman': "\n        <div class='rows'>\n            <ul>\n                <row name='numpad-1' class='if-wide'/>\n                <row name='lower-1' shift-layer='upper-roman'/>\n            </ul>\n            <ul>\n                <row name='numpad-2' class='if-wide'/>\n                <row name='lower-2'  shift-layer='upper-roman''/>\n            </ul>\n            <ul>\n                <row name='numpad-3' class='if-wide'/>\n                <row name='lower-3'  shift-layer='upper-roman''/>\n            </ul>\n            <ul>\n                <row name='numpad-4' class='if-wide'/>\n                <li class='layer-switch font-glyph modifier bottom left' data-layer='symbols'>&infin;\u2260</li>\n                <li class='keycap' data-alt-keys=','>,</li>\n                <li class='keycap w50' data-key=' ' data-alt-keys='space'>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>",
  'upper-roman': "\n        <div class='rows'>\n            <ul>\n                <row name='numpad-1' class='if-wide'/>\n                <row name='upper-1'  shift-layer='lower-roman'/>\n            </ul>\n            <ul>\n                <row name='numpad-2' class='if-wide'/>\n                <row name='upper-2' shift-layer='lower-roman'/>\n            </ul>\n            <ul>\n                <row name='numpad-3' class='if-wide'/>\n                <row name='upper-3' shift-layer='lower-roman'/>\n            </ul>\n            <ul>\n                <row name='numpad-4' class='if-wide'/>\n                <li class='layer-switch font-glyph modifier bottom left' data-layer='symbols'>&infin;\u2260</li>\n                <li class='keycap' data-alt-keys='.'>;</li>\n                <li class='keycap w50' data-key=' '>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>",
  'symbols': "\n        <div class='rows'>\n            <ul>\n                <row name='numpad-1' class='if-wide'/>\n                <li class='keycap tex' data-alt-keys='(' data-insert='\\lbrace '>{</li>\n                <li class='keycap tex' data-alt-keys=')' data-insert='\\rbrace '>}</li>\n                <li class='separator w5'></li>\n                <li class='keycap tex' data-alt-keys='set' data-insert='\\in '>&#x2208;</li>\n                <li class='keycap tex' data-alt-keys='!set' data-insert='\\notin '>&#x2209;</li>\n                <li class='keycap tex' data-insert='\\Re '>&#x211c;<aside>Real</aside></li>\n                <li class='keycap tex' data-insert='\\Im '>&#x2111;<aside>Imaginary</aside></li>\n                <li class='keycap w15' data-insert='\\ulcorner#0\\urcorner '><span><sup>&#x250c;</sup><span><span style='color:#ddd'>o</span><sup>&#x2510;</sup></span><aside>ceil</aside></li>\n                <li class='keycap tex' data-alt-keys='nabla' data-insert='\\nabla '>&#x2207;<aside>nabla</aside></li>\n                <li class='keycap tex' data-alt-keys='infinity' data-insert='\\infty '>&#x221e;</li>\n\n            </ul>\n            <ul>\n                <row name='numpad-2' class='if-wide'/>\n                <li class='keycap tex' data-alt-keys='(' data-insert='\\lbrack '>[</li>\n                <li class='keycap tex' data-alt-keys=')' data-insert='\\rbrack '>]</li>\n                <li class='separator w5'></li>\n                <li class='keycap tex' data-alt-keys='subset' data-insert='\\subset '>&#x2282;</li>\n                <li class='keycap tex' data-alt-keys='supset' data-insert='\\supset '>&#x2283;</li>\n                <li class='keycap tex' data-key='!' data-alt-keys='!'>!<aside>factorial</aside></li>\n                <li class='keycap' data-insert='^{\\prime} '><span><sup><span><span style='color:#ddd'>o</span>&#x2032</sup></span><aside>prime</aside></li>\n                <li class='keycap w15' data-insert='\\llcorner#0\\lrcorner '><span><sub>&#x2514;</sub><span style='color:#ddd'>o</span><sub>&#x2518;</sub></span><aside>floor</aside></li>\n                <li class='keycap tex' data-insert='\\partial '>&#x2202;<aside>partial<br>derivative</aside></li>\n                <li class='keycap tex' data-insert='\\emptyset '>&#x2205;<aside>empty set</aside></li>\n\n            </ul>\n            <ul>\n                <row name='numpad-3' class='if-wide'/>\n                <li class='keycap tex' data-alt-keys='(' data-insert='\\langle '>&#x27e8;</li>\n                <li class='keycap tex' data-alt-keys=')' data-insert='\\rangle '>&#x27e9;</li>\n                <li class='separator w5'></li>\n                <li class='keycap tex' data-insert='\\subseteq '>&#x2286;</li>\n                <li class='keycap tex' data-insert='\\supseteq '>&#x2287;</li>\n                <li class='keycap tex' data-alt-keys='accents' data-insert='\\vec{#@}' data-latex='\\vec{#?}' data-aside='vector'></li>\n                <li class='keycap tex' data-alt-keys='accents' data-insert='\\bar{#@}' data-latex='\\bar{#?}' data-aside='bar'></li>\n                <li class='keycap tex' data-alt-keys='absnorm' data-insert='\\lvert #@ \\rvert ' data-latex='\\lvert #? \\rvert' data-aside='abs'></li>\n                <li class='keycap tex' data-insert='\\ast '>&#x2217;<aside>asterisk</aside></li>\n\n                <li class='action font-glyph bottom right w15'\n                    data-shifted='<span class=\"warning\"><svg><use xlink:href=\"#svg-trash\" /></svg></span>'\n                    data-shifted-command='\"deleteAll\"'\n                    data-alt-keys='delete' data-command='[\"performWithFeedback\",\"deletePreviousChar\"]'\n                >&#x232b;</li>\n            </ul>\n            <ul>\n                <row name='numpad-4' class='if-wide'/>\n                <li class='layer-switch font-glyph modifier bottom left' data-layer='lower-roman'>abc</li>\n                <li class='keycap tex' data-insert='\\cdot '>&#x22c5;<aside>centered dot</aside></li>\n                <li class='keycap tex' data-insert='\\colon '>:<aside>colon</aside></li>\n                <li class='keycap tex' data-insert='\\circ '>&#x2218;<aside>circle</aside></li>\n                <li class='keycap tex' data-insert='\\approx '>&#x2248;<aside>approx.</aside></li>\n                <li class='keycap tex' data-insert='\\ne '>&#x2260;</li>\n                <li class='keycap tex' data-insert='\\pm '>&#x00b1;</li>\n                <arrows/>\n            </ul>\n        </div>",
  'lower-greek': "\n        <div class='rows'>\n            <ul><li class='keycap tex' data-insert='\\varphi '><i>&#x03c6;</i><aside>phi var.</aside></li>\n                <li class='keycap tex' data-insert='\\varsigma '><i>&#x03c2;</i><aside>sigma var.</aside></li>\n                <li class='keycap tex' data-insert='\\epsilon '><i>&#x03f5;</i></li>\n                <li class='keycap tex' data-insert='\\rho '><i>&rho;</i></li>\n                <li class='keycap tex' data-insert='\\tau '><i>&tau;</i></li>\n                <li class='keycap tex' data-insert='\\upsilon '><i>&upsilon;</i></li>\n                <li class='keycap tex' data-insert='\\theta '><i>&theta;</i></li>\n                <li class='keycap tex' data-insert='\\iota '><i>&iota;</i></li>\n                <li class='keycap tex' data-insert='\\omicron '>&omicron;</i></li>\n                <li class='keycap tex' data-insert='\\pi '><i>&pi;</i></li>\n            </ul>\n            <ul><li class='keycap tex' data-insert='\\alpha ' data-shifted='&Alpha;' data-shifted-command='[\"insert\",\"{\\\\char\\\"391}\"]'><i>&alpha;</i></li>\n                <li class='keycap tex' data-insert='\\sigma '><i>&sigma;</i></li>\n                <li class='keycap tex' data-insert='\\delta '><i>&delta;</i></li>\n                <li class='keycap tex' data-insert='\\phi '><i>&#x03d5;</i></i></li>\n                <li class='keycap tex' data-insert='\\gamma '><i>&gamma;</i></li>\n                <li class='keycap tex' data-insert='\\eta '><i>&eta;</i></li>\n                <li class='keycap tex' data-insert='\\xi '><i>&xi;</i></li>\n                <li class='keycap tex' data-insert='\\kappa '><i>&kappa;</i></li>\n                <li class='keycap tex' data-insert='\\lambda '><i>&lambda;</i></li>\n            </ul>\n            <ul><li class='shift modifier font-glyph bottom left w15 layer-switch' data-layer='upper-greek'>&#x21e7;</li>\n                <li class='keycap tex' data-insert='\\zeta '><i>&zeta;</i></li>\n                <li class='keycap tex' data-insert='\\chi '><i>&chi;</i></li>\n                <li class='keycap tex' data-insert='\\psi '><i>&psi;</i></li>\n                <li class='keycap tex' data-insert='\\omega '><i>&omega;</i></li>\n                <li class='keycap tex' data-insert='\\beta '><i>&beta;</i></li>\n                <li class='keycap tex' data-insert='\\nu '><i>&nu;</i></li>\n                <li class='keycap tex' data-insert='\\mu '><i>&mu;</i></li>\n                <li class='action font-glyph bottom right w15'\n                    data-shifted='<span class=\"warning\"><svg><use xlink:href=\"#svg-trash\" /></svg></span>'\n                    data-shifted-command='\"deleteAll\"'\n                    data-alt-keys='delete' data-command='[\"performWithFeedback\",\"deletePreviousChar\"]'\n                >&#x232b;</li>\n            </ul>\n            <ul>\n                <li class='keycap ' data-key=' '>&nbsp;</li>\n                <li class='keycap'>,</li>\n                <li class='keycap tex' data-insert='\\varepsilon '><i>&#x03b5;</i><aside>epsilon var.</aside></li>\n                <li class='keycap tex' data-insert='\\vartheta '><i>&#x03d1;</i><aside>theta var.</aside></li>\n                <li class='keycap tex' data-insert='\\varkappa '><i>&#x3f0;</i><aside>kappa var.</aside></li>\n                <li class='keycap tex' data-insert='\\varpi '><i>&#x03d6;<aside>pi var.</aside></i></li>\n                <li class='keycap tex' data-insert='\\varrho '><i>&#x03f1;</i><aside>rho var.</aside></li>\n                <arrows/>\n            </ul>\n        </div>",
  'upper-greek': "\n        <div class='rows'>\n            <ul><li class='keycap tex' data-insert='\\Phi '>&Phi;<aside>phi</aside></li>\n                <li class='keycap tex' data-insert='\\Sigma '>&Sigma;<aside>sigma</aside></li>\n                <li class='keycap tex' data-insert='{\\char\"0190}'>&#x0190;<aside>epsilon</aside></li>\n                <li class='keycap tex' data-insert='{\\char\"3A1}'>&#x3A1;<aside>rho</aside></li>\n                <li class='keycap tex' data-insert='{\\char\"3A4}'>&#x3A4;<aside>tau</aside></li>\n                <li class='keycap tex' data-insert='\\Upsilon '>&Upsilon;<aside>upsilon</aside></li>\n                <li class='keycap tex' data-insert='\\Theta '>&Theta;<aside>theta</aside></li>\n                <li class='keycap tex' data-insert='{\\char\"399}'>&Iota;<aside>iota</aside></li>\n                <li class='keycap tex' data-insert='{\\char\"39F}'>&#x039F;<aside>omicron</aside></li>\n                <li class='keycap tex' data-insert='\\Pi '>&Pi;<aside>pi</aside></li></ul>\n            <ul><li class='keycap tex' data-insert='{\\char\"391}'>&#x391;<aside>alpha</aside></li>\n                <li class='keycap tex' data-insert='\\Sigma '>&Sigma;<aside>sigma</aside></li>\n                <li class='keycap tex' data-insert='\\Delta '>&Delta;<aside>delta</aside></li>\n                <li class='keycap tex' data-insert='\\Phi '>&#x03a6;<aside>phi</aside></li>\n                <li class='keycap tex' data-insert='\\Gamma '>&Gamma;<aside>gamma</aside></li>\n                <li class='keycap tex' data-insert='{\\char\"397}'>&Eta;<aside>eta</aside></li>\n                <li class='keycap tex' data-insert='\\Xi '>&Xi;<aside>xi</aside></li>\n                <li class='keycap tex' data-insert='{\\char\"39A}'>&Kappa;<aside>kappa</aside></li>\n                <li class='keycap tex' data-insert='\\Lambda '>&Lambda;<aside>lambda</aside></li></ul>\n            <ul><li class='shift modifier font-glyph bottom left selected w15 layer-switch' data-layer='lower-greek'>&#x21e7;</li>\n                <li class='keycap tex' data-insert='{\\char\"396}'>&Zeta;<aside>zeta</aside></li>\n                <li class='keycap tex' data-insert='{\\char\"3A7}'>&Chi;<aside>chi</aside></li>\n                <li class='keycap tex' data-insert='\\Psi '>&Psi;<aside>psi</aside></li>\n                <li class='keycap tex' data-insert='\\Omega '>&Omega;<aside>omega</aside></li>\n                <li class='keycap tex' data-insert='{\\char\"392}'>&Beta;<aside>beta</aside></li>\n                <li class='keycap tex' data-insert='{\\char\"39D}'>&Nu;<aside>nu</aside></li>\n                <li class='keycap tex' data-insert='{\\char\"39C}'>&Mu;<aside>mu</aside></li>\n                <li class='action font-glyph bottom right w15' data-command='[\"performWithFeedback\",\"deletePreviousChar\"]'>&#x232b;</li></ul>\n            <ul>\n                <li class='separator w10'>&nbsp;</li>\n                <li class='keycap'>.</li>\n                <li class='keycap w50' data-key=' '>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>",
  'lower-command': "\n        <div class='rows'>\n            <ul><row name='lower-1' class='tt' shift-layer='upper-command'/></ul>\n            <ul><row name='lower-2' class='tt' shift-layer='upper-command'/></ul>\n            <ul><row name='lower-3' class='tt' shift-layer='upper-command'/></ul>\n            <ul>\n                <li class='layer-switch font-glyph modifier bottom left' data-layer='symbols-command'>01#</li>\n                <li class='keycap tt' data-shifted='[' data-shifted-command='[\"insertAndUnshiftKeyboardLayer\", \"[\"]'>{</li>\n                <li class='keycap tt' data-shifted=']' data-shifted-command='[\"insertAndUnshiftKeyboardLayer\", \"]\"]'>}</li>\n                <li class='keycap tt' data-shifted='(' data-shifted-command='[\"insertAndUnshiftKeyboardLayer\", \"(\"]'>^</li>\n                <li class='keycap tt' data-shifted=')' data-shifted-command='[\"insertAndUnshiftKeyboardLayer\", \")\"]'>_</li>\n                <li class='keycap w20' data-key=' '>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>",
  'upper-command': "\n        <div class='rows'>\n            <ul><row name='upper-1' class='tt' shift-layer='lower-command'/></ul>\n            <ul><row name='upper-2' class='tt' shift-layer='lower-command'/></ul>\n            <ul><row name='upper-3' class='tt' shift-layer='lower-command'/></ul>\n            <ul>\n                <li class='layer-switch font-glyph modifier bottom left' data-layer='symbols-command'01#</li>\n                <li class='keycap tt'>[</li>\n                <li class='keycap tt'>]</li>\n                <li class='keycap tt'>(</li>\n                <li class='keycap tt'>)</li>\n                <li class='keycap w20' data-key=' '>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>",
  'symbols-command': "\n        <div class='rows'>\n            <ul><li class='keycap tt'>1</li><li class='keycap tt'>2</li><li class='keycap tt'>3</li><li class='keycap tt'>4</li><li class='keycap tt'>5</li><li class='keycap tt'>6</li><li class='keycap tt'>7</li><li class='keycap tt'>8</li><li class='keycap tt'>9</li><li class='keycap tt'>0</li></ul>\n            <ul><li class='keycap tt'>!</li><li class='keycap tt'>@</li><li class='keycap tt'>#</li><li class='keycap tt'>$</li><li class='keycap tt'>%</li><li class='keycap tt'>^</li><li class='keycap tt'>&</li><li class='keycap tt'>*</li><li class='keycap tt'>+</li><li class='keycap tt'>=</li></ul>\n            <ul>\n                <li class='keycap tt'>\\</li>\n                <li class='keycap tt'>|</li>\n                <li class='keycap tt'>/</li>\n                <li class='keycap tt'>`</li>\n                <li class='keycap tt'>;</li>\n                <li class='keycap tt'>:</li>\n                <li class='keycap tt'>?</li>\n                <li class='keycap tt'>'</li>\n                <li class='keycap tt'>\"</li>\n                <li class='action font-glyph bottom right'\n                    data-shifted='<span class=\"warning\"><svg><use xlink:href=\"#svg-trash\" /></svg></span>'\n                    data-shifted-command='\"deleteAll\"'\n                    data-alt-keys='delete' data-command='[\"performWithFeedback\",\"deletePreviousChar\"]'\n                >&#x232b;</li>\n            </ul>\n            <ul>\n                <li class='layer-switch font-glyph modifier bottom left' data-layer='lower-command'>abc</li>\n                <li class='keycap tt'>&lt;</li>\n                <li class='keycap tt'>&gt;</li>\n                <li class='keycap tt'>~</li>\n                <li class='keycap tt'>,</li>\n                <li class='keycap tt'>.</li>\n                <li class='keycap' data-key=' '>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>",
  'functions': "\n        <div class='rows'>\n            <ul><li class='separator'></li>\n                <li class='fnbutton' data-insert='\\sin'></li>\n                <li class='fnbutton' data-insert='\\sin^{-1}'></li>\n                <li class='fnbutton' data-insert='\\ln'></li>\n                <li class='fnbutton' data-insert='\\exponentialE^{#?}'></li>\n                <li class='bigfnbutton' data-insert='\\operatorname{lcm}(#?)' data-latex='\\operatorname{lcm}()'></li>\n                <li class='bigfnbutton' data-insert='\\operatorname{ceil}(#?)' data-latex='\\operatorname{ceil}()'></li>\n                <li class='bigfnbutton' data-insert='\\lim_{n\\to\\infty}'></li>\n                <li class='bigfnbutton' data-insert='\\int'></li>\n                <li class='bigfnbutton' data-insert='\\operatorname{abs}(#?)' data-latex='\\operatorname{abs}()'></li>\n            </ul>\n            <ul><li class='separator'></li>\n                <li class='fnbutton' data-insert='\\cos'></li>\n                <li class='fnbutton' data-insert='\\cos^{-1}'></li>\n                <li class='fnbutton' data-insert='\\ln_{10}'></li>\n                <li class='fnbutton' data-insert='10^{#?}'></li>\n                <li class='bigfnbutton' data-insert='\\operatorname{gcd}(#?)' data-latex='\\operatorname{gcd}()'></li>\n                <li class='bigfnbutton' data-insert='\\operatorname{floor}(#?)' data-latex='\\operatorname{floor}()'></li>\n                <li class='bigfnbutton' data-insert='\\sum_{n\\mathop=0}^{\\infty}'></li>\n                <li class='bigfnbutton' data-insert='\\int_{0}^{\\infty}'></li>\n                <li class='bigfnbutton' data-insert='\\operatorname{sign}(#?)' data-latex='\\operatorname{sign}()'></li>\n            </ul>\n            <ul><li class='separator'></li>\n                <li class='fnbutton' data-insert='\\tan'></li>\n                <li class='fnbutton' data-insert='\\tan^{-1}'></li>\n                <li class='fnbutton' data-insert='\\log_{#?}'></li>\n                <li class='fnbutton' data-insert='\\sqrt[#?]{#0}'></li>\n                <li class='bigfnbutton' data-insert='#0 \\mod' data-latex='\\mod'></li>\n                <li class='bigfnbutton' data-insert='\\operatorname{round}(#?) ' data-latex='\\operatorname{round}()'></li>\n                <li class='bigfnbutton' data-insert='\\prod_{n\\mathop=0}^{\\infty}' data-latex='{\\tiny \\prod_{n=0}^{\\infty}}'></li>\n                <li class='bigfnbutton' data-insert='\\frac{\\differentialD #0}{\\differentialD x}'></li>\n                <li class='action font-glyph bottom right' data-command='[\"performWithFeedback\",\"deletePreviousChar\"]'>&#x232b;</li></ul>\n            <ul><li class='separator'></li>\n                <li class='fnbutton'>(</li>\n                <li class='fnbutton'>)</li>\n                <li class='fnbutton' data-insert='^{#?} ' data-latex='x^{#?} '></li>\n                <li class='fnbutton' data-insert='_{#?} ' data-latex='x_{#?} '></li>\n                <li class='keycap w20 ' data-key=' '>&nbsp;</li>\n                <arrows/>\n            </ul>\n        </div>",
  'style': "\n        <div class='rows'>\n            <ul>\n                <li class='keycap' data-alt-keys='foreground-color' data-command='[\"applyStyle\",{\"color\":\"#cc2428\"}]'><span style='border-radius: 50%;width:22px;height:22px; border: 3px solid #cc2428'></span></li>\n                <li class='keycap' data-alt-keys='background-color' data-command='[\"applyStyle\",{\"backgroundColor\":\"#fff590\"}]'><span style='border-radius: 50%;width:22px;height:22px; background:#fff590'></span></li>\n                <li class='separator w5'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"size\":\"size3\"}]' data-latex='\\scriptsize\\text{small}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"size\":\"size5\"}]' data-latex='\\scriptsize\\text{normal}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"size\":\"size9\"}]' data-latex='\\huge\\text{big}'></li>\n                <li class='separator w5'></li>\n                <li class='keycap' data-latex='\\langle' data-command='[\"insert\", \"\\\\langle\", {\"smartFence\":true}]'></li>\n            </ul>\n            <ul>\n                <li class='keycap' data-command='[\"applyStyle\",{\"series\":\"l\"}]' data-latex='\\fontseries{l}\\text{Ab}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"series\":\"m\"}]' data-latex='\\fontseries{m}\\text{Ab}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"series\":\"b\"}]' data-latex='\\fontseries{b}\\text{Ab}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"series\":\"bx\"}]' data-latex='\\fontseries{bx}\\text{Ab}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"series\":\"sb\"}]' data-latex='\\fontseries{sb}\\text{Ab}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"series\":\"c\"}]' data-latex='\\fontseries{c}\\text{Ab}'></li>\n            </ul>\n            <ul>\n                <li class='keycap' data-command='[\"applyStyle\",{\"shape\":\"up\"}]' data-latex='\\textup{Ab}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"shape\":\"it\"}]' data-latex='\\textit{Ab}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"shape\":\"sl\"}]' data-latex='\\textsl{Ab}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"shape\":\"sc\"}]' data-latex='\\textsc{Ab}'></li>\n                <li class='separator w5'></li>\n                <li class='keycap' data-insert='\\emph{#?} ' data-latex='\\text{\\emph{emph}}'></li>\n            </ul>\n            <ul>\n                <li class='keycap' data-command='[\"applyStyle\",{\"fontFamily\":\"cmr\"}]' data-latex='\\textrm{Az}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"fontFamily\":\"cmtt\"}]' data-latex='\\texttt{Az}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"fontFamily\":\"cmss\"}]' data-latex='\\textsf{Az}'></li>\n\n                <li class='keycap' data-command='[\"applyStyle\",{\"fontFamily\":\"bb\"}]'  data-latex='\\mathbb{AZ}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"fontFamily\":\"scr\"}]'  data-latex='\\mathscr{AZ}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"fontFamily\":\"cal\"}]' data-latex='\\mathcal{A1}'></li>\n                <li class='keycap' data-command='[\"applyStyle\",{\"fontFamily\":\"frak\"}]' data-latex='\\mathfrak{Az}'></li>\n            </ul>\n        </div>"
};

function editor_virtualKeyboard_latexToMarkup(latex, arg, mf) {
  // Since we don't have preceding atoms, we'll interpret #@ as a placeholder
  latex = latex.replace(/(^|[^\\])#@/g, '$1#?');
  var parse = parser.parseTokens(lexer.tokenize(latex), 'math', arg, mf.config.macros);
  var spans = mathAtom.decompose({
    mathstyle: 'displaystyle',
    macros: mf.config.macros
  }, parse);
  var base = core_span.makeSpan(spans, 'ML__base');
  var topStrut = core_span.makeSpan('', 'ML__strut');
  topStrut.setStyle('height', base.height, 'em');
  var bottomStrut = core_span.makeSpan('', 'ML__strut--bottom');
  bottomStrut.setStyle('height', base.height + base.depth, 'em');
  bottomStrut.setStyle('vertical-align', -base.depth, 'em');
  var wrapper = core_span.makeSpan([topStrut, bottomStrut, base], 'ML__mathlive');
  return wrapper.toMarkup();
}
/**
 * Return a markup string for the keyboard toolbar for the specified layer.
 * @private
 */


function makeKeyboardToolbar(mf, keyboardIDs, currentKeyboard) {
  // The left hand side of the toolbar has a list of all the available keyboards
  var result = "<div class='left'>";
  var keyboardList = keyboardIDs.replace(/\s+/g, ' ').split(' ');

  if (keyboardList.length > 1) {
    var keyboards = Object.assign({}, KEYBOARDS, mf.config.customVirtualKeyboards || {});
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = keyboardList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var keyboard = _step.value;

        if (!keyboards[keyboard]) {
          console.error('Unknown virtual keyboard "' + keyboard + '"');
          break;
        }

        result += '<div class=\'';

        if (keyboard === currentKeyboard) {
          result += 'selected ';
        } else {
          if (keyboards[keyboard].command) {
            result += 'action ';
          } else {
            result += 'layer-switch ';
          }
        }

        result += (keyboards[keyboard].classes || '') + "'";

        if (keyboards[keyboard].tooltip) {
          result += "data-tooltip='" + l10n(keyboards[keyboard].tooltip) + "' ";
          result += "data-placement='top' data-delay='1s'";
        }

        if (keyboard !== currentKeyboard) {
          if (keyboards[keyboard].command) {
            result += "data-command='\"" + keyboards[keyboard].command + "\"'";
          }

          if (keyboards[keyboard].layer) {
            result += "data-layer='" + keyboards[keyboard].layer + "'";
          }
        }

        result += '>' + keyboards[keyboard].label + '</div>';
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  result += '</div>'; // The right hand side of the toolbar, with the copy/undo/redo commands
  // onclick="x=body.getElementsByClassName('ML__keyboard');for(i=0;i<x.length;i++){x[i].classList.remove('is-visible')};"
  // <span style="padding: 2px 5px; background: #fe990025 !important;border-radius:6px;font-size:12px">黄键可长按</span>

  result += "\n        <div class='right'>\n            <div style=\"display:flex;align-items:center;margin-top:2px\">\n                <span style=\"width:22px;height:14px; background: #F7EAB9 !important;border-radius:2px;font-size:12px;margin-right:1px\"></span>\n                <span>\u53EF\u957F\u6309</span>\n            </div>\n            <div\n                class='action'\n                data-command='\"changeType\"'\n                data-tooltip=\"\u6539\u53D8\u8F93\u5165\u65B9\u5F0F\"\n                style=\"display:flex;align-items:center;margin-top:2px\"\n            >\n                <span\n                    style=\"width: 21px;padding-bottom:3px\">\n                    <svg class=\"icon\" style=\"font-size:24px\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 1000\">\n                    <path d=\"M996.35241 885.76h-166.0416v110.592a27.6992 27.6992 0 0 1-27.6992 27.648h-27.648a27.6992 27.6992 0 0 1-27.6992-27.648V885.76h-166.0416a27.6992 27.6992 0 0 1-27.648-27.6992v-193.792a27.6992 27.6992 0 0 1 27.648-27.6992H747.52041v-110.6944a27.6992 27.6992 0 0 1 27.6992-27.648h27.648a27.6992 27.6992 0 0 1 27.6992 27.648v110.6944h165.7856a27.6992 27.6992 0 0 1 27.648 27.6992v193.6896a27.6992 27.6992 0 0 1-27.648 27.6992z m-332.0832-166.0416a27.6992 27.6992 0 0 0-27.6992 27.648v27.6992a27.6992 27.6992 0 0 0 27.6992 27.648H747.52041v-83.0976z m276.48 27.648a27.6992 27.6992 0 0 0-27.6992-27.648h-82.7392v82.9952h82.9952a27.6992 27.6992 0 0 0 27.6992-27.648V747.52zM403.09801 308.6848l105.472 217.1904H299.11081l103.9872-217.1904z m288.8192 272.5376h-64.9216L440.73001 198.144v-0.4096a29.696 29.696 0 0 0-1.7408-2.6624 40.96 40.96 0 0 0-21.1456-19.456h-0.6144a40.96 40.96 0 0 0-15.36-2.6624c-1.1264 0-2.2528 0.512-3.5328 0.6144a37.6832 37.6832 0 0 0-11.1104 2.048c-0.512 0-0.768 0.6144-1.28 0.768s-0.3584 0.3584-0.6144 0.3584a40.2432 40.2432 0 0 0-21.248 22.1184v0.3584l-211.8144 442.1632a41.5232 41.5232 0 0 0 77.2096 30.72l43.2128-90.2144h225.28v332.0832H110.69481A110.6432 110.6432 0 0 1 0.00041 803.0208V110.6944A110.6432 110.6432 0 0 1 110.69481 0h581.2224a110.6432 110.6432 0 0 1 110.6944 110.6944v332.0832h-110.6944v138.24z\" p-id=\"8927\"></path>\n                </span>\n                <span>\u4E2D\u6587</span>\n            </div>\n            <div\n                class='action'\n                data-command='\"turnOffBox\"'\n                data-tooltip=\"\u6536\u8D77\u6240\u6709\u516C\u5F0F\u952E\u76D8\"\n                style=\"display:flex;align-items:center;margin-top:2px\"\n            >\n                <span\n                    style=\"width: 21px; padding-bottom:3px\">\n                    <svg class=\"icon\" style=\"font-size:24px\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\">\n                    <path d=\"M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z\"/></svg>\n                </span>\n                <span>\u6536\u8D77</span>\n            </div>\n        </div>\n    "; // result += `
  //     <div class='right'>
  //         <div class='action'
  //             data-command='"copyToClipboard"'
  //             data-tooltip='${l10n('tooltip.copy to clipboard')}' data-placement='top' data-delay='1s'>
  //             <svg><use xlink:href='#svg-copy' /></svg>
  //         </div>
  //         <div
  //             class='action'
  //             data-command='"turnOffBox"'
  //             data-tooltip="收起所有公式键盘"
  //         >
  //             <span
  //                 style="width: 21px;">
  //                 <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
  //                 <path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg>
  //             </span>
  //         </div>
  //         <div
  //             class='action'
  //             data-command='"changeType"'
  //             data-tooltip="改变输入方式"
  //             style="margin:2px !important"
  //         >
  //             <span
  //                 style="width: 21px;">
  //                 <svg class="icon" style="font-size:30px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000">
  //                 <path d="M996.35241 885.76h-166.0416v110.592a27.6992 27.6992 0 0 1-27.6992 27.648h-27.648a27.6992 27.6992 0 0 1-27.6992-27.648V885.76h-166.0416a27.6992 27.6992 0 0 1-27.648-27.6992v-193.792a27.6992 27.6992 0 0 1 27.648-27.6992H747.52041v-110.6944a27.6992 27.6992 0 0 1 27.6992-27.648h27.648a27.6992 27.6992 0 0 1 27.6992 27.648v110.6944h165.7856a27.6992 27.6992 0 0 1 27.648 27.6992v193.6896a27.6992 27.6992 0 0 1-27.648 27.6992z m-332.0832-166.0416a27.6992 27.6992 0 0 0-27.6992 27.648v27.6992a27.6992 27.6992 0 0 0 27.6992 27.648H747.52041v-83.0976z m276.48 27.648a27.6992 27.6992 0 0 0-27.6992-27.648h-82.7392v82.9952h82.9952a27.6992 27.6992 0 0 0 27.6992-27.648V747.52zM403.09801 308.6848l105.472 217.1904H299.11081l103.9872-217.1904z m288.8192 272.5376h-64.9216L440.73001 198.144v-0.4096a29.696 29.696 0 0 0-1.7408-2.6624 40.96 40.96 0 0 0-21.1456-19.456h-0.6144a40.96 40.96 0 0 0-15.36-2.6624c-1.1264 0-2.2528 0.512-3.5328 0.6144a37.6832 37.6832 0 0 0-11.1104 2.048c-0.512 0-0.768 0.6144-1.28 0.768s-0.3584 0.3584-0.6144 0.3584a40.2432 40.2432 0 0 0-21.248 22.1184v0.3584l-211.8144 442.1632a41.5232 41.5232 0 0 0 77.2096 30.72l43.2128-90.2144h225.28v332.0832H110.69481A110.6432 110.6432 0 0 1 0.00041 803.0208V110.6944A110.6432 110.6432 0 0 1 110.69481 0h581.2224a110.6432 110.6432 0 0 1 110.6944 110.6944v332.0832h-110.6944v138.24z" p-id="8927"></path>
  //             </span>
  //         </div>
  //         <div class='action disabled'
  //             data-command='"undo"'
  //             data-tooltip='${l10n('tooltip.undo')}' data-placement='top' data-delay='1s'>
  //             <svg><use xlink:href='#svg-undo' /></svg>
  //         </div>
  //         <div class='action disabled'
  //             data-command='"redo"'
  //             data-tooltip='${l10n('tooltip.redo')}' data-placement='top' data-delay='1s'>
  //             <svg><use xlink:href='#svg-redo' /></svg>
  //         </div>
  //     </div>
  // `;

  return "<div class='keyboard-toolbar' role='toolbar'>" + result + "</div>";
}

function makeKeycap(mf, elList, chainedCommand) {
  for (var i = 0; i < elList.length; ++i) {
    var el = elList[i]; // Display

    if (el.getAttribute('data-latex')) {
      el.innerHTML = editor_virtualKeyboard_latexToMarkup(el.getAttribute('data-latex').replace(/&quot;/g, '"'), {
        '?': '{\\color{#555}{\\tiny \\char"2B1A}}'
      }, mf);
    } else if (el.innerHTML === '' && el.getAttribute('data-insert')) {
      el.innerHTML = editor_virtualKeyboard_latexToMarkup(el.getAttribute('data-insert').replace(/&quot;/g, '"'), {
        '?': '{\\color{#555}{\\tiny \\char"2B1A}}'
      }, mf);
    } else if (el.getAttribute('data-content')) {
      el.innerHTML = el.getAttribute('data-content').replace(/&quot;/g, '"');
    }

    if (el.getAttribute('data-aside')) {
      el.innerHTML += '<aside>' + el.getAttribute('data-aside').replace(/&quot;/g, '"') + '</aside>';
    }

    if (el.getAttribute('data-classes')) {
      el.classList.add(el.getAttribute('data-classes'));
    }

    var key = el.getAttribute('data-insert');
    if (key) key = key.replace(/&quot;/g, '"');

    if (key && SHIFTED_KEYS[key]) {
      el.setAttribute('data-shifted', SHIFTED_KEYS[key].label);
      el.setAttribute('data-shifted-command', JSON.stringify(['insertAndUnshiftKeyboardLayer', SHIFTED_KEYS[key].insert]));
    } // Commands


    var handlers = void 0;

    if (el.getAttribute('data-command')) {
      handlers = JSON.parse(el.getAttribute('data-command'));
    } else if (el.getAttribute('data-insert')) {
      handlers = ['insert', el.getAttribute('data-insert'), {
        focus: true,
        feedback: true,
        mode: 'math',
        format: 'auto',
        resetStyle: true
      }];
    } else if (el.getAttribute('data-latex')) {
      handlers = ['insert', el.getAttribute('data-latex'), {
        focus: true,
        feedback: true,
        mode: 'math',
        format: 'auto',
        resetStyle: true
      }];
    } else {
      handlers = ['typedText', el.getAttribute('data-key') || el.textContent, {
        focus: true,
        feedback: true,
        simulateKeystroke: true
      }];
    }

    if (chainedCommand) {
      handlers = [chainedCommand, handlers];
    }

    if (el.getAttribute('data-alt-keys')) {
      var altKeys = ALT_KEYS[el.getAttribute('data-alt-keys')];

      if (altKeys) {
        handlers = {
          default: handlers,
          pressAndHoldStart: ['showAlternateKeys', el.getAttribute('data-alt-keys'), altKeys],
          pressAndHoldEnd: 'hideAlternateKeys'
        };
      } else {
        console.warn('Unknown alt key set: "' + el.getAttribute('data-alt-keys'));
      }
    }

    mf._attachButtonHandlers(el, handlers);
  }
}
/**
 * Expand the shortcut tags (e.g. <row>) inside a layer.
 * @param {object} mf
 * @param {string} layer
 * @private
 */


function expandLayerMarkup(mf, layer) {
  var ROWS = {
    // First row should be 10 key wide
    // Second row should be 10 key wide
    // Third row should be 8.5 key wide
    // One row should have ^ (shift key) which is 1.5 key wide
    // One row should have ~ (delete key) which is .5 or 1.5 key wide
    'qwerty': {
      'lower-1': 'qwertyuiop',
      'lower-2': ' asdfghjkl ',
      'lower-3': '^zxcvbnm~',
      'upper-1': 'QWERTYUIOP',
      'upper-2': ' ASDFGHJKL ',
      'upper-3': '^ZXCVBNM~',
      'numpad-1': '789/',
      'numpad-2': '456*',
      'numpad-3': '123-',
      'numpad-4': '0.=+'
    },
    'azerty': {
      'lower-1': 'azertyuiop',
      'lower-2': 'qsdfghjklm',
      'lower-3': '^ wxcvbn ~',
      'upper-1': 'AZERTYUIOP',
      'upper-2': 'QSDFGHJKLM',
      'upper-3': '^ WXCVBN ~'
    },
    'qwertz': {
      'lower-1': 'qwertzuiop',
      'lower-2': ' asdfghjkl ',
      'lower-3': '^yxcvbnm~',
      'upper-1': 'QWERTZUIOP',
      'upper-2': ' ASDFGHJKL',
      'upper-3': '^YXCVBNM~'
    },
    'dvorak': {
      'lower-1': '^  pyfgcrl ',
      'lower-2': 'aoeuidhtns',
      'lower-3': 'qjkxbmwvz~',
      'upper-1': '^  PYFGCRL ',
      'upper-2': 'AOEUIDHTNS',
      'upper-3': 'QJKXBMWVZ~'
    },
    'colemak': {
      'lower-1': ' qwfpgjluy ',
      'lower-2': 'arstdhneio',
      'lower-3': '^zxcvbkm~',
      'upper-1': ' QWFPGNLUY ',
      'upper-2': 'ARSTDHNEIO',
      'upper-3': '^ZXCVBKM~'
    }
  };
  var layout = ROWS[mf.config.virtualKeyboardLayout] ? ROWS[mf.config.virtualKeyboardLayout] : ROWS['qwerty'];
  var result = layer;
  var row;
  result = result.replace(/<arrows\/>/g, "\n        <li class='action' data-command='[\"performWithFeedback\",\"moveToPreviousChar\"]'\n            data-shifted='<svg><use xlink:href=\"#svg-angle-double-left\" /></svg>'\n            data-shifted-command='[\"performWithFeedback\",\"extendToPreviousChar\"]'>\n            <svg><use xlink:href='#svg-arrow-left' /></svg>\n        </li>\n        <li class='action' data-command='[\"performWithFeedback\",\"moveToNextChar\"]'\n            data-shifted='<svg><use xlink:href=\"#svg-angle-double-right\" /></svg>'\n            data-shifted-command='[\"performWithFeedback\",\"extendToNextChar\"]'>\n            <svg><use xlink:href='#svg-arrow-right' /></svg>\n        </li>\n        <li class='action' data-command='[\"performWithFeedback\",\"moveToNextPlaceholder\"]'>\n        <svg><use xlink:href='#svg-tab' /></svg></li>");
  var m = result.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);

  while (m) {
    row = '';
    var attributesArray = m[2].match(/[a-zA-Z][a-zA-Z0-9-]*=(['"])(.*?)\1/g);
    var attributes = {};
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = attributesArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var attribute = _step2.value;
        var m2 = attribute.match(/([a-zA-Z][a-zA-Z0-9-]*)=(['"])(.*?)\2/);
        attributes[m2[1]] = m2[3];
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var keys = layout[attributes['name']];
    if (!keys) keys = ROWS['qwerty'][attributes['name']];

    if (!keys) {
      console.warn('Unknown roman keyboard row: ' + attributes['name']);
    } else {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var c = _step3.value;
          var cls = attributes['class'] || '';
          if (cls) cls = ' ' + cls;

          if (c === '~') {
            row += "<li class='action font-glyph bottom right ";
            row += keys.length - (keys.match(/ /g) || []).length / 2 === 10 ? 'w10' : 'w15';
            row += "' data-shifted='<span class=\"warning\"><svg><use xlink:href=\"#svg-trash\" /></svg></span>'\n                        data-shifted-command='\"deleteAll\"'\n                        data-alt-keys='delete' data-command='[\"performWithFeedback\",\"deletePreviousChar\"]'\n                        >&#x232b;</li>";
          } else if (c === ' ') {
            // Separator
            row += "<li class='separator w5'></li>";
          } else if (c === '^') {
            // Shift key
            row += "<li class='shift modifier font-glyph bottom left w15 layer-switch' data-layer='" + attributes['shift-layer'] + "'>&#x21e7;</li>";
          } else if (c === '/') {
            row += "<li class='keycap" + cls + "' data-alt-keys='/' data-insert='\\frac{#0}{#?}'>&divide;</li>";
          } else if (c === '*') {
            row += "<li class='keycap" + cls + "' data-alt-keys='*' data-insert='\\times '>&times;</li>";
          } else if (c === '-') {
            row += "<li class='keycap" + cls + "' data-alt-keys='*' data-key='-' data-alt-keys='-'>&#x2212;</li>";
          } else if (/tt/.test(cls)) {
            row += "<li class='keycap" + cls + "' data-alt-keys='" + c + "'" + " data-command='[\"typedText\",\"" + c + "\",{\"commandMode\":true, \"focus\":true, \"feedback\":true}]'" + ">" + c + "</li>";
          } else {
            row += "<li class='keycap" + cls + "' data-alt-keys='" + c + "'>" + c + "</li>";
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }

    result = result.replace(new RegExp(m[1] + m[2] + m[3]), row);
    m = result.match(/(<row\s+)(.*)((?:<\/row|\/)>)/);
  }

  return result;
}
/**
 * Construct a virtual keyboard element based on the config options in the
 * mathfield and an optional theme.
 * @param {object} mf
 * @param {string} theme
 * @result {} A DOM element
 * @private
 */


function make(mf, theme) {
  var svgIcons = "<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\n\n            <symbol id=\"svg-command\" viewBox=\"0 0 640 512\">\n                <path d=\"M34.495 36.465l211.051 211.05c4.686 4.686 4.686 12.284 0 16.971L34.495 475.535c-4.686 4.686-12.284 4.686-16.97 0l-7.071-7.07c-4.686-4.686-4.686-12.284 0-16.971L205.947 256 10.454 60.506c-4.686-4.686-4.686-12.284 0-16.971l7.071-7.07c4.686-4.687 12.284-4.687 16.97 0zM640 468v-10c0-6.627-5.373-12-12-12H300c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h328c6.627 0 12-5.373 12-12z\"/>\n            </symbol>\n\n            <symbol id=\"svg-undo\" viewBox=\"0 0 512 512\">\n                <path d=\"M20 8h10c6.627 0 12 5.373 12 12v110.625C85.196 57.047 165.239 7.715 256.793 8.001 393.18 8.428 504.213 120.009 504 256.396 503.786 393.181 392.834 504 256 504c-63.926 0-122.202-24.187-166.178-63.908-5.113-4.618-5.354-12.561-.482-17.433l7.069-7.069c4.503-4.503 11.749-4.714 16.482-.454C150.782 449.238 200.935 470 256 470c117.744 0 214-95.331 214-214 0-117.744-95.331-214-214-214-82.862 0-154.737 47.077-190.289 116H180c6.627 0 12 5.373 12 12v10c0 6.627-5.373 12-12 12H20c-6.627 0-12-5.373-12-12V20c0-6.627 5.373-12 12-12z\"/>\n            </symbol>\n            <symbol id=\"svg-redo\" viewBox=\"0 0 512 512\">\n                <path d=\"M492 8h-10c-6.627 0-12 5.373-12 12v110.625C426.804 57.047 346.761 7.715 255.207 8.001 118.82 8.428 7.787 120.009 8 256.396 8.214 393.181 119.166 504 256 504c63.926 0 122.202-24.187 166.178-63.908 5.113-4.618 5.354-12.561.482-17.433l-7.069-7.069c-4.503-4.503-11.749-4.714-16.482-.454C361.218 449.238 311.065 470 256 470c-117.744 0-214-95.331-214-214 0-117.744 95.331-214 214-214 82.862 0 154.737 47.077 190.289 116H332c-6.627 0-12 5.373-12 12v10c0 6.627 5.373 12 12 12h160c6.627 0 12-5.373 12-12V20c0-6.627-5.373-12-12-12z\"/>\n            </symbol>\n            <symbol id=\"svg-arrow-left\" viewBox=\"0 0 192 512\">\n                <path d=\"M25.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L64.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L25 264.5c-4.6-4.7-4.6-12.3.1-17z\"/>\n            </symbol>\n            <symbol id=\"svg-arrow-right\" viewBox=\"0 0 192 512\">\n                    <path d=\"M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z\"/>\n            </symbol>\n            <symbol id=\"svg-tab\" viewBox=\"0 0 448 512\">\n                    <path d=\"M32 217.1c0-8.8 7.2-16 16-16h144v-93.9c0-7.1 8.6-10.7 13.6-5.7l143.5 143.1c6.3 6.3 6.3 16.4 0 22.7L205.6 410.4c-5 5-13.6 1.5-13.6-5.7v-93.9H48c-8.8 0-16-7.2-16-16v-77.7m-32 0v77.7c0 26.5 21.5 48 48 48h112v61.9c0 35.5 43 53.5 68.2 28.3l143.6-143c18.8-18.8 18.8-49.2 0-68L228.2 78.9c-25.1-25.1-68.2-7.3-68.2 28.3v61.9H48c-26.5 0-48 21.6-48 48zM436 64h-8c-6.6 0-12 5.4-12 12v360c0 6.6 5.4 12 12 12h8c6.6 0 12-5.4 12-12V76c0-6.6-5.4-12-12-12z\"/>\n            </symbol>\n            <symbol id=\"svg-copy\" viewBox=\"0 0 448 512\">\n                <path d=\"M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM352 32.491a15.88 15.88 0 0 1 7.431 4.195l51.882 51.883A15.885 15.885 0 0 1 415.508 96H352V32.491zM288 464c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V144c0-8.822 7.178-16 16-16h80v240c0 26.51 21.49 48 48 48h112v48zm128-96c0 8.822-7.178 16-16 16H176c-8.822 0-16-7.178-16-16V48c0-8.822 7.178-16 16-16h144v72c0 13.2 10.8 24 24 24h72v240z\"/>\n            </symbol>\n            <symbol id=\"svg-angle-double-right\" viewBox=\"0 0 320 512\">\n                <path d=\"M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17zm128-17l-117.8-116c-4.7-4.7-12.3-4.7-17 0l-7.1 7.1c-4.7 4.7-4.7 12.3 0 17L255.3 256 153.1 356.4c-4.7 4.7-4.7 12.3 0 17l7.1 7.1c4.7 4.7 12.3 4.7 17 0l117.8-116c4.6-4.7 4.6-12.3-.1-17z\"/>\n            </symbol>\n            <symbol id=\"svg-angle-double-left\" viewBox=\"0 0 320 512\">\n                <path d=\"M153.1 247.5l117.8-116c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L192.7 256l102.2 100.4c4.7 4.7 4.7 12.3 0 17l-7.1 7.1c-4.7 4.7-12.3 4.7-17 0L153 264.5c-4.6-4.7-4.6-12.3.1-17zm-128 17l117.8 116c4.7 4.7 12.3 4.7 17 0l7.1-7.1c4.7-4.7 4.7-12.3 0-17L64.7 256l102.2-100.4c4.7-4.7 4.7-12.3 0-17l-7.1-7.1c-4.7-4.7-12.3-4.7-17 0L25 247.5c-4.6 4.7-4.6 12.3.1 17z\"/>\n            </symbol>\n            <symbol id=\"svg-trash\" viewBox=\"0 0 448 512\">\n                <path d=\"M336 64l-33.6-44.8C293.3 7.1 279.1 0 264 0h-80c-15.1 0-29.3 7.1-38.4 19.2L112 64H24C10.7 64 0 74.7 0 88v2c0 3.3 2.7 6 6 6h26v368c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V96h26c3.3 0 6-2.7 6-6v-2c0-13.3-10.7-24-24-24h-88zM184 32h80c5 0 9.8 2.4 12.8 6.4L296 64H152l19.2-25.6c3-4 7.8-6.4 12.8-6.4zm200 432c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V96h320v368zm-176-44V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm-80 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12zm160 0V156c0-6.6 5.4-12 12-12h8c6.6 0 12 5.4 12 12v264c0 6.6-5.4 12-12 12h-8c-6.6 0-12-5.4-12-12z\"/>\n            </symbol>\n        </svg>\n        "; // <symbol id="svg-wikipedia" viewBox="0 0 640 512">
  //         <path d="M640 51.2l-.3 12.2c-28.1.8-45 15.8-55.8 40.3-25 57.8-103.3 240-155.3 358.6H415l-81.9-193.1c-32.5 63.6-68.3 130-99.2 193.1-.3.3-15 0-15-.3C172 352.3 122.8 243.4 75.8 133.4 64.4 106.7 26.4 63.4.2 63.7c0-3.1-.3-10-.3-14.2h161.9v13.9c-19.2 1.1-52.8 13.3-43.3 34.2 21.9 49.7 103.6 240.3 125.6 288.6 15-29.7 57.8-109.2 75.3-142.8-13.9-28.3-58.6-133.9-72.8-160-9.7-17.8-36.1-19.4-55.8-19.7V49.8l142.5.3v13.1c-19.4.6-38.1 7.8-29.4 26.1 18.9 40 30.6 68.1 48.1 104.7 5.6-10.8 34.7-69.4 48.1-100.8 8.9-20.6-3.9-28.6-38.6-29.4.3-3.6 0-10.3.3-13.6 44.4-.3 111.1-.3 123.1-.6v13.6c-22.5.8-45.8 12.8-58.1 31.7l-59.2 122.8c6.4 16.1 63.3 142.8 69.2 156.7L559.2 91.8c-8.6-23.1-36.4-28.1-47.2-28.3V49.6l127.8 1.1.2.5z"/>
  // </symbol>
  // <symbol id="svg-link" viewBox="0 0 512 512">
  //         <path d="M301.148 394.702l-79.2 79.19c-50.778 50.799-133.037 50.824-183.84 0-50.799-50.778-50.824-133.037 0-183.84l79.19-79.2a132.833 132.833 0 0 1 3.532-3.403c7.55-7.005 19.795-2.004 20.208 8.286.193 4.807.598 9.607 1.216 14.384.481 3.717-.746 7.447-3.397 10.096-16.48 16.469-75.142 75.128-75.3 75.286-36.738 36.759-36.731 96.188 0 132.94 36.759 36.738 96.188 36.731 132.94 0l79.2-79.2.36-.36c36.301-36.672 36.14-96.07-.37-132.58-8.214-8.214-17.577-14.58-27.585-19.109-4.566-2.066-7.426-6.667-7.134-11.67a62.197 62.197 0 0 1 2.826-15.259c2.103-6.601 9.531-9.961 15.919-7.28 15.073 6.324 29.187 15.62 41.435 27.868 50.688 50.689 50.679 133.17 0 183.851zm-90.296-93.554c12.248 12.248 26.362 21.544 41.435 27.868 6.388 2.68 13.816-.68 15.919-7.28a62.197 62.197 0 0 0 2.826-15.259c.292-5.003-2.569-9.604-7.134-11.67-10.008-4.528-19.371-10.894-27.585-19.109-36.51-36.51-36.671-95.908-.37-132.58l.36-.36 79.2-79.2c36.752-36.731 96.181-36.738 132.94 0 36.731 36.752 36.738 96.181 0 132.94-.157.157-58.819 58.817-75.3 75.286-2.651 2.65-3.878 6.379-3.397 10.096a163.156 163.156 0 0 1 1.216 14.384c.413 10.291 12.659 15.291 20.208 8.286a131.324 131.324 0 0 0 3.532-3.403l79.19-79.2c50.824-50.803 50.799-133.062 0-183.84-50.802-50.824-133.062-50.799-183.84 0l-79.2 79.19c-50.679 50.682-50.688 133.163 0 183.851z"/>
  // </symbol>
  //     <symbol id="svg-external-link" viewBox="0 0 448 512">
  //     <path d="M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zm16 400c0 8.822-7.178 16-16 16H48c-8.822 0-16-7.178-16-16V80c0-8.822 7.178-16 16-16h352c8.822 0 16 7.178 16 16v352zM99.515 374.828c-4.686-4.686-4.686-12.284 0-16.971l195.15-195.15-.707-.707-89.958.342c-6.627 0-12-5.373-12-12v-9.999c0-6.628 5.372-12 12-12L340 128c6.627 0 12 5.372 12 12l-.343 136c0 6.627-5.373 12-12 12h-9.999c-6.627 0-12-5.373-12-12l.342-89.958-.707-.707-195.15 195.15c-4.686 4.686-12.284 4.686-16.971 0l-5.657-5.657z"/>
  // </symbol>
  // <symbol id="svg-external-link" viewBox="0 0 512 512">
  //     <path d="M256 40c118.621 0 216 96.075 216 216 0 119.291-96.61 216-216 216-119.244 0-216-96.562-216-216 0-119.203 96.602-216 216-216m0-32C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm-36 344h12V232h-12c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h48c6.627 0 12 5.373 12 12v140h12c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12h-72c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12zm36-240c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32z"/>
  // </symbol>

  var markup = svgIcons; // Auto-populate the ALT_KEYS table

  ALT_KEYS_BASE['foreground-color'] = [];
  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = core_color.LINE_COLORS[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var color = _step4.value;
      ALT_KEYS_BASE['foreground-color'].push({
        classes: 'small-button',
        content: '<span style="border-radius:50%;width:32px;height:32px; box-sizing: border-box; border: 3px solid ' + color + '"></span>',
        command: '["applyStyle",{"color":"' + color + '"}]'
      });
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
        _iterator4.return();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  ALT_KEYS_BASE['background-color'] = [];
  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = core_color.AREA_COLORS[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var _color = _step5.value;
      ALT_KEYS_BASE['background-color'].push({
        classes: 'small-button',
        content: '<span style="border-radius:50%;width:32px;height:32px; background:' + _color + '"></span>',
        command: '["applyStyle",{"backgroundColor":"' + _color + '"}]'
      });
    } // 合并ALT KEYS和默认值

  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
        _iterator5.return();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  ALT_KEYS = editor_virtualKeyboard_objectSpread({}, ALT_KEYS, {}, ALT_KEYS_BASE);
  Object.keys(ALT_KEYS).forEach(function (key) {
    ALT_KEYS[key] = ALT_KEYS[key].slice();
  });
  var upperAlpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  var lowerAlpha = 'abcdefghijklmnopqrstuvwxyz';
  var digits = '0123456789';

  for (var i = 0; i < 26; i++) {
    var key = upperAlpha[i];
    if (!ALT_KEYS[key]) ALT_KEYS[key] = [];
    ALT_KEYS[key].unshift({
      latex: '\\mathbb{' + key + '}',
      aside: 'blackboard',
      insert: '\\mathbb{' + key + '}'
    });
    ALT_KEYS[key].unshift({
      latex: '\\mathbf{' + key + '}',
      aside: 'bold',
      insert: '\\mathbf{' + key + '}'
    });
    ALT_KEYS[key].unshift({
      latex: '\\mathsf{' + key + '}',
      aside: 'sans',
      insert: '\\mathsf{' + key + '}'
    });
    ALT_KEYS[key].unshift({
      latex: '\\mathtt{' + key + '}',
      aside: 'monospace',
      insert: '\\mathtt{' + key + '}'
    });
    ALT_KEYS[key].unshift({
      latex: '\\mathcal{' + key + '}',
      aside: 'script',
      insert: '\\mathcal{' + key + '}'
    });
    ALT_KEYS[key].unshift({
      latex: '\\mathfrak{' + key + '}',
      aside: 'fraktur',
      insert: '\\mathfrak{' + key + '}'
    });
    ALT_KEYS[key].unshift({
      latex: '\\mathbb{' + lowerAlpha[i] + '}',
      aside: 'blackboard',
      insert: '\\mathbb{' + lowerAlpha[i] + '}'
    });
    ALT_KEYS[key].unshift({
      latex: '\\mathbf{' + lowerAlpha[i] + '}',
      aside: 'bold',
      insert: '\\mathbf{' + lowerAlpha[i] + '}'
    });
    ALT_KEYS[key].unshift({
      latex: '\\mathsf{' + lowerAlpha[i] + '}',
      aside: 'sans',
      insert: '\\mathsf{' + lowerAlpha[i] + '}'
    });
    ALT_KEYS[key].unshift({
      latex: '\\mathcal{' + lowerAlpha[i] + '}',
      aside: 'script',
      insert: '\\mathcal{' + lowerAlpha[i] + '}'
    });
    ALT_KEYS[key].unshift({
      latex: '\\mathfrak{' + lowerAlpha[i] + '}',
      aside: 'fraktur',
      insert: '\\mathfrak{' + lowerAlpha[i] + '}'
    });
  }

  for (var _i = 0; _i <= 26; _i++) {
    var _key = lowerAlpha[_i];
    if (!ALT_KEYS[_key]) ALT_KEYS[_key] = [];

    ALT_KEYS[_key].unshift({
      latex: '\\mathsf{' + _key + '}',
      aside: 'sans',
      insert: '\\mathbb{' + _key + '}'
    });

    ALT_KEYS[_key].unshift({
      latex: '\\mathbf{' + _key + '}',
      aside: 'bold',
      insert: '\\mathbf{' + _key + '}'
    });

    ALT_KEYS[_key].unshift({
      latex: '\\mathtt{' + _key + '}',
      aside: 'monospace',
      insert: '\\mathtt{' + _key + '}'
    });

    ALT_KEYS[_key].unshift({
      latex: '\\mathfrak{' + _key + '}',
      aside: 'fraktur',
      insert: '\\mathfrak{' + _key + '}'
    });
  }

  for (var _i2 = 0; _i2 < 10; _i2++) {
    var _key2 = digits[_i2];
    if (!ALT_KEYS[_key2]) ALT_KEYS[_key2] = []; // The mathbb font does not appear to include digits,
    // although it's supposed to.
    // ALT_KEYS[key].push({
    //         latex: '\\underset{\\textsf{\\footnotesize blackboard}}{\\mathbb{' + key + '}}',
    //         insert: '\\mathbb{' + key + '}}'});

    ALT_KEYS[_key2].unshift({
      latex: '\\mathbf{' + _key2 + '}',
      aside: 'bold',
      insert: '\\mathbf{' + _key2 + '}'
    });

    ALT_KEYS[_key2].unshift({
      latex: '\\mathsf{' + _key2 + '}',
      aside: 'sans',
      insert: '\\mathsf{' + _key2 + '}'
    });

    ALT_KEYS[_key2].unshift({
      latex: '\\mathtt{' + _key2 + '}',
      aside: 'monospace',
      insert: '\\mathtt{' + _key2 + '}'
    });

    ALT_KEYS[_key2].unshift({
      latex: '\\mathcal{' + _key2 + '}',
      aside: 'script',
      insert: '\\mathcal{' + _key2 + '}'
    });

    ALT_KEYS[_key2].unshift({
      latex: '\\mathfrak{' + _key2 + '}',
      aside: 'fraktur',
      insert: '\\mathfrak{' + _key2 + '}'
    });
  }

  var keyboardIDs = mf.config.virtualKeyboards;

  if (!keyboardIDs) {
    keyboardIDs = 'all';
  }

  keyboardIDs = keyboardIDs.replace(/\ball\b/i, 'numeric roman greek functions command');
  var layers = Object.assign({}, LAYERS, mf.config.customVirtualKeyboardLayers || {});
  var keyboards = Object.assign({}, KEYBOARDS, mf.config.customVirtualKeyboards || {});
  var keyboardList = keyboardIDs.replace(/\s+/g, ' ').split(' ');
  var _iteratorNormalCompletion6 = true;
  var _didIteratorError6 = false;
  var _iteratorError6 = undefined;

  try {
    for (var _iterator6 = keyboardList[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
      var keyboard = _step6.value;

      if (!keyboards[keyboard]) {
        console.error('Unknown virtual keyboard "' + keyboard + '"');
        break;
      } // Add the default layer to the list of layers,
      // and make sure the list of layers is uniquified.


      var keyboardLayers = keyboards[keyboard].layers || [];

      if (keyboards[keyboard].layer) {
        keyboardLayers.push(keyboards[keyboard].layer);
      }

      keyboardLayers = Array.from(new Set(keyboardLayers));
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = keyboardLayers[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var layer = _step7.value;

          if (!layers[layer]) {
            console.error('Unknown virtual keyboard layer: "' + layer + '"');
            break;
          }

          if (editor_virtualKeyboard_typeof(layers[layer]) === 'object') {
            // Process JSON layer to web element based layer.
            var tempLayer = "";

            if (layers[layer].styles) {
              tempLayer += "<style>".concat(layers[layer].styles, "</style>");
            }

            if (layers[layer].backdrop) {
              tempLayer += "<div class='".concat(layers[layer].backdrop, "'>");
            }

            if (layers[layer].container) {
              tempLayer += "<div class='".concat(layers[layer].container, "'>");
            }

            if (layers[layer].rows) {
              tempLayer += "<div class='rows'>";
              var _iteratorNormalCompletion8 = true;
              var _didIteratorError8 = false;
              var _iteratorError8 = undefined;

              try {
                for (var _iterator8 = layers[layer].rows[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                  var row = _step8.value;
                  tempLayer += "<ul>";
                  var _iteratorNormalCompletion9 = true;
                  var _didIteratorError9 = false;
                  var _iteratorError9 = undefined;

                  try {
                    for (var _iterator9 = row[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                      var col = _step9.value;
                      tempLayer += "<li";

                      if (col.class) {
                        tempLayer += " class=\"".concat(col.class, "\"");
                      }

                      if (col.key) {
                        tempLayer += " data-key=\"".concat(col.key, "\"");
                      }

                      if (col.command) {
                        if (typeof col.command === 'string') {
                          tempLayer += " data-command='\"".concat(col.command, "\"'");
                        } else {
                          tempLayer += " data-command='";
                          tempLayer += JSON.stringify(col.command);
                          tempLayer += "'";
                        }
                      }

                      if (col.insert) {
                        tempLayer += " data-insert=\"".concat(col.insert, "\"");
                      }

                      if (col.latex) {
                        tempLayer += " data-latex=\"".concat(col.latex, "\"");
                      }

                      if (col.aside) {
                        tempLayer += " data-aside=\"".concat(col.aside, "\"");
                      }

                      if (col.altKeys) {
                        tempLayer += " data-alt-keys=\"".concat(col.altKeys, "\"");
                      }

                      if (col.shifted) {
                        tempLayer += " data-shifted=\"".concat(col.shifted, "\"");
                      }

                      if (col.shiftedCommand) {
                        tempLayer += " data-shifted-command=\"".concat(col.shiftedCommand, "\"");
                      }

                      tempLayer += ">".concat(col.label ? col.label : '', "</li>");
                    }
                  } catch (err) {
                    _didIteratorError9 = true;
                    _iteratorError9 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
                        _iterator9.return();
                      }
                    } finally {
                      if (_didIteratorError9) {
                        throw _iteratorError9;
                      }
                    }
                  }

                  tempLayer += "</ul>";
                }
              } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
                    _iterator8.return();
                  }
                } finally {
                  if (_didIteratorError8) {
                    throw _iteratorError8;
                  }
                }
              }

              tempLayer += "</div>";

              if (layers[layer].container) {
                tempLayer += "</div'>";
              }

              if (layers[layer].backdrop) {
                tempLayer += "</div'>";
              }
            }

            layers[layer] = tempLayer;
          }

          markup += "<div tabindex=\"-1\" class='keyboard-layer' data-layer='" + layer + "'>";
          markup += makeKeyboardToolbar(mf, keyboardIDs, keyboard);
          var layerMarkup = typeof layers[layer] === 'function' ? layers[layer]() : layers[layer]; // A layer can contain 'shortcuts' (i.e. <row> tags) that need to
          // be expanded

          markup += expandLayerMarkup(mf, layerMarkup);
          markup += '</div>';
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
            _iterator7.return();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError6 = true;
    _iteratorError6 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
        _iterator6.return();
      }
    } finally {
      if (_didIteratorError6) {
        throw _iteratorError6;
      }
    }
  }

  var result = document.createElement('div');
  result.className = 'ML__keyboard';

  if (theme) {
    result.classList.add(theme);
  } else if (mf.config.virtualKeyboardTheme) {
    result.classList.add(mf.config.virtualKeyboardTheme);
  } else if (/android|cros/i.test(navigator.userAgent)) {
    result.classList.add('material');
  }

  result.innerHTML = markup; // Attach the element handlers

  makeKeycap(mf, result.querySelectorAll('.keycap, .action, .fnbutton, .bigfnbutton'));
  var elList = result.getElementsByClassName('layer-switch');

  for (var _i3 = 0; _i3 < elList.length; ++_i3) {
    if (elList[_i3].classList.contains('shift')) {
      // This is a potential press-and-hold layer switch
      mf._attachButtonHandlers(elList[_i3], {
        // When the modifier is initially pressed, we will shift the labels
        // (if available)
        pressed: ['shiftKeyboardLayer', 'shift'],
        // If the key is released before a delay, we switch to the target layer
        default: ['switchKeyboardLayer', elList[_i3].getAttribute('data-layer')],
        // If the key is released after a longer delay, we restore the
        // shifted labels
        pressAndHoldEnd: 'unshiftKeyboardLayer'
      });
    } else {
      // This is a simple layer switch
      mf._attachButtonHandlers(elList[_i3], {
        default: ['switchKeyboardLayer', elList[_i3].getAttribute('data-layer')]
      });
    }
  } // Select the first keyboard as the initial one.


  var layerElements = result.getElementsByClassName('keyboard-layer');
  Array.from(layerElements).forEach(function (x) {
    x.addEventListener('mousedown', function (evt) {
      evt.preventDefault();
      evt.stopPropagation();
    });
    x.addEventListener('touchstart', function (evt) {
      evt.preventDefault();
      evt.stopPropagation();
    });
  });
  layerElements[0].classList.add('is-visible'); // Listen to know when the mouse has been released without being
  // captured to remove the alternate keys panel and the shifted state of the
  // keyboard.

  window.addEventListener('mouseup', function () {
    mf.hideAlternateKeys_();
    mf.unshiftKeyboardLayer_();
  });
  window.addEventListener('blur', function () {
    mf.hideAlternateKeys_();
    mf.unshiftKeyboardLayer_();
  });
  window.addEventListener('touchend', function () {
    mf.hideAlternateKeys_();
    mf.unshiftKeyboardLayer_();
  });
  window.addEventListener('touchcancel', function () {
    mf.hideAlternateKeys_();
    mf.unshiftKeyboardLayer_();
  });
  return result;
}

/* harmony default export */ var editor_virtualKeyboard = ({
  make: make,
  makeKeycap: makeKeycap
});
// CONCATENATED MODULE: ./packages/editor/outputASCIIMath.js
var outputASCIIMath_SPECIAL_IDENTIFIERS = {
  "\u2212": '-',
  // MINUS SIGN
  '-': '-',
  '\\alpha': 'alpha',
  '\\beta': 'beta',
  '\\gamma': 'gamma',
  '\\delta': 'delta',
  '\\epsilon': 'epsilon',
  '\\varepsilon': 'varepsilon',
  '\\zeta': 'zeta',
  '\\eta': 'eta',
  '\\theta': 'theta',
  '\\vartheta': 'vartheta',
  '\\iota': 'iota',
  '\\kappa': 'kappa',
  '\\lambda': 'lambda',
  '\\mu': 'mu',
  '\\nu': 'nu',
  '\\xi': 'xi',
  '\\pi': 'pi',
  '\\rho': 'rho',
  '\\sigma': 'sigma',
  '\\tau': 'tau',
  "\\upsilon": 'upsilon',
  '\\phi': 'phi',
  '\\varphi': 'varphi',
  '\\chi': 'chi',
  '\\psi': 'psi',
  '\\omega': 'omega',
  '\\Gamma': 'Gamma',
  '\\Delta': 'Delta',
  '\\Theta': 'Theta',
  '\\Lambda': 'Lambda',
  '\\Xi': 'Xi',
  '\\Pi': 'Pi',
  '\\Sigma': 'Sigma',
  '\\Phi': 'Phi',
  '\\Psi': 'Psi',
  '\\Omega': 'Omega'
};
var SPECIAL_OPERATORS = {
  '\\pm': '+-',
  '\\times': 'xx',
  '\\colon': ':',
  '\\vert': '|',
  '\\Vert': '||',
  '\\mid': '|',
  '\\lbrace': '{',
  '\\rbrace': '}',
  '\\langle': '(:',
  '\\rangle': ':)' // '\\lfloor': '\u230a',
  // '\\rfloor': '\u230b',
  // '\\lceil': '\u2308',
  // '\\rceil': '\u2309',
  // '\\vec': '&#x20d7;',
  // '\\acute': '&#x00b4;',
  // '\\grave': '&#x0060;',
  // '\\dot': '&#x02d9;',
  // '\\ddot': '&#x00a8;',
  // '\\tilde': '&#x007e;',
  // '\\bar': '&#x00af;',
  // '\\breve': '&#x02d8;',
  // '\\check': '&#x02c7;',
  // '\\hat': '&#x005e;'

};
function toASCIIMath(atom, options) {
  if (!atom) return '';

  if (Array.isArray(atom)) {
    var _result = '';
    if (atom.length === 0) return '';
    if (atom[0].type === 'first') atom.shift();

    if (atom[0].mode === 'text') {
      // Text mode... put it in (ASCII) quotes
      var i = 0;
      _result = '"';

      while (atom[i] && atom[i].mode === 'text') {
        _result += atom[i].body;
        i++;
      }

      _result += '"' + toASCIIMath(atom.slice(i), options);
    } else {
      var _i = 0;

      while (atom[_i] && atom[_i].mode === 'math') {
        _result += toASCIIMath(atom[_i], options);
        _i++;
      }

      _result += toASCIIMath(atom.slice(_i), options);
    }

    return _result.trim();
  }

  var result = '';
  var command = atom.latex ? atom.latex.trim() : null;
  var m;

  switch (atom.type) {
    case 'group':
    case 'root':
      result = toASCIIMath(atom.body, options);
      break;

    case 'array':
      break;

    case 'genfrac':
      if (atom.leftDelim || atom.rightDelim) {
        result += atom.leftDelim === '.' || !atom.leftDelim ? '{:' : atom.leftDelim;
      }

      if (atom.hasBarLine) {
        result += '(';
        result += toASCIIMath(atom.numer, options);
        result += ')/(';
        result += toASCIIMath(atom.denom, options);
        result += ')';
      } else {
        // No bar line, i.e. \choose, etc...
        result += '(' + toASCIIMath(atom.numer, options) + '),';
        result += '(' + toASCIIMath(atom.denom, options) + ')';
      }

      if (atom.leftDelim || atom.rightDelim) {
        result += atom.rightDelim === '.' || !atom.rightDelim ? '{:' : atom.rightDelim;
      }

      break;

    case 'surd':
      if (atom.index) {
        result += 'root(' + toASCIIMath(atom.index, options) + ')(' + toASCIIMath(atom.body, options) + ')';
      } else {
        result += 'sqrt(' + toASCIIMath(atom.body, options) + ')';
      }

      break;

    case 'leftright':
      result += atom.leftDelim === '.' || !atom.leftDelim ? '{:' : atom.leftDelim;
      result += toASCIIMath(atom.body, options);
      result += atom.rightDelim === '.' || !atom.rightDelim ? '{:' : atom.rightDelim;
      break;

    case 'sizeddelim':
    case 'delim':
      // result += '<mo separator="true"' + makeID(atom.id, options) + '>' + (SPECIAL_OPERATORS[atom.delim] || atom.delim) + '</mo>';
      break;

    case 'accent':
      break;

    case 'line':
    case 'overlap':
      break;

    case 'overunder':
      break;

    case 'mord':
      // @todo, deal with some special identifiers: \alpha, etc...
      result = outputASCIIMath_SPECIAL_IDENTIFIERS[command] || command || (typeof atom.body === 'string' ? atom.body : '');
      if (result[0] === '\\') result += '';
      m = command ? command.match(/[{]?\\char"([0-9abcdefABCDEF]*)[}]?/) : null;

      if (m) {
        // It's a \char command
        result = String.fromCharCode(parseInt('0x' + m[1]));
      } else if (result.length > 0 && result.charAt(0) === '\\') {
        // atom is an identifier with no special handling. Use the
        // Unicode value
        if (typeof atom.body === 'string') {
          result = atom.body.charAt(0);
        } else {
          result = atom.latex;
        }
      } // result = '<mi' + variant + makeID(atom.id, options) + '>' + xmlEscape(result) + '</mi>';


      break;

    case 'mbin':
    case 'mrel':
    case 'textord':
    case 'minner':
      if (command && outputASCIIMath_SPECIAL_IDENTIFIERS[command]) {
        // Some 'textord' are actually identifiers. Check them here.
        result = outputASCIIMath_SPECIAL_IDENTIFIERS[command];
      } else if (command && SPECIAL_OPERATORS[command]) {
        result = SPECIAL_OPERATORS[command];
      } else {
        result = atom.body;
      }

      break;

    case 'mopen':
    case 'mclose':
      result += atom.body;
      break;

    case 'mpunct':
      result = SPECIAL_OPERATORS[command] || command;
      break;

    case 'mop':
      if (atom.body !== "\u200B") {
        // Not ZERO-WIDTH
        result = '';

        if (command === '\\operatorname') {
          result += atom.body;
        } else {
          result += atom.body || command;
        }

        result += ' ';
      }

      break;

    case 'mathstyle':
      break;

    case 'box':
      break;

    case 'spacing':
      break;

    case 'enclose':
      break;

    case 'space':
      result = ' ';
      break;
  } // Subscripts before superscripts (according to the ASCIIMath spec)


  if (atom.subscript) {
    result += '_';
    var arg = toASCIIMath(atom.subscript, options);

    if (arg.length > 1 && !/^(-)?\d+(\.\d*)?$/.test(arg)) {
      result += '(' + arg + ')';
    } else {
      result += arg;
    }
  }

  if (atom.superscript) {
    result += '^';

    var _arg = toASCIIMath(atom.superscript, options);

    if (_arg.length > 1 && !/^(-)?\d+(\.\d*)?$/.test(_arg)) {
      result += '(' + _arg + ')';
    } else {
      result += _arg;
    }
  }

  return result;
}
/* harmony default export */ var outputASCIIMath = ({
  toASCIIMath: toASCIIMath
});
// CONCATENATED MODULE: ./packages/addons/outputMathML.js
/**
 *
 * This module outputs a formula to MathML.
 *
 * To use it, use the {@linkcode MathAtom#toMathML MathAtom.toMathML()}  method.
 *
 * @module addons/outputMathML
 * @private
 */


var outputMathML_SPECIAL_OPERATORS = {
  '\\pm': '&PlusMinus;',
  '\\times': '&times;',
  '\\colon': ':',
  '\\vert': '|',
  '\\Vert': "\u2225",
  '\\mid': "\u2223",
  '\\lbrace': '{',
  '\\rbrace': '}',
  '\\langle': "\u27E8",
  '\\rangle': "\u27E9",
  '\\lfloor': "\u230A",
  '\\rfloor': "\u230B",
  '\\lceil': "\u2308",
  '\\rceil': "\u2309",
  '\\vec': '&#x20d7;',
  '\\acute': '&#x00b4;',
  '\\grave': '&#x0060;',
  '\\dot': '&#x02d9;',
  '\\ddot': '&#x00a8;',
  '\\tilde': '&#x007e;',
  '\\bar': '&#x00af;',
  '\\breve': '&#x02d8;',
  '\\check': '&#x02c7;',
  '\\hat': '&#x005e;'
};

function xmlEscape(str) {
  return str // .replace(/&/g, '&amp;')
  .replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

function outputMathML_makeID(id, options) {
  if (!id || !options.generateID) return ''; // Note: the 'extid' attribute is recognized by SRE as an attribute
  // to be passed to SSML as a <mark> tag.

  return ' extid="' + id + '"';
}

function scanIdentifier(stream, _final, options) {
  var result = false;
  _final = _final || stream.atoms.length;
  var mathML = '';
  var body = '';
  var superscript = -1;
  var subscript = -1;
  var atom = stream.atoms[stream.index];

  if (stream.index < _final && (atom.type === 'mord' || atom.type === 'textord') && '0123456789,.'.indexOf(atom.body) < 0) {
    body = atom.toMathML(options);

    if (atom.superscript) {
      superscript = stream.index;
    }

    if (atom.subscript) {
      subscript = stream.index;
    }

    stream.index += 1;
  }

  if (body.length > 0) {
    result = true; // If there are separate atoms for sub/sup, record them

    if (isSuperscriptAtom(stream)) {
      superscript = stream.index;
      stream.index += 1;
    }

    if (isSubscriptAtom(stream)) {
      subscript = stream.index;
      stream.index += 1;
    }

    if (superscript >= 0 && subscript >= 0) {
      mathML = '<msubsup>' + body;
      mathML += toMathML(stream.atoms[subscript].subscript, 0, 0, options).mathML;
      mathML += toMathML(stream.atoms[superscript].superscript, 0, 0, options).mathML;
      mathML += '</msubsup>';
    } else if (superscript >= 0) {
      mathML = '<msup>' + body;

      if (isSuperscriptAtom(stream)) {
        // There's another superscript after this one. Maybe double-prime?
        var sup = toMathML(stream.atoms[superscript].superscript, 0, 0, options).mathML;
        var sup2 = toMathML(stream.atoms[superscript + 1].superscript, 0, 0, options).mathML;

        if ((sup === "<mi>\u2032</mi>" || sup === '<mi>&#x2032;</mi>') && (sup2 === "<mi>\u2032</mi>" || sup2 === '<mi>&#x2032;</mi>')) {
          mathML += '<mi>&#x2033;</mi>';
        } else if (sup === "<mi>\u2032</mi>" || sup === '<mi>&#x2032;</mi>') {
          mathML += '<mi>&#x2032;</mi>';
        } else {
          mathML += sup;
        }
      } else {
        mathML += toMathML(stream.atoms[superscript].superscript, 0, 0, options).mathML;
      }

      mathML += '</msup>';
    } else if (subscript >= 0) {
      mathML = '<msub>' + body;
      mathML += toMathML(stream.atoms[subscript].subscript, 0, 0, options).mathML;
      mathML += '</msub>';
    } else {
      mathML = body;
    }

    if ((stream.lastType === 'mi' || stream.lastType === 'mn' || stream.lastType === 'mtext' || stream.lastType === 'fence') && !/^<mo>(.*)<\/mo>$/.test(mathML)) {
      mathML = '<mo>&InvisibleTimes;</mo>' + mathML;
    }

    if (body.endsWith('>f</mi>') || body.endsWith('>g</mi>')) {
      mathML += '<mo> &ApplyFunction; </mo>';
      stream.lastType = 'applyfunction';
    } else {
      stream.lastType = /^<mo>(.*)<\/mo>$/.test(mathML) ? 'mo' : 'mi';
    }

    stream.mathML += mathML;
  }

  return result;
}
/**
 * Return true if the current atom is a standalone superscript atom
 * i.e. an atom with no content, except of a superscript.
 * Superscripts can be encoded either as an attribute on the last atom
 * or as a standalone, empty, atom following the one to which it applies.
 * @param {object} stream
 * @private
 */


function isSuperscriptAtom(stream) {
  return stream.index < stream.atoms.length && stream.atoms[stream.index].superscript && stream.atoms[stream.index].type === 'msubsup';
}

function isSubscriptAtom(stream) {
  return stream.index < stream.atoms.length && stream.atoms[stream.index].subscript && stream.atoms[stream.index].type === 'msubsup';
}

function indexOfSuperscriptInNumber(stream) {
  var result = -1;
  var i = stream.index;
  var done = false;
  var found = false;

  while (i < stream.atoms.length && !done && !found) {
    done = stream.atoms[i].type !== 'mord' || '0123456789,.'.indexOf(stream.atoms[i].body) < 0;
    found = !done && stream.atoms[i].superscript;
    i++;
  }

  if (found) {
    result = i - 1;
  }

  return result;
}

function parseSubsup(base, stream, options) {
  var result = false;
  var mathML = '';
  var atom = stream.atoms[stream.index - 1];
  if (!atom) return false;

  if (!atom.superscript && !atom.subscript) {
    if (isSuperscriptAtom(stream) || isSubscriptAtom(stream)) {
      atom = stream.atoms[stream.index];
      stream.index += 1;
    }
  }

  if (!atom) return false;

  if (atom.superscript && atom.subscript) {
    mathML = '<msubsup>' + base;
    mathML += toMathML(atom.subscript, 0, 0, options).mathML;
    mathML += toMathML(atom.superscript, 0, 0, options).mathML;
    mathML += '</msubsup>';
  } else if (atom.superscript) {
    mathML = '<msup>' + base;
    mathML += toMathML(atom.superscript, 0, 0, options).mathML;
    mathML += '</msup>';
  } else if (atom.subscript) {
    mathML = '<msub>' + base;
    mathML += toMathML(atom.subscript, 0, 0, options).mathML;
    mathML += '</msub>';
  }

  if (mathML.length > 0) {
    result = true;
    stream.mathML += mathML;
    stream.lastType = '';
  }

  return result;
}

function scanText(stream, _final2, options) {
  var result = false;
  _final2 = _final2 || stream.atoms.length;
  var initial = stream.index;
  var mathML = '';

  while (stream.index < _final2 && stream.atoms[stream.index].mode === 'text') {
    mathML += stream.atoms[stream.index].body ? stream.atoms[stream.index].body : ' ';
    stream.index += 1;
  }

  if (mathML.length > 0) {
    result = true;
    mathML = '<mtext' + outputMathML_makeID(stream.atoms[initial].id, options) + '>' + mathML + '</mtext>';
    stream.mathML += mathML;
    stream.lastType = 'mtext';
  }

  return result;
}

function scanNumber(stream, _final3, options) {
  var result = false;
  _final3 = _final3 || stream.atoms.length;
  var initial = stream.index;
  var mathML = '';
  var superscript = indexOfSuperscriptInNumber(stream);

  if (superscript >= 0 && superscript < _final3) {
    _final3 = superscript;
  }

  while (stream.index < _final3 && stream.atoms[stream.index].type === 'mord' && '0123456789,.'.indexOf(stream.atoms[stream.index].body) >= 0) {
    mathML += stream.atoms[stream.index].body;
    stream.index += 1;
  }

  if (mathML.length > 0) {
    result = true;
    mathML = '<mn' + outputMathML_makeID(stream.atoms[initial].id, options) + '>' + mathML + '</mn>';

    if (superscript < 0 && isSuperscriptAtom(stream)) {
      superscript = stream.index;
      stream.index += 1;
    }

    if (superscript >= 0) {
      mathML = '<msup>' + mathML;
      mathML += toMathML(stream.atoms[superscript].superscript, 0, 0, options).mathML;
      mathML += '</msup>';
    }

    stream.mathML += mathML;
    stream.lastType = 'mn';
  }

  return result;
}

function scanFence(stream, _final4, options) {
  var result = false;
  _final4 = _final4 || stream.atoms.length;
  var mathML = '';
  var lastType = '';

  if (stream.index < _final4 && stream.atoms[stream.index].type === 'mopen') {
    var found = false;
    var depth = 0;
    var openIndex = stream.index;
    var closeIndex = -1;
    var index = openIndex + 1;

    while (index < _final4 && !found) {
      if (stream.atoms[index].type === 'mopen') {
        depth += 1;
      } else if (stream.atoms[index].type === 'mclose') {
        depth -= 1;
      }

      if (depth === -1) {
        found = true;
        closeIndex = index;
      }

      index += 1;
    }

    if (found) {
      // TODO: could add attribute indicating it's a fence (fence=true)
      mathML = '<mrow>';
      mathML += toMo(stream.atoms[openIndex], options);
      mathML += toMathML(stream.atoms, openIndex + 1, closeIndex, options).mathML; // TODO: could add attribute indicating it's a fence (fence=true)

      mathML += toMo(stream.atoms[closeIndex], options);
      mathML += '</mrow>';

      if (stream.lastType === 'mi' || stream.lastType === 'mn' || stream.lastType === 'mfrac' || stream.lastType === 'fence') {
        mathML = '<mo>&InvisibleTimes;</mo>' + mathML;
      }

      stream.index = closeIndex + 1;

      if (parseSubsup(mathML, stream, options)) {
        result = true;
        stream.lastType = '';
        mathML = '';
      }

      lastType = 'fence';
    }
  }

  if (mathML.length > 0) {
    result = true;
    stream.mathML += mathML;
    stream.lastType = lastType;
  }

  return result;
}

function scanOperator(stream, _final5, options) {
  var result = false;
  _final5 = _final5 || stream.atoms.length;
  var mathML = '';
  var lastType = '';
  var atom = stream.atoms[stream.index];

  if (stream.index < _final5 && (atom.type === 'mbin' || atom.type === 'mrel')) {
    mathML += stream.atoms[stream.index].toMathML(options);
    stream.index += 1;
    lastType = 'mo';
  } else if (stream.index < _final5 && atom.type === 'mop') {
    // mathML += '<mrow>';
    if (atom.limits === 'limits' && (atom.superscript || atom.subscript)) {
      // Operator with limits, e.g. \sum
      var op = toMo(atom, options);

      if (atom.superscript && atom.subscript) {
        // Both superscript and subscript
        mathML += (atom.limits !== 'nolimits' ? '<munderover>' : '<msubsup>') + op;
        mathML += toMathML(atom.subscript, 0, 0, options).mathML;
        mathML += toMathML(atom.superscript, 0, 0, options).mathML;
        mathML += atom.limits !== 'nolimits' ? '</munderover>' : '</msubsup>';
      } else if (atom.superscript) {
        // Superscript only
        mathML += (atom.limits !== 'nolimits' ? '<mover>' : '<msup>') + op;
        mathML += toMathML(atom.superscript, 0, 0, options).mathML;
        mathML += atom.limits !== 'nolimits' ? '</mover>' : '</msup>';
      } else {
        // Subscript only
        mathML += (atom.limits !== 'nolimits' ? '<munder>' : '<msub>') + op;
        mathML += toMathML(atom.subscript, 0, 0, options).mathML;
        mathML += atom.limits !== 'nolimits' ? '</munder>' : '</msub>';
      }

      lastType = 'mo';
    } else {
      var _atom = stream.atoms[stream.index];
      var isUnit = _atom.latex.indexOf('\\operatorname') === 0;

      var _op = isUnit ? '<mi class="MathML-Unit"' + outputMathML_makeID(_atom.id, options) + '>' + outputMathML_toString(_atom.body) + '</mi>' : toMo(_atom, options);

      mathML += _op;
      stream.index += 1;

      if (parseSubsup(mathML, stream, options)) {
        result = true;
        stream.lastType = '';
        mathML = '';
      }

      stream.index -= 1;

      if (!isUnit && !/^<mo>(.*)<\/mo>$/.test(_op)) {
        mathML += '<mo>&#x2061;</mo>'; // APPLY FUNCTION
        // mathML += scanArgument(stream);

        lastType = 'applyfunction';
      } else {
        lastType = isUnit ? 'mi' : 'mo';
      }
    } // mathML += '</mrow>';


    if ((stream.lastType === 'mi' || stream.lastType === 'mn') && !/^<mo>(.*)<\/mo>$/.test(mathML)) {
      mathML = '<mo>&InvisibleTimes;</mo>' + mathML;
    }

    stream.index += 1;
  }

  if (mathML.length > 0) {
    result = true;
    stream.mathML += mathML;
    stream.lastType = lastType;
  }

  return result;
}
/**
 * Given an atom or an array of atoms, return their MathML representation as
 * a string.
 * @return {string}
 * @param {string|MathAtom|MathAtom[]} input
 * @param {number} initial index of the input to start conversion from
 * @param {number} final last index of the input to stop conversion to
 * @private
 */


function toMathML(input, initial, _final6, options) {
  var result = {
    atoms: input,
    index: initial || 0,
    mathML: '',
    lastType: ''
  };
  _final6 = _final6 || (input ? input.length : 0);

  if (typeof input === 'number' || typeof input === 'boolean') {
    result.mathML = input.toString();
  } else if (typeof input === 'string') {
    result.mathML = input;
  } else if (input && typeof input.toMathML === 'function') {
    result.mathML = input.toMathML(options);
  } else if (Array.isArray(input)) {
    var count = 0;

    while (result.index < _final6) {
      if (scanText(result, _final6, options) || scanNumber(result, _final6, options) || scanIdentifier(result, _final6, options) || scanOperator(result, _final6, options) || scanFence(result, _final6, options)) {
        count += 1;
      } else if (result.index < _final6) {
        var mathML = result.atoms[result.index].toMathML(options);

        if (result.lastType === 'mn' && mathML.length > 0 && result.atoms[result.index].type === 'genfrac') {
          // If this is a fraction preceded by a number (e.g. 2 1/2),
          // add an "invisible plus" (U+0264) character in front of it
          mathML = '<mo>&#x2064;</mo>' + mathML;
        }

        if (result.atoms[result.index].type === 'genfrac') {
          result.lastType = 'mfrac';
        } else {
          result.lastType = '';
        }

        if (mathML.length > 0) {
          result.mathML += mathML;
          count += 1;
        }

        result.index += 1;
      }
    } // If there are more than a single element, wrap them in a mrow tag.


    if (count > 1) {
      result.mathML = '<mrow>' + result.mathML + '</mrow>';
    }
  }

  return result;
}

function toMo(atom, options) {
  var result = '';
  var body = outputMathML_toString(atom.body);

  if (body) {
    result = '<mo' + outputMathML_makeID(atom.id, options) + '>' + body + '</mo>';
  }

  return result;
}

function outputMathML_toString(atoms) {
  if (!atoms) return '';
  if (typeof atoms === 'string') return xmlEscape(atoms);

  if (!Array.isArray(atoms) && typeof atoms.body === 'string') {
    return xmlEscape(atoms.body);
  }

  var result = '';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = atoms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var atom = _step.value;

      if (typeof atom.body === 'string') {
        result += atom.body;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return xmlEscape(result);
}
/**
 * Return a MathML fragment representation of a single atom
 *
 * @return {string}
 * @private
 */


mathAtom.MathAtom.prototype.toMathML = function (options) {
  var SPECIAL_IDENTIFIERS = {
    '\\exponentialE': '&#x02147;',
    '\\imaginaryI': '&#x2148;',
    '\\differentialD': '&#x2146;',
    '\\capitalDifferentialD': '&#x2145;',
    '\\alpha': '&#x03b1;',
    '\\pi': '&#x03c0;',
    '\\infty': '&#x221e;',
    '\\forall': '&#x2200;',
    '\\nexists': '&#x2204;',
    '\\exists': '&#x2203;',
    '\\hbar': "\u210F",
    '\\cdotp': "\u22C5",
    '\\ldots': "\u2026",
    '\\cdots': "\u22EF",
    '\\ddots': "\u22F1",
    '\\vdots': "\u22EE",
    '\\ldotp': "." // TODO: include all the 'textord' that are identifiers, not operators.

  };
  var MATH_VARIANTS = {
    'cal': 'script',
    'frak': 'fraktur',
    'bb': 'double-struck',
    'scr': 'script',
    'cmtt': 'monospace',
    'cmss': 'sans-serif'
  };
  var SPACING = {
    '\\!': -3 / 18,
    '\\ ': 6 / 18,
    '\\,': 3 / 18,
    '\\:': 4 / 18,
    '\\;': 5 / 18,
    '\\enspace': .5,
    '\\quad': 1,
    '\\qquad': 2,
    '\\enskip': .5
  };
  var result = '';
  var sep = '';
  var col, row, i;
  var underscript, overscript, body;
  var variant = MATH_VARIANTS[this.fontFamily || this.font] || '';

  if (variant) {
    variant = ' mathvariant="' + variant + '"';
  }

  var command = this.latex ? this.latex.trim() : null;

  if (this.mode === 'text') {
    result = '<mi' + outputMathML_makeID(this.id, options) + '>' + this.body + '</mi>';
  } else {
    switch (this.type) {
      case 'first':
        break;
      // nothing to do

      case 'group':
      case 'root':
        result = toMathML(this.body, 0, 0, options).mathML;
        break;

      case 'array':
        if (this.lFence && this.lFence !== '.' || this.rFence && this.rFence !== '.') {
          result += '<mrow>';

          if (this.lFence && this.lFence !== '.') {
            result += '<mo>' + (outputMathML_SPECIAL_OPERATORS[this.lFence] || this.lFence) + '</mo>';
          }
        }

        result += '<mtable';

        if (this.colFormat) {
          result += ' columnalign="';

          for (i = 0; i < this.colFormat.length; i++) {
            if (this.colFormat[i].align) {
              result += {
                l: 'left',
                c: 'center',
                r: 'right'
              }[this.colFormat[i].align] + ' ';
            }
          }

          result += '"';
        }

        result += '>';

        for (row = 0; row < this.array.length; row++) {
          result += '<mtr>';

          for (col = 0; col < this.array[row].length; col++) {
            result += '<mtd>' + toMathML(this.array[row][col], 0, 0, options).mathML + '</mtd>';
          }

          result += '</mtr>';
        }

        result += '</mtable>';

        if (this.lFence && this.lFence !== '.' || this.rFence && this.rFence !== '.') {
          if (this.rFence && this.rFence !== '.') {
            result += '<mo>' + (outputMathML_SPECIAL_OPERATORS[this.lFence] || this.rFence) + '</mo>';
          }

          result += '</mrow>';
        }

        break;

      case 'genfrac':
        if (this.leftDelim || this.rightDelim) {
          result += '<mrow>';
        }

        if (this.leftDelim && this.leftDelim !== '.') {
          result += '<mo' + outputMathML_makeID(this.id, options) + '>' + (outputMathML_SPECIAL_OPERATORS[this.leftDelim] || this.leftDelim) + '</mo>';
        }

        if (this.hasBarLine) {
          result += '<mfrac>';
          result += toMathML(this.numer, 0, 0, options).mathML || '<mi>&nbsp;</mi>';
          result += toMathML(this.denom, 0, 0, options).mathML || '<mi>&nbsp;</mi>';
          result += '</mfrac>';
        } else {
          // No bar line, i.e. \choose, etc...
          result += '<mtable' + outputMathML_makeID(this.id, options) + '>';
          result += '<mtr>' + toMathML(this.numer, 0, 0, options).mathML + '</mtr>';
          result += '<mtr>' + toMathML(this.denom, 0, 0, options).mathML + '</mtr>';
          result += '</mtable>';
        }

        if (this.rightDelim && this.rightDelim !== '.') {
          result += '<mo' + outputMathML_makeID(this.id, options) + '>' + (outputMathML_SPECIAL_OPERATORS[this.rightDelim] || this.rightDelim) + '</mo>';
        }

        if (this.leftDelim || this.rightDelim) {
          result += '</mrow>';
        }

        break;

      case 'surd':
        if (this.index) {
          result += '<mroot' + outputMathML_makeID(this.id, options) + '>';
          result += toMathML(this.body, 0, 0, options).mathML;
          result += toMathML(this.index, 0, 0, options).mathML;
          result += '</mroot>';
        } else {
          result += '<msqrt' + outputMathML_makeID(this.id, options) + '>';
          result += toMathML(this.body, 0, 0, options).mathML;
          result += '</msqrt>';
        }

        break;

      case 'leftright':
        // TODO: could add fence=true attribute
        result = '<mrow>';

        if (this.leftDelim && this.leftDelim !== '.') {
          result += '<mo' + outputMathML_makeID(this.id, options) + '>' + (outputMathML_SPECIAL_OPERATORS[this.leftDelim] || this.leftDelim) + '</mo>';
        }

        if (this.body) result += toMathML(this.body, 0, 0, options).mathML;

        if (this.rightDelim && this.rightDelim !== '.') {
          result += '<mo' + outputMathML_makeID(this.id, options) + '>' + (outputMathML_SPECIAL_OPERATORS[this.rightDelim] || this.rightDelim) + '</mo>';
        }

        result += '</mrow>';
        break;

      case 'sizeddelim':
      case 'delim':
        result += '<mo separator="true"' + outputMathML_makeID(this.id, options) + '>' + (outputMathML_SPECIAL_OPERATORS[this.delim] || this.delim) + '</mo>';
        break;

      case 'accent':
        result += '<mover accent="true"' + outputMathML_makeID(this.id, options) + '>';
        result += toMathML(this.body, 0, 0, options).mathML;
        result += '<mo>' + (outputMathML_SPECIAL_OPERATORS[command] || this.accent) + '</mo>';
        result += '</mover>';
        break;

      case 'line':
      case 'overlap':
        break;

      case 'overunder':
        overscript = this.overscript;
        underscript = this.underscript;

        if (overscript && underscript) {
          body = this.body;
        } else if (overscript) {
          body = this.body;

          if (this.body[0] && this.body[0].underscript) {
            underscript = this.body[0].underscript;
            body = this.body[0].body;
          } else if (this.body[0] && this.body[0].type === 'first' && this.body[1] && this.body[1].underscript) {
            underscript = this.body[1].underscript;
            body = this.body[1].body;
          }
        } else if (underscript) {
          body = this.body;

          if (this.body[0] && this.body[0].overscript) {
            overscript = this.body[0].overscript;
            body = this.body[0].body;
          } else if (this.body[0] && this.body[0].type === 'first' && this.body[1] && this.body[1].overscript) {
            overscript = this.body[1].overscript;
            body = this.body[1].body;
          }
        }

        if (overscript && underscript) {
          result += '<munderover' + variant + outputMathML_makeID(this.id, options) + '>' + toMathML(body, 0, 0, options).mathML;
          result += toMathML(underscript, 0, 0, options).mathML;
          result += toMathML(overscript, 0, 0, options).mathML;
          result += '</munderover>';
        } else if (overscript) {
          result += '<mover' + variant + outputMathML_makeID(this.id, options) + '>' + toMathML(body, 0, 0, options).mathML;
          result += toMathML(overscript, 0, 0, options).mathML;
          result += '</mover>';
        } else if (underscript) {
          result += '<munder' + variant + outputMathML_makeID(this.id, options) + '>' + toMathML(body, 0, 0, options).mathML;
          result += toMathML(underscript, 0, 0, options).mathML;
          result += '</munder>';
        }

        break;

      case 'placeholder': // no real equivalent in MathML -- will generate a '?'qq

      case 'mord':
        {
          result = SPECIAL_IDENTIFIERS[command] || command || (typeof this.body === 'string' ? this.body : '');
          var m = command ? command.match(/[{]?\\char"([0-9abcdefABCDEF]*)[}]?/) : null;

          if (m) {
            // It's a \char command
            result = '&#x' + m[1] + ';';
          } else if (result.length > 0 && result.charAt(0) === '\\') {
            // This is an identifier with no special handling. Use the
            // Unicode value
            if (typeof this.body === 'string' && this.body.charCodeAt(0) > 255) {
              result = '&#x' + ('000000' + this.body.charCodeAt(0).toString(16)).substr(-4) + ';';
            } else if (typeof this.body === 'string') {
              result = this.body.charAt(0);
            } else {
              result = this.body;
            }
          }

          var tag = /\d/.test(result) ? 'mn' : 'mi';
          result = '<' + tag + variant + outputMathML_makeID(this.id, options) + '>' + xmlEscape(result) + '</' + tag + '>';
          break;
        }

      case 'mbin':
      case 'mrel':
      case 'textord':
      case 'minner':
        if (command && SPECIAL_IDENTIFIERS[command]) {
          // Some 'textord' are actually identifiers. Check them here.
          result = '<mi' + outputMathML_makeID(this.id, options) + '>' + SPECIAL_IDENTIFIERS[command] + '</mi>';
        } else if (command && outputMathML_SPECIAL_OPERATORS[command]) {
          result = '<mo' + outputMathML_makeID(this.id, options) + '>' + outputMathML_SPECIAL_OPERATORS[command] + '</mo>';
        } else {
          result = toMo(this, options);
        }

        break;

      case 'mpunct':
        result = '<mo separator="true"' + outputMathML_makeID(this.id, options) + '>' + (outputMathML_SPECIAL_OPERATORS[command] || command) + '</mo>';
        break;

      case 'mop':
        if (this.body !== "\u200B") {
          // Not ZERO-WIDTH
          result = '<mo' + outputMathML_makeID(this.id, options) + '>';

          if (command === '\\operatorname') {
            result += this.body;
          } else {
            result += command || this.body;
          }

          result += '</mo>';
        }

        break;

      case 'mathstyle':
        // TODO: mathstyle is a switch. Need to figure out its scope to properly wrap it around a <mstyle> tag
        // if (this.mathstyle === 'displaystyle') {
        //     result += '<mstyle displaystyle="true">';
        //     result += '</mstyle>';
        // } else {
        //     result += '<mstyle displaystyle="false">';
        //     result += '</mstyle>';
        // };
        break;

      case 'box':
        result = '<menclose notation="box"';

        if (this.backgroundcolor) {
          result += ' mathbackground="' + core_color.stringToColor(this.backgroundcolor) + '"';
        }

        result += outputMathML_makeID(this.id, options) + '>' + toMathML(this.body, 0, 0, options).mathML + '</menclose>';
        break;

      case 'spacing':
        result += '<mspace width="' + (SPACING[command] || 0) + 'em"/>';
        break;

      case 'enclose':
        result = '<menclose notation="';

        for (var notation in this.notation) {
          if (Object.prototype.hasOwnProperty.call(this.notation, notation) && this.notation[notation]) {
            result += sep + notation;
            sep = ' ';
          }
        }

        result += outputMathML_makeID(this.id, options) + '">' + toMathML(this.body, 0, 0, options).mathML + '</menclose>';
        break;

      case 'space':
        result += '&nbsp;';
        break;

      default:
        console.log("In conversion to MathML, unknown type : " + this.type);
    }
  }

  return result;
};

mathAtom.toMathML = function (atoms, options) {
  return toMathML(atoms, 0, 0, options).mathML;
}; // Export the public interface for this module


/* harmony default export */ var outputMathML = ({});
// CONCATENATED MODULE: ./packages/addons/mathJson.js
function mathJson_toConsumableArray(arr) { return mathJson_arrayWithoutHoles(arr) || mathJson_iterableToArray(arr) || mathJson_nonIterableSpread(); }

function mathJson_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function mathJson_iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function mathJson_arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function mathJson_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { mathJson_typeof = function _typeof(obj) { return typeof obj; }; } else { mathJson_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return mathJson_typeof(obj); }

/**
 * This module parses and outputs an Abstract Syntax Tree representing the
 * formula using the {@tutorial MATHJSON} format.
 *
 * To use it, use the {@linkcode MathAtom#toAST MathAtom.toAST()}  method.
 * @module addons/mathJson
 * @private
 */




var CANONICAL_NAMES = {
  // CONSTANTS
  '\\imaginaryI': "\u2148",
  '\\imaginaryJ': "\u2149",
  '\\pi': 'π',
  '\\exponentialE': "\u212F",
  // ARITHMETIC
  '﹢': '+',
  // SMALL PLUS SIGN
  '＋': '+',
  // FULL WIDTH PLUS SIGN
  '−': '-',
  // MINUS SIGN
  '-': '-',
  // HYPHEN-MINUS
  '﹣': '-',
  // SMALL HYPHEN-MINUS
  '－': '-',
  // FULLWIDTH HYPHEN-MINUS
  '\\times': '*',
  '\\cdot': '*',
  '⨉': '*',
  // N-ARY TIMES OPERATOR U+
  '️✖': '*',
  // MULTIPLICATION SYMBOL
  '️×': '*',
  // MULTIPLICATION SIGN
  '.': '*',
  '÷': '/',
  // DIVISION SIGN
  // '/':             '/',        // SOLIDUS
  '⁄': '/',
  // FRACTION SLASH
  '／': '/',
  // FULLWIDTH SOLIDUS
  '!': 'factorial',
  '\\mp': 'minusplus',
  // MINUS-PLUS SIGN
  '\\ne': '!=',
  '\\coloneq': ':=',
  '\\questeq': '?=',
  '\\approx': 'approx',
  '\\cong': 'congruent',
  '\\sim': 'similar',
  '\\equiv': 'equiv',
  '\\pm': 'plusminus',
  // PLUS-MINUS SIGN
  '\\land': 'and',
  '\\wedge': 'and',
  '\\lor': 'or',
  '\\vee': 'or',
  '\\oplus': 'xor',
  '\\veebar': 'xor',
  '\\lnot': 'not',
  '\\neg': 'not',
  '\\exists': 'exists',
  '\\nexists': '!exists',
  '\\forall': 'forAll',
  '\\backepsilon': 'suchThat',
  '\\therefore': 'therefore',
  '\\because': 'because',
  '\\nabla': 'nabla',
  '\\circ': 'circle',
  // '\\oplus':       'oplus',
  '\\ominus': 'ominus',
  '\\odot': 'odot',
  '\\otimes': 'otimes',
  '\\zeta': 'Zeta',
  '\\Gamma': 'Gamma',
  '\\min': 'min',
  '\\max': 'max',
  '\\mod': 'mod',
  '\\lim': 'lim',
  // BIG OP
  '\\sum': 'sum',
  '\\prod': 'prod',
  '\\int': 'integral',
  '\\iint': 'integral2',
  '\\iiint': 'integral3',
  '\\Re': 'Re',
  '\\gothicCapitalR': 'Re',
  '\\Im': 'Im',
  '\\gothicCapitalI': 'Im',
  '\\binom': 'nCr',
  '\\partial': 'partial',
  '\\differentialD': 'differentialD',
  '\\capitalDifferentialD': 'capitalDifferentialD',
  '\\Finv': 'Finv',
  '\\Game': 'Game',
  '\\wp': 'wp',
  '\\ast': 'ast',
  '\\star': 'star',
  '\\asymp': 'asymp',
  // Function domain, limits
  '\\to': 'to',
  // Looks like \rightarrow
  '\\gets': 'gets',
  // Looks like \leftarrow
  // Sets
  '\\in': 'elementof',
  '\\notin': '!elementof',
  '\\ni': 'ownedby',
  '\\owns': 'ownedby',
  '\\subset': 'subset',
  '\\supset': 'superset',
  '\\complement': 'complement',
  // Logic
  '\\rightarrow': 'shortLogicalImplies',
  '\\leftarrow': 'shortLogicalImpliedBy',
  '\\leftrightarrow': 'shortLogicalEquivalent',
  '\\longrightarrow': 'logicalImplies',
  '\\longleftarrow': 'logicalImpliedBy',
  '\\longleftrightarrow': 'logicalEquivalent',
  // Metalogic
  '\\Rightarrow': 'shortImplies',
  '\\Leftarrow': 'shortImpliedBy',
  '\\Leftrightarrow': 'shortEquivalent',
  '\\implies': 'implies',
  '\\Longrightarrow': 'implies',
  '\\impliedby': 'impliedBy',
  '\\Longleftarrow': 'impliedBy',
  '\\iff': 'equivalent',
  '\\Longleftrightarrow': 'equivalent'
}; // The OP_NAME table maps a canonical name to a function name

var OP_NAME = {
  '+': 'add',
  '*': 'multiply',
  '-': 'subtract',
  '/': 'divide',
  '=': 'equal',
  ':=': 'assign',
  '!=': 'ne',
  '?=': 'questeq',
  'approx': 'approx',
  'congruent': 'congruent',
  'similar': 'similar',
  'equiv': 'equiv',
  '<': 'lt',
  '>': 'gt',
  '<=': 'le',
  '>=': 'ge',
  '≤': 'le',
  '≥': 'ge',
  '>>': 'gg',
  '<<': 'll',
  '**': 'pow',
  '++': 'increment',
  '--': 'decrement'
}; // The FUNCTION_TEMPLATE table maps a canonical name to a LaTeX template

var FUNCTION_TEMPLATE = {
  'equal': '%0 = %1',
  'ne': '%0 \\ne %1',
  'questeq': '%0 \\questeq %1',
  'approx': '%0 \\approx %1',
  'congruent': '%0 \\cong %1',
  'similar': '%0 \\sim %1',
  'equiv': '%0 \\equiv %1',
  'assign': '%0 := %1',
  'lt': '%0 < %1',
  'gt': '%0 > %1',
  'le': '%0 \\le %1',
  'ge': '%0 \\ge %1',
  // TRIGONOMETRY
  'sin': '\\sin%_%^ %0',
  'cos': '\\cos%_%^ %0',
  'tan': '\\tan%_%^ %0',
  'cot': '\\cot%_%^ %0',
  'sec': '\\sec%_%^ %0',
  'csc': '\\csc%_%^ %0',
  'sinh': '\\sinh %0',
  'cosh': '\\cosh %0',
  'tanh': '\\tanh %0',
  'csch': '\\csch %0',
  'sech': '\\sech %0',
  'coth': '\\coth %0',
  'arcsin': '\\arcsin %0',
  'arccos': '\\arccos %0',
  'arctan': '\\arctan %0',
  'arccot': '\\arcctg %0',
  // Check
  'arcsec': '\\arcsec %0',
  'arccsc': '\\arccsc %0',
  'arsinh': '\\arsinh %0',
  'arcosh': '\\arcosh %0',
  'artanh': '\\artanh %0',
  'arcsch': '\\arcsch %0',
  'arsech': '\\arsech %0',
  'arcoth': '\\arcoth %0',
  // LOGARITHMS
  'ln': '\\ln%_%^ %',
  // Natural logarithm
  'log': '\\log%_%^ %',
  // General logarithm, e.g. log_10
  'lg': '\\lg %',
  // Common, base-10, logarithm
  'lb': '\\lb %',
  // Binary, base-2, logarithm
  // Big operator
  'sum': '\\sum%_%^ %0',
  'prod': '\\prod%_%^ %0',
  // OTHER
  'Zeta': '\\zeta%_%^ %',
  // Riemann Zeta function
  'Gamma': '\\Gamma %',
  // Gamma function, such that Gamma(n) = (n - 1)!
  'min': '\\min%_%^ %',
  'max': '\\max%_%^ %',
  'mod': '\\mod%_%^ %',
  'lim': '\\lim%_%^ %',
  // BIG OP
  'binom': '\\binom %',
  'nabla': '\\nabla %',
  'curl': '\\nabla\\times %0',
  'div': '\\nabla\\cdot %0',
  'floor': '\\lfloor %0 \\rfloor%_%^',
  'ceil': '\\lceil %0 \\rceil%_%^',
  'abs': '\\left| %0 \\right|%_%^',
  'norm': '\\lVert %0 \\rVert%_%^',
  'ucorner': "\\ulcorner %0 \\urcorner%_%^",
  'lcorner': '\\llcorner %0 \\lrcorner%_%^',
  'angle': '\\langle %0 \\rangle%_%^',
  'group': '\\lgroup %0 \\rgroup%_%^',
  'moustache': '\\lmoustache %0 \\rmoustache%_%^',
  'brace': '\\lbrace %0 \\rbrace%_%^',
  'sqrt[]': '\\sqrt[%^]{%0}',
  // Template used when there's an index
  'sqrt': '\\sqrt{%0}',
  'lcm': '\\operatorname{lcm}%',
  'gcd': '\\operatorname{gcd}%',
  'erf': '\\operatorname{erf}%',
  'erfc': '\\operatorname{erfc}%',
  'randomReal': '\\operatorname{randomReal}%',
  'randomInteger': '\\operatorname{randomInteger}%',
  // Logic operators
  'and': '%0 \\land %1',
  'or': '%0 \\lor %1',
  'xor': '%0 \\oplus %1',
  'not': '%0 \\lnot %1',
  // Other operators
  'circle': '%0 \\circ %1',
  'ast': '%0 \\ast %1',
  'star': '%0 \\star %1',
  'asymp': '%0 \\asymp %1',
  '/': '\\frac{%0}{%1}',
  'Re': '\\Re{%0}',
  'Im': '\\Im{%0}',
  'factorial': '%0!',
  'factorial2': '%0!!'
}; // From www.w3.org/TR/MathML3/appendixc.html
// The keys of OP_PRECEDENCE are "canonical names"
// (the values of the CANONICAL_NAMES table above, e.g. "?=")
// Those are different from the latex names (e.g. \\questeq)
// and from the function names (e.g. "questeq")

var OP_PRECEDENCE = {
  'degree': 880,
  'nabla': 740,
  'curl': 740,
  // not in MathML
  'partial': 740,
  'differentialD': 740,
  // not in MathML
  'capitalDifferentialD': 740,
  // not in MathML
  '**': 720,
  // not in MathML
  'odot': 710,
  // Logical not
  'not': 680,
  // Division
  'div': 660,
  // division sign
  'solidus': 660,
  '/': 660,
  'setminus': 650,
  // \setminus, \smallsetminus
  '%': 640,
  'otimes': 410,
  // Set operators
  'union': 350,
  // \cup
  'intersection': 350,
  // \cap
  // Multiplication, division and modulo
  '*': 390,
  'ast': 390,
  '.': 390,
  'oplus': 300,
  // also logical XOR... @todo
  'ominus': 300,
  // Addition
  '+': 275,
  '-': 275,
  '+-': 275,
  // \pm
  '-+': 275,
  // \mp
  // Most circled-ops are 265
  'circle': 265,
  'circledast': 265,
  'circledcirc': 265,
  'star': 265,
  // Different from ast
  // Range
  '..': 263,
  // Not in MathML
  // Unit conversion
  'to': 262,
  // Not in MathLM
  'in': 262,
  // Not in MathML
  '|': 261,
  // Not in MathML    (bind is the |_ operator)
  // Relational
  'congruent': 265,
  'equiv': 260,
  // MathML: "identical to"
  '=': 260,
  '!=': 255,
  '?=': 255,
  'similar': 250,
  // tilde operator in MathML
  'approx': 247,
  '<': 245,
  '>': 243,
  '>=': 242,
  '≥': 242,
  '<=': 241,
  // Set operator
  'complement': 240,
  'subset': 240,
  // \subset
  'superset': 240,
  // \supset
  // @todo and equality and neg operators
  'elementof': 240,
  // \in
  '!elementof': 240,
  // \notin
  //
  'exists': 230,
  '!exists': 230,
  'forall': 230,
  // Logical operators
  'and': 200,
  'xor': 195,
  // MathML had 190
  'or': 190,
  // Note: 'not' is 680
  // center, low, diag, vert ellipsis         150
  // Composition/sequence
  'suchThat': 110,
  // \backepsilon
  ':': 100,
  // '..':               100,
  // '...':               100,
  // Conditional (?:)
  // Assignment
  'assign': 80,
  ':=': 80,
  // MathML had 260 (same with U+2254 COLON EQUALS)
  'therefore': 70,
  'because': 70,
  // Arrows
  // Note: MathML had 270 for the arrows, but this
  // would not work for (a = b => b = a)
  // See also https://en.wikipedia.org/wiki/Logical_connective#Order_of_precedence
  // for a suggested precedence (note that in this page lower precedence
  // has the opposite meaning as what we use)
  'shortLogicalImplies': 52,
  // ->
  'shortImplies': 51,
  // =>
  'logicalImplies': 50,
  // -->
  'implies': 49,
  // ==>
  'shortLogicalImpliedBy': 48,
  // <-
  'shortImpliedBy': 47,
  // <=
  'logicalImpliedBy': 46,
  // <--
  'impliedBy': 45,
  // <==
  'shortLogicalEquivalent': 44,
  // <->
  'shortEquivalent': 43,
  // <=>
  'logicalEquivalent': 42,
  // <-->
  'equivalent': 41,
  // <==>
  ',': 40,
  ';': 30
};

function getArg(ast, index) {
  return Array.isArray(ast.arg) ? ast.arg[index] : undefined;
}
/**
 * Given a canonical name, return its precedence
 * @param {string} canonicalName, for example "and"
 * @return {number}
 * @private
 */


function getPrecedence(canonicalName) {
  return canonicalName ? OP_PRECEDENCE[canonicalName] || -1 : -1;
}

function getAssociativity(canonicalName) {
  if (/=|=>/.test(canonicalName)) {
    return 'right';
  }

  return 'left';
}
/**
 *
 * @param {string} name function canonical name
 * @return {string}
 * @private
 */


function getLatexTemplateForFunction(name) {
  var result = FUNCTION_TEMPLATE[name];

  if (!result) {
    result = name.length > 1 ? '\\operatorname{' + name + '}%^%_ %' : name + '%^%_ %';
  }

  return result;
}
/**
 *
 * @param {string} name symbol name, e.g. "alpha"
 * @return {string}
 * @private
 */


function getLatexForSymbol(name) {
  var result = FUNCTION_TEMPLATE[name];

  if (result) {
    return result.replace('%1', '').replace('%0', '').replace('%', '');
  }

  if (name.length > 1) {
    var info = definitions.getInfo('\\' + name, 'math');

    if (info && (!info.fontFamily || info.fontFamily === 'cmr' || info.fontFamily === 'ams')) {
      result = '\\' + name;
    }
  }

  if (!result) {
    result = definitions.unicodeStringToLatex('math', name);
  }

  return result;
}

function mathJson_isFunction(canonicalName) {
  if (canonicalName === 'f' || canonicalName === 'g') return true;
  var t = FUNCTION_TEMPLATE[canonicalName];
  if (!t) return false; // A plain "%" is a placeholder for an argument list, indicating a function

  if (/%[^01_^]?/.test(t)) return true;
  return false;
}
/**
 *
 * @param {string} latex, for example '\\times'
 * @return {string} the canonical name for the input, for example '*'
 * @private
 */


function getCanonicalName(latex) {
  latex = (latex || '').trim();
  var result = CANONICAL_NAMES[latex];

  if (!result) {
    if (/^\\[^{}]+$/.test(latex)) {
      var info = definitions.getInfo(latex, 'math', {});

      if (info) {
        result = info.value || latex.slice(1);
      } else {
        result = latex.slice(1);
      }
    } else {
      result = latex;
    }
  }

  return result;
}
/**
 * Return the operator precedence of the atom
 * or -1 if not an operator
 * @param {object} atom
 * @return {number}
 * @private
 */


function opPrec(atom) {
  if (!atom) return null;
  var name = getCanonicalName(getString(atom));
  var result = [getPrecedence(name), getAssociativity(name)];
  if (result[0] <= 0) return null;
  return result;
}

function isOperator(atom) {
  return opPrec(atom) !== null;
}

var DELIM_FUNCTION = {
  '\\lfloor\\rfloor': 'floor',
  '\\lceil\\rceil': 'ceil',
  '\\vert\\vert': 'abs',
  '\\lvert\\rvert': 'abs',
  '||': 'abs',
  '\\Vert\\Vert': 'norm',
  '\\lVert\\rVert': 'norm',
  "\\ulcorner\\urcorner": 'ucorner',
  '\\llcorner\\lrcorner': 'lcorner',
  '\\langle\\rangle': 'angle',
  '\\lgroup\\rgroup': 'group',
  '\\lmoustache\\rmoustache': 'moustache',
  '\\lbrace\\rbrace': 'brace'
};
var POSTFIX_FUNCTION = {
  '!': 'factorial',
  '\\dag': 'dagger',
  '\\dagger': 'dagger',
  '\\ddagger': 'dagger2',
  '\\maltese': 'maltese',
  '\\backprime': 'backprime',
  '\\backdoubleprime': 'backprime2',
  '\\prime': 'prime',
  '\\doubleprime': 'prime2',
  '\\$': '$',
  '\\%': '%',
  '\\_': '_',
  '\\degree': 'degree'
};
var ASSOCIATIVE_FUNCTION = {
  '+': 'add',
  '-': 'add',
  // Subtraction is add(), but it's
  // handled specifically so that the
  // argument is negated
  '*': 'multiply',
  '=': 'equal',
  ',': 'list',
  ';': 'list2',
  'and': 'and',
  'or': 'or',
  'xor': 'xor',
  'union': 'union',
  // shortLogicalEquivalent and logicalEquivalent map to the same function
  // they mean the same thing, but have a difference precedence.
  'shortLogicalEquivalent': 'logicalEquivalent',
  // logical equivalent, iff, biconditional logical connective
  'logicalEquivalent': 'logicalEquivalent',
  // same
  // shortEquivalent and equivalent map to the same function
  // they mean the same thing, but have a difference precedence.
  'shortEquivalent': 'equivalent',
  // metalogic equivalent
  'equivalent': 'equivalent' // same

};
var SUPER_ASSOCIATIVE_FUNCTION = {
  ',': 'list',
  ';': 'list2'
};

function getString(atom) {
  if (Array.isArray(atom)) {
    var result = '';
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = atom[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var subAtom = _step.value;
        result += getString(subAtom);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  }

  if (atom.latex && !/^\\math(op|bin|rel|open|punct|ord|inner)/.test(atom.latex)) {
    return atom.latex.trim();
  }

  if (atom.type === 'leftright') {
    return '';
  }

  if (typeof atom.body === 'string') {
    return atom.body;
  }

  if (Array.isArray(atom.body)) {
    var _result = '';
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = atom.body[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _subAtom = _step2.value;
        _result += getString(_subAtom);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return _result;
  }

  return '';
}
/**
 *
 * @param {object} expr - Abstract Syntax Tree object
 * @return {string} A string, the symbol, or undefined
 * @private
 */


function asSymbol(node) {
  return typeof node.sym === 'string' ? getLatexForSymbol(node.sym) || node.sym : '';
}
/**
 *
 * @param {object} node - Abstract Syntax Tree node
 * @return {number} A JavaScript number, the value of the AST or NaN
 * @private
 * @private
 */


function asMachineNumber(node) {
  return parseFloat(node.num);
}

function mathJson_isNumber(node) {
  return mathJson_typeof(node) === 'object' && typeof node.num !== 'undefined';
}

function numberRe(node) {
  var result = 0;

  if (mathJson_isNumber(node)) {
    if (mathJson_typeof(node.num) === 'object') {
      result = typeof node.num.re !== 'undefined' ? parseFloatToPrecision(node.num.re) : 0;
    } else {
      result = parseFloat(node.num);
    }
  }

  return result;
}

function numberIm(node) {
  var result = 0;

  if (mathJson_isNumber(node)) {
    if (mathJson_typeof(node.num) === 'object') {
      result = typeof node.num.im !== 'undefined' ? parseFloatToPrecision(node.num.im) : 0;
    }
  }

  return result;
}

function isComplexWithRealAndImaginary(node) {
  return numberRe(node) !== 0 && numberIm(node) !== 0;
}

function hasSup(node) {
  return node && typeof node.sup !== 'undefined';
}

function hasSub(node) {
  return node && typeof node.sub !== 'undefined';
}
/**
 * Return true if the current atom is of the specified type and value.
 * @param {object} expr
 * @param {string} type
 * @param {string} value
 * @private
 */


function isAtom(expr, type, value) {
  var result = false;
  var atom = expr.atoms[expr.index];

  if (atom && atom.type === type) {
    if (value === undefined) {
      result = true;
    } else {
      result = getString(atom) === value;
    }
  }

  return result;
}
/**
 *
 * @param {string} functionName
 * @param {object} params
 * @private
 */


function wrapFn(functionName) {
  var result = {
    fn: functionName
  };

  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }

  if (params) {
    var args = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = params[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var arg = _step3.value;
        if (arg) args.push(arg);
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    if (args.length > 0) result.arg = args;
  }

  return result;
}

function wrapNum(num) {
  if (typeof num === 'number') {
    return {
      num: num.toString()
    };
  } else if (typeof num === 'string') {
    return {
      num: num
    };
  } else if (mathJson_typeof(num) === 'object') {
    // This is a complex number
    console.assert(typeof num.re === 'string' || typeof num.im === 'string');
    return {
      num: num
    };
  }

  return undefined;
}
/**
 * Return the negative of the expression. Usually { fn:'negate', arg }
 * but for numbers, the negated number
 * @param {object} node
 * @private
 */


function negate(node) {
  if (mathJson_isNumber(node)) {
    var re = numberRe(node);
    var im = numberIm(node);

    if (im !== 0) {
      if (re !== 0) {
        node.num.re = (-re).toString();
      }

      node.num.im = (-im).toString();
    } else {
      node.num = (-re).toString();
    }

    return node;
  }

  return wrapFn('negate', node);
}

function nextIsSupsub(expr) {
  var atom = expr.atoms[expr.index + 1];
  return atom && atom.type === 'msubsup';
}
/**
 * Parse for a possible sup/sub attached directly to the current atom
 * or to a following 'msubsup' atom.
 * After the call, the index points to the next atom to process.
 * @param {object} expr
 * @private
 */


function parseSupsub(expr, options) {
  var atom = expr.atoms[expr.index]; // Is there a supsub directly on this atom?

  if (atom && (typeof atom.superscript !== 'undefined' || typeof atom.subscript !== 'undefined')) {
    // Move to the following atom
    expr.index += 1;
  } else {
    atom = null;
  } // If this atom didn't have a sup/sub,
  // is the following atom a subsup atom?


  if (!atom) {
    atom = expr.atoms[expr.index + 1];

    if (!atom || atom.type !== 'msubsup' || !(atom.superscript || atom.subscript)) {
      atom = null;
    } else {
      // Yes. Skip the current atom and the supsub
      expr.index += 2;
    }
  }

  if (atom) {
    if (typeof atom.subscript !== 'undefined') {
      expr.ast.sub = mathJson_parse(atom.subscript, options);
    }

    if (typeof atom.superscript !== 'undefined') {
      if (atom.type === 'msubsup') {
        if (/['\u2032]|\\prime/.test(getString(atom.superscript))) {
          expr.index += 1;
          atom = expr.atoms[expr.index + 1];

          if (atom && atom.type === 'msubsup' && /['\u2032]|\\prime/.test(getString(atom.superscript))) {
            expr.ast.sup = {
              sym: "\u2033"
            }; // DOUBLE-PRIME
          } else {
            expr.ast.sup = {
              sym: "\u2032"
            }; // PRIME

            expr.index -= 1;
          }
        } else if (/['\u2033]|\\doubleprime/.test(getString(atom.superscript))) {
          expr.ast.sup = {
            sym: "\u2033"
          }; // DOUBLE-PRIME
        } else if (expr.ast) {
          expr.ast.sup = mathJson_parse(atom.superscript, options);
        }
      } else {
        expr.ast.sup = mathJson_parse(atom.superscript, options);
      }
    }
  } else {
    // Didn't find a supsup either on this atom and there was no 'msubsup'
    // Time to move on to the next atom.
    expr.index += 1;
  }

  return expr;
}
/**
 * Parse postfix operators, such as "!" (factorial)
 * @private
 */


function parsePostfix(expr, options) {
  var lhs = expr.ast;

  if (nextIsDigraph(expr, '!!')) {
    expr.index += 1;
    expr.ast = wrapFn('factorial2', lhs);
    expr = parseSupsub(expr, options);
    expr = parsePostfix(expr, options);
    return expr;
  }

  if (nextIsDigraph(expr, '++')) {
    expr.index += 1;
    expr.ast = wrapFn('increment', lhs);
    expr = parseSupsub(expr, options);
    expr = parsePostfix(expr, options);
    return expr;
  }

  if (nextIsDigraph(expr, '--')) {
    expr.index += 1;
    expr.ast = wrapFn('decrement', lhs);
    expr = parseSupsub(expr, options);
    expr = parsePostfix(expr, options);
    return expr;
  }

  var atom = expr.atoms[expr.index];

  if (atom && atom.latex && POSTFIX_FUNCTION[atom.latex.trim()]) {
    expr.ast = wrapFn(POSTFIX_FUNCTION[atom.latex.trim()], lhs);
    expr = parseSupsub(expr, options);
    expr = parsePostfix(expr, options);
  }

  return expr;
}
/**
 * Delimiters can be expressed:
 * - as a matching pair of regular characters: '(a)'
 * - a as 'leftright' expression: '\left(a\right)'
 * - as a matching pair of 'sizeddelim': '\Bigl(a\Bigr)
 *
 * Note that the '\delim' command is only used for delimiters in the middle
 * of a \left\right pair and not to represent pair-matched delimiters.
 *
 * This function handles all three cases
 *
 * @private
 */


function parseDelim(expr, ldelim, rdelim, options) {
  expr.index = expr.index || 0;

  if (expr.atoms.length === 0 || expr.index >= expr.atoms.length) {
    expr.ast = undefined;
    return expr;
  }

  var savedPrec = expr.minPrec;
  expr.minPrec = 0;
  var atom = expr.atoms[expr.index];

  if (!ldelim) {
    // If we didn't expect a specific delimiter, parse any delimiter
    // and return it as a function application
    var pairedDelim = true;

    if (atom.type === 'mopen') {
      ldelim = atom.latex.trim();
      rdelim = definitions.RIGHT_DELIM[ldelim];
    } else if (atom.type === 'sizeddelim') {
      ldelim = atom.delim;
      rdelim = definitions.RIGHT_DELIM[ldelim];
    } else if (atom.type === 'leftright') {
      pairedDelim = false;
      ldelim = atom.leftDelim;
      rdelim = atom.rightDelim; // If we have an unclosed smart fence, assume the right delim is
      // matching the left delim

      if (rdelim === '?') rdelim = definitions.RIGHT_DELIM[ldelim];
    } else if (atom.type === 'textord') {
      ldelim = atom.latex.trim();
      rdelim = definitions.RIGHT_DELIM[ldelim];
    }

    if (ldelim && rdelim) {
      if (ldelim === '|' && rdelim === '|') {
        // Check if this could be a ||x|| instead of |x|
        var _atom = expr.atoms[expr.index + 1];

        if (_atom && _atom.type === 'textord' && _atom.latex === '|') {
          // Yes, it's a ||x||
          ldelim = '\\lVert';
          rdelim = '\\rVert';
        }
      }

      expr = parseDelim(expr, ldelim, rdelim);

      if (expr) {
        if (pairedDelim) expr.index += 1;
        expr.ast = {
          fn: DELIM_FUNCTION[ldelim + rdelim] || ldelim + rdelim,
          arg: [expr.ast]
        };
        expr.minPrec = savedPrec;
        return expr;
      }
    }

    return undefined;
  }

  if (atom.type === 'mopen' && getString(atom) === ldelim) {
    expr.index += 1; // Skip the open delim

    expr = parseExpression(expr, options);
    atom = expr.atoms[expr.index];

    if (atom && atom.type === 'mclose' && getString(atom) === rdelim) {
      if (nextIsSupsub(expr)) {
        // Wrap in a group if we have an upcoming superscript or subscript
        expr.ast = {
          group: expr.ast
        };
      }

      expr = parseSupsub(expr, options);
      expr = parsePostfix(expr, options);
    } // TODO: else, syntax error?

  } else if (atom.type === 'textord' && getString(atom) === ldelim) {
    expr.index += 1; // Skip the open delim

    expr = parseExpression(expr, options);
    atom = expr.atoms[expr.index];

    if (atom && atom.type === 'textord' && getString(atom) === rdelim) {
      expr.index += 1;
      expr = parseSupsub(expr, options);
      expr = parsePostfix(expr, options);
    } // TODO: else, syntax error?

  } else if (ldelim === '\\lVert' && atom.type === 'textord' && atom.latex === '|') {
    atom = expr.atoms[expr.index + 1];

    if (atom && atom.type === 'textord' && atom.latex === '|') {
      // This is an opening ||
      expr.index += 2; // Skip the open delim

      expr = parseExpression(expr, options);
      atom = expr.atoms[expr.index];
      var atom2 = expr.atoms[expr.index + 1];

      if (atom && atom.type === 'textord' && atom.latex === '|' && atom2 && atom2.type === 'textord' && atom2.latex === '|') {
        // This was a closing ||
        expr.index += 2;
        expr = parseSupsub(expr, options);
        expr = parsePostfix(expr, options);
      }
    }
  } else if (atom.type === 'sizeddelim' && atom.delim === ldelim) {
    expr.index += 1; // Skip the open delim

    expr = parseExpression(expr, options);
    atom = expr.atoms[expr.index];

    if (atom && atom.type === 'sizeddelim' && atom.delim === rdelim) {
      expr.index += 1;
      expr = parseSupsub(expr, options);
      expr = parsePostfix(expr, options);
    } // TODO: else, syntax error?

  } else if (atom.type === 'leftright' && atom.leftDelim === ldelim && (atom.rightDelim === '?' || atom.rightDelim === rdelim)) {
    // This atom type includes the content of the parenthetical expression
    // in its body
    expr.ast = mathJson_parse(atom.body, options);

    if (nextIsSupsub(expr)) {
      // Wrap in a group if we have an upcoming superscript or subscript
      expr.ast = {
        group: expr.ast
      };
    }

    expr = parseSupsub(expr, options);
    expr = parsePostfix(expr, options);
  } else {
    return undefined;
  }

  expr.minPrec = savedPrec;
  return expr;
}

function nextIsDigraph(expr, digraph) {
  expr.index = expr.index || 0;

  if (expr.atoms.length <= 1 || expr.index >= expr.atoms.length - 1) {
    return false;
  }

  return digraph === getString(expr.atoms[expr.index]) + getString(expr.atoms[expr.index + 1]);
}
/**
 * Some symbols are made up of two consecutive characters.
 * Handle them here. Return undefined if not a digraph.
 * TODO: other digraphs:
 * :=
 * ++
 * **
 * =:
 * °C U+2103
 * °F U+2109
 * @private
 *
*/


function parseDigraph(expr) {
  expr.index = expr.index || 0;

  if (expr.atoms.length <= 1 || expr.index >= expr.atoms.length - 1) {
    return undefined;
  }

  if (isAtom(expr, 'textord', '\\nabla')) {
    expr.index += 1;

    if (isAtom(expr, 'mbin', '\\times')) {
      expr.index += 1;
      expr.ast = 'curl'; // divergence

      return expr;
    } else if (isAtom(expr, 'mbin', '\\cdot')) {
      expr.index += 1;
      expr.ast = 'div';
      return expr;
    }

    expr.index -= 1;
  } else {
    var digraph = expr.atoms[expr.index].latex + expr.atoms[expr.index + 1].latex;
    var result = /^(>=|<=|>>|<<|:=|!=|\*\*|\+\+|--)$/.test(digraph) ? digraph : '';

    if (result) {
      expr.index += 1;
    }

    return result;
  }

  return undefined;
}

function parsePrimary(expr, options) {
  // <primary> := ('-'|'+) <primary> | <number> |
  //              '(' <expression> ')' | <symbol> | <text> (<expression>)
  expr.index = expr.index || 0;
  expr.ast = undefined;

  if (expr.atoms.length === 0 || expr.index >= expr.atoms.length) {
    return expr;
  }

  var atom = expr.atoms[expr.index];

  if (atom.mode === 'text') {
    var text = '';

    while (expr.atoms[expr.index] && expr.atoms[expr.index].mode === 'text') {
      text += expr.atoms[expr.index].body;
      expr.index += 1;
    }

    expr.ast = {
      'text': text
    };
    return expr;
  }

  var val = getCanonicalName(getString(atom));
  var digraph = parseDigraph(expr);

  if (digraph) {
    expr.ast = wrapFn(expr.ast, parsePrimary(expr, options).ast);
  } else if (atom.type === 'root') {
    expr.index = 0;
    expr.atoms = atom.body;
    return parsePrimary(expr, options);
  } else if (atom.type === 'mbin' && val === '-') {
    // Prefix - sign
    expr.index += 1; // Skip the '-' symbol

    expr = parsePrimary(expr, options);
    expr.ast = negate(expr.ast);
  } else if (atom.type === 'mbin' && val === '+') {
    // Prefix + sign
    expr.index += 1; // Skip the '+' symbol

    expr = parsePrimary(expr, options);
    expr.ast = wrapFn('add', expr.ast);
  } else if (atom.type === 'mord' && /^[0-9.]$/.test(atom.latex)) {
    // Looks like a number
    var num = '';
    var done = false;
    var pat = /^[0-9.eEdD]$/;

    while (expr.index < expr.atoms.length && !done && (isAtom(expr, 'spacing') || (isAtom(expr, 'mord') || isAtom(expr, 'mpunct', ',') || isAtom(expr, 'mbin')) && pat.test(expr.atoms[expr.index].latex))) {
      if (expr.atoms[expr.index].type === 'spacing') {
        expr.index += 1;
      } else if (typeof expr.atoms[expr.index].superscript !== 'undefined' || typeof expr.atoms[expr.index].subscript !== 'undefined') {
        done = true;
      } else {
        var digit = expr.atoms[expr.index].latex;

        if (digit === 'd' || digit === 'D') {
          digit = 'e';
          pat = /^[0-9+-.]$/;
        } else if (digit === 'e' || digit === 'E') {
          if (nextIsSupsub(expr)) {
            digit = '';
            expr.index -= 1;
            done = true;
          } else {
            digit = 'E';
            pat = /^[0-9+-.]$/;
          }
        } else if (pat === /^[0-9+-.]$/) {
          pat = /^[0-9]$/;
        }

        num += digit === ',' ? '' : digit;
        expr.index += 1;
      }
    }

    expr.ast = num ? wrapNum(num) : undefined; // This was a number. Is it followed by a fraction, e.g. 2 1/2

    atom = expr.atoms[expr.index];

    if (atom && atom.type === 'genfrac' && !isNaN(expr.ast.num)) {
      // Add an invisible plus, i.e. 2 1/2 = 2 + 1/2
      var lhs = expr.ast;
      expr = parsePrimary(expr, options);
      expr.ast = wrapFn('add', lhs, expr.ast);
    }

    if (atom && atom.type === 'group' && atom.latex && atom.latex.startsWith('\\nicefrac')) {
      // \nicefrac macro, add an invisible plus
      var _lhs = expr.ast;
      expr = parsePrimary(expr, options);
      expr.ast = wrapFn('add', _lhs, expr.ast);
    }

    if (atom && atom.type === 'msubsup') {
      expr = parseSupsub(expr, options);
    }

    expr = parsePostfix(expr, options);
  } else if (atom.type === 'genfrac' || atom.type === 'surd') {
    // A fraction or a square/cube root
    expr.ast = atom.toAST(options);
    expr = parseSupsub(expr, options);
    expr = parsePostfix(expr, options);
  } else if (atom.type === 'mord' || atom.type === 'mbin') {
    // A 'mord' but not a number: either an identifier ('x') or
    // a function ('\\Zeta')
    if (mathJson_isFunction(val) && !isOperator(atom)) {
      // A function
      expr.ast = {
        fn: val
      };
      expr = parseSupsub(expr, options);
      var fn = expr.ast;
      var arg = parsePrimary(expr, options).ast;

      if (arg && /^(list0|list|list2)$/.test(arg.fn)) {
        fn.arg = arg.arg;
      } else if (arg) {
        fn.arg = [arg];
      }

      expr.ast = fn;
    } else {
      // An identifier
      expr.ast = atom.toAST(options);

      if (expr.ast.sym === 'ⅈ') {
        // It's 'i', the imaginary unit
        expr.ast = wrapNum({
          im: "1"
        });
      }

      expr = parseSupsub(expr);
    }

    expr = parsePostfix(expr, options);
  } else if (atom.type === 'textord') {
    // Note that 'textord' can also be operators, and are handled as such
    // in parseExpression()
    if (!isOperator(atom)) {
      // This doesn't look like a textord operator
      if (!definitions.RIGHT_DELIM[atom.latex ? atom.latex.trim() : atom.body]) {
        // Not an operator, not a fence, it's a symbol or a function
        if (mathJson_isFunction(val)) {
          // It's a function
          expr.ast = {
            fn: val
          };
          expr = parseSupsub(expr, options);
          var _fn = expr.ast;
          expr.index += 1; // Skip the function name

          _fn.arg = [parsePrimary(expr, options).ast];
          expr.ast = _fn;
          expr = parsePostfix(expr, options);
        } else {
          // It was a symbol...
          expr.ast = atom.toAST(options);

          if (typeof atom.superscript === 'undefined') {
            expr.index += 1;
          }

          expr = parseSupsub(expr, options);
          expr = parsePostfix(expr, options);
        }
      }
    }
  } else if (atom.type === 'mop') {
    // Could be a function or an operator.
    if ((/^\\(mathop|operatorname|operatorname\*)/.test(atom.latex) || mathJson_isFunction(val)) && !isOperator(atom)) {
      expr.ast = {
        fn: /^\\(mathop|operatorname|operatorname\*)/.test(atom.latex) ? atom.body : val
      };
      expr = parseSupsub(expr, options);

      if (hasSup(expr.ast)) {
        // There was an exponent with the function.
        // This may be an inverse function
        var INVERSE_FUNCTION = {
          'sin': 'arcsin',
          'cos': 'arccos',
          'tan': 'arctan',
          'cot': 'arccot',
          'sec': 'arcsec',
          'csc': 'arccsc',
          'sinh': 'arsinh',
          'cosh': 'arcosh',
          'tanh': 'artanh',
          'csch': 'arcsch',
          'sech': 'arsech',
          'coth': 'arcoth'
        };

        if (asMachineNumber(expr.ast.sup) === -1 && INVERSE_FUNCTION[val]) {
          expr.ast = wrapFn(INVERSE_FUNCTION[val], parsePrimary(expr, options).ast);
        } else {
          // Keep the exponent, add the argument
          var _fn2 = expr.ast;
          _fn2.arg = [parsePrimary(expr, options).ast];
          expr.ast = _fn2;
        }
      } else {
        var _fn3 = expr.ast;
        var _arg = parsePrimary(expr, options).ast;

        if (_arg && /^(list0|list|list2)$/.test(_arg.fn)) {
          _fn3.arg = _arg.arg;
        } else if (_arg) {
          _fn3.arg = [_arg];
        }

        expr.ast = _fn3;
      }
    }
  } else if (atom.type === 'array') {
    expr.index += 1;
    expr.ast = atom.toAST(options);
  } else if (atom.type === 'group') {
    expr.index += 1;
    expr.ast = atom.toAST(options);
  } else if (atom.type === 'mclose') {
    return expr;
  } else if (atom.type === 'error') {
    expr.index += 1;
    expr.ast = {
      error: atom.latex
    };
    return expr;
  }

  if (expr.ast === undefined) {
    // Parse either a group of paren, and return their content as the result
    // or a pair of delimiters, and return them as a function applied
    // to their content, i.e. "|x|" -> {fn: "||", arg: "x"}
    var delim = parseDelim(expr, '(', ')', options) || parseDelim(expr, null, null, options);

    if (delim) {
      expr = delim;
    } else if (!isOperator(atom)) {
      // This is not an operator (if it is, it may be an operator
      // dealing with an empty lhs. It's possible.
      // Couldn't interpret the expression. Output an error.
      if (atom.type === 'placeholder') {
        // Default value for a placeholder is 0
        // (except for the denominator of a 'genfrac')
        expr.ast = wrapNum(0);
      } else {
        expr.ast = {
          text: '?'
        };
        expr.ast.error = 'Unexpected token ' + "'" + atom.type + "'";

        if (atom.latex) {
          expr.ast.latex = atom.latex;
        } else if (atom.body && atom.toLatex) {
          expr.ast.latex = atom.toLatex();
        }
      }

      expr.index += 1; // Skip the unexpected token, and attempt to continue
    }
  }

  atom = expr.atoms[expr.index];

  if (atom && (atom.type === 'mord' || atom.type === 'surd' || atom.type === 'mop' || atom.type === 'mopen' || atom.type === 'sizeddelim' || atom.type === 'leftright')) {
    if (atom.type === 'sizeddelim') {
      for (var d in definitions.RIGHT_DELIM) {
        if (atom.delim === definitions.RIGHT_DELIM[d]) {
          // This is (most likely) a closing delim, exit.
          // There are ambiguous cases, for example |x|y|z|.
          expr.index += 1;
          return expr;
        }
      }
    }

    if ((atom.type === 'mord' || atom.type === 'textord' || atom.type === 'mop') && isOperator(atom)) {
      // It's actually an operator
      return expr;
    }

    var _lhs2 = expr.ast;
    expr.ast = {};
    expr = parsePrimary(expr, options);

    if (expr && expr.ast && _lhs2) {
      if (mathJson_isFunction(_lhs2.fn) && typeof _lhs2.arg === 'undefined' || Array.isArray(_lhs2.arg) && _lhs2.arg.length === 0) {
        // A function with no arguments followed by a list ->
        // the list becomes the argument to the function
        if (expr.ast.fn === 'list2' || expr.ast.fn === 'list') {
          expr.ast = wrapFn(_lhs2.fn, expr.ast.arg);
        } else {
          // A function "f(x)" or "√x" followed by something else:
          // implicit multiply
          expr.ast = wrapFn('multiply', _lhs2, expr.ast);
        }
      } else {
        // Invisible times, e.g. '2x'
        if (expr.ast.fn === 'multiply') {
          expr.ast.arg.unshift(_lhs2);
        } else if (numberIm(_lhs2) === 0 && numberRe(_lhs2) !== 0 && numberIm(expr.ast) === 1 && numberRe(expr.ast) === 0) {
          // Imaginary number, i.e. "3i"
          expr.ast = wrapNum({
            im: numberRe(_lhs2).toString()
          });
        } else {
          expr.ast = wrapFn('multiply', _lhs2, expr.ast);
        }
      }
    } else {
      expr.ast = _lhs2;
    }
  }

  return expr;
}
/**
 * Given an atom or an array of atoms, return their AST representation as
 * an object.
 * @param {object} expr An expressions, including expr.atoms, expr.index,
 * expr.minPrec the minimum precedence that this parser should parse
 * before returning; expr.lhs (optional); expr.ast, the resulting AST.
 * @return {object} the expr object, updated
 * @private
 */


function parseExpression(expr, options) {
  expr.index = expr.index || 0;
  expr.ast = undefined;
  if (expr.atoms.length === 0 || expr.index >= expr.atoms.length) return expr;
  expr.minPrec = expr.minPrec || 0;
  var lhs = parsePrimary(expr, options).ast;
  var done = false;
  var minPrec = expr.minPrec;

  while (!done) {
    var atom = expr.atoms[expr.index];
    var digraph = parseDigraph(expr);
    done = !atom || atom.mode === 'text' || !digraph && !isOperator(atom);
    var prec = void 0,
        assoc = void 0;

    if (!done) {
      var _ref = digraph ? [getPrecedence(digraph), getAssociativity(digraph)] : opPrec(atom);

      var _ref2 = _slicedToArray(_ref, 2);

      prec = _ref2[0];
      assoc = _ref2[1];
      done = prec < minPrec;
    }

    if (!done) {
      var opName = digraph || getCanonicalName(getString(atom));

      if (assoc === 'left') {
        expr.minPrec = prec + 1;
      } else {
        expr.minPrec = prec;
      }

      expr.index += 1;

      if (opName === '|') {
        if (typeof atom.subscript !== 'undefined' || expr.atoms[expr.index] && typeof expr.atoms[expr.index].subscript !== 'undefined' && expr.atoms[expr.index].type === 'msubsup') {
          // Bind is a special function. It doesn't have a rhs, and
          // its argument is a subscript.
          expr.ast = {};
          var sub_arg = parseSupsub(expr, options).ast.sub;
          lhs = wrapFn('bind', lhs);

          if (sub_arg && sub_arg.fn === 'equal' && lhs.arg) {
            // This is a subscript of the form "x=..."
            lhs.arg.push(getArg(sub_arg, 0));
            lhs.arg.push(getArg(sub_arg, 1));
          } else if (sub_arg && lhs.arg && (sub_arg.fn === 'list' || sub_arg.fn === 'list2')) {
            // Form: "x=0;n=3;z=5"
            var currentSym = {
              sym: "x"
            };

            for (var i = 0; i < sub_arg.arg.length; i++) {
              if (sub_arg.arg[i].fn === 'equal') {
                currentSym = getArg(sub_arg.arg[i], 0);
                lhs.arg.push(currentSym);
                lhs.arg.push(getArg(sub_arg.arg[i], 1));
              } else {
                lhs.arg.push(currentSym);
                lhs.arg.push(sub_arg.arg[i]);
              }
            }
          } else if (sub_arg) {
            // Default identifier if none provided
            lhs.arg.push({
              sym: "x"
            });
            lhs.arg.push(sub_arg);
          }
        } else {
          // That was a "|", but not with a subscript after, so
          // it's the end of the expression, might be a right fence.
          done = true;
        }
      } else {
        var rhs = parseExpression(expr, options).ast; // Some operators (',' and ';' for example) convert into a function
        // even if there's only two arguments. They're super associative...

        var fn = SUPER_ASSOCIATIVE_FUNCTION[opName];

        if (fn && lhs && lhs.fn !== fn) {
          // Only promote them if the lhs is not already the same function.
          // If it is, we'll combine it below.
          lhs = wrapFn(fn, lhs);
        } // Promote subtraction to an addition


        if (opName === '-') {
          if (lhs && lhs.arg && lhs.fn === 'add') {
            // add(x,y) - z -> add(x, y, -z)
            if (rhs !== undefined) lhs.arg.push(negate(rhs));
          } else if (lhs && lhs.fn === 'subtract') {
            // x-y - z      -> add(x, -y, -z)
            lhs = wrapFn('add', getArg(lhs, 0), negate(getArg(lhs, 1)), negate(rhs));
          } else if (mathJson_isNumber(lhs) && !hasSup(lhs) && mathJson_isNumber(rhs) && !hasSup(rhs) && (typeof rhs.num.re === 'undefined' || rhs.num.re === '0') && typeof rhs.num.im !== 'undefined') {
            lhs = {
              num: {
                re: lhs.num,
                im: (-parseFloat(rhs.num.im)).toString()
              }
            };
          } else {
            lhs = wrapFn('subtract', lhs, rhs);
          }
        } else {
          // Is there a function (e.g. 'add') implementing the
          // associative version of this operator (e.g. '+')?
          fn = ASSOCIATIVE_FUNCTION[opName];

          if (fn === 'add' && lhs && lhs.fn === 'subtract') {
            // subtract(x, y) + z -> add(x, -y, z)
            lhs = wrapFn('add', getArg(lhs, 0), negate(getArg(lhs, 1)), rhs);
          } else if (fn && lhs && lhs.fn === fn && !hasSup(lhs)) {
            // add(x,y) + z -> add(x, y, z)
            if (typeof rhs !== 'undefined') {
              if (rhs.fn === fn && !hasSup(rhs) && rhs.arg) {
                // add(x, y) = add (a, b)
                lhs.arg = [].concat(mathJson_toConsumableArray(lhs.arg), mathJson_toConsumableArray(rhs.arg));
              } else if (lhs.arg) {
                lhs.arg.push(rhs);
              }
            }
          } else if (fn && rhs && rhs.arg && rhs.fn === fn) {
            // x =    y = z -> equal(x, y, z)
            rhs.arg.unshift(lhs);
            lhs = rhs;
          } else if (fn === 'multiply' && mathJson_isNumber(lhs) && !hasSup(lhs) && rhs && asMachineNumber(rhs) === 10 && mathJson_isNumber(rhs.sup)) {
            // n * 10^m
            lhs = wrapNum(asMachineNumber(lhs) * Math.pow(10, asMachineNumber(rhs.sup)));
          } else if (fn === 'add' && mathJson_isNumber(lhs) && !hasSup(lhs) && rhs && numberIm(rhs) !== 0 && !hasSup(rhs)) {
            lhs = {
              num: {
                re: lhs.num,
                im: rhs.num.im
              }
            };
          } else {
            lhs = wrapFn(fn || OP_NAME[opName] || opName, lhs, rhs);
          }
        }
      }
    }
  }

  expr.ast = lhs;
  return expr;
}
/**
 * Return a string escaped as necessary to comply with the JSON format
 * @param {string} s
 * @return {string}
 * @private
 */


function escapeText(s) {
  return s.replace(/[\\]/g, '\\\\').replace(/["]/g, '\\"').replace(/[\b]/g, "\\b").replace(/[\f]/g, "\\f").replace(/[\n]/g, "\\n").replace(/[\r]/g, "\\r").replace(/[\t]/g, "\\t");
}
/**
 * Return an AST representation of a single atom
 *
 * @return {object}
 * @method MathAtom#toAST
 * @private
 */


mathAtom.MathAtom.prototype.toAST = function (options) {
  var MATH_VARIANTS = {
    'bb': 'double-struck',
    'cal': 'script',
    'scr': 'script',
    'frak': 'fraktur',
    'cmrss': 'sans-serif',
    'cmrtt': 'monospace'
  }; // TODO: See https://www.w3.org/TR/MathML2/chapter6.html#chars.letter-like-tables

  var result = {};
  var sym = '';
  var m;
  var lhs, rhs;
  var variant = MATH_VARIANTS[this.baseFontFamily || this.fontFamily];
  var variantSym;
  var style = '';
  if (this.fontSeries === 'b') style += 'bold';
  if (this.fontShape === 'it') style += 'italic';
  var command = this.latex ? this.latex.trim() : null;

  switch (this.type) {
    case 'root':
    case 'group':
      // Macros appear as group as well. Handle some of them.
      if (this.latex && this.latex.startsWith('\\nicefrac')) {
        m = this.latex.slice(9).match(/({.*}|[^}])({.*}|[^}])/);

        if (m) {
          if (m[1].length === 1) {
            lhs = m[1];
          } else {
            lhs = m[1].substr(1, m[1].length - 2);
          }

          lhs = parser.parseTokens(lexer.tokenize(lhs), 'math', null, options.macros);

          if (m[2].length === 1) {
            rhs = m[2];
          } else {
            rhs = m[2].substr(1, m[2].length - 2);
          }

          rhs = parser.parseTokens(lexer.tokenize(rhs), 'math', null, options.macros);
          result = wrapFn('divide', mathJson_parse(lhs, options), mathJson_parse(rhs, options));
        } else {
          result.fn = 'divide';
        }
      } else {
        result.group = mathJson_parse(this.body, options);
      }

      break;

    case 'genfrac':
      // If there's no denominator, or a placeholder, use "1" as the value
      result = wrapFn('divide', mathJson_parse(this.numer, options), this.denom && this.denom[0] && this.denom[0].type === 'placeholder' ? wrapNum(1) : mathJson_parse(this.denom, options));
      break;

    case 'surd':
      if (this.index) {
        result = wrapFn('pow', mathJson_parse(this.body, options), wrapFn('divide', 1, mathJson_parse(this.index, options)));
      } else {
        result = wrapFn('sqrt', mathJson_parse(this.body, options));
      }

      break;

    case 'rule':
      break;

    case 'line':
    case 'overlap':
    case 'accent':
      break;

    case 'overunder':
      break;

    case 'mord':
    case 'textord':
    case 'mbin':
      // Check to see if it's a \char command
      m = !command ? undefined : command.match(/[{]?\\char"([0-9abcdefABCDEF]*)[}]?/);

      if (m) {
        sym = String.fromCodePoint(parseInt(m[1], 16));
      } else {
        sym = getCanonicalName(getString(this));

        if (sym.length > 0 && sym.charAt(0) === '\\') {
          // This is an identifier with no special handling.
          // Use the Unicode value if outside ASCII range
          if (typeof this.body === 'string') {
            // TODO: consider making this an option?
            // if (this.body.charCodeAt(0) > 255) {
            //     sym = '&#x' + ('000000' +
            //         this.body.charCodeAt(0).toString(16)).substr(-4) + ';';
            // } else {
            sym = this.body; // }
          }
        }
      }

      variantSym = escapeText(definitions.mathVariantToUnicode(sym, variant, style));

      if (variantSym !== sym) {
        // If there's a specific Unicode character matching this one
        // no need to record a variant.
        result = {
          sym: variantSym
        };
        variant = 'normal';
      } else {
        result = {
          sym: sym
        };
      }

      break;
    // case 'mpunct':
    //     result = '<mo separator="true">' + command + '</mo>';
    //     break;

    case 'minner':
      break;

    case 'mop':
      break;

    case 'box':
      result = mathJson_parse(this.body, options);
      break;

    case 'enclose':
      // result = '<menclose notation="';
      // for (const notation in this.notation) {
      //     if (Object.prototype.hasOwnProperty.call(this.notation, notation) &&
      //         this.notation[notation]) {
      //         result += sep + notation;
      //         sep = ' ';
      //     }
      // }
      // result += '">' + toAST(this.body).mathML + '</menclose>';
      break;

    case 'array':
      if (this.env.name === 'cardinality') {
        result = wrapFn('card', mathJson_parse(this.array, options));
      } else if (/array|matrix|pmatrix|bmatrix/.test(this.env.name)) {
        result = {
          fn: 'array',
          args: []
        };
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = this.array[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var row = _step4.value;
            result.args.push(row.map(function (cell) {
              return mathJson_parse(cell, options);
            }));
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      } else if (this.env.name === 'cases') {
        result = {
          fn: 'cases',
          args: []
        };
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = this.array[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var _row = _step5.value;

            if (_row[0]) {
              var statement = [];
              statement.push(mathJson_parse(_row[0], options));
              var condition = mathJson_parse(_row[1], options);

              if (condition) {
                if (condition.fn === 'text' && condition.arg) {
                  if (/^(if|when|for)$/i.test(condition.arg[0].trim())) {
                    condition = condition.arg.filter(function (x) {
                      return typeof x !== 'string';
                    });
                  }
                }
              }

              statement.push(condition || {});
              result.args.push(statement);
            }
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      }

      break;

    case 'spacing':
    case 'space':
    case 'mathstyle':
      break;

    default:
      result = undefined;
      console.warn('Unhandled atom "' + this.type + '" in "' + (this.latex || this.body) + '"');
  }

  if (result && variant && variant !== 'normal') {
    result.variant = variant;
  }

  if (result && typeof this.cssClass === 'string') {
    result.class = this.cssClass;
  }

  if (result && typeof this.cssId === 'string') {
    result.id = this.cssId;
  }

  return result;
};

function filterPresentationAtoms(atoms) {
  if (!atoms) return [];
  var result;

  if (Array.isArray(atoms)) {
    result = [];
    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = atoms[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var atom = _step6.value;
        var filter = filterPresentationAtoms(atom);
        result = result.concat(filter);
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
          _iterator6.return();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }
  } else {
    if (atoms.type === 'spacing') {
      return [];
    } else if (atoms.type === 'first' || atoms.type === 'box') {
      result = filterPresentationAtoms(atoms.body);
    } else {
      if (atoms.body && Array.isArray(atoms.body)) {
        atoms.body = filterPresentationAtoms(atoms.body);
      }

      if (atoms.superscript && Array.isArray(atoms.superscript)) {
        atoms.superscript = filterPresentationAtoms(atoms.superscript);
      }

      if (atoms.subscript && Array.isArray(atoms.subscript)) {
        atoms.subscript = filterPresentationAtoms(atoms.subscript);
      }

      if (atoms.index && Array.isArray(atoms.index)) {
        atoms.index = filterPresentationAtoms(atoms.index);
      }

      if (atoms.denom && Array.isArray(atoms.denom)) {
        atoms.denom = filterPresentationAtoms(atoms.denom);
      }

      if (atoms.numer && Array.isArray(atoms.numer)) {
        atoms.numer = filterPresentationAtoms(atoms.numer);
      }

      if (atoms.array && Array.isArray(atoms.array)) {
        atoms.array = atoms.array.map(function (row) {
          return row.map(function (cell) {
            return filterPresentationAtoms(cell);
          });
        });
      }

      result = [atoms];
    }
  }

  return result;
}
/**
 * Parse a sequence of text zone and math zones:
 * <sentence> := ((<text>) <expression>)+
 * @param {object} expr
 * @return  {object}
 * @private
 */


function parseSentence(expr, options) {
  expr.index = expr.index || 0;
  expr.ast = undefined;
  var zones = []; // Iterate while we have atoms to look at

  while (expr.atoms[expr.index]) {
    if (expr.atoms[expr.index].mode === 'text') {
      // Text mode atom...
      var text = '';

      while (expr.atoms[expr.index] && expr.atoms[expr.index].mode === 'text') {
        text += expr.atoms[expr.index].body;
        expr.index += 1;
      }

      zones.push(text);
    } else {
      var z = parseExpression(expr, options).ast; // Something went wrong in parsing the expression...

      if (!z) return undefined;
      zones.push(z);
    }
  }

  if (zones.length > 1) {
    return wrapFn.apply(void 0, ['text'].concat(zones));
  }

  return zones[0] || undefined;
}
/**
 * @param {Atoms[]} atoms
 * @return  {object}
 * @private
 */


function mathJson_parse(atoms, options) {
  return parseSentence({
    atoms: filterPresentationAtoms(atoms)
  }, options);
}

mathAtom.toAST = function (atoms, options) {
  return mathJson_parse(atoms, options);
};
/**
 *
 * @param {string} fence - The fence to wrap around the arguments
 * @return {string} - A string wrapped in the fence
 * @private
 */


function wrapFence(fence) {
  var args = Array.prototype.slice.call(arguments);
  args.shift();
  fence = fence || '.. ';
  var result = '';

  if (args.length > 0) {
    if (fence[0] !== '.') result += fence[0];
    var sep = '';
    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
      for (var _iterator7 = args[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
        var arg = _step7.value;
        result += sep + arg;
        sep = fence[2];
      }
    } catch (err) {
      _didIteratorError7 = true;
      _iteratorError7 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
          _iterator7.return();
        }
      } finally {
        if (_didIteratorError7) {
          throw _iteratorError7;
        }
      }
    }

    if (fence[1] !== '.') result += fence[1];
  }

  return result;
}
/**
 * Return a formatted mantissa:
 * 1234567 -> 123 456 7...
 * 1233333 -> 12(3)
 * @param {string} m
 * @param {Object.<string, any>} config
 * @private
 */


function formatMantissa(m, config) {
  var originalLength = m.length; // The last digit may have been rounded, if it exceeds the precison,
  // which could throw off the
  // repeating pattern detection. Ignore   it.

  m = m.substr(0, config.precision - 2);

  for (var i = 0; i < m.length - 16; i++) {
    // Offset is the part of the mantissa that is not repeating
    var offset = m.substr(0, i); // Try to find a repeating pattern of length j

    for (var j = 0; j < 17; j++) {
      var cycle = m.substr(i, j + 1);
      var times = Math.floor((m.length - offset.length) / cycle.length);

      if (times > 1) {
        if ((offset + cycle.repeat(times + 1)).startsWith(m)) {
          // We've found a repeating pattern!
          if (cycle === '0') {
            return offset.replace(/(\d{3})/g, '$1' + config.groupSeparator);
          }

          return offset.replace(/(\d{3})/g, '$1' + config.groupSeparator) + config.beginRepeatingDigits + cycle.replace(/(\d{3})/g, '$1' + config.groupSeparator) + config.endRepeatingDigits;
        }
      }
    }
  }

  if (originalLength !== m.length) {
    m += '\\ldots';
  }

  return m.replace(/(\d{3})/g, '$1' + config.groupSeparator);
}

function parseFloatToPrecision(num) {
  return parseFloat(parseFloat(num).toPrecision(15));
}
/**
*
* @param {string|number} num - A number, represented as a string (e.g. "-12.45"
*  particularly useful for arbitrary precision numbers) or a number (-12.45)
* @return {string} A LaTeX representation of the AST
* @private
*/


function numberAsLatex(num, config) {
  var result = '';

  if (typeof config.precision === 'number') {
    if (typeof num === 'number') {
      num = parseFloatToPrecision(num);
    } else {
      var sign = '';
      var exponent = '';

      if (num[0] === '-') {
        sign = '-';
        num = num.substr(1);
      } else if (num[0] === '+') {
        num = num.substr(1);
      }

      if (num.indexOf('.') >= 0) {
        var m = num.match(/(\d*).(\d*)([e|E]([-+]?[0-9]*))?/);
        var base = m[1];
        var mantissa = m[2].substring(0, Math.min(config.precision - base.length, m[2].length));
        exponent = m[4] || '';

        if (base === '0') {
          var p = 0; // Index of the first non-zero digit after the decimal

          while (mantissa[p] === '0' && p < mantissa.length) {
            p += 1;
          }

          var r = '';

          if (p <= 4) {
            r = '0' + config.decimalMarker;
            r += mantissa.substr(0, p);
            r += formatMantissa(num.substr(r.length), config);
          } else if (p + 1 >= config.precision) {
            r = '0';
            sign = '';
          } else {
            r = num[p];
            var f = formatMantissa(num.substr(p + 1), config);

            if (f) {
              r += config.decimalMarker + f;
            }
          }

          if (r !== '0') {
            if (num.length - 1 > config.precision && !r.endsWith('}') && !r.endsWith('\\ldots')) {
              r += '\\ldots';
            }

            if (p > 4) {
              r += config.exponentProduct;

              if (config.exponentMarker) {
                r += config.exponentMarker + (1 - p).toString();
              } else {
                r += '10^{' + (1 - p).toString() + '}';
              }
            }
          }

          num = r;
        } else {
          num = base.replace(/\B(?=(\d{3})+(?!\d))/g, config.groupSeparator);

          var _f = formatMantissa(mantissa, config);

          if (_f) {
            num += config.decimalMarker + _f; // if (num.length - 1 > config.precision && !num.endsWith('}') && !num.endsWith('\\ldots')) {
            //     num += '\\ldots';
            // }
          }
        }
      } else if (num.length > config.precision) {
        var len = num.length;
        var _r = num[0];

        var _f2 = formatMantissa(num.substr(2), config);

        if (_f2) {
          _r += config.decimalMarker + _f2;

          if (_r[_r.length - 1] !== '}') {
            _r += '\\ldots';
          }
        }

        if (_r !== '1') {
          _r += config.exponentProduct;
        } else {
          _r = '';
        }

        if (config.exponentMarker) {
          _r += config.exponentMarker + (len - 2).toString();
        } else {
          _r += '10^{' + (len - 2).toString() + '}';
        }

        num = _r;
      } else {
        num = num.replace(/\B(?=(\d{3})+(?!\d))/g, config.groupSeparator);
      }

      if (exponent) {
        // There is an exponent...
        if (config.exponentMarker) {
          exponent = config.exponentMarker + exponent;
        } else {
          exponent = config.exponentProduct + ' 10^{' + exponent + '}';
        }
      }

      return sign + num + exponent;
    }
  }

  if (config.scientificNotation === 'engineering') {
    // Ensure the exponent is a multiple of 3
    if (num === 0) {
      result = '0';
    } else {
      var y = Math.abs(num);

      var _exponent = Math.round(Math.log10(y));

      _exponent = _exponent - _exponent % 3;
      if (y < 1000) _exponent = 0;

      var _mantissa = y / Math.pow(10, _exponent);

      var _m = _mantissa.toString().match(/^(.*)\.(.*)$/);

      if (_m && _m[1] && _m[2]) {
        _mantissa = _m[1] + config.decimalMarker + _m[2];
      }

      if (config.groupSeparator) {
        _mantissa = formatMantissa(_mantissa.toExponential(), config);
      }

      if (_exponent === 0) {
        _exponent = '';
      } else if (config.exponentMarker) {
        _exponent = config.exponentMarker + _exponent;
      } else {
        _exponent = config.exponentProduct + ' 10^{' + _exponent + '}';
      }

      result = (num < 0 ? '-' : '') + _mantissa + _exponent;
    }
  } else {
    var valString = typeof num === 'string' ? num : num.toString();

    var _m2 = valString.match(/^(.*)[e|E]([-+]?[0-9]*)$/i);

    var _base, _exponent2, _mantissa2;

    _base = valString;
    _mantissa2 = '';

    if (_m2 && _m2[1] && _m2[2]) {
      // There is an exponent...
      _base = _m2[1];

      if (config.exponentMarker) {
        _exponent2 = config.exponentMarker + _m2[2];
      } else {
        _exponent2 = config.exponentProduct + ' 10^{' + _m2[2] + '}';
      }
    }

    _m2 = _base.match(/^(.*)\.(.*)$/);

    if (_m2 && _m2[1] && _m2[2]) {
      _base = _m2[1];
      _mantissa2 = _m2[2];
    }

    if (config.groupSeparator) {
      _base = _base.replace(/\B(?=(\d{3})+(?!\d))/g, config.groupSeparator);
      _mantissa2 = formatMantissa(_mantissa2, config);
    }

    if (_mantissa2) _mantissa2 = config.decimalMarker + _mantissa2;
    result = _base + _mantissa2 + (_exponent2 || '');
  }

  return result;
}
/**
*
* @param {object} ast - Abstract Syntax Tree object (in canonical form)
* @return {string} A LaTeX representation of the AST
* @private
*/


function asLatex(ast, options) {
  var config = Object.assign({
    precision: 14,
    decimalMarker: '.',
    groupSeparator: '\\, ',
    product: '\\cdot ',
    // \\times, \\,
    exponentProduct: '\\cdot ',
    exponentMarker: '',
    arcSeparator: '\\,',
    scientificNotation: 'auto',
    // 'engineering', 'auto', 'on'
    beginRepeatingDigits: '\\overline{',
    endRepeatingDigits: '}'
  }, options);
  var result = '';
  if (ast === undefined) return '';

  if (typeof ast === 'string') {
    ast = JSON.parse(ast);
  }

  if (ast.latex) {
    // If ast.latex key is present, use it to render the element
    result = ast.latex;
  } else if (mathJson_isNumber(ast)) {
    var val = asMachineNumber(ast);

    if (val === -Infinity) {
      result = '-\\infty ';
    } else if (val === Infinity) {
      result = '\\infty ';
    } else if (mathJson_typeof(ast.num) === 'object' && (typeof ast.num.re === 'string' || typeof ast.num.im === 'string')) {
      var re = numberRe(ast);
      var im = numberIm(ast);

      if (isNaN(re) || isNaN(im)) {
        result = '\\text{NaN}';
      } else if (Math.abs(im) <= Number.EPSILON && Math.abs(re) <= Number.EPSILON) {
        result = '0';
      } else {
        if (Math.abs(re) > Number.EPSILON) {
          result = numberAsLatex(re, config);
        }

        if (Math.abs(im) > Number.EPSILON) {
          if (Math.abs(re) > Number.EPSILON) {
            result += im > 0 ? '+' : '';
          }

          result += (Math.abs(im) !== 1 ? numberAsLatex(im, config) : '') + '\\imaginaryI ';
        }
      }
    } else if (isNaN(val)) {
      result = '\\text{NaN}';
    } else {
      result = numberAsLatex(ast.num, config);
    }

    if (hasSup(ast)) result += '^{' + asLatex(ast.sup, config) + '}';
    if (hasSub(ast)) result += '_{' + asLatex(ast.sub, config) + '}';
  } else if (ast.group) {
    result = asLatex(ast.group, config);

    if (!mathJson_isNumber(ast.group) && !asSymbol(ast.group)) {
      result = wrapFence(ast.fence || '(),', result);
    } else if (numberIm(ast.group) !== 0) {
      result = wrapFence(ast.fence || '(),', result);
    }

    if (hasSup(ast)) result += '^{' + asLatex(ast.sup, config) + '}';
    if (hasSub(ast)) result += '_{' + asLatex(ast.sub, config) + '}';
  } else if (ast.fn) {
    if (ast.fn === 'bind') {
      result = asLatex(getArg(ast, 0), config) + '|_{';

      if (ast.arg && ast.arg.length === 2) {
        result += asLatex(getArg(ast, 1));
      } else {
        var sep = '';

        for (var i = 1; i < ast.arg.length; i += 2) {
          result += sep + asLatex(getArg(ast, i)) + ' = ' + asLatex(getArg(ast, i + 1));
          sep = ', ';
        }
      }

      result += '}';
    } else if (ast.fn === 'divide') {
      result = '\\frac{' + asLatex(getArg(ast, 0), config) + '}{' + asLatex(getArg(ast, 1), config) + '}';
    } else if (ast.fn === 'negate') {
      result = '-' + asLatex(getArg(ast, 0), config);
    } else if (ast.fn === 'subtract') {
      result = asLatex(getArg(ast, 0), config) + ' - ' + asLatex(getArg(ast, 1), config);
    } else if ((ast.fn === 'add' || ast.fn === 'multiply') && Array.isArray(ast.arg)) {
      var a = [];
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = ast.arg[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var exp = _step8.value;

          if (exp.fn === 'add' || exp.fn === 'subtract') {
            a.push(wrapFence('() ', asLatex(exp, config)));
          } else if (isComplexWithRealAndImaginary(exp)) {
            // Complex numbers that have both a real and imaginary part
            // should be wrapped in parentheses
            a.push(wrapFence('() ', asLatex(exp, config)));
          } else if (hasSup(ast) && !(numberIm(exp) === 0 || numberIm(exp) === 1)) {
            // Wrap with parentheses if there's an exponent
            // and the imaginary part is neither 0 nor 1
            a.push(wrapFence('() ', asLatex(exp, config)));
          } else {
            a.push(asLatex(exp, config));
          }
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }

      if (ast.fn === 'multiply') {
        if (ast.arg && ast.arg.length === 2 && (mathJson_isNumber(ast.arg[0]) || ast.arg[0].fn === 'divide') && (!mathJson_isNumber(ast.arg[1]) || numberRe(ast.arg[1]) === 0 && numberIm(ast.arg[1]) === 1)) {
          // Invisible times:
          // (number or fraction) * not a number
          // or (number or fraction) * imaginary unit
          result = a[0] + a[1];
        } else {
          result = a.join(' \\times ');
        }
      } else {
        // Addition (and subtraction)
        if (ast.arg && ast.arg.length === 1) {
          if (ast.arg[0].fn === 'negate' || mathJson_isNumber(ast.arg[0]) && asMachineNumber(ast.arg[0]) < 0) {
            // a[0] has a negative sign
            result = a[0];
          } else {
            // Single non-negative element, add a '+' in front
            result = '+' + a[0];
          }
        } else {
          result = a[0];

          for (var _i2 = 1; _i2 < ast.arg.length; _i2++) {
            if (ast.arg[_i2].fn === 'negate' || mathJson_isNumber(ast.arg[_i2]) && asMachineNumber(ast.arg[_i2]) < 0) {
              // a[i] already has a negative sign, so we can do an
              // implicit add
              result += a[_i2];
            } else {
              result += ' + ' + a[_i2];
            }
          }
        }
      }
    } else if (ast.fn === 'list' || ast.fn === 'list2') {
      var _a = [];
      var _iteratorNormalCompletion9 = true;
      var _didIteratorError9 = false;
      var _iteratorError9 = undefined;

      try {
        for (var _iterator9 = ast.arg[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
          var _exp = _step9.value;

          _a.push(asLatex(_exp, config));
        }
      } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
            _iterator9.return();
          }
        } finally {
          if (_didIteratorError9) {
            throw _iteratorError9;
          }
        }
      }

      result = _a.join(ast.fn === 'list2' ? '; ' : ', ');
    } else if (ast.fn === 'pow' && Array.isArray(ast.arg) && ast.arg.length >= 2) {
      result = asLatex(getArg(ast, 0), config);

      if (!mathJson_isNumber(getArg(ast, 0)) && !asSymbol(getArg(ast, 0))) {
        result = wrapFence(ast.fence || '(),', result);
      }

      result += '^{' + asLatex(getArg(ast, 1), config) + '}';
    } else if (ast.fn === 'equal' && ast.arg && ast.arg.length > 2) {
      result = ast.arg.map(function (x) {
        return asLatex(x, config);
      }).join(' = ');
    } else {
      var fn = getLatexTemplateForFunction(ast.fn);
      result = fn;
      var argstring = '';
      var parenRequired = /%(?![01_^])/.test(fn) && Array.isArray(ast.arg) && ast.arg.length > 1;

      if (parenRequired) {
        // Parenthesis are required if argument list is longer than 1
        result += wrapFence.apply(void 0, [ast.fence || '(),'].concat(mathJson_toConsumableArray(ast.arg.map(function (x) {
          return asLatex(x, config);
        }))));
      } else if (Array.isArray(ast.arg) && ast.arg.length > 0) {
        // The parenthesis may be optional...
        var arg0 = asLatex(getArg(ast, 0), config);
        var arg1 = asLatex(getArg(ast, 1), config);

        var argsn = mathJson_toConsumableArray(ast.arg);

        if (/%0/.test(fn)) {
          result = result.replace('%0', arg0);
          argsn.shift();
        }

        if (/%1/.test(fn)) {
          result = result.replace('%1', arg1);
          argsn.shift();
        }

        if (argsn.length > 0) {
          argstring = wrapFence.apply(void 0, [ast.fence || '(),'].concat(mathJson_toConsumableArray(argsn.map(function (x) {
            return asLatex(x, config);
          }))));
        }
      } else {
        // Empty argument list
        argstring = wrapFence(ast.fence || '(),', '');
      }

      if (hasSup(ast)) {
        result = result.replace('%^', '^{' + asLatex(ast.sup, config) + '}');
      } else {
        result = result.replace('%^', '');
      }

      if (hasSub(ast)) {
        result = result.replace('%_', '_{' + asLatex(ast.sub, config) + '}');
      } else {
        result = result.replace('%_', '');
      } // Insert the arguments in the function template (%)


      result = result.replace(/%(?![01_^])/, argstring); // If there are any placeholders left, remove them

      result = result.replace('%0', '').replace('%1', '');
    }
  } else if (typeof ast.sym === 'string') {
    result = asSymbol(ast); // Is it a Unicode value?

    var m = result.match(/^&#x([0-9a-f]+);$/i);

    if (m && m[1]) {
      result = String.fromCodePoint(parseInt(m[1], 16));
    } else {
      m = result.match(/^&#([0-9]+);$/i);

      if (m && m[1]) {
        result = String.fromCodePoint(parseInt(m[1]));
      }
    } // Is there a variant info attached to it?


    if (typeof ast.variant === 'string') {
      var MATH_VARIANTS = {
        'normal': 'mathrm',
        'double-struck': 'mathbb',
        'bold': 'mathbf',
        // 'script': 'mathcal',
        'fraktur': 'mathfrak',
        'script': 'mathscr',
        'sans-serif': 'mathsf',
        'monospace': 'mathtt'
      };
      result = '\\' + MATH_VARIANTS[ast.variant] + '{' + result + '}';
    }

    if (hasSup(ast)) result += '^{' + asLatex(ast.sup, config) + '}';
    if (hasSub(ast)) result += '_{' + asLatex(ast.sub, config) + '}';
  } else if (typeof ast.text === 'string') {
    result = '\\text{' + ast.text + '}';
  } // If there was an error attached to this node,
  // display it on a red background


  if (typeof ast.error === 'string') {
    result = '\\bbox[#F56165]{' + result + '}';
  }

  return result;
} // Export the public interface for this module


/* harmony default export */ var mathJson = ({
  asLatex: asLatex,
  asMachineNumber: asMachineNumber,
  isNumber: mathJson_isNumber,
  asSymbol: asSymbol
});
// CONCATENATED MODULE: ./packages/addons/outputSpokenText.js


 // Markup
// Two common flavor of markups: SSML and 'mac'. The latter is only available
// when using the native TTS synthesizer on Mac OS.
// Use SSML in the production rules below. The markup will either be striped
// off or replaced with the 'mac' markup as necessary.
//
// SSML                                             Mac
// ----                                             ----
// <emphasis>WORD</emphasis>                        [[emph +]]WORD
// <break time="150ms"/>                            [[slc 150]]
// <say-as interpret-as="character">A</say-as>      [[char LTRL] A [[char NORM]]
// https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/SpeechSynthesisProgrammingGuide/FineTuning/FineTuning.html#//apple_ref/doc/uid/TP40004365-CH5-SW3
// https://pdfs.semanticscholar.org/8887/25b82b8dbb45dd4dd69b36a65f092864adb0.pdf
// "<audio src='non_existing_file.au'>File could not be played.</audio>"
// "I am now <prosody rate='+0.06'>speaking 6% faster.</prosody>"

var PRONUNCIATION = {
  '\\alpha': 'alpha ',
  '\\mu': 'mew ',
  '\\sigma': 'sigma ',
  '\\pi': 'pie ',
  '\\imaginaryI': 'eye ',
  '\\sum': 'Summation ',
  '\\prod': 'Product ',
  'a': '<phoneme alphabet="ipa" ph="eɪ">a</phoneme>',
  'A': 'capital <phoneme alphabet="ipa" ph="eɪ">A</phoneme>',
  '+': 'plus ',
  '-': 'minus ',
  ';': '<break time="150ms"/> semi-colon <break time="150ms"/>',
  ',': '<break time="150ms"/> comma  <break time="150ms"/>',
  '|': '<break time="150ms"/>Vertical bar<break time="150ms"/>',
  '(': '<break time="150ms"/>Open paren. <break time="150ms"/>',
  ')': '<break time="150ms"/> Close paren. <break time="150ms"/>',
  '=': 'equals ',
  '<': 'is less than ',
  '\\lt': 'is less than ',
  '<=': 'is less than or equal to ',
  '\\le': 'is less than or equal to ',
  '\\gt': 'is greater than ',
  '>': 'is greater than ',
  '\\ge': 'is greater than or equal to ',
  '\\geq': 'is greater than or equal to ',
  '\\leq': 'is less than or equal to ',
  '!': 'factorial ',
  '\\sin': 'sine ',
  '\\cos': 'cosine ',
  "\u200B": '',
  "\u2212": 'minus ',
  ':': '<break time="150ms"/> such that <break time="200ms"/> ',
  '\\colon': '<break time="150ms"/> such that <break time="200ms"/> ',
  '\\hbar': 'etch bar ',
  '\\iff': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
  '\\Longleftrightarrow': '<break time="200ms"/>if, and only if, <break time="200ms"/>',
  '\\land': 'and ',
  '\\lor': 'or ',
  '\\neg': 'not ',
  '\\div': 'divided by ',
  '\\forall': 'for all ',
  '\\exists': 'there exists ',
  '\\nexists': 'there does not exists ',
  '\\in': 'element of ',
  '\\N': 'the set <break time="150ms"/><say-as interpret-as="character">n</say-as>',
  '\\C': 'the set <break time="150ms"/><say-as interpret-as="character">c</say-as>',
  '\\Z': 'the set <break time="150ms"/><say-as interpret-as="character">z</say-as>',
  '\\Q': 'the set <break time="150ms"/><say-as interpret-as="character">q</say-as>',
  '\\infty': 'infinity ',
  '\\nabla': 'nabla ',
  '\\partial': 'partial derivative of ',
  '\\cdots': 'dot dot dot ',
  '\\Rightarrow': 'implies ',
  '\\lbrace': '<break time="150ms"/>open brace<break time="150ms"/>',
  '\\{': '<break time="150ms"/>open brace<break time="150ms"/>',
  '\\rbrace': '<break time="150ms"/>close brace<break time="150ms"/>',
  '\\}': '<break time="150ms"/>close brace<break time="150ms"/>',
  '\\langle': '<break time="150ms"/>left angle bracket<break time="150ms"/>',
  '\\rangle': '<break time="150ms"/>right angle bracket<break time="150ms"/>',
  '\\lfloor': '<break time="150ms"/>open floor<break time="150ms"/>',
  '\\rfloor': '<break time="150ms"/>close floor<break time="150ms"/>',
  '\\lceil': '<break time="150ms"/>open ceiling<break time="150ms"/>',
  '\\rceil': '<break time="150ms"/>close ceiling<break time="150ms"/>',
  '\\vert': '<break time="150ms"/>vertical bar<break time="150ms"/>',
  '\\mvert': '<break time="150ms"/>divides<break time="150ms"/>',
  '\\lvert': '<break time="150ms"/>left vertical bar<break time="150ms"/>',
  '\\rvert': '<break time="150ms"/>right vertical bar<break time="150ms"/>',
  // '\\lbrack':		'left bracket',
  // '\\rbrack':		'right bracket',
  '\\lbrack': '<break time="150ms"/> open square bracket <break time="150ms"/>',
  '\\rbrack': '<break time="150ms"/> close square bracket <break time="150ms"/>',
  // need to add code to detect singluar/plural. Until then spoken as plural since that is vastly more common
  // note: need to worry about intervening &InvisibleTimes;.
  // note: need to also do this when in numerator of fraction and number preceeds fraction
  // note: need to do this for <msup>
  'mm': 'millimeters',
  'cm': 'centimeters',
  'km': 'kilometers',
  'kg': 'kilograms'
};

function getSpokenName(latex) {
  var result = editor_popover.NOTES[latex];

  if (!result && latex.charAt(0) === '\\') {
    result = ' ' + latex.replace('\\', '') + ' ';
  } // If we got more than one result (from NOTES),
  // pick the first one.


  if (Array.isArray(result)) {
    result = result[0];
  }

  return result;
}

function outputSpokenText_platform(p) {
  var result = 'other';

  if (navigator && navigator.platform && navigator.userAgent) {
    if (/^(mac)/i.test(navigator.platform)) {
      result = 'mac';
    } else if (/^(win)/i.test(navigator.platform)) {
      result = 'win';
    } else if (/(android)/i.test(navigator.userAgent)) {
      result = 'android';
    } else if (/(iphone)/i.test(navigator.userAgent) || /(ipod)/i.test(navigator.userAgent) || /(ipad)/i.test(navigator.userAgent)) {
      result = 'ios';
    } else if (/\bCrOS\b/i.test(navigator.userAgent)) {
      result = 'chromeos';
    }
  }

  return result === p ? p : '!' + p;
}

function isAtomic(mathlist) {
  var count = 0;

  if (mathlist && Array.isArray(mathlist)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = mathlist[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var atom = _step.value;

        if (atom.type !== 'first') {
          count += 1;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return count === 1;
}

function atomicID(mathlist) {
  if (mathlist && Array.isArray(mathlist)) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = mathlist[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var atom = _step2.value;

        if (atom.type !== 'first' && atom.id) {
          return atom.id.toString();
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  return '';
}

function atomicValue(mathlist) {
  var result = '';

  if (mathlist && Array.isArray(mathlist)) {
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = mathlist[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var atom = _step3.value;

        if (atom.type !== 'first' && typeof atom.body === 'string') {
          result += atom.body;
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  }

  return result;
}

mathAtom.toSpeakableFragment = function (atom, options) {
  function letter(c) {
    var result = '';

    if (!options.textToSpeechMarkup) {
      if (/[a-z]/.test(c)) {
        result += " '" + c.toUpperCase() + "'";
      } else if (/[A-Z]/.test(c)) {
        result += " 'capital " + c.toUpperCase() + "'";
      } else {
        result += c;
      }
    } else {
      if (/[a-z]/.test(c)) {
        result += ' <say-as interpret-as="character">' + c + '</say-as>';
      } else if (/[A-Z]/.test(c)) {
        result += 'capital ' + c.toLowerCase() + '';
      } else {
        result += c;
      }
    }

    return result;
  }

  function emph(s) {
    return '<emphasis>' + s + '</emphasis>';
  }

  if (!atom) return '';
  var result = '';

  if (atom.id && options.speechMode === 'math') {
    result += '<mark name="' + atom.id.toString() + '"/>';
  }

  if (Array.isArray(atom)) {
    var isInDigitRun = false; // need to group sequence of digits

    for (var i = 0; i < atom.length; i++) {
      if (i < atom.length - 2 && atom[i].type === 'mopen' && atom[i + 2].type === 'mclose' && atom[i + 1].type === 'mord') {
        result += ' of ';
        result += emph(mathAtom.toSpeakableFragment(atom[i + 1], options));
        i += 2; // '.' and ',' should only be allowed if prev/next entry is a digit
        // However, if that isn't the case, this still works because 'toSpeakableFragment' is called in either case.
      } else if (atom[i].mode === 'text') {
        result += atom[i].body ? atom[i].body : ' ';
      } else if (atom[i].type === 'mord' && /[0123456789,.]/.test(atom[i].body)) {
        if (isInDigitRun) {
          result += atom[i].body;
        } else {
          isInDigitRun = true;
          result += mathAtom.toSpeakableFragment(atom[i], options);
        }
      } else {
        isInDigitRun = false;
        result += mathAtom.toSpeakableFragment(atom[i], options);
      }
    }
  } else if (atom.mode === 'text') {
    result = atom.body;
  } else {
    var numer = '';
    var denom = '';
    var body = '';
    var supsubHandled = false;

    switch (atom.type) {
      case 'group':
      case 'root':
        result += mathAtom.toSpeakableFragment(atom.body, options);
        break;

      case 'genfrac':
        numer = mathAtom.toSpeakableFragment(atom.numer, options);
        denom = mathAtom.toSpeakableFragment(atom.denom, options);

        if (isAtomic(atom.numer) && isAtomic(atom.denom)) {
          var COMMON_FRACTIONS = {
            '1/2': ' half ',
            '1/3': ' one third ',
            '2/3': ' two third',
            '1/4': ' one quarter ',
            '3/4': ' three quarter ',
            '1/5': ' one fifth ',
            '2/5': ' two fifths ',
            '3/5': ' three fifths ',
            '4/5': ' four fifths ',
            '1/6': ' one sixth ',
            '5/6': ' five sixths ',
            '1/8': ' one eight ',
            '3/8': ' three eights ',
            '5/8': ' five eights ',
            '7/8': ' seven eights ',
            '1/9': ' one ninth ',
            '2/9': ' two ninths ',
            '4/9': ' four ninths ',
            '5/9': ' five ninths ',
            '7/9': ' seven ninths ',
            '8/9': ' eight ninths ' // '1/10':     ' one tenth ',
            // '1/12':     ' one twelfth ',
            // 'x/2':     ' <say-as interpret-as="character">X</say-as> over 2',

          };
          var commonFraction = COMMON_FRACTIONS[atomicValue(atom.numer) + '/' + atomicValue(atom.denom)];

          if (commonFraction) {
            result = commonFraction;
          } else {
            result += numer + ' over ' + denom;
          }
        } else {
          result += ' the fraction <break time="150ms"/>' + numer + ', over <break time="150ms"/>' + denom + '.<break time="150ms"/> End fraction.<break time="150ms"/>';
        }

        break;

      case 'surd':
        body = mathAtom.toSpeakableFragment(atom.body, options);

        if (!atom.index) {
          if (isAtomic(atom.body)) {
            result += ' the square root of ' + body + ' , ';
          } else {
            result += ' the square root of <break time="200ms"/>' + body + '. <break time="200ms"/> End square root';
          }
        } else {
          var index = mathAtom.toSpeakableFragment(atom.index, options);
          index = index.trim();
          var index2 = index.replace(/<mark([^/]*)\/>/g, '');

          if (index2 === '3') {
            result += ' the cube root of <break time="200ms"/>' + body + '. <break time="200ms"/> End cube root';
          } else if (index2 === 'n') {
            result += ' the nth root of <break time="200ms"/>' + body + '. <break time="200ms"/> End root';
          } else {
            result += ' the root with index: <break time="200ms"/>' + index + ', of <break time="200ms"/>' + body + '. <break time="200ms"/> End root';
          }
        }

        break;

      case 'accent':
        break;

      case 'leftright':
        result += PRONUNCIATION[atom.leftDelim] || atom.leftDelim;
        result += mathAtom.toSpeakableFragment(atom.body, options);
        result += PRONUNCIATION[atom.rightDelim] || atom.rightDelim;
        break;

      case 'line':
        // @todo
        break;

      case 'rule':
        // @todo
        break;

      case 'overunder':
        // @todo
        break;

      case 'overlap':
        // @todo
        break;

      case 'placeholder':
        result += 'placeholder ' + atom.body;
        break;

      case 'delim':
      case 'sizeddelim':
      case 'mord':
      case 'minner':
      case 'mbin':
      case 'mrel':
      case 'mpunct':
      case 'mopen':
      case 'mclose':
      case 'textord':
        {
          var command = atom.latex ? atom.latex.trim() : '';

          if (command === '\\mathbin' || command === '\\mathrel' || command === '\\mathopen' || command === '\\mathclose' || command === '\\mathpunct' || command === '\\mathord' || command === '\\mathinner') {
            result = mathAtom.toSpeakableFragment(atom.body, options);
            break;
          }

          var atomValue = atom.body;
          var latexValue = atom.latex;

          if (atom.type === 'delim' || atom.type === 'sizeddelim') {
            atomValue = latexValue = atom.delim;
          }

          if (options.speechMode === 'text') {
            result += atomValue;
          } else {
            if (atom.type === 'mbin') {
              result += '<break time="150ms"/>';
            }

            if (atomValue) {
              var value = PRONUNCIATION[atomValue] || (latexValue ? PRONUNCIATION[latexValue.trim()] : '');

              if (value) {
                result += ' ' + value;
              } else {
                var spokenName = latexValue ? getSpokenName(latexValue.trim()) : '';
                result += spokenName ? spokenName : letter(atomValue);
              }
            } else {
              result += mathAtom.toSpeakableFragment(atom.body, options);
            }

            if (atom.type === 'mbin') {
              result += '<break time="150ms"/>';
            }
          }

          break;
        }

      case 'mop':
        // @todo
        if (atom.body !== "\u200B") {
          // Not ZERO-WIDTH
          var trimLatex = atom.latex ? atom.latex.trim() : '';

          if (trimLatex === '\\sum') {
            if (atom.superscript && atom.subscript) {
              var sup = mathAtom.toSpeakableFragment(atom.superscript, options);
              sup = sup.trim();
              var sub = mathAtom.toSpeakableFragment(atom.subscript, options);
              sub = sub.trim();
              result += ' the summation from <break time="200ms"/>' + sub + '<break time="200ms"/> to  <break time="200ms"/>' + sup + '<break time="200ms"/> of <break time="150ms"/>';
              supsubHandled = true;
            } else if (atom.subscript) {
              var _sub = mathAtom.toSpeakableFragment(atom.subscript, options);

              _sub = _sub.trim();
              result += ' the summation from <break time="200ms"/>' + _sub + '<break time="200ms"/> of <break time="150ms"/>';
              supsubHandled = true;
            } else {
              result += ' the summation of';
            }
          } else if (trimLatex === '\\prod') {
            if (atom.superscript && atom.subscript) {
              var _sup = mathAtom.toSpeakableFragment(atom.superscript, options);

              _sup = _sup.trim();

              var _sub2 = mathAtom.toSpeakableFragment(atom.subscript, options);

              _sub2 = _sub2.trim();
              result += ' the product from <break time="200ms"/>' + _sub2 + '<break time="200ms"/> to <break time="200ms"/>' + _sup + '<break time="200ms"/> of <break time="150ms"/>';
              supsubHandled = true;
            } else if (atom.subscript) {
              var _sub3 = mathAtom.toSpeakableFragment(atom.subscript, options);

              _sub3 = _sub3.trim();
              result += ' the product from <break time="200ms"/>' + _sub3 + '<break time="200ms"/> of <break time="150ms"/>';
              supsubHandled = true;
            } else {
              result += ' the product  of ';
            }
          } else if (trimLatex === '\\int') {
            if (atom.superscript && atom.subscript) {
              var _sup2 = mathAtom.toSpeakableFragment(atom.superscript, options);

              _sup2 = _sup2.trim();

              var _sub4 = mathAtom.toSpeakableFragment(atom.subscript, options);

              _sub4 = _sub4.trim();
              result += ' the integral from <break time="200ms"/>' + emph(_sub4) + '<break time="200ms"/> to <break time="200ms"/>' + emph(_sup2) + ' <break time="200ms"/> of ';
              supsubHandled = true;
            } else {
              result += ' the integral of <break time="200ms"/> ';
            }
          } else if (typeof atom.body === 'string') {
            var _value = PRONUNCIATION[atom.body] || PRONUNCIATION[atom.latex.trim()];

            if (_value) {
              result += _value;
            } else {
              result += ' ' + atom.body;
            }
          } else if (atom.latex && atom.latex.length > 0) {
            if (atom.latex[0] === '\\') {
              result += ' ' + atom.latex.substr(1);
            } else {
              result += ' ' + atom.latex;
            }
          }
        }

        break;

      case 'enclose':
        body = mathAtom.toSpeakableFragment(atom.body, options);

        if (isAtomic(atom.body)) {
          result += ' crossed out ' + body + ' , ';
        } else {
          result += ' crossed out ' + body + '. End cross out';
        }

        break;

      case 'space':
      case 'spacing':
      case 'mathstyle':
      case 'box':
        // @todo
        break;
    }

    if (!supsubHandled && atom.superscript) {
      var _sup3 = mathAtom.toSpeakableFragment(atom.superscript, options);

      _sup3 = _sup3.trim();

      var sup2 = _sup3.replace(/<[^>]*>/g, '');

      if (isAtomic(atom.superscript)) {
        if (options.speechMode === 'math') {
          var id = atomicID(atom.superscript);

          if (id) {
            result += '<mark name="' + id + '"/>';
          }
        }

        if (sup2 === "\u2032") {
          result += ' prime ';
        } else if (sup2 === '2') {
          result += ' squared ';
        } else if (sup2 === '3') {
          result += ' cubed ';
        } else if (isNaN(parseInt(sup2))) {
          result += ' to the ' + _sup3 + '; ';
        } else {
          result += ' to the <say-as interpret-as="ordinal">' + sup2 + '</say-as> power; ';
        }
      } else {
        if (isNaN(parseInt(sup2))) {
          result += ' raised to the ' + _sup3 + '; ';
        } else {
          result += ' raised to the <say-as interpret-as="ordinal">' + sup2 + '</say-as> power; ';
        }
      }
    }

    if (!supsubHandled && atom.subscript) {
      var _sub5 = mathAtom.toSpeakableFragment(atom.subscript, options);

      _sub5 = _sub5.trim();

      if (isAtomic(atom.subscript)) {
        result += ' sub ' + _sub5;
      } else {
        result += ' subscript ' + _sub5 + '. End subscript. ';
      }
    }
  }

  return result;
};
/**
 * @param {MathAtom[]}  atoms The atoms to represent as speakable text.
 * If omitted, `this` is used.
 * @param {Object.<string, any>} speechOptions
 * @private
*/


mathAtom.toSpeakableText = function (atoms, speechOptions) {
  var options = speechOptions ? JSON.parse(JSON.stringify(speechOptions)) : {
    textToSpeechMarkup: '',
    // no markup
    textToSpeechRules: 'mathlive'
  };
  options.speechMode = 'math';

  if (window.sre && options.textToSpeechRules === 'sre') {
    options.generateID = true;
    var mathML = mathAtom.toMathML(atoms, options);

    if (mathML) {
      if (options.textToSpeechMarkup) {
        options.textToSpeechRulesOptions = options.textToSpeechRulesOptions || {};
        options.textToSpeechRulesOptions.markup = options.textToSpeechMarkup;

        if (options.textToSpeechRulesOptions.markup === 'ssml') {
          options.textToSpeechRulesOptions.markup = 'ssml_step';
        }

        options.textToSpeechRulesOptions.rate = options.speechEngineRate;
      }

      if (options.textToSpeechRulesOptions) {
        window.sre.System.getInstance().setupEngine(options.textToSpeechRulesOptions);
      }

      return window.sre.System.getInstance().toSpeech(mathML);
    }

    return '';
  }

  var result = mathAtom.toSpeakableFragment(atoms, options);

  if (options.textToSpeechMarkup === 'ssml') {
    var prosody = '';

    if (options.speechEngineRate) {
      prosody = '<prosody rate="' + options.speechEngineRate + '">';
    }

    result = "<?xml version=\"1.0\"?><speak version=\"1.1\" xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">" + '<amazon:auto-breaths>' + prosody + '<p><s>' + result + '</s></p>' + (prosody ? '</prosody>' : '') + '</amazon:auto-breaths>' + '</speak>';
  } else if (options.textToSpeechMarkup === 'mac' && outputSpokenText_platform('mac') === 'mac') {
    // Convert SSML to Mac markup
    result = result.replace(/<mark([^/]*)\/>/g, '').replace(/<emphasis>/g, '[[emph+]]').replace(/<\/emphasis>/g, '').replace(/<break time="([0-9]*)ms"\/>/g, '[[slc $1]]').replace(/<say-as[^>]*>/g, '').replace(/<\/say-as>/g, '');
  } else {
    // If no markup was requested, or 'mac' markup, but we're not on a mac,
    // remove any that we may have
    // Strip out the SSML markup
    result = result.replace(/<[^>]*>/g, '').replace(/\s{2,}/g, ' ');
  }

  return result;
}; // Export the public interface for this module


/* harmony default export */ var outputSpokenText = ({});
// CONCATENATED MODULE: ./packages/editor/editor-mathfield.js
function editor_mathfield_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { editor_mathfield_typeof = function _typeof(obj) { return typeof obj; }; } else { editor_mathfield_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return editor_mathfield_typeof(obj); }

function editor_mathfield_toConsumableArray(arr) { return editor_mathfield_arrayWithoutHoles(arr) || editor_mathfield_iterableToArray(arr) || editor_mathfield_nonIterableSpread(); }

function editor_mathfield_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function editor_mathfield_iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function editor_mathfield_arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function editor_mathfield_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function editor_mathfield_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { editor_mathfield_ownKeys(Object(source), true).forEach(function (key) { editor_mathfield_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { editor_mathfield_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function editor_mathfield_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function editor_mathfield_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function editor_mathfield_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function editor_mathfield_createClass(Constructor, protoProps, staticProps) { if (protoProps) editor_mathfield_defineProperties(Constructor.prototype, protoProps); if (staticProps) editor_mathfield_defineProperties(Constructor, staticProps); return Constructor; }

/**
 *
 * See {@linkcode MathField}
 * @module editor/mathfield
 * @private
 */



















/*
    Note:
    The OutputLatex, OutputMathML, mathJson and OutputSpokenText  modules are required,
    even though they are not referenced directly.

    They modify the MathAtom class, adding toLatex(), toAST(), toMathML() and
    toSpeakableText() respectively.
*/

/* The default eslint parser, espree, does not parse the "declare type" correctly.
   Could use a different parser (babel-eslint), but to avoid bringing in another
   dependency, just turn off linting for this line */

/* eslint-disable */

/**
 * @typedef {function} MathFieldCallback
 * @param {MathField} mathfield
 * @return {void}
 * @global
 */

/* eslint-enable */

/**
 @typedef MathFieldConfig
 @type {Object}
 @property {string} locale?
 @property {object<string, string>} strings?
 @property {number} horizontalSpacingScale?
 @property {string} namespace?
 @property {function} substituteTextArea?
 @property {"math" | "text"} defaultMode?
 @property {MathFieldCallback} onFocus?
 @property {MathFieldCallback} onBlur?
 @property {function} onKeystroke?
 @property {function} onAnnounce?
 @property {boolean} overrideDefaultInlineShortcuts?
 @property {object<string, string>} inlineShortcuts?
 @property {number} inlineShortcutTimeout?
 @property {object<string, string>} macros?
 @property {boolean} smartFence?
 @property {boolean} smartSuperscript?
 @property {number} scriptDepth?
 @property {boolean} removeExtraneousParentheses?
 @property {boolean} ignoreSpacebarInMathMode?
 @property {string} virtualKeyboardToggleGlyph?
 @property {"manual" | "onfocus" | "off" } virtualKeyboardMode?
 @property {"all" | "numeric" | "roman" | "greek" | "functions" | "command" | string} virtualKeyboards?
 @property {"qwerty" | "azerty" | "qwertz" | "dvorak" | "colemak"} virtualKeyboardRomanLayout?
 @property {object<string, string>} customVirtualKeyboardLayers?
 @property {object<string, object>} customVirtualKeyboards?
 @property {"material" | "apple" | ""} virtualKeyboardTheme?
 @property {boolean} keypressVibration?
 @property {string} keypressSound?
 @property {string} plonkSound?
 @property {"mathlive" | "sre"} textToSpeechRules?
 @property {"ssml" | "mac"} textToSpeechMarkup?
 @property {object} textToSpeechRulesOptions?
 @property {"local" | "amazon"} speechEngine?
 @property {string} speechEngineVoice?
 @property {string} speechEngineRate?
 @property {function} onMoveOutOf?
 @property {function} onTabOutOf?
 @property {MathFieldCallback} onContentWillChange?
 @property {MathFieldCallback} onContentDidChange?
 @property {MathFieldCallback} onSelectionWillChange?
 @property {MathFieldCallback} onSelectionDidChange?
 @property {function} onUndoStateWillChange?
 @property {function} onUndoStateDidChange?
 @property {function} onModeChange?
 @property {function} onVirtualKeyboardToggle?
 @property {function} onReadAloudStatus?
 @property {function} handleSpeak?
 @property {function} handleReadAloud?
 @global
 */

var HAPTIC_FEEDBACK_DURATION = 3; // in ms

var AUDIO_FEEDBACK_VOLUME = 0.5; // from 0.0 to 1.0

var editor_mathfield_changeType = null;

function on(el, selectors, listener, options) {
  selectors = selectors.split(' ');
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = selectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var sel = _step.value;
      var m = sel.match(/(.*):(.*)/);

      if (m) {
        var options2 = options || {};

        if (m[2] === 'active') {
          options2.passive = false;
        } else {
          options2[m[2]] = true;
        }

        el.addEventListener(m[1], listener, options2);
      } else {
        el.addEventListener(sel, listener, options);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

function off(el, selectors, listener, options) {
  selectors = selectors.split(' ');
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = selectors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var sel = _step2.value;
      var m = sel.match(/(.*):(.*)/);

      if (m) {
        var options2 = options || {};

        if (m[2] === 'active') {
          options2.passive = false;
        } else {
          options2[m[2]] = true;
        }

        el.removeEventListener(m[1], listener, options2);
      } else {
        el.removeEventListener(sel, listener, options);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}

function getSharedElement(id, cls) {
  var result = document.getElementById(id);

  if (result) {
    result.setAttribute('data-refcount', parseInt(result.getAttribute('data-refcount')) + 1);
  } else {
    result = document.createElement('div');
    result.setAttribute('aria-hidden', 'true');
    result.setAttribute('data-refcount', '1');
    result.className = cls;
    result.id = id;
    document.body.appendChild(result);
  }

  return result;
}

function releaseSharedElement(el) {
  if (!el) return null;
  var refcount = parseInt(el.getAttribute('data-refcount'));

  if (!refcount || refcount === 1) {
    el.remove();
  } else {
    el.setAttribute('data-refcount', refcount - 1);
  }

  return el;
}
/**
 * Checks if the argument is a valid Mathfield.
 * After a Mathfield has been destroyed (for example by calling revertToOriginalContent()
 * the Mathfield is no longer valid. However, there may be some pending
 * operations invoked via requestAnimationFrame() for example, that would
 * need to ensure the mathfield is still valid by the time they're executed.
 * @private
 */


function isValidMathfield(mf) {
  return mf.element && mf.element.mathfield === mf;
}
/**
 * Validate a style specification object
 * @param {object} style
 * @private
 */

function validateStyle(style) {
  var result = {};

  if (typeof style.mode === 'string') {
    result.mode = style.mode.toLowerCase();
    console.assert(result.mode === 'math' || result.mode === 'text' || result.mode === 'command');
  }

  if (typeof style.color === 'string') {
    result.color = style.color;
  }

  if (typeof style.backgroundColor === 'string') {
    result.backgroundColor = style.backgroundColor;
  }

  if (typeof style.fontFamily === 'string') {
    result.fontFamily = style.fontFamily;
  }

  if (typeof style.series === 'string') {
    result.fontSeries = style.series;
  }

  if (typeof style.fontSeries === 'string') {
    result.fontSeries = style.fontSeries.toLowerCase();
  }

  if (result.fontSeries) {
    result.fontSeries = {
      "bold": 'b',
      "medium": 'm',
      "normal": 'mn'
    }[result.fontSeries] || result.fontSeries;
  }

  if (typeof style.shape === 'string') {
    result.fontShape = style.shape;
  }

  if (typeof style.fontShape === 'string') {
    result.fontShape = style.fontShape.toLowerCase();
  }

  if (result.fontShape) {
    result.fontShape = {
      "italic": 'it',
      "up": 'n',
      "upright": 'n',
      "normal": 'n'
    }[result.fontShape] || result.fontShape;
  }

  if (typeof style.size === 'string') {
    result.fontSize = style.size;
  } else if (typeof style.size === 'number') {
    result.fontSize = 'size' + Math.min(0, Math.max(10, style.size));
  }

  if (typeof style.fontSize === 'string') {
    result.fontSize = style.fontSize.toLowerCase();
  }

  if (result.fontSize) {
    result.fontSize = {
      'tiny': 'size1',
      'scriptsize': 'size2',
      'footnotesize': 'size3',
      'small': 'size4',
      'normal': 'size5',
      'normalsize': 'size5',
      'large': 'size6',
      'Large': 'size7',
      'LARGE': 'size8',
      'huge': 'size9',
      'Huge': 'size10'
    }[result.fontSize] || result.fontSize;
  }

  return result;
}
/*
     * **Note**
     * - Method names that begin with `$` are public.
     * - Method names that _begin with_ an underbar `_` are private and meant
     * to be used only by the implementation of the class.
     * - Method names that _end with_ an underbar `_` are selectors. They can
     * be invoked by calling [`MathField.$perform()`]{@link MathField#$perform}. Note
     * that the selector name does not include the underbar.
     *
     * For example:
     * ```
     *    mf.$perform('selectAll');
     * ```
*/

/**
 *
 * @property {HTMLElement} element - The DOM element this mathfield is attached to.
 * @property {Object.<string, any>} config - A set of key/value pairs that can
 * be used to customize the behavior of the mathfield
 * @property {string} id - A unique ID identifying this mathfield
 * @property {boolean} keystrokeCaptionVisible - True if the keystroke caption
 * panel is visible
 * @property {boolean} virtualKeyboardVisible - True if the virtual keyboard is
 * visible
 * @property {string} keystrokeBuffer The last few keystrokes, to look out
 * for inline shortcuts
 * @property {object[]} keystrokeBufferStates The saved state for each of the
 * past keystrokes
 * @class MathField
 * @global
 */


var editor_mathfield_MathField =
/*#__PURE__*/
function () {
  /**
       * To create a mathfield, you would typically use {@linkcode module:MathLive#makeMathField MathLive.makeMathField()}
       * instead of invoking directly this constructor.
       *
       *
       * @param {HTMLElement} element - The DOM element that this mathfield is attached to.
       * Note that `element.mathfield` is this object.
       * @param {MathFieldConfig} config - See {@tutorial CONFIG} for details
       * @method MathField#constructor
       * @param {boolean} longPressed
       * @private
  */
  function MathField(element, config, changeType) {
    var _this = this;

    editor_mathfield_classCallCheck(this, MathField);

    // Setup default config options
    this.$setConfig(config || {});
    this.element = element;
    element.mathfield = this; // Save existing content

    this.longPressed = false;
    this.originalContent = element.innerHTML;
    var elementText = this.element.textContent; // 标记

    if (changeType !== undefined) {
      elementText = this.$latex();
      this.$focus();
    }

    if (elementText) {
      elementText = elementText.trim();
    }

    console.log(element.textContent); // Additional elements used for UI.
    // They are retrieved in order a bit later, so they need to be kept in sync
    // 1.0/ The field, where the math equation will be displayed
    // 1.1/ The virtual keyboard toggle
    // 2/ The popover panel which displays info in command mode
    // 3/ The keystroke caption panel (option+shift+K)
    // 4/ The virtual keyboard
    // 5.0/ The area to stick MathML for screen reading larger exprs (not used right now)
    //      The for the area is that focus would bounce their and then back triggering the
    //         screen reader to read it
    // 5.1/ The aria-live region for announcements

    var markup = '';

    if (!this.config.substituteTextArea) {
      if (/android|ipad|ipod|iphone/i.test(navigator.userAgent)) {
        // On Android or iOS, don't use a textarea, which has the side effect of
        // bringing up the OS virtual keyboard
        if (changeType === 'text') {
          markup += '<span class="ML__textarea">' + '<textarea class="ML__textarea__textarea" autocapitalize="off" autocomplete="off" ' + 'autocorrect="off" spellcheck="false" aria-hidden="true" tabindex="0" >' + '</textarea>' + '</span>';
        } else {
          markup += "<span class='ML__textarea'>\n                <span class='ML__textarea__textarea'\n                    tabindex=\"0\" role=\"textbox\"\n                    style='display:inline-block;height:1px;width:1px' >\n                </span>\n            </span>";
        } // markup += `<span class='ML__textarea'>
        //     <span class='ML__textarea__textarea'
        //         tabindex="0" role="textbox"
        //         style='display:inline-block;height:1px;width:1px' >
        //     </span>
        // </span>`;

      } else {
        markup += '<span class="ML__textarea">' + '<textarea class="ML__textarea__textarea" autocapitalize="off" autocomplete="off" ' + 'autocorrect="off" spellcheck="false" aria-hidden="true" tabindex="0">' + '</textarea>' + '</span>';
      }
    } else {
      if (typeof this.config.substituteTextArea === 'string') {
        markup += this.config.substituteTextArea;
      } else {
        // We don't really need this one, but we keep it here so that the
        // indexes below remain the same whether a substituteTextArea is
        // provided or not.
        markup += '<span></span>';
      }
    }

    markup += '<span class="ML__fieldcontainer">' + '<span class="ML__fieldcontainer__field"></span>'; // If no value is specified for the virtualKeyboardMode, use
    // `onfocus` on touch-capable devices and `off` otherwise.

    if (!this.config.virtualKeyboardMode) {
      this.config.virtualKeyboardMode = window.matchMedia && window.matchMedia("(any-pointer: coarse)").matches ? 'onfocus' : 'off';
    } // Only display the virtual keyboard toggle if the virtual keyboard mode is
    // 'manual'
    // if (this.config.virtualKeyboardMode === 'manual' && changeType == 'text') {


    if (changeType == 'text') {
      markup += "<button class=\"ML__virtual-keyboard-toggle\" data-tooltip=\"\u6C49\u5B57\u8F93\u5165\">"; // data-tooltip='Toggle Virtual Keyboard'

      if (this.config.virtualKeyboardToggleGlyph) {
        markup += this.config.virtualKeyboardToggleGlyph;
      } else {
        // <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/></svg>
        markup += "<span style=\"width:32px;height:32px;display:flex;justify-content:center;align-items:center\">\n            <svg class='icon' style=\"font-size:22px\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1050 1000\"><path d=\"M810 101.7c61.8 0 112 50.2 112 112V811c0 61.8-50.2 112-112 112H212.7c-61.8 0-112-50.2-112-112V213.7c0-61.8 50.2-112 112-112H810m0-37.3H212.7c-82.5 0-149.3 66.9-149.3 149.3V811c0 82.5 66.9 149.3 149.3 149.3H810c82.5 0 149.3-66.9 149.3-149.3V213.7c0-82.4-66.8-149.3-149.3-149.3z\" fill=\"#333333\" p-id=\"8715\"></path><path d=\"M483.4 166.3h55.2v134.3h267.8v350.6h-53.7v-47H538.6v254.4h-55.2V604.2H270v47h-53.7V300.5h267.1V166.3zM270 551.9h213.4V352.8H270v199.1z m268.6 0h214.1V352.8H538.6v199.1z\" fill=\"#333333\" p-id=\"8716\"></path></svg>\n            </span>";
      }

      markup += '</button>';
    } else {
      // markup += '<span ></span>';
      markup += "<div class=\"ML__virtual-keyboard-toggle\" data-tooltip=\"\u516C\u5F0F\u8F93\u5165\">\n        <span style='width:32px;height:32px;display:flex;justify-content:center;align-items:center'>\n            <svg class='icon' style=\"font-size:22px\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1050 1000\"><path d=\"M955.74 34.14a34.16 34.16 0 0 1 34.12 34.12v887.48a34.16 34.16 0 0 1-34.12 34.12H68.26a34.16 34.16 0 0 1-34.12-34.12V68.26a34.16 34.16 0 0 1 34.12-34.12h887.48m0-34.14H68.26A68.26 68.26 0 0 0 0 68.26v887.48A68.26 68.26 0 0 0 68.26 1024h887.48A68.26 68.26 0 0 0 1024 955.74V68.26A68.26 68.26 0 0 0 955.74 0z\" fill=\"\" p-id=\"6126\"></path><path d=\"M328.18 513.02l62.8 6.84-11.6 31.38H518v54.62a253.7 253.7 0 0 1-64.84 107.86q49.8 22.56 79.86 38.24l-34.82 51.88q-38.92-22.52-95.56-49.16-66.24 43.02-169.3 70.32l-31.42-55.3q76.44-18.42 131.76-45.06-32-13.64-89.42-36.18 26-43 44.36-79.18H217.6v-58h96.92z m-108.56-190.48h129.04V196.96H408v125.58h118.78v56.68H408v3.42q51.2 21.18 110.6 52.56l-34.12 51.2Q436 447.5 408 429.74v76.46h-59.34v-115.38q-33.44 73.74-112.66 129.04l-32-52.58q70.34-40.26 101.72-88h-86zM280.4 210a644.74 644.74 0 0 1 41.6 81.14l-50.5 23.22q-21.14-51.18-45.06-86.7z m177.48 399.36h-103.76a581.56 581.56 0 0 1-30.72 54q38.9 13.68 68.26 25.26 44.34-34.26 66.22-79.34z m67.6-378.2a471.62 471.62 0 0 1-51.88 85.34l-47.8-25.28a516.16 516.16 0 0 0 48.48-84.64z m66.22 249.16q-18.46 43.02-34.14 68.96l-40.96-50.6Q574 386 594.42 195.58l63.58 10.92q-7.52 56.68-13.66 88.74h173.38v62.12h-38.98q-6.16 166.6-60 283.32 51.88 84 120.16 129.02l-37.56 54.62q-64.86-47.1-114-124.26a468 468 0 0 1-121.52 128.36l-34.12-55.3a373.8 373.8 0 0 0 121.5-133.8q-35.56-70.28-61.5-159.08z m39.58-122.88l-8.18 30.74q23.88 105.12 59.38 184.32 32-90.8 36.18-215.06z\" fill=\"\" p-id=\"6127\"></path></svg>\n        </span>\n        </div>"; // markup += `<button class="ML__virtual-keyboard-toggle" data-tooltip="${l10n('tooltip.toggle virtual keyboard')}">
      //     <span style="width: 21px; margin-top: 4px;">
      //         <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512">
      //             <path d="M528 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm16 336c0 8.823-7.177 16-16 16H48c-8.823 0-16-7.177-16-16V112c0-8.823 7.177-16 16-16h480c8.823 0 16 7.177 16 16v288zM168 268v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-336 80v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm384 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zM120 188v-24c0-6.627-5.373-12-12-12H84c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm96 0v-24c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h24c6.627 0 12-5.373 12-12zm-96 152v-8c0-6.627-5.373-12-12-12H180c-6.627 0-12 5.373-12 12v8c0 6.627 5.373 12 12 12h216c6.627 0 12-5.373 12-12z"/>
      //         </svg>
      //     </span>
      // </button>`;
    }

    markup += '</span>';
    markup += "\n    <div class=\"sr-only\">\n        <span aria-live=\"assertive\" aria-atomic=\"true\"></span>\n        <span></span>\n    </div>\n";
    this.element.innerHTML = markup;
    var iChild = 0; // index of child -- used to make changes below easier

    if (typeof this.config.substituteTextArea === 'function') {
      this.textarea = this.config.substituteTextArea();
    } else {
      this.textarea = this.element.children[iChild++].firstElementChild;
    }

    this.field = this.element.children[iChild].children[0]; // Listen to 'wheel' events to scroll (horizontally) the field when it overflows

    this.field.addEventListener('wheel', function (ev) {
      ev.preventDefault();
      ev.stopPropagation();
      var wheelDelta = typeof ev.deltaX === 'undefined' ? ev.detail : -ev.deltaX;

      if (!isFinite(wheelDelta)) {
        wheelDelta = ev.wheelDelta / 10;
      }

      _this.field.scroll({
        top: 0,
        left: _this.field.scrollLeft - wheelDelta * 5
      });
    }, {
      passive: false
    });
    this.virtualKeyboardToggleDOMNode = this.element.children[iChild++].children[1];

    if (changeType == 'text') {
      this._attachButtonHandlers(this.virtualKeyboardToggleDOMNode, {
        default: 'changeKeyboard',
        alt: 'changeKeyboard',
        shift: 'changeKeyboard'
      });
    } else {
      this._attachButtonHandlers(this.virtualKeyboardToggleDOMNode, {
        default: 'toggleVirtualKeyboard',
        alt: 'toggleVirtualKeyboardAlt',
        shift: 'toggleVirtualKeyboardShift'
      });
    }

    this.ariaLiveText = this.element.children[iChild].children[0];
    this.accessibleNode = this.element.children[iChild++].children[1]; // Some panels are shared amongst instances of mathfield
    // (there's a single instance in the document)

    this.popover = getSharedElement('mathlive-popover-panel', 'ML__popover');
    this.keystrokeCaption = getSharedElement('mathlive-keystroke-caption-panel', 'ML__keystroke-caption'); // The keystroke caption panel and the command bar are
    // initially hidden

    this.keystrokeCaptionVisible = false;
    this.virtualKeyboardVisible = false;
    this.keystrokeBuffer = '';
    this.keystrokeBufferStates = [];
    this.keystrokeBufferResetTimer = null; // This index indicates which of the suggestions available to
    // display in the popover panel

    this.suggestionIndex = 0; // The input mode (text, math, command)
    // While mathlist.anchorMode() represent the mode of the current selection,
    // this.mode is the mode chosen by the user. It indicates the mode the
    // next character typed will be interpreted in.
    // It is often identical to mathlist.anchorMode() since changing the selection
    // changes the mode, but sometimes it is not, for example when a user
    // enters a mode changing command.

    this.mode = config.defaultMode || 'math';
    this.smartModeSuppressed = false; // Current style (color, weight, italic, etc...)
    // Reflects the style to be applied on next insertion, if any

    this.style = {}; // Focus/blur state

    this.blurred = true;
    on(this.element, 'focus', this);
    on(this.element, 'blur', this); // Capture clipboard events

    on(this.textarea, 'cut', this);
    on(this.textarea, 'copy', this);
    on(this.textarea, 'paste', this); // Delegate keyboard events

    editor_keyboard.delegateKeyboardEvents(this.textarea, {
      container: this.element,
      allowDeadKey: function allowDeadKey() {
        return _this.mode === 'text';
      },
      typedText: this._onTypedText.bind(this),
      paste: this._onPaste.bind(this),
      keystroke: this._onKeystroke.bind(this),
      focus: this._onFocus.bind(this),
      blur: this._onBlur.bind(this)
    }); // Delegate mouse and touch events

    if (window.PointerEvent) {
      // Use modern pointer events if available
      on(this.field, 'pointerdown', this);
    } else {
      on(this.field, 'touchstart:active mousedown', this);
    } // Request notification for when the window is resized (
    // or the device switched from portrait to landscape) to adjust
    // the UI (popover, etc...)


    on(window, 'resize', this); // Override some handlers in the config

    var localConfig = editor_mathfield_objectSpread({}, config);

    localConfig.onSelectionDidChange = MathField.prototype._onSelectionDidChange.bind(this);
    localConfig.onContentDidChange = MathField.prototype._onContentDidChange.bind(this);
    localConfig.onAnnounce = this.config.onAnnounce;
    localConfig.macros = this.config.macros;
    localConfig.removeExtraneousParentheses = this.config.removeExtraneousParentheses;
    this.mathlist = new editor_editableMathlist.EditableMathlist(localConfig, this); // Prepare to manage undo/redo

    this.undoManager = new editor_undo.UndoManager(this.mathlist); // If there was some content in the element, use it for the initial
    // value of the mathfield

    if (elementText.length > 0) {
      this.$latex(elementText);
    } // Now start recording potentially undoable actions


    this.undoManager.startRecording();
    this.undoManager.snapshot(this.config);

    if (changeType) {
      this.$focus();
    }
  }
  /*
       * handleEvent is a function invoked when an event is registered with an
       * object instead ( see `addEventListener()` in `on()`)
       * The name is defined by addEventListener() and cannot be changed.
       * This pattern is used to be able to release bound event handlers,
       * (event handlers that need access to `this`) as the bind() function
       * would create a new function that would have to be kept track off
       * to be able to properly remove the event handler later.
       */


  editor_mathfield_createClass(MathField, [{
    key: "handleEvent",
    value: function handleEvent(evt) {
      var _this2 = this;

      switch (evt.type) {
        case 'focus':
          this._onFocus(evt);

          break;

        case 'blur':
          this._onBlur(evt);

          break;

        case 'touchstart':
          this._onPointerDown(evt);

          break;

        case 'mousedown':
          this._onPointerDown(evt);

          break;

        case 'pointerdown':
          this._onPointerDown(evt);

          break;

        case 'resize':
          {
            if (this._resizeTimer) {
              window.cancelAnimationFrame(this._resizeTimer);
            }

            this._resizeTimer = window.requestAnimationFrame(function () {
              return isValidMathfield(_this2) && _this2._onResize();
            });
            break;
          }

        case 'cut':
          this._onCut(evt);

          break;

        case 'copy':
          this._onCopy(evt);

          break;

        case 'paste':
          this._onPaste(evt);

          break;

        default:
          console.warn('Unexpected event type', evt.type);
      }
    }
    /**
     * Reverts this mathfield to its original content.
     *
     * After this method has been
     * called, no other methods can be called on the object.
     *
     * To turn the
     * element back into a mathfield, call `MathLive.makeMathField()` on the
     * element again to get a new mathfield object.
     *
     * @method MathField#$revertToOriginalContent
     */

  }, {
    key: "$revertToOriginalContent",
    value: function $revertToOriginalContent() {
      this.element.innerHTML = this.originalContent;
      this.element.mathfield = null;
      delete this.accessibleNode;
      delete this.ariaLiveText;
      delete this.field;
      off(this.textarea, 'cut', this);
      off(this.textarea, 'copy', this);
      off(this.textarea, 'paste', this);
      this.textarea.remove();
      delete this.textarea;
      this.virtualKeyboardToggleDOMNode.remove();
      delete this.virtualKeyboardToggleDOMNode;
      delete releaseSharedElement(this.popover);
      delete releaseSharedElement(this.keystrokeCaption);
      delete releaseSharedElement(this.virtualKeyboard);
      delete releaseSharedElement(document.getElementById('mathlive-alternate-keys-panel'));
      off(this.element, 'pointerdown', this);
      off(this.element, 'touchstart:active mousedown', this);
      off(this.element, 'focus', this);
      off(this.element, 'blur', this);
      off(window, 'resize', this);
      delete this.element;
    }
  }, {
    key: "_resetKeystrokeBuffer",
    value: function _resetKeystrokeBuffer() {
      this.keystrokeBuffer = '';
      this.keystrokeBufferStates = [];
      clearTimeout(this.keystrokeBufferResetTimer);
    }
    /**
     * Return the (x,y) client coordinates of the caret
     *
     * @method MathField#_getCaretPosition
     * @private
     */

  }, {
    key: "_getCaretPosition",
    value: function _getCaretPosition() {
      var caret = _findElementWithCaret(this.field);

      if (caret) {
        var bounds = caret.getBoundingClientRect();
        var position = {
          x: bounds.right,
          y: bounds.bottom,
          height: bounds.height
        };
        return position;
      }

      return null;
    }
  }, {
    key: "_getSelectionBounds",
    value: function _getSelectionBounds() {
      var selectedNodes = this.field.querySelectorAll('.ML__selected');

      if (selectedNodes && selectedNodes.length > 0) {
        var selectionRect = {
          top: Infinity,
          bottom: -Infinity,
          left: Infinity,
          right: -Infinity
        }; // Calculate the union of the bounds of all the selected spans

        selectedNodes.forEach(function (node) {
          var bounds = node.getBoundingClientRect();

          if (bounds.left < selectionRect.left) {
            selectionRect.left = bounds.left;
          }

          if (bounds.right > selectionRect.right) {
            selectionRect.right = bounds.right;
          }

          if (bounds.bottom > selectionRect.bottom) {
            selectionRect.bottom = bounds.bottom;
          }

          if (bounds.top < selectionRect.top) {
            selectionRect.top = bounds.top;
          }
        });
        var fieldRect = this.field.getBoundingClientRect();
        var w = selectionRect.right - selectionRect.left;
        var h = selectionRect.bottom - selectionRect.top;
        selectionRect.left = Math.ceil(selectionRect.left - fieldRect.left + this.field.scrollLeft);
        selectionRect.right = selectionRect.left + w;
        selectionRect.top = Math.ceil(selectionRect.top - fieldRect.top);
        selectionRect.bottom = selectionRect.top + h;
        return selectionRect;
      }

      return null;
    }
    /**
     * @param {number} x
     * @param {number} y
     * @param {object} options
     * @param {boolean} options.bias  if 0, the midpoint of the bounding box
     * is considered to return the sibling. If <0, the left sibling is
     * favored, if >0, the right sibling
     * @private
     */

  }, {
    key: "_pathFromPoint",
    value: function _pathFromPoint(x, y, options) {
      options = options || {};
      options.bias = options.bias || 0;
      var result; // Try to find the deepest element that is near the point that was
      // clicked on (the point could be outside of the element)

      var nearest = nearestElementFromPoint(this.field, x, y);
      var el = nearest.element;
      var id = el ? el.getAttribute('data-atom-id') : null;

      if (id) {
        // Let's find the atom that has a matching ID with the element that
        // was clicked on (or near)
        var paths = this.mathlist.filter(function (_path, atom) {
          // If the atom allows children to be selected, match only if
          // the ID of  the atom matches the one we're looking for.
          if (!atom.captureSelection) {
            return atom.id === id;
          } // If the atom does not allow children to be selected
          // (captureSelection === true), the element matches if any of
          // its children has an ID that matches.


          return atom.filter(function (childAtom) {
            return childAtom.id === id;
          }).length > 0;
        });

        if (paths && paths.length > 0) {
          // (There should be exactly one atom that matches this ID...)
          // Set the result to the path to this atom
          result = editor_mathpath.pathFromString(paths[0]).path;

          if (options.bias === 0) {
            // If the point clicked is to the left of the vertical midline,
            // adjust the path to *before* the atom (i.e. after the
            // preceding atom)
            var bounds = el.getBoundingClientRect();

            if (x < bounds.left + bounds.width / 2 && !el.classList.contains('ML__placeholder')) {
              result[result.length - 1].offset = Math.max(0, result[result.length - 1].offset - 1);
            }
          } else if (options.bias < 0) {
            result[result.length - 1].offset = Math.min(this.mathlist.siblings().length - 1, Math.max(0, result[result.length - 1].offset + options.bias));
          }
        }
      }

      return result;
    }
  }, {
    key: "_onPointerDown",
    value: function _onPointerDown(evt) {
      var that = this;
      var anchor;
      var trackingPointer = false;
      var trackingWords = false;
      var dirty = false; // If a mouse button other than the main one was pressed, return
      // console.log(evt.buttons);

      if (evt.buttons !== 1 && evt.buttons !== 0) {
        return;
      } // 解决火狐浏览器触摸事件失效的问题，1的时候为主按钮，0是火狐的触摸事件


      function endPointerTracking(evt) {
        if (window.PointerEvent) {
          off(that.field, 'pointermove', onPointerMove);
          off(that.field, 'pointerend pointerleave pointercancel', endPointerTracking); // off(window, 'pointermove', onPointerMove);
          // off(window, 'pointerup blur', endPointerTracking);

          that.field.releasePointerCapture(evt.pointerId);
        } else {
          off(that.field, 'touchmove', onPointerMove);
          off(that.field, 'touchend touchleave', endPointerTracking);
          off(window, 'mousemove', onPointerMove);
          off(window, 'mouseup blur', endPointerTracking);
        }

        trackingPointer = false;
        clearInterval(scrollInterval);
        that.element.querySelectorAll('.ML__scroller').forEach(function (x) {
          return x.parentNode.removeChild(x);
        });
        evt.preventDefault();
        evt.stopPropagation();
      }

      var scrollLeft = false;
      var scrollRight = false;
      var scrollInterval = setInterval(function () {
        if (scrollLeft) {
          that.field.scroll({
            top: 0,
            left: that.field.scrollLeft - 16
          });
        } else if (scrollRight) {
          that.field.scroll({
            top: 0,
            left: that.field.scrollLeft + 16
          });
        }
      }, 32);

      function onPointerMove(evt) {
        var x = evt.touches ? evt.touches[0].clientX : evt.clientX;
        var y = evt.touches ? evt.touches[0].clientY : evt.clientY; // Ignore events that are within small spatial and temporal bounds
        // of the pointer down

        var hysteresis = evt.pointerType === 'touch' ? 20 : 5;

        if (Date.now() < anchorTime + 500 && Math.abs(anchorX - x) < hysteresis && Math.abs(anchorY - y) < hysteresis) {
          evt.preventDefault();
          evt.stopPropagation();
          return;
        }

        var fieldBounds = that.field.getBoundingClientRect();
        scrollRight = x > fieldBounds.right;
        scrollLeft = x < fieldBounds.left;
        var actualAnchor = anchor;

        if (window.PointerEvent) {
          if (!evt.isPrimary) {
            actualAnchor = that._pathFromPoint(evt.clientX, evt.clientY, {
              bias: 0
            });
          }
        } else {
          if (evt.touches && evt.touches.length === 2) {
            actualAnchor = that._pathFromPoint(evt.touches[1].clientX, evt.touches[1].clientY, {
              bias: 0
            });
          }
        }

        var focus = that._pathFromPoint(x, y, {
          bias: x <= anchorX ? x === anchorX ? 0 : -1 : +1
        });

        if (focus && that.mathlist.setRange(actualAnchor, focus, {
          extendToWordBoundary: trackingWords
        })) {
          // Re-render if the range has actually changed
          that._requestUpdate();
        } // Prevent synthetic mouseMove event when this is a touch event


        evt.preventDefault();
        evt.stopPropagation();
      }

      var anchorX = evt.touches ? evt.touches[0].clientX : evt.clientX;
      var anchorY = evt.touches ? evt.touches[0].clientY : evt.clientY;
      var anchorTime = Date.now(); // Calculate the tap count

      if (lastTap && Math.abs(lastTap.x - anchorX) < 5 && Math.abs(lastTap.y - anchorY) < 5 && Date.now() < lastTap.time + 500) {
        tapCount += 1;
        lastTap.time = anchorTime;
      } else {
        lastTap = {
          x: anchorX,
          y: anchorY,
          time: anchorTime
        };
        tapCount = 1;
      }

      var bounds = this.field.getBoundingClientRect();

      if (anchorX >= bounds.left && anchorX <= bounds.right && anchorY >= bounds.top && anchorY <= bounds.bottom) {
        // Focus the mathfield
        if (!this.$hasFocus()) {
          dirty = true;

          if (this.textarea.focus) {
            this.textarea.focus();
          }
        } // Clicking or tapping the field resets the keystroke buffer and
        // smart mode


        this._resetKeystrokeBuffer();

        this.smartModeSuppressed = false;
        anchor = this._pathFromPoint(anchorX, anchorY, {
          bias: 0
        });

        if (anchor) {
          // Create divs to block out pointer tracking to the left and right of
          // the mathfield (to avoid triggering the hover of the virtual
          // keyboard toggle, for example)
          var div = document.createElement('div');
          div.className = 'ML__scroller';
          this.element.appendChild(div);
          div.style.left = bounds.left - 200 + 'px';
          div = document.createElement('div');
          div.className = 'ML__scroller';
          this.element.appendChild(div);
          div.style.left = bounds.right + 'px';

          if (evt.shiftKey) {
            // Extend the selection if the shift-key is down
            this.mathlist.setRange(this.mathlist.path, anchor);
            anchor = editor_mathpath.clone(this.mathlist.path);
            anchor[anchor.length - 1].offset -= 1;
          } else {
            this.mathlist.setPath(anchor, 0);
          } // The selection has changed, so we'll need to re-render


          dirty = true; // Reset any user-specified style

          this.style = {}; // evt.detail contains the number of consecutive clicks
          // for double-click, triple-click, etc...
          // (note that evt.detail is not set when using pointerEvent)

          if (evt.detail === 3 || tapCount > 2) {
            endPointerTracking(evt);

            if (evt.detail === 3 || tapCount === 3) {
              // This is a triple-click
              this.mathlist.selectAll_();
            }
          } else if (!trackingPointer) {
            trackingPointer = true;

            if (window.PointerEvent) {
              on(that.field, 'pointermove', onPointerMove);
              on(that.field, 'pointerend pointercancel pointerup', endPointerTracking);
              that.field.setPointerCapture(evt.pointerId);
            } else {
              on(window, 'blur', endPointerTracking);

              if (evt.touches) {
                // To receive the subsequent touchmove/touch, need to
                // listen to this evt.target.
                // This was a touch event
                on(evt.target, 'touchmove', onPointerMove);
                on(evt.target, 'touchend', endPointerTracking);
              } else {
                on(window, 'mousemove', onPointerMove);
                on(window, 'mouseup', endPointerTracking);
              }
            }

            if (evt.detail === 2 || tapCount === 2) {
              // This is a double-click
              trackingWords = true;
              this.mathlist.selectGroup_();
            }
          }
        }
      } else {
        lastTap = null;
      }

      if (dirty) {
        this._requestUpdate();
      } // Prevent the browser from handling, in particular when this is a
      // touch event prevent the synthetic mouseDown event from being generated


      evt.preventDefault();
    }
  }, {
    key: "_onSelectionDidChange",
    value: function _onSelectionDidChange() {
      // Every atom before the new caret position is now committed
      this.mathlist.commitCommandStringBeforeInsertionPoint(); // If the selection is not collapsed, put it in the textarea
      // This will allow cut/copy to work.

      var result = '';
      this.mathlist.forEachSelected(function (atom) {
        result += atom.toLatex();
      });

      if (result) {
        this.textarea.value = result; // The textarea may be a span (on mobile, for example), so check that
        // it has a select() before calling it.

        if (this.$hasFocus() && this.textarea.select) {
          this.textarea.select();
        }
      } else {
        this.textarea.value = '';
        this.textarea.setAttribute('aria-label', '');
      } // Update the mode


      {
        var previousMode = this.mode; // 自动切换输入模式
        // this.mode = this.mathlist.anchorMode() || this.config.defaultMode;

        this.mode = this.config.defaultMode;

        if (this.mode !== previousMode && typeof this.config.onModeChange === 'function') {
          this.config.onModeChange(this, this.mode);
        }

        if (previousMode === 'command' && this.mode !== 'command') {
          editor_popover.hidePopover(this);
          this.mathlist.removeCommandString();
        }
      } // Defer the updating of the popover position: we'll need the tree to be
      // re-rendered first to get an updated caret position

      editor_popover.updatePopoverPosition(this, {
        deferred: true
      }); // Invoke client handlers, if provided.

      if (typeof this.config.onSelectionDidChange === 'function') {
        this.config.onSelectionDidChange(this);
      }
    }
  }, {
    key: "_onContentDidChange",
    value: function _onContentDidChange() {
      if (this.undoManager.canRedo()) {
        this.element.classList.add('can-redo');
      } else {
        this.element.classList.remove('can-redo');
      }

      if (this.undoManager.canUndo()) {
        this.element.classList.add('can-undo');
      } else {
        this.element.classList.remove('can-undo');
      }

      if (typeof this.config.onContentDidChange === 'function') {
        this.config.onContentDidChange(this);
      }
    }
    /* Returns the speech text of the next atom after the selection or
     *   an 'end of' phrasing based on what structure we are at the end of
     */

  }, {
    key: "_nextAtomSpeechText",
    value: function _nextAtomSpeechText(oldMathlist) {
      function relation(parent, leaf) {
        var EXPR_NAME = {
          //    'array': 'should not happen',
          'numer': 'numerator',
          'denom': 'denominator',
          'index': 'index',
          'body': 'parent',
          'subscript': 'subscript',
          'superscript': 'superscript'
        };
        var PARENT_NAME = {
          'enclose': 'cross out',
          'leftright': 'fence',
          'surd': 'square root',
          'root': 'math field'
        };
        return leaf.relation === 'body' ? PARENT_NAME[parent.type] : EXPR_NAME[leaf.relation];
      }

      var oldPath = oldMathlist ? oldMathlist.path : [];
      var path = this.mathlist.path;
      var leaf = path[path.length - 1];
      var result = '';

      while (oldPath.length > path.length) {
        result += 'out of ' + relation(oldMathlist.parent(), oldPath[oldPath.length - 1]) + '; ';
        oldPath.pop();
      }

      if (!this.mathlist.isCollapsed()) {
        return speakableText(this, '', this.mathlist.getSelectedAtoms());
      } // announce start of denominator, etc


      var relationName = relation(this.mathlist.parent(), leaf);

      if (leaf.offset === 0) {
        result += (relationName ? 'start of ' + relationName : 'unknown') + ': ';
      }

      var atom = this.mathlist.sibling(Math.max(1, this.mathlist.extent));

      if (atom) {
        result += speakableText(this, '', atom);
      } else if (leaf.offset !== 0) {
        // don't say both start and end
        result += relationName ? 'end of ' + relationName : 'unknown';
      }

      return result;
    }
  }, {
    key: "_announce",
    value: function _announce(command, mathlist, atoms) {
      if (typeof this.config.onAnnounce === 'function') {
        this.config.onAnnounce(this, command, mathlist, atoms);
      }
    }
  }, {
    key: "_onFocus",
    value: function _onFocus() {
      // 聚焦事件
      if (this.changeType === 'text') {
        console.log('中文输入阻止聚焦');

        if (this.config.onFocus) {
          this.config.onFocus(this);
        }

        return;
      }

      if (this.blurred) {
        this.blurred = false; // The textarea may be a span (on mobile, for example), so check that
        // it has a focus() before calling it.

        if (this.textarea.focus) {
          this.textarea.focus();
        }

        if (this.config.virtualKeyboardMode === 'onfocus') {
          this.showVirtualKeyboard_();
        }

        editor_popover.updatePopoverPosition(this);

        if (this.config.onFocus) {
          this.config.onFocus(this);
        }

        this._requestUpdate();
      }
    }
  }, {
    key: "_onBlur",
    value: function _onBlur() {
      if (this.longPressed) {
        // 阻止长按脱焦事件
        return;
      }

      if (!this.blurred) {
        this.blurred = true;
        this.ariaLiveText.textContent = '';

        if (this.config.virtualKeyboardMode === 'onfocus') {
          this.hideVirtualKeyboard_();
        }

        this.complete_({
          discard: true
        });

        this._requestUpdate();

        if (this.config.onBlur) {
          this.config.onBlur(this);
        }
      } else {
        console.log('中文环境下的脱焦事件');

        if (this.config.onBlur) {
          this.config.onBlur(this);
        }
      }
    }
  }, {
    key: "_onResize",
    value: function _onResize() {
      this.element.classList.remove('ML__isNarrowWidth', 'ML__isWideWidth', 'ML__isExtendedWidth');

      if (window.innerWidth >= 1024) {
        this.element.classList.add('ML__isExtendedWidth');
      } else if (window.innerWidth >= 768) {
        this.element.classList.add('ML__isWideWidth');
      } else {
        this.element.classList.add('ML__isNarrowWidth');
      }

      editor_popover.updatePopoverPosition(this);
    }
  }, {
    key: "toggleKeystrokeCaption_",
    value: function toggleKeystrokeCaption_() {
      this.keystrokeCaptionVisible = !this.keystrokeCaptionVisible;
      this.keystrokeCaption.innerHTML = '';

      if (!this.keystrokeCaptionVisible) {
        this.keystrokeCaption.style.visibility = 'hidden';
      }
    }
  }, {
    key: "_showKeystroke",
    value: function _showKeystroke(keystroke) {
      var vb = this.keystrokeCaption;

      if (vb && this.keystrokeCaptionVisible) {
        var bounds = this.element.getBoundingClientRect();
        vb.style.left = bounds.left + 'px';
        vb.style.top = bounds.top - 64 + 'px';
        vb.innerHTML = '<span>' + (editor_shortcuts.stringify(keystroke) || keystroke) + '</span>' + vb.innerHTML;
        vb.style.visibility = 'visible';
        setTimeout(function () {
          if (vb.childNodes.length > 0) {
            vb.removeChild(vb.childNodes[vb.childNodes.length - 1]);
          }

          if (vb.childNodes.length === 0) {
            vb.style.visibility = 'hidden';
          }
        }, 3000);
      }
    }
    /**
     * Performs a command defined by a selector.
     *
     *
    #### Moving the insertion point
    | Name                 | Description               |
    | --------------------- | ------------------------- |
    | `"moveToNextChar"` | |
    | `"moveToPreviousChar"` | |
    | `"moveUp"` | |
    | `"moveDown"` | |
    | `"moveToNextPlaceholder"` | |
    | `"moveToPreviousPlaceholder"` | |
    | `"moveToNextWord"` | |
    | `"moveToPreviousWord"` | |
    | `"moveToGroupStart"` | |
    | `"moveToGroupEnd"` | |
    | `"moveToMathFieldStart"` | |
    | `"moveToMathFieldEnd"` | |
    | `"moveToSuperscript"` | |
    | `"moveToSubscript"` | |
    | `"moveToOpposite"` | |
    | `"moveBeforeParent"` | |
    | `"moveAfterParent"` | |
    #### Selection
    | Name                 | Description               |
    | --------------------- | ------------------------- |
    | `"selectGroup"` | Select all the atoms in the current group, that is all the siblings.<br> When the selection is in a numerator, the group is the numerator.<br>When the selection is a superscript or subscript, the group is the supsub.|
    | `"selectAll"` | Select all the atoms in the mathfield|
    #### Extending the selection
    | Name                 | Description               |
    | --------------------- | ------------------------- |
    | `"extendToNextChar"` | |
    | `"extendToPreviousChar"` | |
    | `"extendToNextWord"` | |
    | `"extendToPreviousWord"` | |
    | `"extendUp"` | |
    | `"extendDown"` | |
    | `"extendToNextBoundary"` | |
    | `"extendToPreviousBoundary"` | |
    | `"extendToGroupStart"` | |
    | `"extendToGroupEnd"` | |
    | `"extendToMathFieldStart"` | |
    | `"extendToMathFieldEnd"` | |
    #### Editing / deleting
    | Name                 | Description               |
    | --------------------- | ------------------------- |
    | `"deleteAll"` | Delete everything in the field |
    | `"delete"` | Delete the current selection |
    | `"deleteNextChar"` | |
    | `"deletePreviousChar"` | |
    | `"deleteNextWord"` | |
    | `"deletePreviousWord"` | |
    | `"deleteToGroupStart"` | |
    | `"deleteToGroupEnd"` | |
    | `"deleteToMathFieldEnd"` | |
    | `"transpose"` | |
    #### Editing a matrix
    | Name                 | Description               |
    | --------------------- | ------------------------- |
    | `"addRowAfter"` | |
    | `"addRowBefore"` | |
    | `"addColumnAfter"` | |
    | `"addColumnBefore"` | |
    #### Other editing commands
    | Name                 | Description               |
    | --------------------- | ------------------------- |
    | `"scrollIntoView"` | |
    | `"scrollToStart"` | |
    | `"switchMode"` | |
    | `"complete"` | |
    | `"nextSuggestion"` | |
    | `"previousSuggestion"` | |
    | `"toggleKeystrokeCaption"` | |
    | `"applyStyle"` | |
    #### Clipboard
    | Name                 | Description               |
    | --------------------- | ------------------------- |
    | `"undo"` | |
    | `"redo"` | |
    | `"copyToClipboard"` | |
    | `"cutToClipboard"` | |
    | `"pasteFromClipboard"` | |
    #### Virtual Keyboard
    | Name                 | Description               |
    | --------------------- | ------------------------- |
    | `"toggleVirtualKeyboard"` | |
    | `"showVirtualKeyboard"` | |
    | `"hideVirtualKeyboard"` | |
    | `"toggleVirtualKeyboardAlt"` | |
    | `"toggleVirtualKeyboardShift"` | |
    | `"showAlternateKeys"` | |
    | `"hideAlternateKeys"` | |
    | `"performAlternateKeys"` | |
    | `"switchKeyboardLayer"` | |
    | `"shiftKeyboardLayer"` | |
    | `"unshiftKeyboardLayer"` | |
    | `"insertAndUnshiftKeyboardLayer"` | |
    | `"performWithFeedback"` | |
    #### Speech
    | Name                 | Description               |
    | --------------------- | ------------------------- |
    | `"speak"` | speaks the amount specified by the first parameter. |
     *
     * @param {string|string[]} command - A selector, or an array whose first element
     * is a selector, and whose subsequent elements are arguments to the selector.
     *
     * Note that selectors do not include a final "_". They can be passed either
     * in camelCase or kebab-case.
     *
     * ```javascript
     * mf.$perform('selectAll');
     * mf.$perform('select-all');
     * ```
     * In the above example, both calls invoke the same selector.
     *
     *
     * @method MathField#$perform
     */

  }, {
    key: "$perform",
    value: function $perform(command) {
      if (!command) {
        return false;
      }

      var handled = false;
      var selector;
      var args = [];
      var dirty = false;

      if (Array.isArray(command)) {
        selector = command[0];
        args = command.slice(1);
      } else {
        selector = command;
      } // Convert kebab case (like-this) to camel case (likeThis).


      selector = selector.replace(/-\w/g, function (m) {
        return m[1].toUpperCase();
      });
      selector += '_';

      if (typeof this.mathlist[selector] === 'function') {
        var _this$mathlist;

        if (/^(delete|transpose|add)/.test(selector)) {
          this._resetKeystrokeBuffer();
        }

        if (/^(delete|transpose|add)/.test(selector) && this.mode !== 'command') {
          // Update the undo state to account for the current selection
          this.undoManager.pop();
          this.undoManager.snapshot(this.config);
        }

        (_this$mathlist = this.mathlist)[selector].apply(_this$mathlist, editor_mathfield_toConsumableArray(args));

        if (/^(delete|transpose|add)/.test(selector) && this.mode !== 'command') {
          this.undoManager.snapshot(this.config);
        }

        if (/^(delete)/.test(selector) && this.mode === 'command') {
          var _command = this.mathlist.extractCommandStringAroundInsertionPoint();

          var suggestions = definitions.suggest(_command);

          if (suggestions.length === 0) {
            editor_popover.hidePopover(this);
          } else {
            editor_popover.showPopoverWithLatex(this, suggestions[0].match, suggestions.length > 1);
          }
        }

        dirty = true;
        handled = true;
      } else if (typeof this[selector] === 'function') {
        dirty = this[selector].apply(this, editor_mathfield_toConsumableArray(args));
        handled = true;
      } // If the command changed the selection so that it is no longer
      // collapsed, or if it was an editing command, reset the inline
      // shortcut buffer and the user style


      if (!this.mathlist.isCollapsed() || /^(transpose|paste|complete|((moveToNextChar|moveToPreviousChar|extend).*))_$/.test(selector)) {
        this._resetKeystrokeBuffer();

        this.style = {};
      } // Render the mathlist


      if (dirty) {
        this._requestUpdate();
      }

      return handled;
    }
    /**
     * Perform a command, but:
     * * focus the mathfield
     * * provide haptic and audio feedback
     * This is used by the virtual keyboard when command keys (delete, arrows, etc..)
     * are pressed.
     * @param {string} command
     * @private
     */

  }, {
    key: "performWithFeedback_",
    value: function performWithFeedback_(command) {
      console.log(command, 'command');
      this.$focus();

      if (this.config.keypressVibration && navigator.vibrate) {
        navigator.vibrate(HAPTIC_FEEDBACK_DURATION);
      } // Convert kebab case to camel case.


      command = command.replace(/-\w/g, function (m) {
        return m[1].toUpperCase();
      });

      if (command === 'moveToNextPlaceholder' || command === 'moveToPreviousPlaceholder' || command === 'complete') {
        if (this.returnKeypressSound) {
          this.returnKeypressSound.load();
          this.returnKeypressSound.play().catch(function (err) {
            return console.warn(err);
          });
        } else if (this.keypressSound) {
          this.keypressSound.load();
          this.keypressSound.play().catch(function (err) {
            return console.warn(err);
          });
        }
      } else if (command === 'deletePreviousChar' || command === 'deleteNextChar' || command === 'deletePreviousWord' || command === 'deleteNextWord' || command === 'deleteToGroupStart' || command === 'deleteToGroupEnd' || command === 'deleteToMathFieldStart' || command === 'deleteToMathFieldEnd') {
        if (this.deleteKeypressSound) {
          this.deleteKeypressSound.load();
          this.deleteKeypressSound.play().catch(function (err) {
            return console.warn(err);
          });
        } else if (this.keypressSound) {
          this.keypressSound.load();
          this.keypressSound.play().catch(function (err) {
            return console.warn(err);
          });
        }
      } else if (this.keypressSound) {
        this.keypressSound.load();
        this.keypressSound.play().catch(function (err) {
          return console.warn(err);
        });
      }

      return this.$perform(command);
    }
    /**
     * Convert the atoms before the anchor to 'text' mode
     * @param {number} count - how many atoms back to look at
     * @param {function} until - callback to indicate when to stop
     * @private
     */

  }, {
    key: "convertLastAtomsToText_",
    value: function convertLastAtomsToText_(count, until) {
      if (typeof count === 'function') {
        until = count;
        count = Infinity;
      }

      if (count === undefined) {
        count = Infinity;
      }

      var i = 0;
      var done = false;
      this.mathlist.contentWillChange();

      while (!done) {
        var atom = this.mathlist.sibling(i);
        done = count === 0 || !atom || atom.mode !== 'math' || !(/mord|textord|mpunct/.test(atom.type) || atom.type === 'mop' && /[a-zA-Z]+/.test(atom.body)) || atom.superscript || atom.subscript || until && !until(atom);

        if (!done) {
          atom.applyStyle({
            mode: 'text'
          });
          atom.latex = atom.body;
        }

        i -= 1;
        count -= 1;
      }

      this.mathlist.contentDidChange();
    }
    /**
     * Convert the atoms before the anchor to 'math' mode 'mord'
     * @param {number} count - how many atoms back to look at
     * @param {function} until - callback to indicate when to stop
     * @private
     */

  }, {
    key: "convertLastAtomsToMath_",
    value: function convertLastAtomsToMath_(count, until) {
      if (typeof count === 'function') {
        until = count;
        count = Infinity;
      }

      if (count === undefined) {
        count = Infinity;
      }

      this.mathlist.contentWillChange();
      var i = 0;
      var done = false;

      while (!done) {
        var atom = this.mathlist.sibling(i);
        done = count === 0 || !atom || atom.mode !== 'text' || atom.body === ' ' || until && !until(atom);

        if (!done) {
          atom.applyStyle({
            mode: 'math',
            type: 'mord'
          });
        }

        i -= 1;
        count -= 1;
      }

      this.removeIsolatedSpace_();
      this.mathlist.contentDidChange();
    }
    /**
     * Going backwards from the anchor, if a text zone consisting of a single
     * space character is found (i.e. it is surrounded by math zone),
     * remove it.
     * @private
     */

  }, {
    key: "removeIsolatedSpace_",
    value: function removeIsolatedSpace_() {
      var i = 0;

      while (this.mathlist.sibling(i) && this.mathlist.sibling(i).mode === 'math') {
        i -= 1;
      } // If the atom before the last one converted is a
      // text mode space, preceded by a math mode atom,
      // remove the space


      if (this.mathlist.sibling(i) && this.mathlist.sibling(i).mode === 'text' && this.mathlist.sibling(i).body === ' ' && (!this.mathlist.sibling(i - 1) || this.mathlist.sibling(i - 1).mode === 'math')) {
        this.mathlist.contentWillChange();
        this.mathlist.siblings().splice(i - 1, 1);
        this.mathlist.contentDidChange(); // We need to adjust the selection after doing some surgery on the atoms list
        // But we don't want to receive selection notification changes
        // which could have a side effect of changing the mode :(

        var save = this.mathlist.suppressChangeNotifications;
        this.mathlist.suppressChangeNotifications = true;
        this.mathlist.setSelection(this.mathlist.anchorOffset() - 1);
        this.mathlist.suppressChangeNotifications = save;
      }
    }
    /**
     * Return the characters before anchor that could potentially be turned
     * into text mode.
     * This excludes things like 'mop' (e.g. \sin)
     * @return {string}
     * @method MathField#getTextBeforeAnchor_
     * @private
     */

  }, {
    key: "getTextBeforeAnchor_",
    value: function getTextBeforeAnchor_() {
      // Going backwards, accumulate
      var result = '';
      var i = 0;
      var done = false;

      while (!done) {
        var atom = this.mathlist.sibling(i);
        done = !(atom && (atom.mode === 'text' && !atom.type || atom.mode === 'math' && /mord|textord|mpunct/.test(atom.type)));

        if (!done) {
          result = atom.body + result;
        }

        i -= 1;
      }

      return result;
    }
    /**
     * Consider whether to switch mode give the content before the anchor
     * and the character being input
     *
     * @param {string} keystroke
     * @param {Event} evt - a Event corresponding to the keystroke
     * @method MathField#smartMode_
     * @return {boolean} true if the mode should change
     * @private
     */

  }, {
    key: "smartMode_",
    value: function smartMode_(keystroke, evt) {
      if (this.smartModeSuppressed) {
        return false;
      }

      if (this.mathlist.endOffset() < this.mathlist.siblings().length - 1) {
        return false;
      }

      if (!evt || evt.ctrlKey || evt.metaKey) {
        return false;
      }

      var c = editor_keyboard.eventToChar(evt);

      if (c.length > 1) {
        return false;
      } // Backspace, Left, etc...


      if (!this.mathlist.isCollapsed()) {
        // There is a selection
        if (this.mode === 'text') {
          if (/[/_^]/.test(c)) {
            return true;
          }
        }

        return false;
      }

      var context = this.getTextBeforeAnchor_() + c;

      if (this.mode === 'text') {
        // We're in text mode. Should we switch to math?
        if (keystroke === 'Esc' || /[/\\]/.test(c)) {
          // If this is a command for a fraction,
          // or the '\' command mode key
          // switch to 'math'
          return true;
        }

        if (/[\^_]/.test(c)) {
          // If this is a superscript or subscript
          // switch to 'math'
          if (/(^|\s)[a-zA-Z][^_]$/.test(context)) {
            // If left hand context is a single letter,
            // convert it to math
            this.convertLastAtomsToMath_(1);
          }

          return true;
        } // If this is a closing matching fence
        // switch to 'math' mode


        var lFence = {
          ')': '(',
          '}': '{',
          ']': '['
        }[c];

        if (lFence && this.mathlist.parent() && this.mathlist.parent().type === 'leftright' && this.mathlist.parent().leftDelim === lFence) {
          return true;
        }

        if (/(^|[^a-zA-Z])(a|I)[ ]$/.test(context)) {
          // Single letters that are valid words in the current language
          // Do nothing. @todo: localization
          return false;
        }

        if (/[\$\xA2-\xA5\u0E3F\u20A1\u20A4\u20A7-\u20A9\u20AC\u20B1\u20B9\u20BA]/.test(c)) {
          // A currency symbol.
          // Switch to math mode
          return true;
        }

        if (/(^|[^a-zA-Z'’])[a-zA-Z][ ]$/.test(context)) {
          // An isolated letter, followed by a space:
          // Convert the letter to math, stay in text mode.
          this.convertLastAtomsToMath_(1);
          return false;
        }

        if (/[^0-9]\.[^0-9\s]$/.test(context)) {
          // A period followed by something other than space or a digit
          // and not preceded by a digit.
          // We thought this was a text period, but turns out it's not
          // Turn it into a \cdot
          this.convertLastAtomsToMath_(1);
          var atom = this.mathlist.sibling(0);
          atom.body = '⋅'; // centered dot

          atom.autoFontFamily = 'cmr';
          atom.latex = '\\cdot';
          return true;
        }

        if (/(^|\s)[a-zA-Z][^a-zA-Z]$/.test(context)) {
          // Single letter (x), followed by a non-letter (>, =...)
          this.convertLastAtomsToMath_(1);
          return true;
        }

        if (/\.[0-9]$/.test(context)) {
          // If the new character is a digit,
          // and it was preceded by a dot (which may have been converted
          // to text)
          // turn the dot back into 'math'
          this.convertLastAtomsToMath_(1);
          return true;
        }

        if (/[(][0-9+\-.]$/.test(context)) {
          // An open paren followed by a number
          // Turn the paren back to math and switch.
          this.convertLastAtomsToMath_(1);
          return true;
        }

        if (/[(][a-z][,;]$/.test(context)) {
          // An open paren followed by a single letter, then a "," or ";"
          // Turn the paren back and letter to math and switch.
          this.convertLastAtomsToMath_(2);
          return true;
        } // The tests above can look behind and change what had previously
        // been entered. Now, let's just look at the typed character.


        if (/[0-9+\-=><*|]$/.test(c)) {
          // If this new character looks like a number,
          // or a relational operator (=, <, >)
          // or a "*" or "|"
          // (note that <=, >=, etc... are handled separately as shortcuts)
          // switch to 'math'
          this.removeIsolatedSpace_();
          return true;
        }
      } else {
        // We're in math mode. Should we switch to text?
        if (keystroke === 'Spacebar') {
          this.convertLastAtomsToText_(function (a) {
            return /[a-z][:,;.]$/.test(a.body);
          });
          return true;
        }

        if (/[a-zA-Z]{3,}$/.test(context) && !/(dxd|abc|xyz|uvw)$/.test(context)) {
          // A sequence of three characters
          // (except for some exceptions)
          // Convert them to text.
          this.convertLastAtomsToText_(function (a) {
            return /[a-zA-Z:,;.]/.test(a.body);
          });
          return true;
        }

        if (/(^|\W)(if|If)$/i.test(context)) {
          // @todo localization
          this.convertLastAtomsToText_(1);
          return true;
        }

        if (/(\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5){3,}$/.test(context) && !/(αβγ)$/.test(context)) {
          // A sequence of three *greek* characters
          // (except for one exception)
          // Convert them to text.
          this.convertLastAtomsToText_(function (a) {
            return /(:|,|;|(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])|\u0393|\u0394|\u0398|\u039B|\u039E|\u03A0|\u03A3|\u03A5|\u03A6|\u03A8|\u03A9|[\u03B1-\u03C9]|\u03D1|\u03D5|\u03D6|\u03F1|\u03F5)/.test(a.body);
          });
          return true;
        }

        if (/\?|\./.test(c)) {
          // If the last character is a period or question mark,
          // turn it to 'text'
          return true;
        }
      }

      return false;
    }
    /**
     * @param {string} keystroke
     * @param {Event} [evt] - An Event corresponding to the keystroke.
     * @method MathField#_onKeystroke
     * @private
     */

  }, {
    key: "_onKeystroke",
    value: function _onKeystroke(keystroke, evt) {
      var _this3 = this;

      // 1. Display the keystroke in the keystroke panel (if visible)
      this._showKeystroke(keystroke); // 2. Reset the timer for the keystroke buffer reset


      clearTimeout(this.keystrokeBufferResetTimer); // 3. Give a chance to the custom keystroke handler to intercept the event

      if (this.config.onKeystroke && !this.config.onKeystroke(this, keystroke, evt)) {
        if (evt && evt.preventDefault) {
          evt.preventDefault();
          evt.stopPropagation();
        }

        return false;
      } // 4. Let's try to find a matching shortcut or command


      var shortcut;
      var stateIndex;
      var selector;
      var resetKeystrokeBuffer = false; // 4.1 Check if the keystroke, prefixed with the previously typed keystrokes,
      // would match a long shortcut (i.e. '~~')
      // Ignore the key if command or control is pressed (it may be a shortcut,
      // see 4.3)

      if (this.mode !== 'command' && (!evt || !evt.ctrlKey && !evt.metaKey)) {
        var c = editor_keyboard.eventToChar(evt); // The Backspace key will be handled as a delete command later (5.4)
        // const c = Keyboard.eventToChar(evt);

        if (c !== 'Backspace') {
          if (!c || c.length > 1) {
            // It was a non-alpha character (PageUp, End, etc...)
            this._resetKeystrokeBuffer();
          } else {
            // Find the longest substring that matches a shortcut
            var candidate = this.keystrokeBuffer + c;
            var i = 0;

            while (!shortcut && i < candidate.length) {
              var siblings = void 0;

              if (this.keystrokeBufferStates[i]) {
                var mathlist = new editor_editableMathlist.EditableMathlist();
                mathlist.root = mathAtom.makeRoot('math', parser.parseTokens(lexer.tokenize(this.keystrokeBufferStates[i].latex), this.config.default, null, this.config.macros));
                mathlist.setPath(this.keystrokeBufferStates[i].selection);
                siblings = mathlist.siblings();
              } else {
                siblings = this.mathlist.siblings();
              }

              shortcut = editor_shortcuts.forString(this.mode, siblings, candidate.slice(i), this.config);
              i += 1;
            }

            stateIndex = i - 1;
            this.keystrokeBuffer += c;
            this.keystrokeBufferStates.push(this.undoManager.save());

            if (editor_shortcuts.startsWithString(candidate, this.config).length <= 1) {
              resetKeystrokeBuffer = true;
            } else {
              if (this.config.inlineShortcutTimeout) {
                // Set a timer to reset the shortcut buffer
                this.keystrokeBufferResetTimer = setTimeout(function () {
                  _this3._resetKeystrokeBuffer();
                }, this.config.inlineShortcutTimeout);
              }
            }
          }
        }
      } // 4.2. Should we switch mode?
      // Need to check this before determing if there's a valid shortcut
      // since if we switch to math mode, we may want to apply the shortcut
      // e.g. "slope = rise/run"


      if (this.config.smartMode) {
        var previousMode = this.mode;

        if (shortcut) {
          // If we found a shortcut (e.g. "alpha"),
          // switch to math mode and insert it
          this.mode = 'math';
        } else if (this.smartMode_(keystroke, evt)) {
          this.mode = {
            'math': 'text',
            'text': 'math'
          }[this.mode];
          selector = '';
        } // Notify of mode change


        if (this.mode !== previousMode && typeof this.config.onModeChange === 'function') {
          this.config.onModeChange(this, this.mode);
        }
      } // 4.3 Check if this matches a keystroke shortcut
      // Need to check this **after** checking for inline shortcuts because
      // shift+backquote is a keystroke that inserts "\~"", but "~~" is a
      // shortcut for "\approx" and needs to have priority over shift+backquote


      if (!shortcut && !selector) {
        selector = editor_shortcuts.selectorForKeystroke(this.mode, keystroke);
      } // No shortcut :( We're done.


      if (!shortcut && !selector) {
        return true;
      } // 5. Perform the action matching this shortcut
      // 5.1 Remove any error indicator (wavy underline) on the current command
      // sequence (if there are any)


      this.mathlist.decorateCommandStringAroundInsertionPoint(false); // 5.2 If we have a `moveAfterParent` selector (usually triggered with
      // `spacebar), and we're at the end of a smart fence, close the fence with
      // an empty (.) right delimiter

      var parent = this.mathlist.parent();

      if (selector === 'moveAfterParent' && parent && parent.type === 'leftright' && this.mathlist.endOffset() === this.mathlist.siblings().length - 1 && this.config.smartFence && this.mathlist._insertSmartFence('.')) {
        // Pressing the space bar (moveAfterParent selector) when at the end
        // of a potential smartfence will close it as a semi-open fence
        selector = '';

        this._requestUpdate(); // Re-render the closed smartfence

      } // 5.3 If this is the Spacebar and we're just before or right after
      // a text zone, insert the space inside the text zone


      if (this.mode === 'math' && keystroke === 'Spacebar' && !shortcut) {
        var nextSibling = this.mathlist.sibling(1);
        var previousSibling = this.mathlist.sibling(-1);

        if (nextSibling && nextSibling.mode === 'text' || previousSibling && previousSibling.mode === 'text') {
          this.mathlist.insert(' ', {
            mode: 'text'
          });
        }
      } // 5.4 If there's a selector, perform it.


      if (selector && !this.$perform(selector) || shortcut) {
        // // 6.5 insert the shortcut
        if (shortcut) {
          // If the shortcut is a mandatory escape sequence (\}, etc...)
          // don't make it undoable, this would result in syntactically incorrect
          // formulas
          if (!/^(\\{|\\}|\\[|\\]|\\@|\\#|\\$|\\%|\\^|\\_|\\backslash)$/.test(shortcut)) {
            // To enable the substitution to be undoable,
            // insert the character before applying the substitution
            var _style = editor_mathfield_objectSpread({}, this.mathlist.anchorStyle(), {}, this.style);

            this.mathlist.insert(editor_keyboard.eventToChar(evt), {
              suppressChangeNotifications: true,
              mode: this.mode,
              style: _style
            });
            var saveMode = this.mode; // Create a snapshot with the inserted character

            this.undoManager.snapshotAndCoalesce(this.config); // Revert to the state before the beginning of the shortcut
            // (restore doesn't change the undo stack)

            this.undoManager.restore(this.keystrokeBufferStates[stateIndex], editor_mathfield_objectSpread({}, this.config, {
              suppressChangeNotifications: true
            }));
            this.mode = saveMode;
          }

          this.mathlist.contentWillChange();
          var save = this.mathlist.suppressChangeNotifications;
          this.mathlist.suppressChangeNotifications = true; // Insert the substitute, possibly as a smart fence

          var style = editor_mathfield_objectSpread({}, this.mathlist.anchorStyle(), {}, this.style);

          this.mathlist.insert(shortcut, {
            format: 'latex',
            mode: this.mode,
            style: style,
            smartFence: true
          }); // Check if as a result of the substitution there is now an isolated
          // (text mode) space (surrounded by math). In which case, remove it.

          this.removeIsolatedSpace_(); // Switch (back) to text mode if the shortcut ended with a space

          if (shortcut.endsWith(' ')) {
            this.mode = 'text';
            this.mathlist.insert(' ', {
              mode: 'text',
              style: style
            });
          }

          this.mathlist.suppressChangeNotifications = save;
          this.mathlist.contentDidChange();
          this.undoManager.snapshot(this.config);

          this._requestUpdate();

          this._announce('replacement'); // If we're done with the shortcuts (found a unique one), reset it.


          if (resetKeystrokeBuffer) {
            this._resetKeystrokeBuffer();
          }
        }
      } // 6. Make sure the insertion point is scrolled into view


      this.scrollIntoView(); // 7. Keystroke has been handled, if it wasn't caught in the default
      // case, so prevent propagation

      if (evt && evt.preventDefault) {
        evt.preventDefault();
        evt.stopPropagation();
      }

      return false;
    }
    /**
     * This handler is invoked when text has been typed, pasted in or input with
     * an input method. As a result, `text` can be a sequence of characters to
     * be inserted.
     * @param {string} text
     * @param {object} options
     * @param {boolean} options.focus - If true, the mathfield will be focused
     * @param {boolean} options.feedback - If true, provide audio and haptic feedback
     * @param {boolean} options.simulateKeystroke - If true, generate some synthetic
     * keystrokes (useful to trigger inline shortcuts, for example)
     * @param {boolean} options.commandMode - If true, switch to command mode if
     * necessary, then insert text
     * @private
     */

  }, {
    key: "_onTypedText",
    value: function _onTypedText(text, options) {
      options = options || {}; // Focus, then provide audio and haptic feedback

      if (options.focus) {
        this.$focus();
      }

      if (options.feedback) {
        if (this.config.keypressVibration && navigator.vibrate) {
          navigator.vibrate(HAPTIC_FEEDBACK_DURATION);
        }

        if (this.keypressSound) {
          this.keypressSound.load();
          this.keypressSound.play().catch(function (err) {
            return console.warn(err);
          });
        }
      }

      if (options.commandMode && this.mode !== 'command') {
        this.switchMode_('command');
      } // Remove any error indicator on the current command sequence
      // (if there is one)


      this.mathlist.decorateCommandStringAroundInsertionPoint(false);

      if (options.simulateKeystroke) {
        // for (const c of text) {
        var c = text.charAt(0);
        var ev = editor_keyboard.charToEvent(c);

        if (!this.$keystroke(editor_keyboard.keyboardEventToString(ev), ev)) {
          return;
        } // }

      } // Insert the specified text at the current insertion point.
      // If the selection is not collapsed, the content will be deleted first.


      var popoverText = '';
      var displayArrows = false;

      if (this.pasteInProgress) {
        this.pasteInProgress = false; // This call was made in response to a paste event.
        // Interpret `text` as a 'smart' expression (could be LaTeX, could be
        // UnicodeMath)

        this.mathlist.insert(text, {
          smartFence: this.config.smartFence,
          mode: 'math'
        });
      } else {
        var style = editor_mathfield_objectSpread({}, this.mathlist.anchorStyle(), {}, this.style); // Decompose the string into an array of graphemes.
        // This is necessary to correctly process what is displayed as a single
        // glyph (a grapheme) but which is composed of multiple Unicode
        // codepoints. This is the case in particular for some emojis, such as
        // those with a skin tone modifier, the country flags emojis or
        // compound emojis such as the professional emojis, including the
        // David Bowie emoji: 👨🏻‍🎤


        var graphemes = grapheme_splitter.splitGraphemes(text);
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = graphemes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _c = _step3.value;

            if (this.mode === 'command') {
              this.mathlist.removeSuggestion();
              this.suggestionIndex = 0;
              var command = this.mathlist.extractCommandStringAroundInsertionPoint();
              var suggestions = definitions.suggest(command + _c);
              displayArrows = suggestions.length > 1;

              if (suggestions.length === 0) {
                this.mathlist.insert(_c, {
                  mode: 'command'
                });

                if (/^\\[a-zA-Z\\*]+$/.test(command + _c)) {
                  // This looks like a command name, but not a known one
                  this.mathlist.decorateCommandStringAroundInsertionPoint(true);
                }

                editor_popover.hidePopover(this);
              } else {
                this.mathlist.insert(_c, {
                  mode: 'command'
                });

                if (suggestions[0].match !== command + _c) {
                  this.mathlist.insertSuggestion(suggestions[0].match, -suggestions[0].match.length + command.length + 1);
                }

                popoverText = suggestions[0].match;
              }
            } else if (this.mode === 'math') {
              // Some characters are mapped to commands. Handle them here.
              // This is important to handle synthetic text input and
              // non-US keyboards, on which, fop example, the '^' key is
              // not mapped to  'Shift-Digit6'.
              var selector = {
                '^': 'moveToSuperscript',
                '_': 'moveToSubscript',
                ' ': 'moveAfterParent'
              }[_c];

              if (selector) {
                if (selector === 'moveToSuperscript') {
                  if (this._superscriptDepth() >= this.config.scriptDepth[1]) {
                    this._announce('plonk');

                    return;
                  }
                } else if (selector === 'moveToSubscript') {
                  if (this._subscriptDepth() >= this.config.scriptDepth[0]) {
                    this._announce('plonk');

                    return;
                  }
                }

                this.$perform(selector);
              } else {
                if (this.config.smartSuperscript && this.mathlist.relation() === 'superscript' && /[0-9]/.test(_c) && this.mathlist.siblings().filter(function (x) {
                  return x.type !== 'first';
                }).length === 0) {
                  // We are inserting a digit into an empty superscript
                  // If smartSuperscript is on, insert the digit, and
                  // exit the superscript.
                  this.mathlist.insert(_c, {
                    mode: 'math',
                    style: style
                  });
                  this.mathlist.moveAfterParent_();
                } else {
                  this.mathlist.insert(_c, {
                    mode: 'math',
                    style: style,
                    smartFence: this.config.smartFence
                  });
                }
              }
            } else if (this.mode === 'text') {
              this.mathlist.insert(_c, {
                mode: 'text',
                style: style
              });
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }

      if (this.mode !== 'command') {
        this.undoManager.snapshotAndCoalesce(this.config);
      } // Render the mathlist


      this._requestUpdate(); // Make sure the insertion point is visible


      this.scrollIntoView(); // Since the location of the popover depends on the position of the caret
      // only show the popover after the formula has been rendered and the
      // position of the caret calculated

      editor_popover.showPopoverWithLatex(this, popoverText, displayArrows);
    }
    /*
     * Return a hash (32-bit integer) representing the content of the mathfield
     * (but not the selection state)
     */

  }, {
    key: "_hash",
    value: function _hash() {
      var result = 0;
      var str = this.mathlist.root.toLatex(false);

      for (var i = 0; i < str.length; i++) {
        result = result * 31 + str.charCodeAt(i);
        result = result | 0; // Force it to a 32-bit number
      }

      return Math.abs(result);
    }
  }, {
    key: "_requestUpdate",
    value: function _requestUpdate() {
      var _this4 = this;

      if (!this.dirty) {
        this.dirty = true;
        requestAnimationFrame(function (_) {
          return isValidMathfield(_this4) && _this4._render();
        });
      }
    }
    /**
     * Lay-out the mathfield and generate the DOM.
     *
     * This is usually done automatically, but if the font-size, or other geometric
     * attributes are modified, outside of MathLive, this function may need to be
     * called explicitly.
     *
     * @method MathField#render
     * @private
     */

  }, {
    key: "_render",
    value: function _render(renderOptions) {
      renderOptions = renderOptions || {};
      this.dirty = false; //
      // 1. Stop and reset read aloud state
      //

      if (!window.mathlive) {
        window.mathlive = {};
      } //
      // 2. Validate selection
      //


      if (!this.mathlist.anchor()) {
        console.warn('Invalid selection, resetting it. ' + editor_mathpath.pathToString(this.mathlist.path));
        this.mathlist.path = [{
          relation: 'body',
          offset: 0
        }];
      } //
      // 3. Update selection state and blinking cursor (caret)
      //


      this.mathlist.forEach(function (a) {
        a.caret = '';
        a.isSelected = false;
      });
      var hasFocus = this.$hasFocus();

      if (this.mathlist.isCollapsed()) {
        this.mathlist.anchor().caret = hasFocus ? this.mode : '';
      } else {
        this.mathlist.forEachSelected(function (a) {
          a.isSelected = true;
        });
      } //
      // 4. Create spans corresponding to the updated mathlist
      //


      var spans = mathAtom.decompose({
        mathstyle: 'displaystyle',
        generateID: {
          // Using the hash as a seed for the ID
          // keeps the IDs the same until the content of the field changes.
          seed: this._hash(),
          // The `groupNumbers` flag indicates that extra spans should be generated
          // to represent group of atoms, for example, a span to group
          // consecutive digits to represent a number.
          groupNumbers: renderOptions.forHighlighting
        },
        macros: this.config.macros
      }, this.mathlist.root); //
      // 5. Construct struts around the spans
      //

      var base = core_span.makeSpan(spans, 'ML__base');
      base.attributes = {
        // Sometimes Google Translate kicks in an attempts to 'translate' math
        // This doesn't work very well, so turn off translate
        'translate': 'no',
        // Hint to screen readers to not attempt to read this span
        // They should use instead the 'aria-label' below.
        'aria-hidden': 'true'
      };
      var topStrut = core_span.makeSpan('', 'ML__strut');
      topStrut.setStyle('height', base.height, 'em');
      var struts = [topStrut];

      if (base.depth !== 0) {
        var bottomStrut = core_span.makeSpan('', 'ML__strut--bottom');
        bottomStrut.setStyle('height', base.height + base.depth, 'em');
        bottomStrut.setStyle('vertical-align', -base.depth, 'em');
        struts.push(bottomStrut);
      }

      struts.push(base);
      var wrapper = core_span.makeSpan(struts, 'ML__mathlive'); //
      // 6. Generate markup and accessible node
      //

      this.field.innerHTML = wrapper.toMarkup(0, this.config.horizontalSpacingScale);
      this.field.classList.toggle('ML__focused', hasFocus); // Probably want to generate content on the fly depending on what to speak

      this.accessibleNode.innerHTML = "<math xmlns='http://www.w3.org/1998/Math/MathML'>" + mathAtom.toMathML(this.mathlist.root, this.config) + "</math>"; //this.ariaLiveText.textContent = "";
      //
      // 7. Calculate selection rectangle
      //

      var selectionRect = this._getSelectionBounds();

      if (selectionRect) {
        var selectionElement = document.createElement('div');
        selectionElement.classList.add('ML__selection');
        selectionElement.style.position = 'absolute';
        selectionElement.style.left = selectionRect.left + 'px';
        selectionElement.style.top = selectionRect.top + 'px';
        selectionElement.style.width = Math.ceil(selectionRect.right - selectionRect.left) + 'px';
        selectionElement.style.height = Math.ceil(selectionRect.bottom - selectionRect.top - 1) + 'px';
        this.field.insertBefore(selectionElement, this.field.childNodes[0]);
      }
    }
  }, {
    key: "_onPaste",
    value: function _onPaste() {
      // Make note we're in the process of pasting. The subsequent call to
      // onTypedText() will take care of interpreting the clipboard content
      this.pasteInProgress = true;
      return true;
    }
  }, {
    key: "_onCut",
    value: function _onCut() {
      // Clearing the selection will have the side effect of clearing the
      // content of the textarea. However, the textarea value is what will
      // be copied to the clipboard, so defer the clearing of the selection
      // to later, after the cut operation has been handled.
      setTimeout(function () {
        this.$clearSelection();

        this._requestUpdate();
      }.bind(this), 0);
      return true;
    }
  }, {
    key: "_onCopy",
    value: function _onCopy(e) {
      if (this.mathlist.isCollapsed()) {
        e.clipboardData.setData('text/plain', this.$text('latex-expanded'));
        e.clipboardData.setData('application/json', this.$text('json'));
        e.clipboardData.setData('application/xml', this.$text('mathML'));
      } else {
        e.clipboardData.setData('text/plain', this.$selectedText('latex-expanded'));
        e.clipboardData.setData('application/json', this.$selectedText('json'));
        e.clipboardData.setData('application/xml', this.$selectedText('mathML'));
      } // Prevent the current document selection from being written to the clipboard.


      e.preventDefault();
    }
  }, {
    key: "formatMathlist",
    value: function formatMathlist(root, format) {
      // console.log(format);
      // // format = 'mathML'
      // console.log(format);
      format = format || 'latex';
      var result = '';

      if (format === 'latex' || format === 'latex-expanded') {
        result = root.toLatex(format === 'latex-expanded');
      } else if (format === 'mathML') {
        result = root.toMathML(this.config);
      } else if (format === 'spoken') {
        result = mathAtom.toSpeakableText(root, this.config);
      } else if (format === 'spoken-text') {
        var saveTextToSpeechMarkup = this.config.textToSpeechMarkup;
        this.config.textToSpeechMarkup = '';
        result = mathAtom.toSpeakableText(root, this.config);
        this.config.textToSpeechMarkup = saveTextToSpeechMarkup;
      } else if (format === 'spoken-ssml' || format === 'spoken-ssml-withHighlighting') {
        var _saveTextToSpeechMarkup = this.config.textToSpeechMarkup;
        var saveGenerateID = this.config.generateID;
        this.config.textToSpeechMarkup = 'ssml';

        if (format === 'spoken-ssml-withHighlighting') {
          this.config.generateID = true;
        }

        result = mathAtom.toSpeakableText(root, this.config);
        this.config.textToSpeechMarkup = _saveTextToSpeechMarkup;
        this.config.generateID = saveGenerateID;
      } else if (format === 'json') {
        var json = mathAtom.toAST(root, this.config);
        result = JSON.stringify(json);
      } else if (format === 'ASCIIMath') {
        result = toASCIIMath(root, this.config);
      } else {
        console.warn('Unknown format :', format);
      }

      return result;
    } //
    // PUBLIC API
    //

    /**
     * Returns a textual representation of the mathfield.
     *
     * @param {string} [format] - The format of the result.
     *
    | Format              | Description             |
    | :------------------ | :---------------------- |
    | `"latex"`             |LaTeX rendering of the content, with LaTeX macros not expanded|
    | `"latex-expanded"`    |All macros are recursively expanded to their definition|
    | `"json"`              | A MathJSON abstract syntax tree, as an object literal formated as a JSON string (see {@tutorial MATHJSON})|
    | `"spoken"`            |Spoken text rendering, using the default format defined in config, which could be either text or SSML markup.|
    | `"spoken-text"`       |A plain spoken text rendering of the content.|
    | `"spoken-ssml"`       |A SSML (Speech Synthesis Markup Language) version of the content, which can be used with some text-to-speech engines such as AWS|
    | `"spoken-ssml-withHighlighting"`|Like `"spoken-ssml"` but with additional annotations necessary for synchronized higlighting (read aloud)|
    | `"mathML"`            | A string of MathML markup|
     *
     * **Default** = `"latex"`
     * @return {string}
     * @category Accessing the Content
     * @method MathField#$text
     */

  }, {
    key: "$text",
    value: function $text(format) {
      return this.formatMathlist(this.mathlist.root, format);
    }
    /**
     * Returns a textual representation of the selection in the mathfield.
     *
     * @param {string} [format] - The format of the result.
     *
    | Format              | Description             |
    | :------------------ | :---------------------- |
    | `"latex"`             |LaTeX rendering of the content, with LaTeX macros not expanded|
    | `"latex-expanded"`    |All macros are recursively expanded to their definition|
    | `"json"`              | A MathJSON abstract syntax tree, as an object literal formated as a JSON string (see {@tutorial MATHJSON})|
    | `"spoken"`            |Spoken text rendering, using the default format defined in config, which could be either text or SSML markup.|
    | `"spoken-text"`       |A plain spoken text rendering of the content.|
    | `"spoken-ssml"`       |A SSML (Speech Synthesis Markup Language) version of the content, which can be used with some text-to-speech engines such as AWS|
    | `"spoken-ssml-withHighlighting"`|Like `"spoken-ssml"` but with additional annotations necessary for synchronized higlighting (read aloud)|
    | `"mathML"`            | A string of MathML markup|
     *
     * **Default** = `"latex"`
     * @return {string}
     * @category Accessing the Content
     * @method MathField#$selectedText
     */

  }, {
    key: "$selectedText",
    value: function $selectedText(format) {
      var atoms = this.mathlist.getSelectedAtoms();

      if (!atoms) {
        return '';
      }

      var root = mathAtom.makeRoot('math', atoms);
      return this.formatMathlist(root, format);
    }
    /**
     * Checks if the selection is collapsed.
     *
     * @return {boolean} True if the length of the selection is 0, that is, if it is a single
     * insertion point.
     * @category Selection
     * @method MathField#$selectionIsCollapsed
     */

  }, {
    key: "$selectionIsCollapsed",
    value: function $selectionIsCollapsed() {
      return this.mathlist.isCollapsed();
    }
    /**
     * Returns the depth of the selection group.
     *
     * If the selection is at the root level, returns 0.
     *
     * If the selection is a portion of the numerator of a fraction
     * which is at the root level, return 1. Note that in that case, the numerator
     * would be the "selection group".
     *
     * @return {number}
     * @category Selection
     * @method MathField#$selectionDepth
     */

  }, {
    key: "$selectionDepth",
    value: function $selectionDepth() {
      return this.mathlist.path.length;
    }
  }, {
    key: "_superscriptDepth",
    value: function _superscriptDepth() {
      var result = 0;
      var i = 0;
      var atom = this.mathlist.ancestor(i);
      var wasSuperscript = false;

      while (atom) {
        if (atom.superscript || atom.subscript) {
          result += 1;
        }

        if (atom.superscript) {
          wasSuperscript = true;
        } else if (atom.subscript) {
          wasSuperscript = false;
        }

        i += 1;
        atom = this.mathlist.ancestor(i);
      }

      return wasSuperscript ? result : 0;
    }
  }, {
    key: "_subscriptDepth",
    value: function _subscriptDepth() {
      var result = 0;
      var i = 0;
      var atom = this.mathlist.ancestor(i);
      var wasSubscript = false;

      while (atom) {
        if (atom.superscript || atom.subscript) {
          result += 1;
        }

        if (atom.superscript) {
          wasSubscript = false;
        } else if (atom.subscript) {
          wasSubscript = true;
        }

        i += 1;
        atom = this.mathlist.ancestor(i);
      }

      return wasSubscript ? result : 0;
    }
    /**
     * Checks if the selection starts at the beginning of the selection group.
     *
     * @return {boolean}
     * @category Selection
     * @method MathField#$selectionAtStart
     */

  }, {
    key: "$selectionAtStart",
    value: function $selectionAtStart() {
      return this.mathlist.startOffset() === 0;
    }
    /**
     * Checks if the selection extends to the end of the selection group.
     *
     * @return {boolean}
     * @category Selection
     * @method MathField#$selectionAtEnd
     */

  }, {
    key: "$selectionAtEnd",
    value: function $selectionAtEnd() {
      return this.mathlist.endOffset() >= this.mathlist.siblings().length - 1;
    }
    /*
     *  True if the entire group is selected
     * */

  }, {
    key: "groupIsSelected",
    value: function groupIsSelected() {
      return this.mathlist.startOffset() === 0 && this.mathlist.endOffset() >= this.mathlist.siblings().length - 1;
    }
    /**
     * Sets or gets the content of the mathfield.
     *
     * If `text` is not empty, sets the content of the mathfield to the
     * text interpreted as a LaTeX expression.
     *
     * If `text` is empty (or omitted), return the content of the mathfield as a
     * LaTeX expression.
     * @param {string} [text]
     *
     * @param {Object.<string, any>} [options]
     * @param {boolean} [options.suppressChangeNotifications] - If true, the
     * handlers for the contentWillChange and contentDidChange notifications will
     * not be invoked. **Default** = `false`.
     *
     * @return {string}
     * @category Accessing the Content
     * @method MathField#$latex
     */

  }, {
    key: "$latex",
    value: function $latex(text, options) {
      if (text) {
        var oldValue = this.mathlist.root.toLatex();

        if (text !== oldValue) {
          options = options || {};
          this.mathlist.insert(text, Object.assign({}, this.config, {
            insertionMode: 'replaceAll',
            selectionMode: 'after',
            format: 'latex',
            mode: 'math',
            suppressChangeNotifications: options.suppressChangeNotifications
          }));
          this.undoManager.snapshot(this.config);

          this._requestUpdate();
        }

        return text;
      } // Return the content as LaTeX


      return this.mathlist.root.toLatex();
    }
    /**
     * Return the DOM element associated with this mathfield.
     *
     * Note that `this.$el().mathfield === this`
     *
     * @return {HTMLElement}
     * @method MathField#$el
     */

  }, {
    key: "$el",
    value: function $el() {
      return this.element;
    }
  }, {
    key: "undo",
    value: function undo() {
      this.complete_(); // Undo to the previous state

      this.undoManager.undo(this.config);
      return true;
    }
  }, {
    key: "redo",
    value: function redo() {
      this.complete_();
      this.undoManager.redo(this.config);
      return true;
    }
  }, {
    key: "scrollIntoView",
    value: function scrollIntoView() {
      // If a render is pending, do it now to make sure we have correct layout
      // and caret position
      if (this.dirty) {
        this._render();
      }

      var pos = this._getCaretPosition();

      var fieldBounds = this.field.getBoundingClientRect();

      if (!pos) {
        var selectionBounds = this._getSelectionBounds();

        if (selectionBounds) {
          pos = {
            x: selectionBounds.right + fieldBounds.left - this.field.scrollLeft,
            y: selectionBounds.top + fieldBounds.top - this.field.scrollTop
          };
        }
      }

      if (pos) {
        var x = pos.x - window.scrollX;

        if (x < fieldBounds.left) {
          this.field.scroll({
            top: 0,
            left: x - fieldBounds.left + this.field.scrollLeft - 20,
            behavior: 'smooth'
          });
        } else if (x > fieldBounds.right) {
          this.field.scroll({
            top: 0,
            left: x - fieldBounds.right + this.field.scrollLeft + 20,
            behavior: 'smooth'
          });
        }
      }
    }
  }, {
    key: "scrollToStart",
    value: function scrollToStart() {
      this.field.scroll(0, 0);
    }
  }, {
    key: "scrollToEnd",
    value: function scrollToEnd() {
      var fieldBounds = this.field.getBoundingClientRect();
      this.field.scroll(fieldBounds.left - window.scrollX, 0);
    }
    /**
     *
     * @method MathField#enterCommandMode_
     * @private
     */

  }, {
    key: "enterCommandMode_",
    value: function enterCommandMode_() {
      this.switchMode_('command');
    }
  }, {
    key: "copyToClipboard_",
    value: function copyToClipboard_() {
      this.$focus(); // If the selection is empty, select the entire field before
      // copying it.

      if (this.mathlist.isCollapsed()) {
        this.$select();
      }

      document.execCommand('copy');
      return false;
    }
  }, {
    key: "turnOffBox_",
    value: function turnOffBox_() {
      this.$focus(); // 关闭键盘方法

      this.hideVirtualKeyboard_();
      var x = document.body.getElementsByClassName('ML__keyboard');

      for (var i = 0; i < x.length; i++) {
        x[i].classList.remove('is-visible');
      }

      return false;
    }
  }, {
    key: "changeType_",
    value: function changeType_() {
      this.$focus();

      if (this.changeType == 'text') {
        this.changeType = 'math';
        this.toggleVirtualKeyboard_();
      } else {
        this.changeType = 'text';
        this.hideVirtualKeyboard_(); // this.toggleVirtualKeyboard_()
      }

      this.constructor(this.element, this.config, this.changeType);
      return false;
    }
  }, {
    key: "cutToClipboard_",
    value: function cutToClipboard_() {
      this.$focus();
      document.execCommand('cut');
      return true;
    }
  }, {
    key: "pasteFromClipboard_",
    value: function pasteFromClipboard_() {
      this.$focus();
      document.execCommand('paste');
      return true;
    }
    /**
     * Inserts a block of text at the current insertion point.
     *
     * This method can be called explicitly or invoked as a selector with {@linkcode MathField#$perform $perform("insert")}
     * .
     *
     * After the insertion, the selection will be set according to the `selectionMode`.
     *
     * @param {string} s - The text to be inserted
     *
     * @param {Object.<string, any>} [options]
     *
     * @param {"replaceSelection"|"replaceAll"|"insertBefore"|"insertAfter"} options.insertionMode -
     *
    | <!-- -->    | <!-- -->    |
    | :---------- | :---------- |
    |`"replaceSelection"`| (default)|
    |`"replaceAll"`| |
    |`"insertBefore"`| |
    |`"insertAfter"`| |
     *
     * @param {'placeholder' | 'after' | 'before' | 'item'} options.selectionMode - Describes where the selection
     * will be after the insertion:
     *
    | <!-- -->    | <!-- -->    |
    | :---------- | :---------- |
    |`"placeholder"`| The selection will be the first available placeholder in the text that has been inserted (default)|
    |`"after"`| The selection will be an insertion point after the inserted text|
    |`"before"`| The selection will be an insertion point before the inserted text|
    |`"item"`| The inserted text will be selected|
     *
     * @param {'auto' | 'latex'} options.format - The format of the string `s`:
     *
    | <!-- -->    | <!-- -->    |
    |:------------|:------------|
    |`"auto"`| The string is Latex fragment or command) (default)|
    |`"latex"`| The string is a Latex fragment|
     *
     * @param {boolean} options.focus - If true, the mathfield will be focused after
     * the insertion
     *
     * @param {boolean} options.feedback - If true, provide audio and haptic feedback
     *
     * @param {"text" | "math" | ""} options.mode - If empty, the current mode
     * is used (default)
     *
     * @param {boolean} options.resetStyle - If true, the style after the insertion
     * is the same as the style before. If false, the style after the
     * insertion is the style of the last inserted atom.
     *
     * @category Changing the Content
     * @method MathField#$insert
     */

  }, {
    key: "$insert",
    value: function $insert(s, options) {
      if (typeof s === 'string' && s.length > 0) {
        options = options || {};

        if (options.focus) {
          this.$focus();
        }

        if (options.feedback) {
          if (this.config.keypressVibration && navigator.vibrate) {
            navigator.vibrate(HAPTIC_FEEDBACK_DURATION);
          }

          if (this.keypressSound) {
            this.keypressSound.load();
            this.keypressSound.play();
          }
        }

        if (s === '\\\\') {
          // This string is interpreted as an "insert row after" command
          this.mathlist.addRowAfter_();
        } else if (s === '&') {
          this.mathlist.addColumnAfter_();
        } else {
          var savedStyle = this.style;
          this.mathlist.insert(s, editor_mathfield_objectSpread({
            mode: this.mode,
            style: this.mathlist.anchorStyle()
          }, options));

          if (options.resetStyle) {
            this.style = savedStyle;
          }
        }

        this.undoManager.snapshot(this.config);

        this._requestUpdate();

        return true;
      }

      return false;
    }
  }, {
    key: "switchMode_",
    value: function switchMode_(mode, prefix, suffix) {
      this._resetKeystrokeBuffer(); // Suppress (temporarily) smart mode if switching to/from text or math
      // This prevents switching to/from command mode from supressing smart mode.


      this.smartModeSuppressed = /text|math/.test(this.mode) && /text|math/.test(mode);

      if (prefix) {
        this.$insert(prefix, {
          format: 'latex',
          mode: {
            'math': 'text',
            'text': 'math'
          }[mode]
        });
      } // Remove any error indicator on the current command sequence (if there is one)


      this.mathlist.decorateCommandStringAroundInsertionPoint(false);

      if (mode === 'command') {
        this.mathlist.removeSuggestion();
        editor_popover.hidePopover(this);
        this.suggestionIndex = 0; // Switch to the command mode keyboard layer

        if (this.virtualKeyboardVisible) {
          this.switchKeyboardLayer_('lower-command');
        }

        this.mathlist.insert("\x1B", {
          mode: 'math'
        });
      } else {
        this.mode = mode;
      }

      if (suffix) {
        this.$insert(suffix, {
          format: 'latex',
          mode: mode
        });
      } // Notify of mode change


      if (typeof this.config.onModeChange === 'function') {
        this.config.onModeChange(this, this.mode);
      }

      this._requestUpdate();
    }
    /**
     * When in command mode, insert the select command and return to math mode
     * If escape is true, the command is discared.
     * @param {object} options
     * @param {boolean} options.discard if true, the command is discarded and the
     * mode switched back to math
     * @param {boolean} options.acceptSuggestion if true, accept the suggestion to
     * complete the command. Otherwise, only use what has been entered so far.
     * @method MathField#complete_
     * @private
     */

  }, {
    key: "complete_",
    value: function complete_(options) {
      options = options || {};
      editor_popover.hidePopover(this);

      if (options.discard) {
        this.mathlist.spliceCommandStringAroundInsertionPoint(null);
        this.switchMode_('math');
        return true;
      }

      var command = this.mathlist.extractCommandStringAroundInsertionPoint(!options.acceptSuggestion);

      if (command) {
        if (command === '\\(' || command === '\\)') {
          this.mathlist.spliceCommandStringAroundInsertionPoint([]);
          this.mathlist.insert(command.slice(1), {
            mode: this.mode
          });
        } else {
          // We'll assume we want to insert in math mode
          // (commands are only available in math mode)
          var mode = 'math';

          if (definitions.commandAllowed(mode, command)) {
            var mathlist = parser.parseTokens(lexer.tokenize(command), mode, null, this.config.macros);
            this.mathlist.spliceCommandStringAroundInsertionPoint(mathlist);
          } else {
            // This wasn't a simple function or symbol.
            // Interpret the input as LaTeX code
            var _mathlist = parser.parseTokens(lexer.tokenize(command), mode, null, this.config.macros);

            if (_mathlist) {
              this.mathlist.spliceCommandStringAroundInsertionPoint(_mathlist);
            } else {
              this.mathlist.decorateCommandStringAroundInsertionPoint(true);
            }
          }
        }

        this.undoManager.snapshot(this.config);

        this._announce('replacement');

        return true;
      }

      return false;
    }
  }, {
    key: "_updateSuggestion",
    value: function _updateSuggestion() {
      this.mathlist.positionInsertionPointAfterCommitedCommand();
      this.mathlist.removeSuggestion();
      var command = this.mathlist.extractCommandStringAroundInsertionPoint();
      var suggestions = definitions.suggest(command);

      if (suggestions.length === 0) {
        editor_popover.hidePopover(this);
        this.mathlist.decorateCommandStringAroundInsertionPoint(true);
      } else {
        var index = this.suggestionIndex % suggestions.length;
        var l = command.length - suggestions[index].match.length;

        if (l !== 0) {
          this.mathlist.insertSuggestion(suggestions[index].match, l);
        }

        editor_popover.showPopoverWithLatex(this, suggestions[index].match, suggestions.length > 1);
      }

      this._requestUpdate();
    }
  }, {
    key: "nextSuggestion_",
    value: function nextSuggestion_() {
      this.suggestionIndex += 1; // The modulo of the suggestionIndex is used to determine which suggestion
      // to display, so no need to worry about rolling over.

      this._updateSuggestion();

      return false;
    }
  }, {
    key: "previousSuggestion_",
    value: function previousSuggestion_() {
      this.suggestionIndex -= 1;

      if (this.suggestionIndex < 0) {
        // We're rolling over
        // Get the list of suggestions, so we can know how many there are
        // Not very efficient, but simple.
        this.mathlist.removeSuggestion();
        var command = this.mathlist.extractCommandStringAroundInsertionPoint();
        var suggestions = definitions.suggest(command);
        this.suggestionIndex = suggestions.length - 1;
      }

      this._updateSuggestion();

      return false;
    }
    /**
     * Attach event handlers to an element so that it will react by executing
     * a command when pressed.
     * `"command"` can be:
     * - a string, a single selector
     * - an array, whose first element is a selector followed by one or more arguments.
     * - an object, with the following keys:
     *    * 'default': command performed on up, with a down + up sequence with no
     *      delay between down and up
     *    * 'alt', 'shift', 'altshift' keys: command performed on up with
     *      one of these modifiers pressed
     *    * 'pressed': command performed on 'down'
     *    * 'pressAndHoldStart': command performed after a tap/down followed by a
     * delay (optional)
     *    * 'pressAndHoldEnd': command performed on up, if there was a delay
     *     between down and up, if absent, 'default' is performed
     * The value of the keys specify which selector (string
     * or array) to perform depending on the keyboard state when the button is
     * pressed.
     *
     * The 'pressed' and 'active' classes will get added to
     * the element, as the :hover and :active pseudo-classes are not reliable
     * (at least on Chrome Android).
     *
     * @param {HTMLElement} el
     * @param {object|string} command
     * @private
     */

  }, {
    key: "_attachButtonHandlers",
    value: function _attachButtonHandlers(el, command) {
      var that = this;

      if (editor_mathfield_typeof(command) === 'object' && (command.default || command.pressed)) {
        // Attach the default (no modifiers pressed) command to the element
        if (command.default) {
          el.setAttribute('data-' + this.config.namespace + 'command', JSON.stringify(command.default));
        }

        if (command.alt) {
          el.setAttribute('data-' + this.config.namespace + 'command-alt', JSON.stringify(command.alt));
        }

        if (command.altshift) {
          el.setAttribute('data-' + this.config.namespace + 'command-altshift', JSON.stringify(command.altshift));
        }

        if (command.shift) {
          el.setAttribute('data-' + this.config.namespace + 'command-shift', JSON.stringify(command.shift));
        } // .pressed: command to perform when the button is pressed (i.e.
        // on mouse down/touch). Otherwise the command is performed when
        // the button is released


        if (command.pressed) {
          el.setAttribute('data-' + this.config.namespace + 'command-pressed', JSON.stringify(command.pressed));
        }

        if (command.pressAndHoldStart) {
          el.setAttribute('data-' + this.config.namespace + 'command-pressAndHoldStart', JSON.stringify(command.pressAndHoldStart));
        }

        if (command.pressAndHoldEnd) {
          el.setAttribute('data-' + this.config.namespace + 'command-pressAndHoldEnd', JSON.stringify(command.pressAndHoldEnd));
        }
      } else {
        // We need to turn the command into a string to attach it to the dataset
        // associated with the button (the command could be an array made of a
        // selector and one or more parameters)
        el.setAttribute('data-' + this.config.namespace + 'command', JSON.stringify(command));
      }

      var pressHoldStart;
      var pressHoldElement;
      var touchID;
      var syntheticTarget; // Target while touch move

      var pressAndHoldTimer;
      on(el, 'mousedown touchstart:passive', function (ev) {
        // console.log(1111);
        if (ev.type !== 'mousedown' || ev.buttons === 1 || ev.buttons === 0) {
          // The primary button was pressed or the screen was tapped.
          ev.stopPropagation();

          if (ev.type !== 'touchstart') {
            console.log('xxxx', ev.type);
            ev.preventDefault();
          } // ev.preventDefault();


          el.classList.add('pressed');
          pressHoldStart = Date.now(); // Record the ID of the primary touch point for tracking on touchmove

          if (ev.type === 'touchstart') {
            touchID = ev.changedTouches[0].identifier;
          } // Parse the JSON to get the command (and its optional arguments)
          // and perform it immediately


          var _command2 = el.getAttribute('data-' + that.config.namespace + 'command-pressed');

          if (_command2) {
            that.$perform(JSON.parse(_command2));
          } // If there is a `press and hold start` command, perform it
          // after a delay, if we're still pressed by then.


          var pressAndHoldStartCommand = el.getAttribute('data-' + that.config.namespace + 'command-pressAndHoldStart');

          if (pressAndHoldStartCommand) {
            pressHoldElement = el;

            if (pressAndHoldTimer) {
              clearTimeout(pressAndHoldTimer);
            }

            pressAndHoldTimer = window.setTimeout(function () {
              if (el.classList.contains('pressed')) {
                that.longPressed = true;
                that.$perform(JSON.parse(pressAndHoldStartCommand));
              }
            }, 300);
          }
        }
      });
      on(el, 'mouseleave touchcancel', function () {
        // console.log(4444,'停止');
        el.classList.remove('pressed'); // let command = el.getAttribute('data-' + that.config.namespace +
        //     'command-pressAndHoldEnd');
        // const now = Date.now();
        // if (command && now > pressHoldStart + 300) {
        //     that.$perform(JSON.parse(command));
        // }
      });
      on(el, 'touchmove:passive', function (ev) {
        // console.log(555);
        el.classList.remove('pressed'); // Unlike with mouse tracking, touch tracking only sends events
        // to the target that was originally tapped on. For consistency,
        // we want to mimic the behavior of the mouse interaction by
        // tracking the touch events and dispatching them to potential targets

        if (ev && ev.preventDefault) {
          try {
            ev.preventDefault();
          } catch (error) {
            console.log('报错了', error);
          }
        }

        for (var i = 0; i < ev.changedTouches.length; i++) {
          if (ev.changedTouches[i].identifier === touchID) {
            // Found a touch matching our primary/tracked touch
            var target = document.elementFromPoint(ev.changedTouches[i].clientX, ev.changedTouches[i].clientY);

            if (target !== syntheticTarget && syntheticTarget) {
              syntheticTarget.dispatchEvent(new MouseEvent('mouseleave'), {
                bubbles: true
              });
              syntheticTarget = null;
            }

            if (target) {
              syntheticTarget = target;
              target.dispatchEvent(new MouseEvent('mouseenter', {
                bubbles: true,
                buttons: 1
              }));
            }
          }
        }
      });
      on(el, 'mouseenter', function (ev) {
        // console.log(2222);
        if (ev.buttons === 1 || ev.buttons === 0) {
          el.classList.add('pressed');
        }
      });
      on(el, 'mouseup touchend click', function (ev) {
        // 触摸点击停止
        // console.log('触摸点击停止', 3333);
        that.longPressed = false;

        if (syntheticTarget) {
          ev.stopPropagation();
          ev.preventDefault();
          var target = syntheticTarget;
          syntheticTarget = null;
          target.dispatchEvent(new MouseEvent('mouseup', {
            bubbles: true
          }));
          return;
        }

        el.classList.remove('pressed');
        el.classList.add('active');

        if (ev.type === 'click' && ev.detail !== 0) {
          // This is a click event triggered by a mouse interaction
          // (and not a keyboard interaction)
          // Ignore it, we'll handle the mouseup (or touchend) instead.
          ev.stopPropagation();
          ev.preventDefault();
          return;
        } // Since we want the active state to be visible for a while,
        // use a timer to remove it after a short delay


        window.setTimeout(function () {
          el.classList.remove('active');
        }, 150);
        var command = el.getAttribute('data-' + that.config.namespace + 'command-pressAndHoldEnd');
        var now = Date.now(); // If the button has not been pressed for very long or if we were
        // not the button that started the press and hold, don't consider
        // it a press-and-hold.

        if (el !== pressHoldElement || now < pressHoldStart + 300) {
          command = undefined;
        }

        if (!command && ev.altKey && ev.shiftKey) {
          command = el.getAttribute('data-' + that.config.namespace + 'command-altshift');
        }

        if (!command && ev.altKey) {
          command = el.getAttribute('data-' + that.config.namespace + 'command-alt');
        }

        if (!command && ev.shiftKey) {
          command = el.getAttribute('data-' + that.config.namespace + 'command-shift');
        }

        if (!command) {
          command = el.getAttribute('data-' + that.config.namespace + 'command');
        }

        if (command) {
          // Parse the JSON to get the command (and its optional arguments)
          // and perform it
          that.$perform(JSON.parse(command));
        }

        ev.stopPropagation();
        ev.preventDefault();
      });
    }
  }, {
    key: "_makeButton",
    value: function _makeButton(label, cls, ariaLabel, command) {
      var button = document.createElement('span');
      button.innerHTML = label;

      if (cls) {
        button.classList.add([].slice.call(cls.split(' ')));
      }

      if (ariaLabel) {
        button.setAttribute('aria-label', ariaLabel);
      }

      this._attachButtonHandlers(button, command);

      return button;
    }
    /*
     * Alternate options are displayed when a key on the virtual keyboard is pressed
     * and held.
     *
     */

  }, {
    key: "showAlternateKeys_",
    value: function showAlternateKeys_(keycap, altKeys) {
      console.log('显示长按键盘');
      var altContainer = getSharedElement('mathlive-alternate-keys-panel', 'ML__keyboard alternate-keys');

      if (this.virtualKeyboard.classList.contains('material')) {
        altContainer.classList.add('material');
      }

      if (altKeys.length >= 7) {
        // Width 4
        altContainer.style.width = '286px';
      } else if (altKeys.length === 4 || altKeys.length === 2) {
        // Width 2
        altContainer.style.width = '146px';
      } else if (altKeys.length === 1) {
        // Width 1
        altContainer.style.width = '86px';
      } else {
        // Width 3
        altContainer.style.width = '146px';
      } // Reset container height


      altContainer.style.height = 'auto';
      var markup = '';
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = altKeys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var altKey = _step4.value;
          markup += '<li';

          if (typeof altKey === 'string') {
            markup += ' data-latex="' + altKey.replace(/"/g, '&quot;') + '"';
          } else {
            if (altKey.latex) {
              markup += ' data-latex="' + altKey.latex.replace(/"/g, '&quot;') + '"';
            }

            if (altKey.content) {
              markup += ' data-content="' + altKey.content.replace(/"/g, '&quot;') + '"';
            }

            if (altKey.insert) {
              markup += ' data-insert="' + altKey.insert.replace(/"/g, '&quot;') + '"';
            }

            if (altKey.command) {
              markup += " data-command='" + altKey.command.replace(/"/g, '&quot;') + "'";
            }

            if (altKey.aside) {
              markup += ' data-aside="' + altKey.aside.replace(/"/g, '&quot;') + '"';
            }

            if (altKey.classes) {
              markup += ' data-classes="' + altKey.classes + '"';
            }
          }

          markup += '>';
          markup += altKey.label || '';
          markup += '</li>';
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      markup = '<ul>' + markup + '</ul>';
      altContainer.innerHTML = markup;
      editor_virtualKeyboard.makeKeycap(this, altContainer.getElementsByTagName('li'), 'performAlternateKeys');
      var keycapEl = this.virtualKeyboard.querySelector('div.keyboard-layer.is-visible div.rows ul li[data-alt-keys="' + keycap + '"]');
      var position = keycapEl.getBoundingClientRect();

      if (position) {
        if (position.top - altContainer.clientHeight < 0) {
          // altContainer.style.maxWidth = '320px';  // Up to six columns
          altContainer.style.width = 'auto';

          if (altKeys.length <= 6) {
            altContainer.style.height = '56px'; // 1 row
          } else if (altKeys.length <= 12) {
            altContainer.style.height = '108px'; // 2 rows
          } else {
            altContainer.style.height = '205px'; // 3 rows
          }
        }

        var top = (position.top - altContainer.clientHeight + 50).toString() + 'px';
        var left = Math.max(0, Math.min(window.innerWidth - altContainer.offsetWidth, (position.left + position.right - altContainer.offsetWidth) / 2)) + 'px';
        altContainer.style.transform = 'translate(' + left + ',' + top + ')';
        altContainer.classList.add('is-visible');
      }

      return false;
    }
  }, {
    key: "hideAlternateKeys_",
    value: function hideAlternateKeys_() {
      console.log('隐藏长按的键盘');
      var altContainer = document.getElementById('mathlive-alternate-keys-panel');

      if (altContainer) {
        altContainer.classList.remove('is-visible');
        altContainer.innerHTML = '';
        delete releaseSharedElement(altContainer);
      }

      return false;
    }
    /*
     * The command invoked when an alternate key is pressed.
     * We need to hide the Alternate Keys panel, then perform the
     * command.
     */

  }, {
    key: "performAlternateKeys_",
    value: function performAlternateKeys_(command) {
      this.hideAlternateKeys_();
      return this.$perform(command);
    }
  }, {
    key: "switchKeyboardLayer_",
    value: function switchKeyboardLayer_(layer) {
      if (this.config.virtualKeyboardMode !== 'off') {
        if (layer !== 'lower-command' && layer !== 'upper-command' && layer !== 'symbols-command') {
          // If we switch to a non-command keyboard layer, first exit command mode.
          this.complete_();
        }

        this.showVirtualKeyboard_(); // If the alternate keys panel was visible, hide it

        this.hideAlternateKeys_(); // If we were in a temporarily shifted state (shift-key held down)
        // restore our state before switching to a new layer.

        this.unshiftKeyboardLayer_();
        var layers = this.virtualKeyboard.getElementsByClassName('keyboard-layer'); // Search for the requested layer

        var found = false;

        for (var i = 0; i < layers.length; i++) {
          if (layers[i].dataset.layer === layer) {
            found = true;
            break;
          }
        } // We did find the layer, switch to it.
        // If we didn't find it, do nothing and keep the current layer


        if (found) {
          for (var _i = 0; _i < layers.length; _i++) {
            if (layers[_i].dataset.layer === layer) {
              layers[_i].classList.add('is-visible');
            } else {
              layers[_i].classList.remove('is-visible');
            }
          }
        }

        this.$focus();
      }

      return true;
    }
    /*
     * Temporarily change the labels and the command of the keys
     * (for example when a modifier key is held down.)
     */

  }, {
    key: "shiftKeyboardLayer_",
    value: function shiftKeyboardLayer_() {
      var keycaps = this.virtualKeyboard.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');

      if (keycaps) {
        for (var i = 0; i < keycaps.length; i++) {
          var keycap = keycaps[i];
          var shiftedContent = keycap.getAttribute('data-shifted');

          if (shiftedContent || /^[a-z]$/.test(keycap.innerHTML)) {
            keycap.setAttribute('data-unshifted-content', keycap.innerHTML);

            if (!shiftedContent) {
              shiftedContent = keycap.innerHTML.toUpperCase();
            }

            keycap.innerHTML = shiftedContent;
            var command = keycap.getAttribute('data-' + this.config.namespace + 'command');

            if (command) {
              keycap.setAttribute('data-unshifted-command', command);
              var shiftedCommand = keycap.getAttribute('data-shifted-command');

              if (shiftedCommand) {
                keycap.setAttribute('data-' + this.config.namespace + 'command', shiftedCommand);
              } else {
                var commandObj = JSON.parse(command);

                if (Array.isArray(commandObj)) {
                  commandObj[1] = commandObj[1].toUpperCase();
                }

                keycap.setAttribute('data-' + this.config.namespace + 'command', JSON.stringify(commandObj));
              }
            }
          }
        }
      }

      return false;
    }
    /*
     * Restore the key labels and commands to the state before a modifier key
     * was pressed.
     *
     */

  }, {
    key: "unshiftKeyboardLayer_",
    value: function unshiftKeyboardLayer_() {
      var keycaps = this.virtualKeyboard.querySelectorAll('div.keyboard-layer.is-visible .rows .keycap, div.keyboard-layer.is-visible .rows .action');

      if (keycaps) {
        for (var i = 0; i < keycaps.length; i++) {
          var keycap = keycaps[i];
          var content = keycap.getAttribute('data-unshifted-content');

          if (content) {
            keycap.innerHTML = content;
          }

          var command = keycap.getAttribute('data-unshifted-command');

          if (command) {
            keycap.setAttribute('data-' + this.config.namespace + 'command', command);
          }
        }
      }

      return false;
    }
  }, {
    key: "insertAndUnshiftKeyboardLayer_",
    value: function insertAndUnshiftKeyboardLayer_(c) {
      this.$insert(c);
      this.unshiftKeyboardLayer_();
      return true;
    }
    /* Toggle the virtual keyboard, but switch to the alternate theme if available */

  }, {
    key: "toggleVirtualKeyboardAlt_",
    value: function toggleVirtualKeyboardAlt_() {
      var hadAltTheme = false;

      if (this.virtualKeyboard) {
        hadAltTheme = this.virtualKeyboard.classList.contains('material');
        this.virtualKeyboard.remove();
        delete this.virtualKeyboard;
        this.virtualKeyboard = null;
      }

      this.showVirtualKeyboard_(hadAltTheme ? '' : 'material');
      return false;
    }
    /* Toggle the virtual keyboard, but switch another keyboard layout */

  }, {
    key: "toggleVirtualKeyboardShift_",
    value: function toggleVirtualKeyboardShift_() {
      this.config.virtualKeyboardLayout = {
        'qwerty': 'azerty',
        'azerty': 'qwertz',
        'qwertz': 'dvorak',
        'dvorak': 'colemak',
        'colemak': 'qwerty'
      }[this.config.virtualKeyboardLayout];
      var layer = this.virtualKeyboard ? this.virtualKeyboard.querySelector('div.keyboard-layer.is-visible') : null;
      layer = layer ? layer.id : '';

      if (this.virtualKeyboard) {
        this.virtualKeyboard.remove();
        delete this.virtualKeyboard;
        this.virtualKeyboard = null;
      }

      this.showVirtualKeyboard_();

      if (layer) {
        this.switchKeyboardLayer_(layer);
      }

      return false;
    }
  }, {
    key: "showVirtualKeyboard_",
    value: function showVirtualKeyboard_(theme) {
      this.virtualKeyboardVisible = false;
      this.toggleVirtualKeyboard_(theme);
      return false;
    }
  }, {
    key: "hideVirtualKeyboard_",
    value: function hideVirtualKeyboard_() {
      this.virtualKeyboardVisible = true;
      this.toggleVirtualKeyboard_();
      return false;
    }
  }, {
    key: "changeKeyboard_",
    value: function changeKeyboard_() {
      this.changeType_();
    }
  }, {
    key: "toggleVirtualKeyboard_",
    value: function toggleVirtualKeyboard_(theme) {
      console.log('脱焦点击事件', this.virtualKeyboardVisible);

      if (this.longPressed) {
        // 如果在长按中，不操作键盘
        console.log('长按，不允许关键盘');
        return;
      }

      if (!this.virtualKeyboardVisible) {
        this.turnOffBox_();
      } // this.turnOffBox_()


      this.virtualKeyboardVisible = !this.virtualKeyboardVisible;

      if (this.virtualKeyboardVisible) {
        if (this.virtualKeyboard) {
          this.virtualKeyboard.classList.add('is-visible');
        } else {
          // Construct the virtual keyboard
          this.virtualKeyboard = editor_virtualKeyboard.make(this, theme); // Let's make sure that tapping on the keyboard focuses the field

          on(this.virtualKeyboard, 'touchstart:passive mousedown', function () {
            that.$focus();
          });
          document.body.appendChild(this.virtualKeyboard);
        } // For the transition effect to work, the property has to be changed
        // after the insertion in the DOM. Use setTimeout


        var that = this;
        window.setTimeout(function () {
          that.virtualKeyboard.classList.add('is-visible');
        }, 1);
      } else if (this.virtualKeyboard) {
        this.virtualKeyboard.classList.remove('is-visible');
      }

      if (typeof this.config.onVirtualKeyboardToggle === 'function') {
        this.config.onVirtualKeyboardToggle(this, this.virtualKeyboardVisible, this.virtualKeyboard);
      }

      return false;
    }
    /**
     * Updates the style (color, bold, italic, etc...) of the selection or sets
     * the style to be applied to future input.
     *
     * If there is a selection, the style is applied to the selection
     *
     * If the selection already has this style, remove it. If the selection
     * has the style partially applied (i.e. only some sections), remove it from
     * those sections, and apply it to the entire selection.
     *
     * If there is no selection, the style will apply to the next character typed.
     *
     * @param {object} style  The style properties to be applied. All the
     * properties are optional and they can be combined.
     *
     * @param {string} [style.mode] - Either `"math"`, `"text"` or `"command"`
     *
     * @param {string} [style.color] - The text/fill color, as a CSS RGB value or
     * a string for some "well-known" colors, e.g. `"red"`, `"#f00"`, etc...
     *
     * @param {string} [style.backgroundColor] - The background color.
     *
     * @param {string} [style.fontFamily] - The font family used to render text.
     *
     * This value can the name of a locally available font, or a CSS font stack, e.g.
     * `"Avenir"`, `"Georgia, serif"`, etc...
     *
     * This can also be one of the following TeX-specific values:
     *
    | <!-- -->    | <!-- -->    |
    | :---------- | :---------- |
    |`"cmr"`| Computer Modern Roman, serif|
    |`"cmss"`| Computer Modern Sans-serif, latin characters only|
    |`"cmtt"`| Typewriter, slab, latin characters only|
    |`"cal"`| Calligraphic style, uppercase latin letters and digits only|
    |`"frak"`| Fraktur, gothic, uppercase, lowercase and digits|
    |`"bb"`| Blackboard bold, uppercase only|
    |`"scr"`| Script style, uppercase only|
     *
     * @param {string} [style.series] - The font 'series', i.e. weight and
     * stretch.
     *
     * The following values can be combined, for example: `"ebc"`: extra-bold,
     * condensed. Aside from `"b"`, these attributes may not have visible effect if the
     * font family does not support this attribute:
     *
    | <!-- -->    | <!-- -->    |
    | :---------- | :---------- |
    |`"ul"`| ultra-light weight|
    |`"el"`| extra-light|
    |`"l"`| light|
    |`"sl"`| semi-light|
    |`"m"`| medium (default)|
    |`"sb"`| semi-bold|
    |`"b"`| bold|
    |`"eb"`| extra-bold|
    |`"ub"`| ultra-bold|
    |`"uc"`| ultra-condensed|
    |`"ec"`| extra-condensed|
    |`"c"`| condensed|
    |`"sc"`| semi-condensed|
    |`"n"`| normal (default)|
    |`"sx"`| semi-expanded|
    |`"x"`| expanded|
    |`"ex"`| extra-expanded|
    |`"ux"`| ultra-expanded|
     *
     * @param {string} [style.shape] - The font "shape", i.e. italic or upright.
     *
    | <!-- -->    | <!-- -->    |
    | :---------- | :---------- |
    |`"auto"`| italic or upright, depending on mode and letter (single letters are italic in math mode)|
    |`"up"`| upright|
    |`"it"`| italic|
    |`"sl"`| slanted or oblique (often the same as italic)|
    |`"sc"`| small caps|
    |`"ol"`| outline|
     *
     * @param {string} [style.size] - The font size:  `"size1"`...`"size10"`.
     * '"size5"' is the default size
     *
     * @category Changing the Content
     * @method MathField#$applyStyle
     * */

  }, {
    key: "$applyStyle",
    value: function $applyStyle(style) {
      this._resetKeystrokeBuffer();

      style = validateStyle(style);

      if (style.mode) {
        // There's a mode ('text', 'math', 'command') change
        if (this.mathlist.isCollapsed()) {
          // Nothing selected
          this.switchMode_(style.mode);
        } else {
          // Convert the selection from one mode to another
          var previousMode = this.mode;
          var targetMode = (this.mathlist.anchorMode() || this.config.default) === 'math' ? 'text' : 'math';
          var convertedSelection = this.$selectedText('ASCIIMath');

          if (targetMode === 'math' && /^"[^"]+"$/.test(convertedSelection)) {
            convertedSelection = convertedSelection.slice(1, -1);
          }

          this.$insert(convertedSelection, {
            mode: targetMode,
            selectionMode: 'item',
            format: targetMode === 'text' ? 'text' : 'ASCIIMath'
          });
          this.mode = targetMode;

          if (this.groupIsSelected()) {
            // The entire group was selected. Adjust parent mode if
            // appropriate
            var parent = this.mathlist.parent();

            if (parent && (parent.type === 'group' || parent.type === 'root')) {
              parent.mode = targetMode;
            }
          } // Notify of mode change


          if (this.mode !== previousMode && typeof this.config.onModeChange === 'function') {
            this.config.onModeChange(this, this.mode);
          }
        }

        delete style.mode;
      }

      if (this.mathlist.isCollapsed()) {
        // No selection, let's update the 'current' style
        if (this.style.fontSeries && style.fontSeries === this.style.fontSeries) {
          style.fontSeries = 'auto';
        }

        if (style.fontShape && style.fontShape === this.style.fontShape) {
          style.fontShape = 'auto';
        }

        if (style.color && style.color === this.style.color) {
          style.color = 'none';
        }

        if (style.backgroundColor && style.backgroundColor === this.style.backgroundColor) {
          style.backgroundColor = 'none';
        }

        if (style.fontSize && style.fontSize === this.style.fontSize) {
          style.fontSize = 'auto';
        }

        this.style = editor_mathfield_objectSpread({}, this.style, {}, style); // This style will be used the next time an atom is inserted
      } else {
        // Change the style of the selection
        this.mathlist._applyStyle(style);

        this.undoManager.snapshot(this.config);
      }

      return true;
    }
  }, {
    key: "$hasFocus",
    value: function $hasFocus() {
      return document.hasFocus() && document.activeElement === this.textarea;
    }
  }, {
    key: "$focus",
    value: function $focus() {
      if (!this.$hasFocus()) {
        // The textarea may be a span (on mobile, for example), so check that
        // it has a focus() before calling it.
        if (this.textarea.focus) {
          this.textarea.focus();
        }

        this._announce('line');
      }
    }
  }, {
    key: "$blur",
    value: function $blur() {
      if (this.$hasFocus()) {
        if (this.textarea.blur) {
          this.textarea.blur();
        }
      }
    }
  }, {
    key: "$select",
    value: function $select() {
      this.mathlist.selectAll_();
    }
  }, {
    key: "$clearSelection",
    value: function $clearSelection() {
      this.mathlist.delete_();
    }
    /**
     * @param {string} keys - A string representation of a key combination.
     *
     * For example `"Alt-KeyU"`.
     *
     * See [W3C UIEvents](https://www.w3.org/TR/uievents/#code-virtual-keyboards)
     * for more information on the format of the descriptor.
     *
     * @param {Event?} [evt] - An event corresponding to the keystroke. Pass this
     * event if the keystroke originated from a user interaction that produced it.
     * If the keystroke is synthetic (for example, triggered in response to a
     * click or other event not involving a keyboard), omit it.
     * @return {boolean}
     * @category Changing the Content
     * @method MathField#$keystroke
     */

  }, {
    key: "$keystroke",
    value: function $keystroke(keys, evt) {
      // This is the public API, while onKeystroke is the
      // internal handler
      return this._onKeystroke(keys, evt);
    }
    /**
     * Simulates a user typing the keys indicated by text.
     *
     * @param {string} text - A sequence of one or more characters.
     * @category Changing the Content
     * @method MathField#$typedText
     */

  }, {
    key: "$typedText",
    value: function $typedText(text) {
      // This is the public API, while onTypedText is the
      // internal handler
      this._onTypedText(text);
    }
    /**
     *
     * @param {string} text
     * @param {object} [options]
     * @param {boolean} [options.focus] - If true, the mathfield will be focused.
     * @param {boolean} [options.feedback] - If true, provide audio and haptic feedback.
     * @param {boolean} [options.simulateKeystroke] - If true, generate some synthetic
     * keystrokes (useful to trigger inline shortcuts, for example).
     * @private
     */

  }, {
    key: "typedText_",
    value: function typedText_(text, options) {
      return this._onTypedText(text, options);
    }
    /**
     *
     * Update the configuration options for this mathfield.
     *
     * @param {MathFieldConfig} config - See {@tutorial CONFIG Configuration Options} for details.
     *
     * @method MathField#$setConfig
     */

  }, {
    key: "$setConfig",
    value: function $setConfig(conf) {
      if (!this.config) {
        this.config = {
          smartFence: true,
          smartSuperscript: true,
          scriptDepth: [Infinity, Infinity],
          removeExtraneousParentheses: true,
          overrideDefaultInlineShortcuts: false,
          virtualKeyboard: '',
          virtualKeyboardLayout: 'qwerty',
          namespace: ''
        };
      }

      this.config = editor_mathfield_objectSpread({}, this.config, {}, conf);

      if (this.config.scriptDepth !== undefined && !Array.isArray(this.config.scriptDepth)) {
        var depth = parseInt(this.config.scriptDepth);
        this.config.scriptDepth = [depth, depth];
      }

      if (typeof this.config.removeExtraneousParentheses === 'undefined') {
        this.config.removeExtraneousParentheses = true;
      }

      this.config.onAnnounce = conf.onAnnounce || _onAnnounce;
      this.config.macros = Object.assign({}, definitions.MACROS, this.config.macros); // Validate the namespace (used for `data-` attributes)

      if (!/^[a-z]*[-]?$/.test(this.config.namespace)) {
        throw Error('options.namespace must be a string of lowercase characters only');
      }

      if (!/-$/.test(this.config.namespace)) {
        this.config.namespace += '-';
      } // Localization strings override (or localizations for new locales)


      l10n.locale = this.config.locale || l10n.locale;
      l10n.merge(this.config.strings);
      this.config.virtualKeyboardLayout = conf.virtualKeyboardLayout || {
        'fr': 'azerty',
        'be': 'azerty',
        'al': 'qwertz',
        'ba': 'qwertz',
        'cz': 'qwertz',
        'de': 'qwertz',
        'hu': 'qwertz',
        'sk': 'qwertz',
        'ch': 'qwertz'
      }[l10n.locale.substring(0, 2)] || 'qwerty'; // Possible keypress sound feedback

      this.keypressSound = undefined;
      this.spacebarKeypressSound = undefined;
      this.returnKeypressSound = undefined;
      this.deleteKeypressSound = undefined;

      if (this.config.keypressSound) {
        if (typeof this.config.keypressSound === 'string') {
          this.keypressSound = new Audio();
          this.keypressSound.preload = 'none';
          this.keypressSound.src = this.config.keypressSound;
          this.keypressSound.volume = AUDIO_FEEDBACK_VOLUME;
          this.spacebarKeypressSound = this.keypressSound;
          this.returnKeypressSound = this.keypressSound;
          this.deleteKeypressSound = this.keypressSound;
        } else {
          console.assert(this.config.keypressSound.default);
          this.keypressSound = new Audio();
          this.keypressSound.preload = 'none';
          this.keypressSound.src = this.config.keypressSound.default;
          this.keypressSound.volume = AUDIO_FEEDBACK_VOLUME;
          this.spacebarKeypressSound = this.keypressSound;
          this.returnKeypressSound = this.keypressSound;
          this.deleteKeypressSound = this.keypressSound;

          if (this.config.keypressSound.spacebar) {
            this.spacebarKeypressSound = new Audio();
            this.spacebarKeypressSound.preload = 'none';
            this.spacebarKeypressSound.src = this.config.keypressSound.spacebar;
            this.spacebarKeypressSound.volume = AUDIO_FEEDBACK_VOLUME;
          }

          if (this.config.keypressSound.return) {
            this.returnKeypressSound = new Audio();
            this.returnKeypressSound.preload = 'none';
            this.returnKeypressSound.src = this.config.keypressSound.return;
            this.returnKeypressSound.volume = AUDIO_FEEDBACK_VOLUME;
          }

          if (this.config.keypressSound.delete) {
            this.deleteKeypressSound = new Audio();
            this.deleteKeypressSound.preload = 'none';
            this.deleteKeypressSound.src = this.config.keypressSound.delete;
            this.deleteKeypressSound.volume = AUDIO_FEEDBACK_VOLUME;
          }
        }
      }

      if (this.config.plonkSound) {
        this.plonkSound = new Audio();
        this.plonkSound.preload = 'none';
        this.plonkSound.src = this.config.plonkSound;
        this.plonkSound.volume = AUDIO_FEEDBACK_VOLUME;
      }
    }
    /**
     *
     * Speak some part of the expression, either with or without synchronized highlighting.
     *
     * @param {string} amount - `"all"`, `"selection"`, `"left"`, `"right"`, `"group"`, `"parent"`
     * @param {object} speakOptions
     * @param {boolean} speakOptions.withHighlighting - If true, synchronized
     * highlighting of speech will happen (if possible). Default is false.
     *
     * @method MathField#speak_
     */

  }, {
    key: "speak_",
    value: function speak_(amount, speakOptions) {
      speakOptions = speakOptions || {
        withHighlighting: false
      };

      function getAtoms(mathField, amount) {
        var result = null;

        switch (amount) {
          case 'all':
            result = mathField.mathlist.root;
            break;

          case 'selection':
            if (!mathField.mathlist.isCollapsed()) {
              result = mathField.mathlist.getSelectedAtoms();
            }

            break;

          case 'left':
            {
              var siblings = mathField.mathlist.siblings();
              var last = mathField.mathlist.startOffset();

              if (last >= 1) {
                result = [];

                for (var i = 1; i <= last; i++) {
                  result.push(siblings[i]);
                }
              }

              break;
            }

          case 'right':
            {
              var _siblings = mathField.mathlist.siblings();

              var first = mathField.mathlist.endOffset() + 1;

              if (first <= _siblings.length - 1) {
                result = [];

                for (var _i2 = first; _i2 <= _siblings.length - 1; _i2++) {
                  result.push(_siblings[_i2]);
                }
              }

              break;
            }

          case 'start':
          case 'end':
            // not yet implemented
            break;

          case 'group':
            result = mathField.mathlist.siblings();
            break;

          case 'parent':
            {
              var parent = mathField.mathlist.parent();

              if (parent && parent.type !== 'root') {
                result = mathField.mathlist.parent();
              }

              break;
            }

          default:
            console.log('unknown atom type "' + mathField.type + '"');
            break;
        }

        return result;
      }

      function getFailedSpeech(amount) {
        var result = '';

        switch (amount) {
          case 'all':
            console.log("Internal failure: speak all failed");
            break;

          case 'selection':
            result = 'no selection';
            break;

          case 'left':
            result = 'at start';
            break;

          case 'right':
            result = 'at end';
            break;

          case 'group':
            console.log("Internal failure: speak group failed");
            break;

          case 'parent':
            result = 'no parent';
            break;

          default:
            console.log('unknown speak_ param value: "' + amount + '"');
            break;
        }

        return result;
      }

      var atoms = getAtoms(this, amount);

      if (atoms === null) {
        this.config.handleSpeak(getFailedSpeech(amount));
        return false;
      }

      var options = editor_mathfield_objectSpread({}, this.config);

      if (speakOptions.withHighlighting || options.speechEngine === 'amazon') {
        options.textToSpeechMarkup = window.sre && options.textToSpeechRules === 'sre' ? 'ssml_step' : 'ssml';

        if (speakOptions.withHighlighting) {
          options.generateID = true;
        }
      }

      var text = mathAtom.toSpeakableText(atoms, options);

      if (speakOptions.withHighlighting) {
        window.mathlive.readAloudMathField = this;

        this._render({
          forHighlighting: true
        });

        if (this.config.handleReadAloud) {
          this.config.handleReadAloud(this.field, text, this.config);
        }
      } else {
        if (this.config.handleSpeak) {
          this.config.handleSpeak(text, options);
        }
      }

      return false;
    }
  }]);

  return MathField;
}();
/**
 * Utility function that returns the element which has the caret
 *
 * @param {DomElement} el
 * @private
 */


function _findElementWithCaret(el) {
  if (el.classList.contains('ML__caret') || el.classList.contains('ML__text-caret') || el.classList.contains('ML__command-caret')) {
    return el;
  }

  var result;
  Array.from(el.children).forEach(function (child) {
    result = result || _findElementWithCaret(child);
  });
  return result;
}
/**
 * Return a tuple of an element and a distance from point (x, y)
 * @param {HTMLElement} el
 * @param {number} x
 * @param {number} y
 * @function module:editor/mathfield#nearestElementFromPoint
 * @private
 */


function nearestElementFromPoint(el, x, y) {
  var result = {
    element: null,
    distance: Number.POSITIVE_INFINITY
  }; // This element may not have a matching atom, but its children might

  var considerChildren = true;

  if (el.getAttribute('data-atom-id')) {
    result.element = el; // Calculate the (square of the) distance to the rectangle

    var r = el.getBoundingClientRect();
    var dx = x - (r.left + r.right) / 2;
    var dy = y - (r.top + r.bottom) / 2;
    result.distance = dx * dx + dy * dy; // Only consider children if the target is inside the (horizontal)
    // bounds of the element.
    // This avoid searching the numerator/denominator when a fraction
    // is the last element in the formula.

    considerChildren = x >= r.left && x <= r.right;
  }

  if (considerChildren && el.children) {
    Array.from(el.children).forEach(function (child) {
      var nearest = nearestElementFromPoint(child, x, y);

      if (nearest.element && nearest.distance <= result.distance) {
        result = nearest;
      }
    });
  }

  return result;
}

var lastTap;
var tapCount = 0;

function speakableText(mathfield, prefix, atoms) {
  var config = Object.assign({}, mathfield.config);
  config.textToSpeechMarkup = '';
  config.textToSpeechRulesOptions = config.textToSpeechRulesOptions || {};
  config.textToSpeechRulesOptions.markup = 'none';
  return prefix + mathAtom.toSpeakableText(atoms, config);
}
/**
 * Announce a change in selection or content via the aria-live region.
 * This is the default implementation for this function. It can be overridden
 * via `config.onAnnounce`
 * @param {object} target Typically, a MathField.
 * @param {string} command The command that invoked the change.
 * @param {Atom[]} [oldMathlist] The previous value of mathlist before the change.
 * @param {Atom[]} [atomsToSpeak]
 * @method MathField#_onAnnounce
 * @private
 */


function _onAnnounce(target, command, oldMathlist, atomsToSpeak) {
  //** Fix: the focus is the end of the selection, so it is before where we want it
  var liveText = ''; // const command = moveAmount > 0 ? "right" : "left";

  if (command === 'plonk') {
    // Use this sound to indicate (minor) errors, for
    // example when a command has no effect.
    if (target.plonkSound) {
      target.plonkSound.load();
      target.plonkSound.play().catch(function (err) {
        return console.warn(err);
      });
    } // As a side effect, reset the keystroke buffer


    target._resetKeystrokeBuffer();
  } else if (command === 'delete') {
    liveText = speakableText(target, 'deleted: ', atomsToSpeak); //*** FIX: could also be moveUp or moveDown -- do something different like provide context???
  } else if (command === 'focus' || /move/.test(command)) {
    //*** FIX -- should be xxx selected/unselected */
    liveText = (target.mathlist.isCollapsed() ? '' : 'selected: ') + target._nextAtomSpeechText(oldMathlist);
  } else if (command === 'replacement') {
    // announce the contents
    liveText = speakableText(target, '', target.mathlist.sibling(0));
  } else if (command === 'line') {
    // announce the current line -- currently that's everything
    liveText = speakableText(target, '', target.mathlist.root);
    target.accessibleNode.innerHTML = '<math xmlns="http://www.w3.org/1998/Math/MathML">' + mathAtom.toMathML(target.mathlist.root, target.config) + '</math>';
    target.textarea.setAttribute('aria-label', 'after: ' + liveText);
    /*** FIX -- testing hack for setting braille ***/
    // target.accessibleNode.focus();
    // console.log("before sleep");
    // sleep(1000).then(() => {
    //     target.textarea.focus();
    //     console.log("after sleep");
    // });
  } else {
    liveText = atomsToSpeak ? speakableText(target, command + " ", atomsToSpeak) : command;
  } // aria-live regions are only spoken when it changes; force a change by
  // alternately using nonbreaking space or narrow nonbreaking space


  var ariaLiveChangeHack = /\u00a0/.test(target.ariaLiveText.textContent) ? " \u202F " : " \xA0 ";
  target.ariaLiveText.textContent = liveText + ariaLiveChangeHack; // this.textarea.setAttribute('aria-label', liveText + ariaLiveChangeHack);
}

editor_mathfield_MathField.prototype.undo_ = editor_mathfield_MathField.prototype.undo;
editor_mathfield_MathField.prototype.redo_ = editor_mathfield_MathField.prototype.redo;
editor_mathfield_MathField.prototype.scrollIntoView_ = editor_mathfield_MathField.prototype.scrollIntoView;
editor_mathfield_MathField.prototype.scrollToStart_ = editor_mathfield_MathField.prototype.scrollToStart;
editor_mathfield_MathField.prototype.scrollToEnd_ = editor_mathfield_MathField.prototype.scrollToEnd;
editor_mathfield_MathField.prototype.insert_ = editor_mathfield_MathField.prototype.$insert;
/* harmony default export */ var editor_mathfield = ({
  isValidMathfield: isValidMathfield,
  MathField: editor_mathfield_MathField
});
// CONCATENATED MODULE: ./packages/addons/auto-render.js
/* eslint no-console:0 */
 // eslint-disable-line no-unused-vars



function findEndOfMath(delimiter, text, startIndex) {
  // Adapted from
  // https://github.com/Khan/perseus/blob/master/src/perseus-markdown.jsx
  var index = startIndex;
  var braceLevel = 0;
  var delimLength = delimiter.length;

  while (index < text.length) {
    var character = text[index];

    if (braceLevel <= 0 && text.slice(index, index + delimLength) === delimiter) {
      return index;
    } else if (character === '\\') {
      index++;
    } else if (character === '{') {
      braceLevel++;
    } else if (character === '}') {
      braceLevel--;
    }

    index++;
  }

  return -1;
}

function splitAtDelimiters(startData, leftDelim, rightDelim, mathstyle) {
  var finalData = [];

  for (var i = 0; i < startData.length; i++) {
    if (startData[i].type === 'text') {
      var text = startData[i].data;
      var lookingForLeft = true;
      var currIndex = 0;
      var nextIndex = void 0;
      nextIndex = text.indexOf(leftDelim);

      if (nextIndex !== -1) {
        currIndex = nextIndex;

        if (currIndex > 0) {
          finalData.push({
            type: 'text',
            data: text.slice(0, currIndex)
          });
        }

        lookingForLeft = false;
      }

      var done = false;

      while (!done) {
        if (lookingForLeft) {
          nextIndex = text.indexOf(leftDelim, currIndex);

          if (nextIndex === -1) {
            done = true;
            break;
          }

          if (currIndex !== nextIndex) {
            finalData.push({
              type: 'text',
              data: text.slice(currIndex, nextIndex)
            });
          }

          currIndex = nextIndex;
        } else {
          nextIndex = findEndOfMath(rightDelim, text, currIndex + leftDelim.length);

          if (nextIndex === -1) {
            done = true;
            break;
          }

          finalData.push({
            type: 'math',
            data: text.slice(currIndex + leftDelim.length, nextIndex),
            rawData: text.slice(currIndex, nextIndex + rightDelim.length),
            mathstyle: mathstyle
          });
          currIndex = nextIndex + rightDelim.length;
        }

        lookingForLeft = !lookingForLeft;
      }

      if (currIndex < text.length) {
        finalData.push({
          type: 'text',
          data: text.slice(currIndex)
        });
      }
    } else {
      finalData.push(startData[i]);
    }
  }

  return finalData;
}

function splitWithDelimiters(text, delimiters) {
  var data = [{
    type: 'text',
    data: text
  }];

  for (var i = 0; i < delimiters.inline.length; i++) {
    var delimiter = delimiters.inline[i];
    data = splitAtDelimiters(data, delimiter[0], delimiter[1], 'textstyle');
  }

  for (var _i = 0; _i < delimiters.display.length; _i++) {
    var _delimiter = delimiters.display[_i];
    data = splitAtDelimiters(data, _delimiter[0], _delimiter[1], 'displaystyle');
  }

  return data;
}

function createMathMLNode(latex, options) {
  // Create a node for AT (Assistive Technology, e.g. screen reader) to speak, etc.
  // This node has a style that makes it be invisible to display but is seen by AT
  var span = document.createElement('span');

  try {
    span.innerHTML = "<math xmlns='http://www.w3.org/1998/Math/MathML'>" + options.renderToMathML(latex, options) + "</math>";
  } catch (e) {
    console.error('Could not convert\'' + latex + '\' to MathML with ', e);
    span.textContent = latex;
  }

  span.className = 'sr-only';
  return span;
}

function createMarkupNode(text, options, mathstyle, createNodeOnFailure) {
  // Create a node for displaying math.
  //   This is slightly ugly because in the case of failure to create the markup,
  //   sometimes a text node is desired and sometimes not.
  //   'createTextNodeOnFailure' controls this and null is returned when no node is created.
  // This node is made invisible to AT (screen readers)
  var span = document.createElement('span');
  span.setAttribute('aria-hidden', 'true');

  if (options.preserveOriginalContent) {
    span.setAttribute('data-' + options.namespace + 'original-content', text);

    if (mathstyle) {
      span.setAttribute('data-' + options.namespace + 'original-mathstyle', mathstyle);
    }
  }

  try {
    span.innerHTML = options.renderToMarkup(text, mathstyle || 'displaystyle', 'html', options.macros);
  } catch (e) {
    console.error('Could not parse\'' + text + '\' with ', e);

    if (createNodeOnFailure) {
      span = document.createTextNode(text);
    } else {
      return null;
    }
  }

  return span;
}

function createAccessibleMarkupPair(text, mathstyle, options, createNodeOnFailure) {
  // Create a math node (a span with an accessible component and a visual component)
  // If there is an error in parsing the latex, 'createNodeOnFailure' controls whether
  //   'null' is returned or an accessible node with the text used.
  var markupNode = createMarkupNode(text, options, mathstyle, createNodeOnFailure);

  if (markupNode && /\b(mathml|speakable-text)\b/i.test(options.renderAccessibleContent)) {
    var fragment = document.createDocumentFragment();

    if (/\bmathml\b/i.test(options.renderAccessibleContent) && options.renderToMathML) {
      fragment.appendChild(createMathMLNode(text, options));
    }

    if (/\bspeakable-text\b/i.test(options.renderAccessibleContent) && options.renderToSpeakableText) {
      var span = document.createElement('span');
      span.innerHTML = options.renderToSpeakableText(text, options);
      span.className = 'sr-only';
      fragment.appendChild(span);
    }

    fragment.appendChild(markupNode);
    return fragment;
  }

  return markupNode;
}

function auto_render_scanText(text, options) {
  // If the text starts with '\begin'...
  // (this is a MathJAX behavior)
  var fragment = null;

  if (options.TeX.processEnvironments && /^\s*\\begin/.test(text)) {
    fragment = document.createDocumentFragment();
    fragment.appendChild(createAccessibleMarkupPair(text, undefined, options, true));
  } else {
    var data = splitWithDelimiters(text, options.TeX.delimiters);

    if (data.length === 1 && data[0].type === 'text') {
      // This text contains no math. No need to continue processing
      return null;
    }

    fragment = document.createDocumentFragment();

    for (var i = 0; i < data.length; i++) {
      if (data[i].type === 'text') {
        fragment.appendChild(document.createTextNode(data[i].data));
      } else {
        fragment.appendChild(createAccessibleMarkupPair(data[i].data, data[i].mathstyle, options, true));
      }
    }
  }

  return fragment;
}

function scanElement(elem, options) {
  var originalContent = elem.getAttribute('data-' + options.namespace + 'original-content');

  if (originalContent) {
    var mathstyle = elem.getAttribute('data-' + options.namespace + 'mathstyle');
    var span = createAccessibleMarkupPair(originalContent, mathstyle, options, false);

    if (span != null) {
      elem.textContent = '';
      elem.appendChild(span);
    }

    return;
  }

  if (elem.childNodes.length === 1 && elem.childNodes[0].nodeType === 3) {
    // This is a node with textual content only. Perhaps an opportunity
    // to simplify and avoid creating extra nested elements...
    var text = elem.childNodes[0].textContent;

    if (options.TeX.processEnvironments && /^\s*\\begin/.test(text)) {
      elem.textContent = '';
      elem.appendChild(createAccessibleMarkupPair(text, undefined, options, true));
      return;
    }

    var data = splitWithDelimiters(text, options.TeX.delimiters);

    if (data.length === 1 && data[0].type === 'math') {
      // The entire content is a math expression: we can replace the content
      // with the latex markup without creating additional wrappers.
      elem.textContent = '';
      elem.appendChild(createAccessibleMarkupPair(data[0].data, data[0].mathstyle, options, true));
      return;
    } else if (data.length === 1 && data[0].type === 'text') {
      // This element only contained text with no math. No need to
      // do anything.
      return;
    }
  }

  for (var i = 0; i < elem.childNodes.length; i++) {
    var childNode = elem.childNodes[i];

    if (childNode.nodeType === 3) {
      // A text node
      // Look for math mode delimiters inside the text
      var frag = auto_render_scanText(childNode.textContent, options);

      if (frag) {
        i += frag.childNodes.length - 1;
        elem.replaceChild(frag, childNode);
      }
    } else if (childNode.nodeType === 1) {
      // An element node
      var tag = childNode.nodeName.toLowerCase();

      if (tag === 'script' && options.processScriptTypePattern.test(childNode.type)) {
        var style = 'displaystyle';
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = childNode.type.split(';')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var l = _step.value;
            var v = l.split('=');

            if (v[0].toLowerCase() === 'mode') {
              if (v[1].toLoweCase() === 'display') {
                style = 'displaystyle';
              } else {
                style = 'textstyle';
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var _span = createAccessibleMarkupPair(childNode.textContent, style, options, true);

        childNode.parentNode.replaceChild(_span, childNode);
      } else {
        // Element node
        var shouldRender = options.processClassPattern.test(childNode.className) || !(options.skipTags.includes(tag) || options.ignoreClassPattern.test(childNode.className));

        if (shouldRender) {
          scanElement(childNode, options);
        }
      }
    } // Otherwise, it's something else, and ignore it.

  }
}

var defaultOptions = {
  // Optional namespace for the `data-` attributes.
  namespace: '',
  // Name of tags whose content will not be scanned for math delimiters
  skipTags: ['noscript', 'style', 'textarea', 'pre', 'code', 'annotation', 'annotation-xml'],
  // <script> tags of the following types will be processed. Others, ignored.
  processScriptType: "math/tex",
  // Regex pattern of the class name of elements whose contents should not
  // be processed
  ignoreClass: "tex2jax_ignore",
  // Regex pattern of the class name of elements whose contents should
  // be processed when they appear inside ones that are ignored.
  processClass: "tex2jax_process",
  // Indicate whether to preserve or discard the original content of the
  // elements being rendered in a 'data-original-content' attribute.
  preserveOriginalContent: true,
  // Indicate the format to use to render accessible content
  renderAccessibleContent: 'mathml',
  TeX: {
    disabled: false,
    processEnvironments: true,
    delimiters: {
      inline: [['\\(', '\\)']],
      display: [['$$', '$$'], ['\\[', '\\]']]
    }
  }
};

function renderMathInElement(elem, options) {
  try {
    options = Object.assign({}, defaultOptions, options);
    options.ignoreClassPattern = new RegExp(options.ignoreClass);
    options.processClassPattern = new RegExp(options.processClass);
    options.processScriptTypePattern = new RegExp(options.processScriptType);
    options.macros = definitions.MACROS; // Validate the namespace (used for `data-` attributes)

    if (options.namespace) {
      if (!/^[a-z]+[-]?$/.test(options.namespace)) {
        throw Error('options.namespace must be a string of lowercase characters only');
      }

      if (!/-$/.test(options.namespace)) {
        options.namespace += '-';
      }
    }

    scanElement(elem, options);
  } catch (e) {
    if (e instanceof Error) {
      console.error('renderMathInElement(): ' + e.message);
    } else {
      console.error('renderMathInElement(): Could not render math for element ' + elem);
    }
  }
}

/* harmony default export */ var auto_render = ({
  renderMathInElement: renderMathInElement
});
// CONCATENATED MODULE: ./packages/mathlive.js
/**
 *
 * Use MathLive to render and edit mathematical formulas in your browser.
 *
 * This module exports {@link #functions%3Amathlive some functions} and the {@link #class%3AMathField `MathField`} class.
 *
 * See {@tutorial USAGE_GUIDE the Usage Guide} for more details on how to get
 * started.
 *
 * @example
 * // To invoke the functions in this module, import the `mathlive` module.
 *
 * import mathlive from 'dist/mathlive.mjs';
 *
 * console.log(mathlive.latexToMarkup('e^{i\\pi}+1=0'));
 *
 * @module mathlive
 * @packageDocumentation MathLive API Reference
 *
 */








/**
 * Converts a LaTeX string to a string of HTML markup.
 *
 * @param {string} text A string of valid LaTeX. It does not have to start
 * with a mode token such as `$$` or `\(`.
 *
 * @param {"displaystyle" | "textstyle"} mathstyle If `'displaystyle'` the "display" mode of TeX
 * is used to typeset the formula, which is most appropriate for formulas that are
 * displayed in a standalone block.
 *
 * If `'textstyle'` is used, the "text" mode
 * of TeX is used, which is most appropriate when displaying math "inline"
 * with other text (on the same line).
 *
 * @param {"mathlist" | "span" | "html"} [format='html'] For debugging purposes, this function
 * can also return a text representation of internal data structures
 * used to construct the markup.
 *
 * @return {string}
 * @category Converting
 * @function module:mathlive#latexToMarkup
 */

function mathlive_toMarkup(text, mathstyle, format, macros) {
  mathstyle = mathstyle || 'displaystyle';
  console.assert(/displaystyle|textstyle|scriptstyle|scriptscriptstyle/.test(mathstyle), "Invalid style:", mathstyle); //
  // 1. Tokenize the text
  //

  var tokens = lexer.tokenize(text); //
  // 2. Parse each token in the formula
  //    Turn the list of tokens in the formula into
  //    a tree of high-level MathAtom, e.g. 'genfrac'.
  //

  var mathlist = parser.parseTokens(tokens, 'math', null, macros);
  if (format === 'mathlist') return mathlist; //
  // 3. Transform the math atoms into elementary spans
  //    for example from genfrac to vlist.
  //

  var spans = mathAtom.decompose({
    mathstyle: mathstyle
  }, mathlist); //
  // 4. Simplify by coalescing adjacent nodes
  //    for example, from <span>1</span><span>2</span>
  //    to <span>12</span>
  //

  spans = core_span.coalesce(spans);
  if (format === 'span') return spans; //
  // 5. Wrap the expression with struts
  //

  var base = core_span.makeSpan(spans, 'ML__base');
  var topStrut = core_span.makeSpan('', 'ML__strut');
  topStrut.setStyle('height', base.height, 'em');
  var struts = [topStrut];

  if (base.depth !== 0) {
    var bottomStrut = core_span.makeSpan('', 'ML__strut--bottom');
    bottomStrut.setStyle('height', base.height + base.depth, 'em');
    bottomStrut.setStyle('vertical-align', -base.depth, 'em');
    struts.push(bottomStrut);
  }

  struts.push(base);
  var wrapper = core_span.makeSpan(struts, 'ML__mathlive'); //
  // 6. Generate markup
  //

  return wrapper.toMarkup();
}
/**
 * Convert a DOM element into an editable mathfield.
 *
 * After the DOM element has been created, the value `element.mathfield` will
 * return a reference to the mathfield object. This value is also returned
 * by `makeMathField`
 *
 * @param {HTMLElement|string} element A DOM element, for example as obtained
 * by `document.getElementById()`, or the ID of a DOM element as a string.
 *
 * @param {MathFieldConfig} [config={}] See {@tutorial CONFIG} for details.
 *
 *
 * @return {MathField}
 *
 * Given the HTML markup:
 * ```html
 * <span id='equation'>$f(x)=sin(x)$</span>
 * ```
 * The following code will turn the span into an editable mathfield.
 * ```
 * import MathLive from 'dist/mathlive.mjs';
 * MathLive.makeMathField('equation');
 * ```
 *
 * @function module:mathlive#makeMathField
 */


function makeMathField(element, config) {
  if (!editor_mathfield) {
    throw Error('The MathField module is not loaded.');
  }

  config = config || {};
  config.handleSpeak = config.handleSpeak || speak;
  config.handleReadAloud = config.handleReadAloud || readAloud;
  return new editor_mathfield.MathField(getElement(element), config);
}
/**
 * Converts a LaTeX string to a string of MathML markup.
 *
 * @param {string} latex A string of valid LaTeX. It does not have to start
 * with a mode token such as a `$$` or `\(`.
 * @param {object} options
 * @param {boolean} [options.generateID=false] - If true, add an `"extid"` attribute
 * to the MathML nodes with a value matching the `atomID`. This can be used
 * to map items on the screen with their MathML representation or vice-versa.
 * @return {string}
 * @category Converting
 * @function module:mathlive#latexToMathML
 */


function mathlive_toMathML(latex, options) {
  if (!mathAtom.toMathML) {
    console.warn('The MathML module is not loaded.');
    return '';
  }

  options = options || {};
  options.macros = options.macros || {};
  Object.assign(options.macros, definitions.MACROS);
  var mathlist = parser.parseTokens(lexer.tokenize(latex), 'math', null, options.macros);
  return mathAtom.toMathML(mathlist, options);
}
/**
 * Converts a LaTeX string to an Abstract Syntax Tree (MathJSON)
 *
 * **See:** {@tutorial MATHJSON}
 *
 * @param {string} latex A string of valid LaTeX. It does not have to start
 * with a mode token such as a `$$` or `\(`.
 * @param {Object.<string, any>} options
 * @param {object} [options.macros] A dictionary of LaTeX macros
 *
 * @return {object} The Abstract Syntax Tree as an object literal using the MathJSON format.
 * @category Converting
 * @function module:mathlive#latexToAST
 */


function latexToAST(latex, options) {
  if (!mathAtom.toAST) {
    console.warn('The AST module is not loaded.');
    return {};
  }

  options = options || {};
  options.macros = options.macros || {};
  Object.assign(options.macros, definitions.MACROS);
  var mathlist = parser.parseTokens(lexer.tokenize(latex), 'math', null, options.macros);
  return mathAtom.toAST(mathlist, options);
}
/**
 * Converts an Abstract Syntax Tree (MathJSON) to a LaTeX string.
 *
 * **See:** {@tutorial MATHJSON}
 *
 * @param {object} ast - The Abstract Syntax Tree as an object literal (MathJSON).
 * @param {Object.<string, any>} options
 * @param {number} [options.precision=14] The number of digits used in the
 * representation of numbers. **Default** = 14.
 * @param {string} [options.decimalMarker='.'] The character used as the decimal
 * marker. **Default** = `"."`.
 * @param {string} [options.groupSeparator='\\, '] The character used to separate group of numbers, typically thousands. **Default** = `"\\, "`
 * @param {string} [options.product='\\cdot '] The character used to indicate product. Other option would be `"\\times "`. **Default** = `"\\cdot "`
 * @param {string} [options.exponentProduct='\\cdot '] The character used before an
 * exponent indicator. **Default** = `"\\cdot "`
 * @param {string} [options.exponentMarker=''] The character used to indicate an
 * exponent. **Default** = `""`
 * @param {"auto" | "engineering" | "on"} [options.scientificNotation='auto'] The format used for numbers
 * using the scientific notation. **Default** = `"auto"`
 * @param {string} [options.beginRepeatingDigits='\\overline{'] The string
 * used at the begining of repeating digits. **Default** = `"\\overline{"`
 * @param {string} [options.endRepeatingDigits='}'] The string
 * used at the end of repeating digits. **Default** = `"}"`
*
 * @return {string} The LaTeX representation of the Abstract Syntax Tree, if valid.
 * @category Converting
 * @function module:mathlive#astToLatex
 */


function astToLatex(ast, options) {
  return mathJson.asLatex(ast, options);
}
/**
 * Converts a LaTeX string to a textual representation ready to be spoken
 *
 * @param {string} latex A string of valid LaTeX. It does not have to start
 * with a mode token such as a `$$` or `\(`.
 *
 * @param {Object.<string, any>} options
 *
 * @param {"mathlive" | "sre"} [options.textToSpeechRules='mathlive'] The set of text to
 * speech rules to use.
 *
 * A value of `"mathlive"` (the default) indicates that
 * the simple rules built into MathLive should be used.
 *
 * A value of `"sre"` indicates that the Speech Rule Engine from Volker Sorge
 * should be used.
 * Note that SRE is not included or loaded by MathLive and for this option to
 * work SRE should be loaded separately.
 *
 * @param {string} [options.textToSpeechMarkup=''] The markup syntax to use
 * for the output of conversion to spoken text.
 *
 * Possible values are `ssml` for
 * the SSML markup or `mac` for the MacOS markup (e.g. `"[[ltr]]"`)
 *
 * @param {Object.<string, any>} [options.textToSpeechRulesOptions={}] A set of
 * key/value pairs that can be used to configure the speech rule engine.
 *
 * Which options are available depends on the speech rule engine in use. There
 * are no options available with MathLive's built-in engine. The options for
 * the SRE engine are documented [here]{@link:https://github.com/zorkow/speech-rule-engine}
 * @return {string} The spoken representation of the input LaTeX.
 * @example
 * console.log(MathLive.latexToSpeakableText('\\frac{1}{2}'));
 * // ➡︎'half'
 * @category Converting
 * @function module:mathlive#latexToSpeakableText
 */


function latexToSpeakableText(latex, options) {
  if (!mathAtom.toSpeakableText) {
    console.warn('The outputSpokenText module is not loaded.');
    return "";
  }

  options = options || {};
  options.macros = options.macros || {};
  Object.assign(options.macros, definitions.MACROS);
  var mathlist = parser.parseTokens(lexer.tokenize(latex), 'math', null, options.macros);
  return mathAtom.toSpeakableText(mathlist, options);
}

function removeHighlight(node) {
  node.classList.remove('highlight');

  if (node.children) {
    Array.from(node.children).forEach(function (x) {
      removeHighlight(x);
    });
  }
}
/**
 * Highlights the span corresponding to the specified atomID.
 *
 * This is used for text-to-speech with synchronized highlighting (read aloud)
 *
 * @category Read Aloud
 * @param {string} atomID
 *
 */


function highlightAtomID(node, atomID) {
  if (!atomID || node.dataset.atomId === atomID) {
    node.classList.add('highlight');

    if (node.children && node.children.length > 0) {
      Array.from(node.children).forEach(function (x) {
        highlightAtomID(x);
      });
    }
  } else {
    node.classList.remove('highlight');

    if (node.children && node.children.length > 0) {
      Array.from(node.children).forEach(function (x) {
        highlightAtomID(x, atomID);
      });
    }
  }
}

function speak(text, config) {
  if (!config && window && window.mathlive) {
    config = window.mathlive.config;
  }

  config = config || {};

  if (!config.speechEngine || config.speechEngine === 'local') {
    // On ChromeOS: chrome.accessibilityFeatures.spokenFeedback
    // See also https://developer.chrome.com/apps/tts
    var utterance = new SpeechSynthesisUtterance(text);

    if (window) {
      window.speechSynthesis.speak(utterance);
    } else {
      console.log('Speak: ', text);
    }
  } else if (config.speechEngine === 'amazon') {
    if (!window || !window.AWS) {
      console.warn('AWS SDK not loaded. See https://www.npmjs.com/package/aws-sdk');
    } else {
      var polly = new window.AWS.Polly({
        apiVersion: '2016-06-10'
      });
      var params = {
        OutputFormat: 'mp3',
        VoiceId: config.speechEngineVoice || 'Joanna',
        // SampleRate: '16000',
        Text: text,
        TextType: 'ssml' // SpeechMarkTypes: ['ssml]'

      };
      polly.synthesizeSpeech(params, function (err, data) {
        if (err) {
          console.warn('polly.synthesizeSpeech() error:', err, err.stack);
        } else {
          if (data && data.AudioStream) {
            var uInt8Array = new Uint8Array(data.AudioStream);
            var blob = new Blob([uInt8Array.buffer], {
              type: 'audio/mpeg'
            });
            var url = URL.createObjectURL(blob);
            var audioElement = new Audio(url);
            audioElement.play().catch(function (err) {
              return console.log(err);
            });
          } else {
            console.log('polly.synthesizeSpeech():' + data);
          }
        }
      }); // Can call AWS.Request() on the result of synthesizeSpeech()
    }
  } else if (config.speechEngine === 'google') {
    console.warn('The Google speech engine is not supported yet. Please come again.'); // @todo: implement support for Google Text-to-Speech API,
    // using config.speechEngineToken, config.speechEngineVoice and
    // config.speechEngineAudioConfig
    // curl -H "Authorization: Bearer "$(gcloud auth application-default print-access-token) \
    //   -H "Content-Type: application/json; charset=utf-8" \
    //   --data "{
    //     'input':{
    //       'text':'Android is a mobile operating system developed by Google,
    //          based on the Linux kernel and designed primarily for
    //          touchscreen mobile devices such as smartphones and tablets.'
    //     },
    //     'voice':{
    //       'languageCode':'en-gb',
    //       'name':'en-GB-Standard-A',
    //       'ssmlGender':'FEMALE'
    //     },
    //     'audioConfig':{
    //       'audioEncoding':'MP3'
    //     }
    //   }" "https://texttospeech.googleapis.com/v1beta1/text:synthesize" > synthesize-text.txt
  }
}
/**
 * "Read Aloud" is an asynchronous operation that reads the
 * reading with synchronized highlighting
 *
 * @param {DOMElement} element - The DOM element to highlight
 * @param {string} text - The text to speak
 * @param {object} config
 * @private
 * @function module:mathlive#readAloud
 */


function readAloud(element, text, config) {
  if (!window) {
    return;
  }

  if (!config && window.mathlive) {
    config = window.mathlive.config;
  }

  config = config || {};

  if (config.speechEngine !== 'amazon') {
    console.warn('Use Amazon TTS Engine for synchronized highlighting');
    if (config.handleSpeak) config.handleSpeak(text);
    return;
  }

  if (!window.AWS) {
    console.warn('AWS SDK not loaded. See https://www.npmjs.com/package/aws-sdk');
    return;
  }

  var polly = new window.AWS.Polly({
    apiVersion: '2016-06-10'
  });
  var params = {
    OutputFormat: 'json',
    VoiceId: config.speechEngineVoice || 'Joanna',
    Text: text,
    TextType: 'ssml',
    SpeechMarkTypes: ['ssml']
  };
  window.mathlive = window.mathlive || {};
  window.mathlive.readAloudElement = element;
  var status = config.onReadAloudStatus || window.mathlive.onReadAloudStatus; // Request the mark points

  polly.synthesizeSpeech(params, function (err, data) {
    if (err) {
      console.warn('polly.synthesizeSpeech() error:', err, err.stack);
    } else {
      if (data && data.AudioStream) {
        var response = new TextDecoder('utf-8').decode(new Uint8Array(data.AudioStream));
        window.mathlive.readAloudMarks = response.split('\n').map(function (x) {
          return x ? JSON.parse(x) : {};
        });
        window.mathlive.readAloudTokens = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = window.mathlive.readAloudMarks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var mark = _step.value;

            if (mark.value) {
              window.mathlive.readAloudTokens.push(mark.value);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        window.mathlive.readAloudCurrentMark = ''; // Request the audio

        params.OutputFormat = 'mp3';
        params.SpeechMarkTypes = [];
        polly.synthesizeSpeech(params, function (err, data) {
          if (err) {
            console.warn('polly.synthesizeSpeech(', text, ') error:', err, err.stack);
          } else {
            if (data && data.AudioStream) {
              var uInt8Array = new Uint8Array(data.AudioStream);
              var blob = new Blob([uInt8Array.buffer], {
                type: 'audio/mpeg'
              });
              var url = URL.createObjectURL(blob);

              if (!window.mathlive.readAloudAudio) {
                window.mathlive.readAloudAudio = new Audio();
                window.mathlive.readAloudAudio.addEventListener('ended', function () {
                  if (status) status(window.mathlive.readAloudMathField, 'ended');

                  if (window.mathlive.readAloudMathField) {
                    window.mathlive.readAloudMathField._render();

                    window.mathlive.readAloudElement = null;
                    window.mathlive.readAloudMathField = null;
                    window.mathlive.readAloudTokens = [];
                    window.mathlive.readAloudMarks = [];
                    window.mathlive.readAloudCurrentMark = '';
                  } else {
                    removeHighlight(window.mathlive.readAloudElement);
                  }
                });
                window.mathlive.readAloudAudio.addEventListener('timeupdate', function () {
                  var value = ''; // The target, the atom we're looking for, is the one matching the current audio
                  // plus 100 ms. By anticipating it a little bit, it feels more natural, otherwise it
                  // feels like the highlighting is trailing the audio.

                  var target = window.mathlive.readAloudAudio.currentTime * 1000 + 100; // Find the smallest element which is bigger than the target time

                  var _iteratorNormalCompletion2 = true;
                  var _didIteratorError2 = false;
                  var _iteratorError2 = undefined;

                  try {
                    for (var _iterator2 = window.mathlive.readAloudMarks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                      var mark = _step2.value;

                      if (mark.time < target) {
                        value = mark.value;
                      }
                    }
                  } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                        _iterator2.return();
                      }
                    } finally {
                      if (_didIteratorError2) {
                        throw _iteratorError2;
                      }
                    }
                  }

                  if (window.mathlive.readAloudCurrentMark !== value) {
                    window.mathlive.readAloudCurrentToken = value;

                    if (value && value === window.mathlive.readAloudFinalToken) {
                      window.mathlive.readAloudAudio.pause();
                    } else {
                      window.mathlive.readAloudCurrentMark = value;
                      highlightAtomID(window.mathlive.readAloudElement, window.mathlive.readAloudCurrentMark);
                    }
                  }
                });
              } else {
                window.mathlive.readAloudAudio.pause();
              }

              window.mathlive.readAloudAudio.src = url;

              if (status) {
                status(window.mathlive.readAloudMathField, 'playing');
              }

              window.mathlive.readAloudAudio.play();
            } else {// console.log('polly.synthesizeSpeech():' + data);
            }
          }
        });
      } else {
        console.log('polly.synthesizeSpeech():' + data);
      }
    }
  });
}
/**
 * Returns the status of a Read Aloud operation (reading with synchronized
 * highlighting).
 *
 * Possible values are:
 * - `"ready"`
 * - `"playing"`
 * - `"paused"`
 * - `"unavailable"`
 *
 * **See** {@linkcode module:editor-mathfield#speak speak}
 * @category Read Aloud
 * @return {"ready" | "playing" | "paused" | "unavailable"}
 * @function module:mathlive#readAloudStatus
 */


function readAloudStatus() {
  if (!window) return 'unavailable';
  window.mathlive = window.mathlive || {};
  if (!window.mathlive.readAloudAudio) return 'ready';
  if (window.mathlive.readAloudAudio.paused) return 'paused';
  if (!window.mathlive.readAloudAudio.ended) return 'playing';
  return 'ready';
}
/**
 * Pauses a read aloud operation if one is in progress.
 *
 * **See** {@linkcode module:editor/mathfield#speak speak}
 * @category Read Aloud
 * @function module:mathlive#pauseReadAloud
 */


function pauseReadAloud() {
  if (!window) return;
  window.mathlive = window.mathlive || {};

  if (window.mathlive.readAloudAudio) {
    if (window.mathlive.onReadAloudStatus) {
      window.mathlive.onReadAloudStatus(window.mathlive.readAloudMathField, 'paused');
    }

    window.mathlive.readAloudAudio.pause();
  }
}
/**
 * Resumes a read aloud operation if one was paused.
 *
 * **See** {@linkcode module:editor-mathfield#speak speak}
 * @category Read Aloud
 * @function module:mathlive#resumeReadAloud
 */


function resumeReadAloud() {
  if (!window) return;
  window.mathlive = window.mathlive || {};

  if (window.mathlive.readAloudAudio) {
    if (window.mathlive.onReadAloudStatus) {
      window.mathlive.onReadAloudStatus(window.mathlive.readAloudMathField, 'playing');
    }

    window.mathlive.readAloudAudio.play();
  }
}
/**
 * If a Read Aloud operation is in progress, read from a specified token
 *
 * **See** {@linkcode module:editor-mathfield#speak speak}
 *
 * @param {string} [token]
 * @param {number} [count] The number of tokens to read.
 * @category Read Aloud
 * @function module:mathlive#playReadAloud
 */


function playReadAloud(token, count) {
  if (!window) return;
  window.mathlive = window.mathlive || {};

  if (window.mathlive.readAloudAudio) {
    var timeIndex = 0;
    window.mathlive.readAloudFinalToken = null;

    if (token) {
      window.mathlive.readAloudMarks = window.mathlive.readAloudMarks || [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = window.mathlive.readAloudMarks[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var mark = _step3.value;

          if (mark.value === token) {
            timeIndex = mark.time / 1000;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      var tokenIndex = window.mathlive.readAloudTokens.indexOf(token);

      if (tokenIndex >= 0) {
        tokenIndex += count;

        if (tokenIndex < window.mathlive.readAloudTokens.length) {
          window.mathlive.readAloudFinalToken = tokenIndex;
        }
      }
    }

    window.mathlive.readAloudAudio.currentTime = timeIndex;

    if (window.mathlive.onReadAloudStatus) {
      window.mathlive.onReadAloudStatus(window.mathlive.readAloudMathField, 'playing');
    }

    window.mathlive.readAloudAudio.play();
  }
}
/**
 * Transform all the elements in the document body that contain LaTeX code
 * into typeset math.
 *
 * **Note:** This is a very expensive call, as it needs to parse the entire
 * DOM tree to determine which elements need to be processed. In most cases
 * this should only be called once per document, once the DOM has been loaded.
 * To render a specific element, use {@linkcode module:mathlive#renderMathInElement renderMathInElement()}
 *
 * **See:** {@tutorial USAGE_GUIDE}
 *
 * @param {object<string, any>} [options={}] See {@linkcode module:mathlive#renderMathInElement renderMathInElement()}
 * for details
 * @example
 * import MathLive from 'dist/mathlive.mjs';
 * document.addEventListener("load", () => {
 *     MathLive.renderMathInDocument();
 * });
 *
 */


function renderMathInDocument(options) {
  mathlive_renderMathInElement(document.body, options);
}

function getElement(element) {
  var result = element;

  if (typeof element === 'string') {
    result = document.getElementById(element);

    if (!result) {
      throw Error("The element with ID \"".concat(element, "\" could not be found."));
    }
  }

  return result;
}
/**
 * Transform all the children of `element`, recursively, that contain LaTeX code
 * into typeset math.
 *
 * **See:** {@tutorial USAGE_GUIDE}
 *
 * @param {HTMLElement|string} element An HTML DOM element, or a string containing
 * the ID of an element.
 * @param {object} [options={}]
 *
 * @param {string} [options.namespace=''] - Namespace that is added to `data-`
 * attributes to avoid collisions with other libraries.
 *
 * It is empty by default.
 *
 * The namespace should be a string of lowercase letters.
 *
 * @param {object[]} [options.macros={}] - Custom LaTeX macros
 *
 * @param {string[]} [options.skipTags=['noscript', 'style', 'textarea', 'pre', 'code', 'annotation', 'annotation-xml'] ]
 * an array of tag names whose content will
 *  not be scanned for delimiters (unless their class matches the `processClass`
 * pattern below.
 *
 * @param {string} [options.ignoreClass='tex2jax_ignore'] a string used as a
 * regular expression of class names of elements whose content will not be
 * scanned for delimiters

 * @param {string} [options.processClass='tex2jax_process']   a string used as a
 * regular expression of class names of elements whose content **will** be
 * scanned for delimiters,  even if their tag name or parent class name would
 * have prevented them from doing so.
 *
 * @param {string} [options.processScriptType="math/tex"] `<script>` tags of the
 * indicated type will be processed while others will be ignored.

 *
 * @param {string} [options.renderAccessibleContent='mathml'] The format(s) in
 * which to render the math for screen readers:
 * - `'mathml'` MathML
 * - `'speakable-text'` Spoken representation
 *
 * You can pass an empty string to turn off the rendering of accessible content.
 *
 * You can pass multiple values separated by spaces, e.g `'mathml speakable-text'`
 *
 * @param {boolean} [options.preserveOriginalContent=true] if true, store the
 * original textual content of the element in a `data-original-content`
 * attribute. This value can be accessed for example to restore the element to
 * its original value:
 * ```javascript
 *      elem.innerHTML = elem.dataset.originalContent;
 * ```
 * @param {boolean} [options.readAloud=false] if true, generate markup that can
 * be read aloud later using {@linkcode module:editor-mathfield#speak speak}
 *
 * @param {boolean} [options.TeX.processEnvironments=true] if false, math expression
 * that start with `\begin{` will not automatically be rendered.
 *
 * @param {string[][]} [options.TeX.delimiters.inline=[['\\(','\\)']] ] arrays
 * of delimiter pairs that will trigger a render of the content in 'textstyle'
 *
 * @param {string[][]} [options.TeX.delimiters.display=[['$$', '$$'], ['\\[', '\\]']] ] arrays
 * of delimiter pairs that will trigger a render of the content in
 * 'displaystyle'.
 *
 * @param {function} [renderToMarkup] a function that will convert any LaTeX found to
 * HTML markup. This is only useful to override the default MathLive renderer
 *
 * @param {function} [renderToMathML] a function that will convert any LaTeX found to
 * MathML markup.
 *
 * @param {function} [renderToSpeakableText] a function that will convert any LaTeX found to
 * speakable text markup.
 *
 * @function module:mathlive#renderMathInElement
 */


function mathlive_renderMathInElement(element, options) {
  if (!auto_render) {
    console.warn('The AutoRender module is not loaded.');
    return;
  }

  options = options || {};
  options.renderToMarkup = options.renderToMarkup || mathlive_toMarkup;
  options.renderToMathML = options.renderToMathML || mathlive_toMathML;
  options.renderToSpeakableText = options.renderToSpeakableText || latexToSpeakableText;
  options.macros = options.macros || definitions.MACROS;
  auto_render.renderMathInElement(getElement(element), options);
}

function validateNamespace(options) {
  if (options.namespace) {
    if (!/^[a-z]+[-]?$/.test(options.namespace)) {
      throw Error('options.namespace must be a string of lowercase characters only');
    }

    if (!/-$/.test(options.namespace)) {
      options.namespace += '-';
    }
  }
}
/**
 *
 * @param {string|HTMLElement|MathField} element
 * @param {Object.<string, any>} [options={}]
 * @param {string} options.namespace The namespace used for the `data-`
 * attributes. If you used a namespace with `renderMathInElement`, you must
 * use the same namespace here.
 * @function module:mathlive#revertToOriginalContent
 */


function revertToOriginalContent(element, options) {
  element = getElement(element); // element is a pair: accessible span, math -- set it to the math part

  element = element.children[1];

  if (element instanceof editor_mathfield.MathField) {
    element.revertToOriginalContent();
  } else {
    options = options || {};
    validateNamespace(options);
    element.innerHTML = element.getAttribute('data-' + (options.namespace || '') + 'original-content');
  }
}
/**
 * After calling {@linkcode module:mathlive#renderMathInElement renderMathInElement}
 * or {@linkcode module:mathlive#makeMathField makeMathField} the original content
 * can be retrieved by calling this function.
 *
 * Given the following markup:
 * ```html
 * <span id='equation'>$$f(x)=sin(x)$$</span>
 * ```
 * The following code:
 * ```javascript
 * MathLive.renderMathInElement('equation');
 * console.log(MathLive.getOriginalContent('equation'));
 * ```
 * will output:
 * ```
 * $$f(x)=sin(x)$$
 * ```
 * @param {string | HTMLElement | MathField} element - A DOM element ID, a DOM
 * element or a MathField.
 * @param {object} [options={}]
 * @param {string} [options.namespace=""] The namespace used for the `data-`
 * attributes.
 * If you used a namespace with `renderMathInElement()`, you must
 * use the same namespace here.
 * @return {string} the original content of the element.
 * @function module:mathlive#getOriginalContent
 */


function getOriginalContent(element, options) {
  element = getElement(element); // element is a pair: accessible span, math -- set it to the math part

  element = element.children[1];

  if (element instanceof editor_mathfield.MathField) {
    return element.originalContent;
  }

  options = options || {};
  validateNamespace(options);
  return element.getAttribute('data-' + (options.namespace || '') + 'original-content');
}

var MathLive = {
  latexToMarkup: mathlive_toMarkup,
  latexToMathML: mathlive_toMathML,
  latexToSpeakableText: latexToSpeakableText,
  latexToAST: latexToAST,
  astToLatex: astToLatex,
  makeMathField: makeMathField,
  renderMathInDocument: renderMathInDocument,
  renderMathInElement: mathlive_renderMathInElement,
  revertToOriginalContent: revertToOriginalContent,
  getOriginalContent: getOriginalContent,
  readAloud: readAloud,
  readAloudStatus: readAloudStatus,
  pauseReadAloud: pauseReadAloud,
  resumeReadAloud: resumeReadAloud,
  playReadAloud: playReadAloud
};
/* harmony default export */ var mathlive = (MathLive);
// CONCATENATED MODULE: ./packages/index.js











































































































































































































// 导入组件，组件必须声明 name


 // 为组件添加 install 方法，用于按需引入

vue_mathlive.install = function (Vue) {
  Object.defineProperty(Vue.prototype, '$mathlive', {
    value: mathlive
  });
  Vue.component(vue_mathlive.name, vue_mathlive);
};

/* harmony default export */ var packages_0 = (vue_mathlive);
// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js


/* harmony default export */ var entry_lib = __webpack_exports__["default"] = (packages_0);



/***/ }),

/***/ "fb2c":
/***/ (function(module, exports, __webpack_require__) {

var createTypedArrayConstructor = __webpack_require__("74e8");

// `Uint32Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint32', function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "fb6a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var isObject = __webpack_require__("861d");
var isArray = __webpack_require__("e8b5");
var toAbsoluteIndex = __webpack_require__("23cb");
var toLength = __webpack_require__("50c4");
var toIndexedObject = __webpack_require__("fc6a");
var createProperty = __webpack_require__("8418");
var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
var wellKnownSymbol = __webpack_require__("b622");

var SPECIES = wellKnownSymbol('species');
var nativeSlice = [].slice;
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.github.io/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('slice') }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === Array || Constructor === undefined) {
        return nativeSlice.call(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});


/***/ }),

/***/ "fc6a":
/***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__("44ad");
var requireObjectCoercible = __webpack_require__("1d80");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "fd87":
/***/ (function(module, exports, __webpack_require__) {

var createTypedArrayConstructor = __webpack_require__("74e8");

// `Int8Array` constructor
// https://tc39.github.io/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Int8', function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "fdbc":
/***/ (function(module, exports) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),

/***/ "fdbf":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_SYMBOL = __webpack_require__("4930");

module.exports = NATIVE_SYMBOL
  // eslint-disable-next-line no-undef
  && !Symbol.sham
  // eslint-disable-next-line no-undef
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "fea9":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");

module.exports = global.Promise;


/***/ }),

/***/ "ff9c":
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__("23e7");
var expm1 = __webpack_require__("8eb5");

var nativeCosh = Math.cosh;
var abs = Math.abs;
var E = Math.E;

// `Math.cosh` method
// https://tc39.github.io/ecma262/#sec-math.cosh
$({ target: 'Math', stat: true, forced: !nativeCosh || nativeCosh(710) === Infinity }, {
  cosh: function cosh(x) {
    var t = expm1(abs(x) - 1) + 1;
    return (t + 1 / (t * E * E)) * (E / 2);
  }
});


/***/ })

/******/ });
});
//# sourceMappingURL=math-input.umd.js.map